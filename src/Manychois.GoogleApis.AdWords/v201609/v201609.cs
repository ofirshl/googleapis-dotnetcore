using Manychois.GoogleApis.AdWords.v201609.EnumExtensions;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Manychois.GoogleApis.AdWords.v201609
{
	internal static class InstanceCreator
	{
		public static ApiError CreateApiError(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdCustomizerError")
			{
				return new AdCustomizerError();
			}
			else if (type == "AdCustomizerFeedError")
			{
				return new AdCustomizerFeedError();
			}
			else if (type == "AdError")
			{
				return new AdError();
			}
			else if (type == "AdGroupAdError")
			{
				return new AdGroupAdError();
			}
			else if (type == "AdGroupCriterionError")
			{
				return new AdGroupCriterionError();
			}
			else if (type == "AdGroupFeedError")
			{
				return new AdGroupFeedError();
			}
			else if (type == "AdGroupServiceError")
			{
				return new AdGroupServiceError();
			}
			else if (type == "AdParamError")
			{
				return new AdParamError();
			}
			else if (type == "AdxError")
			{
				return new AdxError();
			}
			else if (type == "AppPostbackUrlError")
			{
				return new AppPostbackUrlError();
			}
			else if (type == "AudioError")
			{
				return new AudioError();
			}
			else if (type == "AuthenticationError")
			{
				return new AuthenticationError();
			}
			else if (type == "AuthorizationError")
			{
				return new AuthorizationError();
			}
			else if (type == "BatchJobError")
			{
				return new BatchJobError();
			}
			else if (type == "BatchJobProcessingError")
			{
				return new BatchJobProcessingError();
			}
			else if (type == "BiddingErrors")
			{
				return new BiddingErrors();
			}
			else if (type == "BiddingStrategyError")
			{
				return new BiddingStrategyError();
			}
			else if (type == "BudgetError")
			{
				return new BudgetError();
			}
			else if (type == "BudgetOrderError")
			{
				return new BudgetOrderError();
			}
			else if (type == "CampaignCriterionError")
			{
				return new CampaignCriterionError();
			}
			else if (type == "CampaignError")
			{
				return new CampaignError();
			}
			else if (type == "CampaignFeedError")
			{
				return new CampaignFeedError();
			}
			else if (type == "CampaignPreferenceError")
			{
				return new CampaignPreferenceError();
			}
			else if (type == "CampaignSharedSetError")
			{
				return new CampaignSharedSetError();
			}
			else if (type == "ClientTermsError")
			{
				return new ClientTermsError();
			}
			else if (type == "CollectionSizeError")
			{
				return new CollectionSizeError();
			}
			else if (type == "ConversionTrackingError")
			{
				return new ConversionTrackingError();
			}
			else if (type == "CriterionError")
			{
				return new CriterionError();
			}
			else if (type == "CurrencyCodeError")
			{
				return new CurrencyCodeError();
			}
			else if (type == "CustomerError")
			{
				return new CustomerError();
			}
			else if (type == "CustomerFeedError")
			{
				return new CustomerFeedError();
			}
			else if (type == "CustomerOrderLineError")
			{
				return new CustomerOrderLineError();
			}
			else if (type == "CustomerSyncError")
			{
				return new CustomerSyncError();
			}
			else if (type == "DatabaseError")
			{
				return new DatabaseError();
			}
			else if (type == "DataError")
			{
				return new DataError();
			}
			else if (type == "DateError")
			{
				return new DateError();
			}
			else if (type == "DateRangeError")
			{
				return new DateRangeError();
			}
			else if (type == "DistinctError")
			{
				return new DistinctError();
			}
			else if (type == "DraftError")
			{
				return new DraftError();
			}
			else if (type == "EntityAccessDenied")
			{
				return new EntityAccessDenied();
			}
			else if (type == "EntityCountLimitExceeded")
			{
				return new EntityCountLimitExceeded();
			}
			else if (type == "EntityNotFound")
			{
				return new EntityNotFound();
			}
			else if (type == "ExtensionSettingError")
			{
				return new ExtensionSettingError();
			}
			else if (type == "FeedAttributeReferenceError")
			{
				return new FeedAttributeReferenceError();
			}
			else if (type == "FeedError")
			{
				return new FeedError();
			}
			else if (type == "FeedItemError")
			{
				return new FeedItemError();
			}
			else if (type == "FeedMappingError")
			{
				return new FeedMappingError();
			}
			else if (type == "ForwardCompatibilityError")
			{
				return new ForwardCompatibilityError();
			}
			else if (type == "FunctionError")
			{
				return new FunctionError();
			}
			else if (type == "FunctionParsingError")
			{
				return new FunctionParsingError();
			}
			else if (type == "IdError")
			{
				return new IdError();
			}
			else if (type == "ImageError")
			{
				return new ImageError();
			}
			else if (type == "InternalApiError")
			{
				return new InternalApiError();
			}
			else if (type == "LabelError")
			{
				return new LabelError();
			}
			else if (type == "LabelServiceError")
			{
				return new LabelServiceError();
			}
			else if (type == "ListError")
			{
				return new ListError();
			}
			else if (type == "LocationCriterionServiceError")
			{
				return new LocationCriterionServiceError();
			}
			else if (type == "ManagedCustomerServiceError")
			{
				return new ManagedCustomerServiceError();
			}
			else if (type == "MediaBundleError")
			{
				return new MediaBundleError();
			}
			else if (type == "MediaError")
			{
				return new MediaError();
			}
			else if (type == "MultiplierError")
			{
				return new MultiplierError();
			}
			else if (type == "MutateMembersError")
			{
				return new MutateMembersError();
			}
			else if (type == "NewEntityCreationError")
			{
				return new NewEntityCreationError();
			}
			else if (type == "NotEmptyError")
			{
				return new NotEmptyError();
			}
			else if (type == "NotWhitelistedError")
			{
				return new NotWhitelistedError();
			}
			else if (type == "NullError")
			{
				return new NullError();
			}
			else if (type == "OfflineCallConversionError")
			{
				return new OfflineCallConversionError();
			}
			else if (type == "OfflineConversionError")
			{
				return new OfflineConversionError();
			}
			else if (type == "OperationAccessDenied")
			{
				return new OperationAccessDenied();
			}
			else if (type == "OperatorError")
			{
				return new OperatorError();
			}
			else if (type == "PagingError")
			{
				return new PagingError();
			}
			else if (type == "PolicyViolationError")
			{
				return new PolicyViolationError();
			}
			else if (type == "QueryError")
			{
				return new QueryError();
			}
			else if (type == "QuotaCheckError")
			{
				return new QuotaCheckError();
			}
			else if (type == "RangeError")
			{
				return new RangeError();
			}
			else if (type == "RateExceededError")
			{
				return new RateExceededError();
			}
			else if (type == "ReadOnlyError")
			{
				return new ReadOnlyError();
			}
			else if (type == "RegionCodeError")
			{
				return new RegionCodeError();
			}
			else if (type == "RejectedError")
			{
				return new RejectedError();
			}
			else if (type == "ReportDefinitionError")
			{
				return new ReportDefinitionError();
			}
			else if (type == "RequestError")
			{
				return new RequestError();
			}
			else if (type == "RequiredError")
			{
				return new RequiredError();
			}
			else if (type == "SelectorError")
			{
				return new SelectorError();
			}
			else if (type == "SettingError")
			{
				return new SettingError();
			}
			else if (type == "SharedCriterionError")
			{
				return new SharedCriterionError();
			}
			else if (type == "SharedSetError")
			{
				return new SharedSetError();
			}
			else if (type == "SizeLimitError")
			{
				return new SizeLimitError();
			}
			else if (type == "StatsQueryError")
			{
				return new StatsQueryError();
			}
			else if (type == "StringFormatError")
			{
				return new StringFormatError();
			}
			else if (type == "StringLengthError")
			{
				return new StringLengthError();
			}
			else if (type == "TargetingIdeaError")
			{
				return new TargetingIdeaError();
			}
			else if (type == "TrafficEstimatorError")
			{
				return new TrafficEstimatorError();
			}
			else if (type == "TrialError")
			{
				return new TrialError();
			}
			else if (type == "UrlError")
			{
				return new UrlError();
			}
			else if (type == "UserListError")
			{
				return new UserListError();
			}
			else if (type == "VideoError")
			{
				return new VideoError();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static Attribute CreateAttribute(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "BooleanAttribute")
			{
				return new BooleanAttribute();
			}
			else if (type == "CriterionAttribute")
			{
				return new CriterionAttribute();
			}
			else if (type == "DoubleAttribute")
			{
				return new DoubleAttribute();
			}
			else if (type == "IdeaTypeAttribute")
			{
				return new IdeaTypeAttribute();
			}
			else if (type == "IntegerAttribute")
			{
				return new IntegerAttribute();
			}
			else if (type == "IntegerSetAttribute")
			{
				return new IntegerSetAttribute();
			}
			else if (type == "KeywordAttribute")
			{
				return new KeywordAttribute();
			}
			else if (type == "LongAttribute")
			{
				return new LongAttribute();
			}
			else if (type == "LongRangeAttribute")
			{
				return new LongRangeAttribute();
			}
			else if (type == "MoneyAttribute")
			{
				return new MoneyAttribute();
			}
			else if (type == "MonthlySearchVolumeAttribute")
			{
				return new MonthlySearchVolumeAttribute();
			}
			else if (type == "StringAttribute")
			{
				return new StringAttribute();
			}
			else if (type == "WebpageDescriptorAttribute")
			{
				return new WebpageDescriptorAttribute();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static BiddingScheme CreateBiddingScheme(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "BudgetOptimizerBiddingScheme")
			{
				return new BudgetOptimizerBiddingScheme();
			}
			else if (type == "ConversionOptimizerBiddingScheme")
			{
				return new ConversionOptimizerBiddingScheme();
			}
			else if (type == "EnhancedCpcBiddingScheme")
			{
				return new EnhancedCpcBiddingScheme();
			}
			else if (type == "ManualCpcBiddingScheme")
			{
				return new ManualCpcBiddingScheme();
			}
			else if (type == "ManualCpmBiddingScheme")
			{
				return new ManualCpmBiddingScheme();
			}
			else if (type == "PageOnePromotedBiddingScheme")
			{
				return new PageOnePromotedBiddingScheme();
			}
			else if (type == "TargetCpaBiddingScheme")
			{
				return new TargetCpaBiddingScheme();
			}
			else if (type == "TargetOutrankShareBiddingScheme")
			{
				return new TargetOutrankShareBiddingScheme();
			}
			else if (type == "TargetRoasBiddingScheme")
			{
				return new TargetRoasBiddingScheme();
			}
			else if (type == "TargetSpendBiddingScheme")
			{
				return new TargetSpendBiddingScheme();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static BidLandscape CreateBidLandscape(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdGroupBidLandscape")
			{
				return new AdGroupBidLandscape();
			}
			else if (type == "CriterionBidLandscape")
			{
				return new CriterionBidLandscape();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static Bids CreateBids(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "CpaBid")
			{
				return new CpaBid();
			}
			else if (type == "CpcBid")
			{
				return new CpcBid();
			}
			else if (type == "CpmBid")
			{
				return new CpmBid();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static ComparableValue CreateComparableValue(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "DoubleValue")
			{
				return new DoubleValue();
			}
			else if (type == "LongValue")
			{
				return new LongValue();
			}
			else if (type == "Money")
			{
				return new Money();
			}
			else if (type == "MoneyWithCurrency")
			{
				return new MoneyWithCurrency();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static ConversionTracker CreateConversionTracker(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdCallMetricsConversion")
			{
				return new AdCallMetricsConversion();
			}
			else if (type == "AdWordsConversionTracker")
			{
				return new AdWordsConversionTracker();
			}
			else if (type == "AppConversion")
			{
				return new AppConversion();
			}
			else if (type == "UploadCallConversion")
			{
				return new UploadCallConversion();
			}
			else if (type == "UploadConversion")
			{
				return new UploadConversion();
			}
			else if (type == "WebsiteCallMetricsConversion")
			{
				return new WebsiteCallMetricsConversion();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static CriterionParameter CreateCriterionParameter(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "WebpageParameter")
			{
				return new WebpageParameter();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static DataEntry CreateDataEntry(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdGroupBidLandscape")
			{
				return new AdGroupBidLandscape();
			}
			else if (type == "CriterionBidLandscape")
			{
				return new CriterionBidLandscape();
			}
			else if (type == "DomainCategory")
			{
				return new DomainCategory();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static DimensionProperties CreateDimensionProperties(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "DomainCategory")
			{
				return new DomainCategory();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static EstimateRequest CreateEstimateRequest(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdGroupEstimateRequest")
			{
				return new AdGroupEstimateRequest();
			}
			else if (type == "CampaignEstimateRequest")
			{
				return new CampaignEstimateRequest();
			}
			else if (type == "KeywordEstimateRequest")
			{
				return new KeywordEstimateRequest();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static FunctionArgumentOperand CreateFunctionArgumentOperand(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "ConstantOperand")
			{
				return new ConstantOperand();
			}
			else if (type == "FeedAttributeOperand")
			{
				return new FeedAttributeOperand();
			}
			else if (type == "FunctionOperand")
			{
				return new FunctionOperand();
			}
			else if (type == "GeoTargetOperand")
			{
				return new GeoTargetOperand();
			}
			else if (type == "IncomeOperand")
			{
				return new IncomeOperand();
			}
			else if (type == "LocationExtensionOperand")
			{
				return new LocationExtensionOperand();
			}
			else if (type == "PlacesOfInterestOperand")
			{
				return new PlacesOfInterestOperand();
			}
			else if (type == "RequestContextOperand")
			{
				return new RequestContextOperand();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static ListReturnValue CreateListReturnValue(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdCustomizerFeedReturnValue")
			{
				return new AdCustomizerFeedReturnValue();
			}
			else if (type == "AdGroupAdLabelReturnValue")
			{
				return new AdGroupAdLabelReturnValue();
			}
			else if (type == "AdGroupAdReturnValue")
			{
				return new AdGroupAdReturnValue();
			}
			else if (type == "AdGroupBidModifierReturnValue")
			{
				return new AdGroupBidModifierReturnValue();
			}
			else if (type == "AdGroupCriterionLabelReturnValue")
			{
				return new AdGroupCriterionLabelReturnValue();
			}
			else if (type == "AdGroupCriterionReturnValue")
			{
				return new AdGroupCriterionReturnValue();
			}
			else if (type == "AdGroupExtensionSettingReturnValue")
			{
				return new AdGroupExtensionSettingReturnValue();
			}
			else if (type == "AdGroupFeedReturnValue")
			{
				return new AdGroupFeedReturnValue();
			}
			else if (type == "AdGroupLabelReturnValue")
			{
				return new AdGroupLabelReturnValue();
			}
			else if (type == "AdGroupReturnValue")
			{
				return new AdGroupReturnValue();
			}
			else if (type == "BatchJobReturnValue")
			{
				return new BatchJobReturnValue();
			}
			else if (type == "BiddingStrategyReturnValue")
			{
				return new BiddingStrategyReturnValue();
			}
			else if (type == "BudgetOrderReturnValue")
			{
				return new BudgetOrderReturnValue();
			}
			else if (type == "BudgetReturnValue")
			{
				return new BudgetReturnValue();
			}
			else if (type == "CampaignCriterionReturnValue")
			{
				return new CampaignCriterionReturnValue();
			}
			else if (type == "CampaignExtensionSettingReturnValue")
			{
				return new CampaignExtensionSettingReturnValue();
			}
			else if (type == "CampaignFeedReturnValue")
			{
				return new CampaignFeedReturnValue();
			}
			else if (type == "CampaignLabelReturnValue")
			{
				return new CampaignLabelReturnValue();
			}
			else if (type == "CampaignReturnValue")
			{
				return new CampaignReturnValue();
			}
			else if (type == "CampaignSharedSetReturnValue")
			{
				return new CampaignSharedSetReturnValue();
			}
			else if (type == "ConversionTrackerReturnValue")
			{
				return new ConversionTrackerReturnValue();
			}
			else if (type == "CustomerExtensionSettingReturnValue")
			{
				return new CustomerExtensionSettingReturnValue();
			}
			else if (type == "CustomerFeedReturnValue")
			{
				return new CustomerFeedReturnValue();
			}
			else if (type == "DraftReturnValue")
			{
				return new DraftReturnValue();
			}
			else if (type == "FeedItemReturnValue")
			{
				return new FeedItemReturnValue();
			}
			else if (type == "FeedMappingReturnValue")
			{
				return new FeedMappingReturnValue();
			}
			else if (type == "FeedReturnValue")
			{
				return new FeedReturnValue();
			}
			else if (type == "LabelReturnValue")
			{
				return new LabelReturnValue();
			}
			else if (type == "OfflineCallConversionFeedReturnValue")
			{
				return new OfflineCallConversionFeedReturnValue();
			}
			else if (type == "OfflineConversionFeedReturnValue")
			{
				return new OfflineConversionFeedReturnValue();
			}
			else if (type == "SharedCriterionReturnValue")
			{
				return new SharedCriterionReturnValue();
			}
			else if (type == "SharedSetReturnValue")
			{
				return new SharedSetReturnValue();
			}
			else if (type == "TrialReturnValue")
			{
				return new TrialReturnValue();
			}
			else if (type == "UserListReturnValue")
			{
				return new UserListReturnValue();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static NoStatsPage CreateNoStatsPage(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdGroupBidLandscapePage")
			{
				return new AdGroupBidLandscapePage();
			}
			else if (type == "ConversionTrackerPage")
			{
				return new ConversionTrackerPage();
			}
			else if (type == "CriterionBidLandscapePage")
			{
				return new CriterionBidLandscapePage();
			}
			else if (type == "LabelPage")
			{
				return new LabelPage();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static NullStatsPage CreateNullStatsPage(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdGroupFeedPage")
			{
				return new AdGroupFeedPage();
			}
			else if (type == "CampaignFeedPage")
			{
				return new CampaignFeedPage();
			}
			else if (type == "CampaignSharedSetPage")
			{
				return new CampaignSharedSetPage();
			}
			else if (type == "CustomerFeedPage")
			{
				return new CustomerFeedPage();
			}
			else if (type == "DraftPage")
			{
				return new DraftPage();
			}
			else if (type == "FeedItemPage")
			{
				return new FeedItemPage();
			}
			else if (type == "FeedMappingPage")
			{
				return new FeedMappingPage();
			}
			else if (type == "FeedPage")
			{
				return new FeedPage();
			}
			else if (type == "SharedSetPage")
			{
				return new SharedSetPage();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static NumberValue CreateNumberValue(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "DoubleValue")
			{
				return new DoubleValue();
			}
			else if (type == "LongValue")
			{
				return new LongValue();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static Operation CreateOperation(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AccountLabelOperation")
			{
				return new AccountLabelOperation();
			}
			else if (type == "AdCustomizerFeedOperation")
			{
				return new AdCustomizerFeedOperation();
			}
			else if (type == "AdGroupAdLabelOperation")
			{
				return new AdGroupAdLabelOperation();
			}
			else if (type == "AdGroupAdOperation")
			{
				return new AdGroupAdOperation();
			}
			else if (type == "AdGroupBidModifierOperation")
			{
				return new AdGroupBidModifierOperation();
			}
			else if (type == "AdGroupCriterionLabelOperation")
			{
				return new AdGroupCriterionLabelOperation();
			}
			else if (type == "AdGroupCriterionOperation")
			{
				return new AdGroupCriterionOperation();
			}
			else if (type == "AdGroupExtensionSettingOperation")
			{
				return new AdGroupExtensionSettingOperation();
			}
			else if (type == "AdGroupFeedOperation")
			{
				return new AdGroupFeedOperation();
			}
			else if (type == "AdGroupLabelOperation")
			{
				return new AdGroupLabelOperation();
			}
			else if (type == "AdGroupOperation")
			{
				return new AdGroupOperation();
			}
			else if (type == "AdParamOperation")
			{
				return new AdParamOperation();
			}
			else if (type == "BatchJobOperation")
			{
				return new BatchJobOperation();
			}
			else if (type == "BiddingStrategyOperation")
			{
				return new BiddingStrategyOperation();
			}
			else if (type == "BudgetOperation")
			{
				return new BudgetOperation();
			}
			else if (type == "BudgetOrderOperation")
			{
				return new BudgetOrderOperation();
			}
			else if (type == "CampaignCriterionOperation")
			{
				return new CampaignCriterionOperation();
			}
			else if (type == "CampaignExtensionSettingOperation")
			{
				return new CampaignExtensionSettingOperation();
			}
			else if (type == "CampaignFeedOperation")
			{
				return new CampaignFeedOperation();
			}
			else if (type == "CampaignLabelOperation")
			{
				return new CampaignLabelOperation();
			}
			else if (type == "CampaignOperation")
			{
				return new CampaignOperation();
			}
			else if (type == "CampaignSharedSetOperation")
			{
				return new CampaignSharedSetOperation();
			}
			else if (type == "ConversionTrackerOperation")
			{
				return new ConversionTrackerOperation();
			}
			else if (type == "CustomerExtensionSettingOperation")
			{
				return new CustomerExtensionSettingOperation();
			}
			else if (type == "CustomerFeedOperation")
			{
				return new CustomerFeedOperation();
			}
			else if (type == "DraftOperation")
			{
				return new DraftOperation();
			}
			else if (type == "FeedItemOperation")
			{
				return new FeedItemOperation();
			}
			else if (type == "FeedMappingOperation")
			{
				return new FeedMappingOperation();
			}
			else if (type == "FeedOperation")
			{
				return new FeedOperation();
			}
			else if (type == "LabelOperation")
			{
				return new LabelOperation();
			}
			else if (type == "LinkOperation")
			{
				return new LinkOperation();
			}
			else if (type == "ManagedCustomerLabelOperation")
			{
				return new ManagedCustomerLabelOperation();
			}
			else if (type == "ManagedCustomerOperation")
			{
				return new ManagedCustomerOperation();
			}
			else if (type == "MoveOperation")
			{
				return new MoveOperation();
			}
			else if (type == "MutateMembersOperation")
			{
				return new MutateMembersOperation();
			}
			else if (type == "OfflineCallConversionFeedOperation")
			{
				return new OfflineCallConversionFeedOperation();
			}
			else if (type == "OfflineConversionFeedOperation")
			{
				return new OfflineConversionFeedOperation();
			}
			else if (type == "ServiceLinkOperation")
			{
				return new ServiceLinkOperation();
			}
			else if (type == "SharedCriterionOperation")
			{
				return new SharedCriterionOperation();
			}
			else if (type == "SharedSetOperation")
			{
				return new SharedSetOperation();
			}
			else if (type == "TrialOperation")
			{
				return new TrialOperation();
			}
			else if (type == "UserListOperation")
			{
				return new UserListOperation();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static Page CreatePage(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "AdCustomizerFeedPage")
			{
				return new AdCustomizerFeedPage();
			}
			else if (type == "AdGroupAdPage")
			{
				return new AdGroupAdPage();
			}
			else if (type == "AdGroupBidLandscapePage")
			{
				return new AdGroupBidLandscapePage();
			}
			else if (type == "AdGroupBidModifierPage")
			{
				return new AdGroupBidModifierPage();
			}
			else if (type == "AdGroupCriterionPage")
			{
				return new AdGroupCriterionPage();
			}
			else if (type == "AdGroupExtensionSettingPage")
			{
				return new AdGroupExtensionSettingPage();
			}
			else if (type == "AdGroupFeedPage")
			{
				return new AdGroupFeedPage();
			}
			else if (type == "AdGroupPage")
			{
				return new AdGroupPage();
			}
			else if (type == "BatchJobPage")
			{
				return new BatchJobPage();
			}
			else if (type == "BiddingStrategyPage")
			{
				return new BiddingStrategyPage();
			}
			else if (type == "BudgetOrderPage")
			{
				return new BudgetOrderPage();
			}
			else if (type == "BudgetPage")
			{
				return new BudgetPage();
			}
			else if (type == "CampaignCriterionPage")
			{
				return new CampaignCriterionPage();
			}
			else if (type == "CampaignExtensionSettingPage")
			{
				return new CampaignExtensionSettingPage();
			}
			else if (type == "CampaignFeedPage")
			{
				return new CampaignFeedPage();
			}
			else if (type == "CampaignPage")
			{
				return new CampaignPage();
			}
			else if (type == "CampaignSharedSetPage")
			{
				return new CampaignSharedSetPage();
			}
			else if (type == "ConversionTrackerPage")
			{
				return new ConversionTrackerPage();
			}
			else if (type == "CriterionBidLandscapePage")
			{
				return new CriterionBidLandscapePage();
			}
			else if (type == "CustomerExtensionSettingPage")
			{
				return new CustomerExtensionSettingPage();
			}
			else if (type == "CustomerFeedPage")
			{
				return new CustomerFeedPage();
			}
			else if (type == "DomainCategoryPage")
			{
				return new DomainCategoryPage();
			}
			else if (type == "DraftAsyncErrorPage")
			{
				return new DraftAsyncErrorPage();
			}
			else if (type == "DraftPage")
			{
				return new DraftPage();
			}
			else if (type == "FeedItemPage")
			{
				return new FeedItemPage();
			}
			else if (type == "FeedMappingPage")
			{
				return new FeedMappingPage();
			}
			else if (type == "FeedPage")
			{
				return new FeedPage();
			}
			else if (type == "LabelPage")
			{
				return new LabelPage();
			}
			else if (type == "ManagedCustomerPage")
			{
				return new ManagedCustomerPage();
			}
			else if (type == "SharedCriterionPage")
			{
				return new SharedCriterionPage();
			}
			else if (type == "SharedSetPage")
			{
				return new SharedSetPage();
			}
			else if (type == "TrialAsyncErrorPage")
			{
				return new TrialAsyncErrorPage();
			}
			else if (type == "TrialPage")
			{
				return new TrialPage();
			}
			else if (type == "UserListPage")
			{
				return new UserListPage();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static ProductDimension CreateProductDimension(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "ProductAdwordsGrouping")
			{
				return new ProductAdwordsGrouping();
			}
			else if (type == "ProductAdwordsLabels")
			{
				return new ProductAdwordsLabels();
			}
			else if (type == "ProductBiddingCategory")
			{
				return new ProductBiddingCategory();
			}
			else if (type == "ProductBrand")
			{
				return new ProductBrand();
			}
			else if (type == "ProductCanonicalCondition")
			{
				return new ProductCanonicalCondition();
			}
			else if (type == "ProductChannel")
			{
				return new ProductChannel();
			}
			else if (type == "ProductChannelExclusivity")
			{
				return new ProductChannelExclusivity();
			}
			else if (type == "ProductCustomAttribute")
			{
				return new ProductCustomAttribute();
			}
			else if (type == "ProductLegacyCondition")
			{
				return new ProductLegacyCondition();
			}
			else if (type == "ProductOfferId")
			{
				return new ProductOfferId();
			}
			else if (type == "ProductType")
			{
				return new ProductType();
			}
			else if (type == "ProductTypeFull")
			{
				return new ProductTypeFull();
			}
			else if (type == "UnknownProductDimension")
			{
				return new UnknownProductDimension();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static RichMediaAd CreateRichMediaAd(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "ThirdPartyRedirectAd")
			{
				return new ThirdPartyRedirectAd();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static SearchParameter CreateSearchParameter(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "CategoryProductsAndServicesSearchParameter")
			{
				return new CategoryProductsAndServicesSearchParameter();
			}
			else if (type == "CompetitionSearchParameter")
			{
				return new CompetitionSearchParameter();
			}
			else if (type == "IdeaTextFilterSearchParameter")
			{
				return new IdeaTextFilterSearchParameter();
			}
			else if (type == "IncludeAdultContentSearchParameter")
			{
				return new IncludeAdultContentSearchParameter();
			}
			else if (type == "LanguageSearchParameter")
			{
				return new LanguageSearchParameter();
			}
			else if (type == "LocationSearchParameter")
			{
				return new LocationSearchParameter();
			}
			else if (type == "NetworkSearchParameter")
			{
				return new NetworkSearchParameter();
			}
			else if (type == "RelatedToQuerySearchParameter")
			{
				return new RelatedToQuerySearchParameter();
			}
			else if (type == "RelatedToUrlSearchParameter")
			{
				return new RelatedToUrlSearchParameter();
			}
			else if (type == "SearchVolumeSearchParameter")
			{
				return new SearchVolumeSearchParameter();
			}
			else if (type == "SeedAdGroupIdSearchParameter")
			{
				return new SeedAdGroupIdSearchParameter();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
		public static Setting CreateSetting(XElement xElement)
		{
			var type = XmlUtility.GetXmlTypeLocalName(xElement);
			if (type == "DynamicSearchAdsSetting")
			{
				return new DynamicSearchAdsSetting();
			}
			else if (type == "ExplorerAutoOptimizerSetting")
			{
				return new ExplorerAutoOptimizerSetting();
			}
			else if (type == "GeoTargetTypeSetting")
			{
				return new GeoTargetTypeSetting();
			}
			else if (type == "RealTimeBiddingSetting")
			{
				return new RealTimeBiddingSetting();
			}
			else if (type == "ShoppingSetting")
			{
				return new ShoppingSetting();
			}
			else if (type == "TargetingSetting")
			{
				return new TargetingSetting();
			}
			else if (type == "TrackingSetting")
			{
				return new TrackingSetting();
			}
			else if (type == "UniversalAppCampaignSetting")
			{
				return new UniversalAppCampaignSetting();
			}
			throw new ArgumentException($"Unknown type {type}", "xElement");
		}
	}
	/// <summary>
	/// This indicates the way the entity such as UserList is related to a user.
	/// </summary>
	public enum AccessReason
	{
		/// <summary>
		/// The entity is owned by the user.
		/// </summary>
		Owned,
		/// <summary>
		/// The entity is shared to the user.
		/// </summary>
		Shared,
		/// <summary>
		/// The entity is licensed to the user.
		/// </summary>
		Licensed,
		/// <summary>
		/// The user subscribed to the entity.
		/// </summary>
		Subscribed
	}
	/// <summary>
	/// A label that can be attached to accounts.
	/// A manager may attach labels to accounts that s/he manages
	/// (either directly or indirectly).
	///
	/// <p>Note that these are not interchangeable with campaign management labels, and are owned
	/// by manager customers.
	/// </summary>
	public class AccountLabel : ISoapable
	{
		/// <summary>
		/// ID of the label.
		/// <p>This field is selectable/filterable in AccountLabelService.  To select labels or filter by
		/// label ID in {@link ManagedCustomerService#get}, use the {@code AccountLabels} field instead.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of the label.
		/// <p>This field is selectable in AccountLabelService. To select labels in
		/// {@link ManagedCustomerService#get}, use the {@code AccountLabels} field instead.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelName".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Name { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation for adding, updating, or deleting a label.
	/// </summary>
	public class AccountLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AccountLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AccountLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "AccountLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of AccountLabels.
	/// </summary>
	public class AccountLabelPage : ISoapable
	{
		/// <summary>
		/// List of account labels.
		/// </summary>
		public List<AccountLabel> Labels { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Labels = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "labels")
				{
					if (Labels == null) Labels = new List<AccountLabel>();
					var labelsItem = new AccountLabel();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/mcm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Contains a list of AccountLabels.
	/// </summary>
	public class AccountLabelReturnValue : ISoapable
	{
		/// <summary>
		/// List of account labels.
		/// </summary>
		public List<AccountLabel> Labels { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Labels = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "labels")
				{
					if (Labels == null) Labels = new List<AccountLabel>();
					var labelsItem = new AccountLabel();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/mcm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status in the AccountUserListStatus table. This indicates if the user list share or
	/// the licensing of the userlist is still active.
	/// </summary>
	public enum AccountUserListStatus
	{
		Active,
		Inactive
	}
	/// <summary>
	/// The base class of all ad types. {@code Ad} objects themselves cannot be modified. If you want to
	/// make a change to an {@code Ad} object, you must REMOVE its AdGroupAd and ADD a new AdGroupAd with
	/// the new {@code Ad}. This will result in a new {@code Ad} ID, so stats for the original {@code Ad}
	/// and the new {@code Ad} will appear under separate IDs in reports.
	///
	/// <p>When calling {@code AdGroupAdService} to update the {@code status} of an {@code AdGroupAd},
	/// you can construct an {@code Ad} object (instead of the {@code Ad}'s concrete type) with the
	/// {@link #id} field set.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Ad : ISoapable
	{
		/// <summary>
		/// ID of this ad. This field is ignored when creating
		/// ads using {@code AdGroupAdService}.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Destination URL.
		/// <p>Do not set this field if you are using upgraded URLs, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "Url".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Url { get; set; }
		/// <summary>
		/// Visible URL.
		/// <span class="constraint Selectable">This field can be selected using the value "DisplayUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string DisplayUrl { get; set; }
		/// <summary>
		/// A list of possible final URLs after all cross domain redirects.
		/// <p>This field is used for upgraded urls only, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "CreativeFinalUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CollectionSize">The maximum size of this collection is 10.</span>
		/// </summary>
		public List<string> FinalUrls { get; set; }
		/// <summary>
		/// A list of possible final mobile URLs after all cross domain redirects.
		/// <p>This field is used for upgraded urls only, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "CreativeFinalMobileUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CollectionSize">The maximum size of this collection is 10.</span>
		/// </summary>
		public List<string> FinalMobileUrls { get; set; }
		/// <summary>
		/// A list of final app URLs that will be used on mobile if the user has the specific app
		/// installed.
		/// <p>This field is used for upgraded urls only, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "CreativeFinalAppUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public List<AppUrl> FinalAppUrls { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL.
		/// <p>This field is used for upgraded urls only, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "CreativeTrackingUrlTemplate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// <p>This field is used for upgraded urls only, as described at:
		/// https://developers.google.com/adwords/api/docs/guides/upgraded-urls
		/// <span class="constraint Selectable">This field can be selected using the value "CreativeUrlCustomParameters".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CustomParameters UrlCustomParameters { get; set; }
		/// <summary>
		/// Type of ad.
		/// <span class="constraint Selectable">This field can be selected using the value "AdType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AdType? Type { get; set; }
		/// <summary>
		/// The device preference for the ad. You can only specify a preference for
		/// mobile devices (CriterionId 30001). If unspecified (no device preference),
		/// all devices are targeted.
		/// <span class="constraint Selectable">This field can be selected using the value "DevicePreference".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? DevicePreference { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Ad.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string AdType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Url = null;
			DisplayUrl = null;
			FinalUrls = null;
			FinalMobileUrls = null;
			FinalAppUrls = null;
			TrackingUrlTemplate = null;
			UrlCustomParameters = null;
			Type = null;
			DevicePreference = null;
			AdType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "url")
				{
					Url = xItem.Value;
				}
				else if (localName == "displayUrl")
				{
					DisplayUrl = xItem.Value;
				}
				else if (localName == "finalUrls")
				{
					if (FinalUrls == null) FinalUrls = new List<string>();
					FinalUrls.Add(xItem.Value);
				}
				else if (localName == "finalMobileUrls")
				{
					if (FinalMobileUrls == null) FinalMobileUrls = new List<string>();
					FinalMobileUrls.Add(xItem.Value);
				}
				else if (localName == "finalAppUrls")
				{
					if (FinalAppUrls == null) FinalAppUrls = new List<AppUrl>();
					var finalAppUrlsItem = new AppUrl();
					finalAppUrlsItem.ReadFrom(xItem);
					FinalAppUrls.Add(finalAppUrlsItem);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "urlCustomParameters")
				{
					UrlCustomParameters = new CustomParameters();
					UrlCustomParameters.ReadFrom(xItem);
				}
				else if (localName == "type")
				{
					Type = AdTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "devicePreference")
				{
					DevicePreference = long.Parse(xItem.Value);
				}
				else if (localName == "Ad.Type")
				{
					AdType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Url != null)
			{
				xItem = new XElement(XName.Get("url", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Url);
				xE.Add(xItem);
			}
			if (DisplayUrl != null)
			{
				xItem = new XElement(XName.Get("displayUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisplayUrl);
				xE.Add(xItem);
			}
			if (FinalUrls != null)
			{
				foreach (var finalUrlsItem in FinalUrls)
				{
					xItem = new XElement(XName.Get("finalUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(finalUrlsItem);
					xE.Add(xItem);
				}
			}
			if (FinalMobileUrls != null)
			{
				foreach (var finalMobileUrlsItem in FinalMobileUrls)
				{
					xItem = new XElement(XName.Get("finalMobileUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(finalMobileUrlsItem);
					xE.Add(xItem);
				}
			}
			if (FinalAppUrls != null)
			{
				foreach (var finalAppUrlsItem in FinalAppUrls)
				{
					xItem = new XElement(XName.Get("finalAppUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
					finalAppUrlsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (UrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("urlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				UrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DevicePreference != null)
			{
				xItem = new XElement(XName.Get("devicePreference", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DevicePreference.Value.ToString());
				xE.Add(xItem);
			}
			if (AdType != null)
			{
				xItem = new XElement(XName.Get("Ad.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A ConversionTracker for phone calls from conversion-tracked call extensions.
	/// A call made from the call extension is reported as a conversion if it lasts longer
	/// than N seconds. This duration is 60 seconds by default. Each call extension can
	/// specify the desired conversion configuration.
	/// </summary>
	public class AdCallMetricsConversion : ConversionTracker, ISoapable
	{
		/// <summary>
		/// The phone-call duration (in seconds) after which a conversion should be reported for this
		/// AdCallMetricsConversion.
		/// <span class="constraint Selectable">This field can be selected using the value "PhoneCallDuration".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be between 0 and 10000, inclusive.</span>
		/// </summary>
		public long? PhoneCallDuration { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PhoneCallDuration = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "phoneCallDuration")
				{
					PhoneCallDuration = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCallMetricsConversion");
			XElement xItem = null;
			if (PhoneCallDuration != null)
			{
				xItem = new XElement(XName.Get("phoneCallDuration", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PhoneCallDuration.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An error indicating a problem with an ad customizer tag.
	/// </summary>
	public class AdCustomizerError : ApiError, ISoapable
	{
		public AdCustomizerErrorReason? Reason { get; set; }
		/// <summary>
		/// String form of the function that contained the error.
		/// </summary>
		public string FunctionString { get; set; }
		/// <summary>
		/// Lowercased string representation of the ad customizer function's operator.
		/// </summary>
		public string OperatorName { get; set; }
		/// <summary>
		/// Index of the operand that caused the error.
		/// </summary>
		public int? OperandIndex { get; set; }
		/// <summary>
		/// Value of the operand that caused the error.
		/// </summary>
		public string OperandValue { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			FunctionString = null;
			OperatorName = null;
			OperandIndex = null;
			OperandValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdCustomizerErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "functionString")
				{
					FunctionString = xItem.Value;
				}
				else if (localName == "operatorName")
				{
					OperatorName = xItem.Value;
				}
				else if (localName == "operandIndex")
				{
					OperandIndex = int.Parse(xItem.Value);
				}
				else if (localName == "operandValue")
				{
					OperandValue = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCustomizerError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FunctionString != null)
			{
				xItem = new XElement(XName.Get("functionString", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FunctionString);
				xE.Add(xItem);
			}
			if (OperatorName != null)
			{
				xItem = new XElement(XName.Get("operatorName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperatorName);
				xE.Add(xItem);
			}
			if (OperandIndex != null)
			{
				xItem = new XElement(XName.Get("operandIndex", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperandIndex.Value.ToString());
				xE.Add(xItem);
			}
			if (OperandValue != null)
			{
				xItem = new XElement(XName.Get("operandValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperandValue);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Ad customizer error reasons.
	/// </summary>
	public enum AdCustomizerErrorReason
	{
		/// <summary>
		/// Invalid date argument in countdown function.
		/// </summary>
		CountdownInvalidDateFormat,
		/// <summary>
		/// Countdown end date is in the past.
		/// </summary>
		CountdownDateInPast,
		/// <summary>
		/// Invalid locale string in countdown function.
		/// </summary>
		CountdownInvalidLocale,
		/// <summary>
		/// Days-before argument to countdown function is not positive.
		/// </summary>
		CountdownInvalidStartDaysBefore
	}
	/// <summary>
	/// A Feed which contains data used to populate ad customizers.
	///
	/// <p>An AdCustomizerFeed is a view of a regular Feed, but with some simplifications intended to
	/// support the most common use cases.
	/// </summary>
	public class AdCustomizerFeed : ISoapable
	{
		/// <summary>
		/// ID of the feed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Name of the feed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 128, inclusive, (trimmed).</span>
		/// </summary>
		public string FeedName { get; set; }
		/// <summary>
		/// Status of the feed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedStatus? FeedStatus { get; set; }
		/// <summary>
		/// The AdCustomizerFeed's schema. In SET operations, these attributes will be considered new
		/// attributes and will be appended to the existing list of attributes unless this list is an exact
		/// copy of the existing list (as would be obtained via {@link AdCustomizerFeedService#get}).
		/// <span class="constraint Selectable">This field can be selected using the value "FeedAttributes".</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public List<AdCustomizerFeedAttribute> FeedAttributes { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			FeedName = null;
			FeedStatus = null;
			FeedAttributes = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "feedName")
				{
					FeedName = xItem.Value;
				}
				else if (localName == "feedStatus")
				{
					FeedStatus = FeedStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "feedAttributes")
				{
					if (FeedAttributes == null) FeedAttributes = new List<AdCustomizerFeedAttribute>();
					var feedAttributesItem = new AdCustomizerFeedAttribute();
					feedAttributesItem.ReadFrom(xItem);
					FeedAttributes.Add(feedAttributesItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedName != null)
			{
				xItem = new XElement(XName.Get("feedName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedName);
				xE.Add(xItem);
			}
			if (FeedStatus != null)
			{
				xItem = new XElement(XName.Get("feedStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FeedAttributes != null)
			{
				foreach (var feedAttributesItem in FeedAttributes)
				{
					xItem = new XElement(XName.Get("feedAttributes", "https://adwords.google.com/api/adwords/cm/v201609"));
					feedAttributesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An attribute of an AdCustomizerFeed.
	/// </summary>
	public class AdCustomizerFeedAttribute : ISoapable
	{
		/// <summary>
		/// The ID of the attribute.
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// The name of the attribute.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 30, inclusive, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The type of data this attribute contains.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public AdCustomizerFeedAttributeType? Type { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Type = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "type")
				{
					Type = AdCustomizerFeedAttributeTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Possible data types.
	/// </summary>
	public enum AdCustomizerFeedAttributeType
	{
		Integer,
		Price,
		DateTime,
		String,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An error caused by an invalid ad customizer feed in an AdCustomizerFeedService request.
	/// </summary>
	public class AdCustomizerFeedError : ApiError, ISoapable
	{
		/// <summary>
		/// The cause of this error.
		/// </summary>
		public AdCustomizerFeedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdCustomizerFeedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCustomizerFeedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum AdCustomizerFeedErrorReason
	{
		/// <summary>
		/// The key attribute cannot be added to an existing ad customizer feed.
		/// </summary>
		CannotAddKeyAttribute,
		/// <summary>
		/// The feed is not an ad customizer feed.
		/// </summary>
		NotAdCustomizerFeed,
		/// <summary>
		/// Name of AdCustomizerFeed is not allowed.
		/// </summary>
		InvalidFeedName,
		/// <summary>
		/// Too many AdCustomizerFeedAttributes for an AdCustomizerFeed.
		/// </summary>
		TooManyFeedAttributesForFeed,
		/// <summary>
		/// The names of the AdCustomizerFeedAttributes must be unique.
		/// </summary>
		AttributeNamesNotUnique,
		/// <summary>
		/// The given id refers to a removed Feed. Removed Feeds are immutable.
		/// </summary>
		FeedDeleted,
		/// <summary>
		/// Feed name matches that of another active Feed.
		/// </summary>
		DuplicateFeedName,
		Unknown
	}
	/// <summary>
	/// Operation used to create or mutate an AdCustomizerFeed.
	/// </summary>
	public class AdCustomizerFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdCustomizerFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdCustomizerFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCustomizerFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The result of a call to AdCustomizerFeedService#get.
	/// </summary>
	public class AdCustomizerFeedPage : Page, ISoapable
	{
		public List<AdCustomizerFeed> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdCustomizerFeed>();
					var entriesItem = new AdCustomizerFeed();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCustomizerFeedPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to AdCustomizerFeedService#mutate.
	/// </summary>
	public class AdCustomizerFeedReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting AdCustomizerFeeds.
		/// </summary>
		public List<AdCustomizerFeed> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdCustomizerFeed>();
					var valueItem = new AdCustomizerFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdCustomizerFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Structure to specify an address location.
	/// </summary>
	public class Address : ISoapable
	{
		/// <summary>
		/// Street address line 1; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string StreetAddress { get; set; }
		/// <summary>
		/// Street address line 2; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string StreetAddress2 { get; set; }
		/// <summary>
		/// Name of the city; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string CityName { get; set; }
		/// <summary>
		/// Province or state code; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string ProvinceCode { get; set; }
		/// <summary>
		/// Province or state name; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string ProvinceName { get; set; }
		/// <summary>
		/// Postal code; <code>null</code> if unknown.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string PostalCode { get; set; }
		/// <summary>
		/// Country code; <code>null</code> if unknown.
		/// </summary>
		public string CountryCode { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			StreetAddress = null;
			StreetAddress2 = null;
			CityName = null;
			ProvinceCode = null;
			ProvinceName = null;
			PostalCode = null;
			CountryCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "streetAddress")
				{
					StreetAddress = xItem.Value;
				}
				else if (localName == "streetAddress2")
				{
					StreetAddress2 = xItem.Value;
				}
				else if (localName == "cityName")
				{
					CityName = xItem.Value;
				}
				else if (localName == "provinceCode")
				{
					ProvinceCode = xItem.Value;
				}
				else if (localName == "provinceName")
				{
					ProvinceName = xItem.Value;
				}
				else if (localName == "postalCode")
				{
					PostalCode = xItem.Value;
				}
				else if (localName == "countryCode")
				{
					CountryCode = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (StreetAddress != null)
			{
				xItem = new XElement(XName.Get("streetAddress", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StreetAddress);
				xE.Add(xItem);
			}
			if (StreetAddress2 != null)
			{
				xItem = new XElement(XName.Get("streetAddress2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StreetAddress2);
				xE.Add(xItem);
			}
			if (CityName != null)
			{
				xItem = new XElement(XName.Get("cityName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CityName);
				xE.Add(xItem);
			}
			if (ProvinceCode != null)
			{
				xItem = new XElement(XName.Get("provinceCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ProvinceCode);
				xE.Add(xItem);
			}
			if (ProvinceName != null)
			{
				xItem = new XElement(XName.Get("provinceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ProvinceName);
				xE.Add(xItem);
			}
			if (PostalCode != null)
			{
				xItem = new XElement(XName.Get("postalCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PostalCode);
				xE.Add(xItem);
			}
			if (CountryCode != null)
			{
				xItem = new XElement(XName.Get("countryCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CountryCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Base error class for Ad Service.
	/// </summary>
	public class AdError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum AdErrorReason
	{
		/// <summary>
		/// Ad customizers are not supported for ad type.
		/// </summary>
		AdCustomizersNotSupportedForAdType,
		/// <summary>
		/// Estimating character sizes the string is too long.
		/// </summary>
		ApproximatelyTooLong,
		/// <summary>
		/// Estimating character sizes the string is too short.
		/// </summary>
		ApproximatelyTooShort,
		/// <summary>
		/// There is a problem with the snippet.
		/// </summary>
		BadSnippet,
		/// <summary>
		/// Cannot modify an ad.
		/// </summary>
		CannotModifyAd,
		/// <summary>
		/// business name and url cannot be set at the same time
		/// </summary>
		CannotSetBusinessNameIfUrlSet,
		/// <summary>
		/// The specified field is incompatible with this ad's type or settings.
		/// </summary>
		CannotSetField,
		/// <summary>
		/// Cannot set field when originAdId is set.
		/// </summary>
		CannotSetFieldWithOriginAdIdSet,
		/// <summary>
		/// Cannot set field when an existing ad id is set for sharing.
		/// </summary>
		CannotSetFieldWithAdIdSetForSharing,
		/// <summary>
		/// Cannot specify a url for the ad type
		/// </summary>
		CannotSetUrl,
		/// <summary>
		/// Cannot specify a tracking or mobile url without also setting final urls
		/// </summary>
		CannotSetWithoutFinalUrls,
		/// <summary>
		/// Cannot specify a legacy url and a final url simultaneously
		/// </summary>
		CannotSetWithFinalUrls,
		/// <summary>
		/// Cannot specify a legacy url and a tracking url template simultaneously in a DSA.
		/// </summary>
		CannotSetWithTrackingUrlTemplate,
		/// <summary>
		/// This operator cannot be used with a subclass of Ad.
		/// </summary>
		CannotUseAdSubclassForOperator,
		/// <summary>
		/// Customer is not approved for mobile ads.
		/// </summary>
		CustomerNotApprovedMobileads,
		/// <summary>
		/// Customer is not approved for 3PAS richmedia ads.
		/// </summary>
		CustomerNotApprovedThirdpartyAds,
		/// <summary>
		/// Customer is not approved for 3PAS redirect richmedia (Ad Exchange) ads.
		/// </summary>
		CustomerNotApprovedThirdpartyRedirectAds,
		/// <summary>
		/// Not an eligible customer
		/// </summary>
		CustomerNotEligible,
		/// <summary>
		/// Customer is not eligible for updating beacon url
		/// </summary>
		CustomerNotEligibleForUpdatingBeaconUrl,
		/// <summary>
		/// There already exists an ad with the same dimensions in the union.
		/// </summary>
		DimensionAlreadyInUnion,
		/// <summary>
		/// Ad's dimension must be set before setting union dimension.
		/// </summary>
		DimensionMustBeSet,
		/// <summary>
		/// Ad's dimension must be included in the union dimensions.
		/// </summary>
		DimensionNotInUnion,
		/// <summary>
		/// Display Url cannot be specified (applies to Ad Exchange Ads)
		/// </summary>
		DisplayUrlCannotBeSpecified,
		/// <summary>
		/// Telephone number contains invalid characters or invalid format.
		/// Please re-enter your number using digits (0-9), dashes (-), and parentheses only.
		/// </summary>
		DomesticPhoneNumberFormat,
		/// <summary>
		/// Emergency telephone numbers are not allowed.
		/// Please enter a valid domestic phone number to connect customers to your business.
		/// </summary>
		EmergencyPhoneNumber,
		/// <summary>
		/// A required field was not specified or is an empty string.
		/// </summary>
		EmptyField,
		/// <summary>
		/// A feed attribute referenced in an ad customizer tag is not in the ad customizer mapping for
		/// the feed.
		/// </summary>
		FeedAttributeMustHaveMappingForTypeId,
		/// <summary>
		/// The ad customizer field mapping for the feed attribute does not match the expected field
		/// type.
		/// </summary>
		FeedAttributeMappingTypeMismatch,
		/// <summary>
		/// The use of ad customizer tags in the ad text is disallowed. Details in trigger.
		/// </summary>
		IllegalAdCustomizerTagUse,
		/// <summary>
		/// The dimensions of the ad are specified or derived in multiple ways and are not consistent.
		/// </summary>
		InconsistentDimensions,
		/// <summary>
		/// The status cannot differ among template ads of the same union.
		/// </summary>
		InconsistentStatusInTemplateUnion,
		/// <summary>
		/// The length of the string is not valid.
		/// </summary>
		IncorrectLength,
		/// <summary>
		/// The ad is ineligible for upgrade.
		/// </summary>
		IneligibleForUpgrade,
		/// <summary>
		/// User cannot create mobile ad for countries targeted in specified campaign.
		/// </summary>
		InvalidAdAddressCampaignTarget,
		/// <summary>
		/// Invalid Ad type. A specific type of Ad is required.
		/// </summary>
		InvalidAdType,
		/// <summary>
		/// Headline, description or phone cannot be present when creating mobile image ad.
		/// </summary>
		InvalidAttributesForMobileImage,
		/// <summary>
		/// Image cannot be present when creating mobile text ad.
		/// </summary>
		InvalidAttributesForMobileText,
		/// <summary>
		/// Invalid character in URL.
		/// </summary>
		InvalidCharacterForUrl,
		/// <summary>
		/// Creative's country code is not valid.
		/// </summary>
		InvalidCountryCode,
		/// <summary>
		/// Invalid use of Dynamic Search Ads tags ({lpurl} etc.)
		/// </summary>
		InvalidDsaUrlTag,
		/// <summary>
		/// An input error whose real reason was not properly mapped (should not happen).
		/// </summary>
		InvalidInput,
		/// <summary>
		/// An invalid markup language was entered.
		/// </summary>
		InvalidMarkupLanguage,
		/// <summary>
		/// An invalid mobile carrier was entered.
		/// </summary>
		InvalidMobileCarrier,
		/// <summary>
		/// Specified mobile carriers target a country not targeted by the campaign.
		/// </summary>
		InvalidMobileCarrierTarget,
		/// <summary>
		/// Wrong number of elements for given element type
		/// </summary>
		InvalidNumberOfElements,
		/// <summary>
		/// The format of the telephone number is incorrect.
		/// Please re-enter the number using the correct format.
		/// </summary>
		InvalidPhoneNumberFormat,
		/// <summary>
		/// The certified vendor format id is incorrect.
		/// </summary>
		InvalidRichMediaCertifiedVendorFormatId,
		/// <summary>
		/// The template ad data contains validation errors.
		/// </summary>
		InvalidTemplateData,
		/// <summary>
		/// The template field doesn't have have the correct type.
		/// </summary>
		InvalidTemplateElementFieldType,
		/// <summary>
		/// Invalid template id.
		/// </summary>
		InvalidTemplateId,
		/// <summary>
		/// After substituting replacement strings, the line is too wide.
		/// </summary>
		LineTooWide,
		/// <summary>
		/// When entering a markup language the Destination URL must be entered.
		/// </summary>
		MarkupLanguagesPresent,
		/// <summary>
		/// The feed referenced must have ad customizer mapping to be used in a customizer tag.
		/// </summary>
		MissingAdCustomizerMapping,
		/// <summary>
		/// Missing address component in template element address field.
		/// </summary>
		MissingAddressComponent,
		/// <summary>
		/// An ad name must be entered.
		/// </summary>
		MissingAdvertisementName,
		/// <summary>
		/// Business name must be entered.
		/// </summary>
		MissingBusinessName,
		/// <summary>
		/// Description (line 2) must be entered.
		/// </summary>
		MissingDescription1,
		/// <summary>
		/// Description (line 3) must be entered.
		/// </summary>
		MissingDescription2,
		/// <summary>
		/// A destination URL must be entered.
		/// </summary>
		MissingDestinationUrl,
		/// <summary>
		/// The destination url must contain at least one tag (e.g. {lpurl})
		/// </summary>
		MissingDestinationUrlTag,
		/// <summary>
		/// A valid dimension must be specified for this ad.
		/// </summary>
		MissingDimension,
		/// <summary>
		/// A display URL must be entered.
		/// </summary>
		MissingDisplayUrl,
		/// <summary>
		/// Headline must be entered.
		/// </summary>
		MissingHeadline,
		/// <summary>
		/// A height must be entered.
		/// </summary>
		MissingHeight,
		/// <summary>
		/// An image must be entered.
		/// </summary>
		MissingImage,
		/// <summary>
		/// The markup language in which your site is written must be entered.
		/// </summary>
		MissingMarkupLanguages,
		/// <summary>
		/// A mobile carrier must be entered.
		/// </summary>
		MissingMobileCarrier,
		/// <summary>
		/// Phone number must be entered.
		/// </summary>
		MissingPhone,
		/// <summary>
		/// Missing required template fields
		/// </summary>
		MissingRequiredTemplateFields,
		/// <summary>
		/// Missing a required field value
		/// </summary>
		MissingTemplateFieldValue,
		/// <summary>
		/// The ad must have text.
		/// </summary>
		MissingText,
		/// <summary>
		/// Ad must link to a mobile web page or connect users to your business telephone, or both.
		/// Please enter a mobile Destination URL and/or a business telephone number.
		/// </summary>
		MissingUrlAndPhone,
		/// <summary>
		/// A visible URL must be entered.
		/// </summary>
		MissingVisibleUrl,
		/// <summary>
		/// A width must be entered.
		/// </summary>
		MissingWidth,
		/// <summary>
		/// Only 1 feed can be used as the source of ad customizer substitutions in a single ad.
		/// </summary>
		MultipleDistinctFeedsUnsupported,
		/// <summary>
		/// TempAdUnionId must be use when adding template ads.
		/// </summary>
		MustUseTempAdUnionIdOnAdd,
		/// <summary>
		/// The string has too many characters.
		/// </summary>
		TooLong,
		/// <summary>
		/// The string has too few characters.
		/// </summary>
		TooShort,
		/// <summary>
		/// Ad union dimensions cannot change for saved ads.
		/// </summary>
		UnionDimensionsCannotChange,
		/// <summary>
		/// Address component is not {country, lat, lng}.
		/// </summary>
		UnknownAddressComponent,
		/// <summary>
		/// Unknown unique field name
		/// </summary>
		UnknownFieldName,
		/// <summary>
		/// Unknown unique name (template element type specifier)
		/// </summary>
		UnknownUniqueName,
		/// <summary>
		/// Unsupported ad dimension
		/// </summary>
		UnsupportedDimensions,
		/// <summary>
		/// URL starts with an invalid scheme.
		/// </summary>
		UrlInvalidScheme,
		/// <summary>
		/// URL ends with an invalid top-level domain name.
		/// </summary>
		UrlInvalidTopLevelDomain,
		/// <summary>
		/// URL contains illegal characters.
		/// </summary>
		UrlMalformed,
		/// <summary>
		/// URL must contain a host name.
		/// </summary>
		UrlNoHost,
		/// <summary>
		/// URL not equivalent during upgrade.
		/// </summary>
		UrlNotEquivalent,
		/// <summary>
		/// URL host name too long to be stored as visible URL (applies to Ad Exchange ads)
		/// </summary>
		UrlHostNameTooLong,
		/// <summary>
		/// URL must start with a scheme.
		/// </summary>
		UrlNoScheme,
		/// <summary>
		/// URL should end in a valid domain extension, such as .com or .net.
		/// </summary>
		UrlNoTopLevelDomain,
		/// <summary>
		/// URL must not end with a path.
		/// </summary>
		UrlPathNotAllowed,
		/// <summary>
		/// URL must not specify a port.
		/// </summary>
		UrlPortNotAllowed,
		/// <summary>
		/// URL must not contain a query.
		/// </summary>
		UrlQueryNotAllowed,
		/// <summary>
		/// A url scheme is not allowed in front of tag in dest url (e.g. http://{lpurl})
		/// </summary>
		UrlSchemeBeforeDsaTag,
		/// <summary>
		/// The user does not have permissions to create a template ad for the given
		/// template.
		/// </summary>
		UserDoesNotHaveAccessToTemplate,
		/// <summary>
		/// Expandable setting is inconsistent/wrong. For example, an AdX ad is
		/// invalid if it has a expandable vendor format but no expanding directions
		/// specified, or expanding directions is specified, but the vendor format
		/// is not expandable.
		/// </summary>
		InconsistentExpandableSettings,
		/// <summary>
		/// Format is invalid
		/// </summary>
		InvalidFormat,
		/// <summary>
		/// The text of this field did not match a pattern of allowed values.
		/// </summary>
		InvalidFieldText,
		/// <summary>
		/// Template element is mising
		/// </summary>
		ElementNotPresent,
		/// <summary>
		/// Error occurred during image processing
		/// </summary>
		ImageError,
		/// <summary>
		/// The value is not within the valid range
		/// </summary>
		ValueNotInRange,
		/// <summary>
		/// Template element field is not present
		/// </summary>
		FieldNotPresent,
		/// <summary>
		/// Address is incomplete
		/// </summary>
		AddressNotComplete,
		/// <summary>
		/// Invalid address
		/// </summary>
		AddressInvalid,
		/// <summary>
		/// Error retrieving specified video
		/// </summary>
		VideoRetrievalError,
		/// <summary>
		/// Error processing audio
		/// </summary>
		AudioError,
		/// <summary>
		/// Display URL is incorrect for YouTube PYV ads
		/// </summary>
		InvalidYoutubeDisplayUrl,
		/// <summary>
		/// The device preference is not compatible with the ad type
		/// </summary>
		IncompatibleAdTypeAndDevicePreference,
		/// <summary>
		/// Call tracking is not supported for specified country.
		/// </summary>
		CalltrackingNotSupportedForCountry,
		/// <summary>
		/// Carrier specific short number is not allowed.
		/// </summary>
		CarrierSpecificShortNumberNotAllowed,
		/// <summary>
		/// Specified phone number type is disallowed.
		/// </summary>
		DisallowedNumberType,
		/// <summary>
		/// Phone number not supported for country.
		/// </summary>
		PhoneNumberNotSupportedForCountry,
		/// <summary>
		/// Phone number not supported with call tracking enabled for country.
		/// </summary>
		PhoneNumberNotSupportedWithCalltrackingForCountry,
		/// <summary>
		/// Premium rate phone number is not allowed.
		/// </summary>
		PremiumRateNumberNotAllowed,
		/// <summary>
		/// Vanity phone number is not allowed.
		/// </summary>
		VanityPhoneNumberNotAllowed,
		/// <summary>
		/// Invalid call conversion type id.
		/// </summary>
		InvalidCallConversionTypeId,
		CannotDisableCallConversionAndSetConversionTypeId,
		/// <summary>
		/// Cannot set path2 without path1.
		/// </summary>
		CannotSetPath2WithoutPath1,
		/// <summary>
		/// An unexpected or unknown error occurred.
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents an ad group.
	/// </summary>
	public class AdGroup : ISoapable
	{
		/// <summary>
		/// ID of this ad group.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// ID of the campaign with which this ad group is associated.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// Name of the campaign with which this ad group is associated.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CampaignName { get; set; }
		/// <summary>
		/// Name of this ad group (at most 255 UTF-8 full-width characters).
		/// This field is required and should not be {@code null} for ADD operations from v201309 version.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint MatchesRegex">AdGroup names must not contain any null (code point 0x0), NL line feed (code point 0xA) or carriage return (code point 0xD) characters. This is checked by the regular expression '[^\x00\x0A\x0D]*'.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Status of this ad group.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AdGroupStatus? Status { get; set; }
		/// <summary>
		/// List of settings for the AdGroup.
		/// <span class="constraint Selectable">This field can be selected using the value "Settings".</span>
		/// </summary>
		public List<Setting> Settings { get; set; }
		/// <summary>
		/// Labels that are attached to the {@link AdGroup}. To associate an existing {@link Label} to an
		/// existing {@link AdGroup}, use {@link AdGroupService#mutateLabel} with ADD
		/// operator. To remove an associated {@link Label} from the {@link AdGroup}, use
		/// {@link AdGroupService#mutateLabel} with REMOVE operator. To filter on {@link Label}s,
		/// use one of {@link Predicate.Operator#CONTAINS_ALL}, {@link Predicate.Operator#CONTAINS_ANY},
		/// {@link Predicate.Operator#CONTAINS_NONE} operators with a list of {@link Label} ids.
		/// <span class="constraint Selectable">This field can be selected using the value "Labels".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public List<Label> Labels { get; set; }
		/// <summary>
		/// This Map provides a place to put new features and settings in older versions
		/// of the AdWords API in the rare instance we need to introduce a new feature in
		/// an older version.
		///
		/// It is presently unused.  Do not set a value.
		/// </summary>
		public List<String_StringMapEntry> ForwardCompatibilityMap { get; set; }
		/// <summary>
		/// Bidding configuration for this ad group. To set the bids on the ad groups use
		/// {@link BiddingStrategyConfiguration#bids}. Multiple bids can be set on ad group at the same
		/// time. Only the bids that apply to the effective bidding strategy will be used. Effective
		/// bidding strategy is considered to be the directly attached strategy or inherited campaign level
		/// strategy when there?s no directly attached strategy.
		/// </summary>
		public BiddingStrategyConfiguration BiddingStrategyConfiguration { get; set; }
		/// <summary>
		/// Allows advertisers to specify a criteria dimension on which to place absolute bids.
		/// This is only applicable for campaigns that target only the content network and not search.
		/// <span class="constraint Selectable">This field can be selected using the value "ContentBidCriterionTypeGroup".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CriterionTypeGroup? ContentBidCriterionTypeGroup { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial adgroup was created. This
		/// field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// ID of the base adgroup from which this draft/trial adgroup was created. For
		/// base adgroups this is equal to the adgroup ID.  If the adgroup was created
		/// in the draft or trial and has no corresponding base adgroup, this field is null.
		/// This field is readonly and only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL.
		///
		/// <p>On update, empty string ("") indicates to clear the field.
		/// <span class="constraint Selectable">This field can be selected using the value "TrackingUrlTemplate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// <span class="constraint Selectable">This field can be selected using the value "UrlCustomParameters".</span>
		/// </summary>
		public CustomParameters UrlCustomParameters { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			CampaignId = null;
			CampaignName = null;
			Name = null;
			Status = null;
			Settings = null;
			Labels = null;
			ForwardCompatibilityMap = null;
			BiddingStrategyConfiguration = null;
			ContentBidCriterionTypeGroup = null;
			BaseCampaignId = null;
			BaseAdGroupId = null;
			TrackingUrlTemplate = null;
			UrlCustomParameters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "campaignName")
				{
					CampaignName = xItem.Value;
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = AdGroupStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "settings")
				{
					if (Settings == null) Settings = new List<Setting>();
					var settingsItem = InstanceCreator.CreateSetting(xItem);
					settingsItem.ReadFrom(xItem);
					Settings.Add(settingsItem);
				}
				else if (localName == "labels")
				{
					if (Labels == null) Labels = new List<Label>();
					var labelsItem = new Label();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
				else if (localName == "forwardCompatibilityMap")
				{
					if (ForwardCompatibilityMap == null) ForwardCompatibilityMap = new List<String_StringMapEntry>();
					var forwardCompatibilityMapItem = new String_StringMapEntry();
					forwardCompatibilityMapItem.ReadFrom(xItem);
					ForwardCompatibilityMap.Add(forwardCompatibilityMapItem);
				}
				else if (localName == "biddingStrategyConfiguration")
				{
					BiddingStrategyConfiguration = new BiddingStrategyConfiguration();
					BiddingStrategyConfiguration.ReadFrom(xItem);
				}
				else if (localName == "contentBidCriterionTypeGroup")
				{
					ContentBidCriterionTypeGroup = CriterionTypeGroupExtensions.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "urlCustomParameters")
				{
					UrlCustomParameters = new CustomParameters();
					UrlCustomParameters.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignName != null)
			{
				xItem = new XElement(XName.Get("campaignName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignName);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Settings != null)
			{
				foreach (var settingsItem in Settings)
				{
					xItem = new XElement(XName.Get("settings", "https://adwords.google.com/api/adwords/cm/v201609"));
					settingsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/cm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ForwardCompatibilityMap != null)
			{
				foreach (var forwardCompatibilityMapItem in ForwardCompatibilityMap)
				{
					xItem = new XElement(XName.Get("forwardCompatibilityMap", "https://adwords.google.com/api/adwords/cm/v201609"));
					forwardCompatibilityMapItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (BiddingStrategyConfiguration != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyConfiguration", "https://adwords.google.com/api/adwords/cm/v201609"));
				BiddingStrategyConfiguration.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ContentBidCriterionTypeGroup != null)
			{
				xItem = new XElement(XName.Get("contentBidCriterionTypeGroup", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ContentBidCriterionTypeGroup.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (UrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("urlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				UrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an ad in an ad group.
	/// </summary>
	public class AdGroupAd : ISoapable
	{
		/// <summary>
		/// The id of the adgroup containing this ad.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The contents of the ad itself.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Ad Ad { get; set; }
		/// <summary>
		/// The status of the ad.
		/// This field is required and should not be {@code null} when it is contained within
		/// {@link Operator}s : SET.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AdGroupAdStatus? Status { get; set; }
		/// <summary>
		/// Approval status.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupCreativeApprovalStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public AdGroupAdApprovalStatus? ApprovalStatus { get; set; }
		/// <summary>
		/// A list of strings that represents the specific trademarked terms that were found in this ad.
		/// The list returned is empty if the ad has no trademarked terms.
		/// <span class="constraint Selectable">This field can be selected using the value "Trademarks".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> Trademarks { get; set; }
		/// <summary>
		/// List of disapproval reasons.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupAdDisapprovalReasons".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> DisapprovalReasons { get; set; }
		/// <summary>
		/// True if and only if this ad is not serving because it does not meet
		/// trademark policy.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupAdTrademarkDisapproved".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? TrademarkDisapproved { get; set; }
		/// <summary>
		/// Labels that are attached to the AdGroupAd. To associate an existing {@link Label} to an
		/// existing {@link AdGroupAd}, use {@link AdGroupAdService#mutateLabel} with ADD operator. To
		/// remove an associated {@link Label} from the {@link AdGroupAd}, use
		/// {@link AdGroupAdService#mutateLabel} with REMOVE operator. To filter on {@link Label}s,
		/// use one of {@link Predicate.Operator#CONTAINS_ALL}, {@link Predicate.Operator#CONTAINS_ANY},
		/// {@link Predicate.Operator#CONTAINS_NONE} operators with a list of {@link Label} ids.
		/// <span class="constraint Selectable">This field can be selected using the value "Labels".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public List<Label> Labels { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial ad was created.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// ID of the base ad group from which this draft/trial ad was created. For
		/// base ad groups this is equal to the ad group ID.  If the ad group was created
		/// in the draft or trial and has no corresponding base ad group, this field is null.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		/// <summary>
		/// This Map provides a place to put new features and settings in older versions
		/// of the AdWords API in the rare instance we need to introduce a new feature in
		/// an older version.
		///
		/// It is presently unused.  Do not set a value.
		/// </summary>
		public List<String_StringMapEntry> ForwardCompatibilityMap { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			Ad = null;
			Status = null;
			ApprovalStatus = null;
			Trademarks = null;
			DisapprovalReasons = null;
			TrademarkDisapproved = null;
			Labels = null;
			BaseCampaignId = null;
			BaseAdGroupId = null;
			ForwardCompatibilityMap = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "ad")
				{
					Ad = new Ad();
					Ad.ReadFrom(xItem);
				}
				else if (localName == "status")
				{
					Status = AdGroupAdStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "approvalStatus")
				{
					ApprovalStatus = AdGroupAdApprovalStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "trademarks")
				{
					if (Trademarks == null) Trademarks = new List<string>();
					Trademarks.Add(xItem.Value);
				}
				else if (localName == "disapprovalReasons")
				{
					if (DisapprovalReasons == null) DisapprovalReasons = new List<string>();
					DisapprovalReasons.Add(xItem.Value);
				}
				else if (localName == "trademarkDisapproved")
				{
					TrademarkDisapproved = bool.Parse(xItem.Value);
				}
				else if (localName == "labels")
				{
					if (Labels == null) Labels = new List<Label>();
					var labelsItem = new Label();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "forwardCompatibilityMap")
				{
					if (ForwardCompatibilityMap == null) ForwardCompatibilityMap = new List<String_StringMapEntry>();
					var forwardCompatibilityMapItem = new String_StringMapEntry();
					forwardCompatibilityMapItem.ReadFrom(xItem);
					ForwardCompatibilityMap.Add(forwardCompatibilityMapItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (Ad != null)
			{
				xItem = new XElement(XName.Get("ad", "https://adwords.google.com/api/adwords/cm/v201609"));
				Ad.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ApprovalStatus != null)
			{
				xItem = new XElement(XName.Get("approvalStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ApprovalStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Trademarks != null)
			{
				foreach (var trademarksItem in Trademarks)
				{
					xItem = new XElement(XName.Get("trademarks", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(trademarksItem);
					xE.Add(xItem);
				}
			}
			if (DisapprovalReasons != null)
			{
				foreach (var disapprovalReasonsItem in DisapprovalReasons)
				{
					xItem = new XElement(XName.Get("disapprovalReasons", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(disapprovalReasonsItem);
					xE.Add(xItem);
				}
			}
			if (TrademarkDisapproved != null)
			{
				xItem = new XElement(XName.Get("trademarkDisapproved", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrademarkDisapproved.Value.ToString());
				xE.Add(xItem);
			}
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/cm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (ForwardCompatibilityMap != null)
			{
				foreach (var forwardCompatibilityMapItem in ForwardCompatibilityMap)
				{
					xItem = new XElement(XName.Get("forwardCompatibilityMap", "https://adwords.google.com/api/adwords/cm/v201609"));
					forwardCompatibilityMapItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents the possible approval statuses.
	/// </summary>
	public enum AdGroupAdApprovalStatus
	{
		/// <summary>
		/// Approved
		/// </summary>
		Approved,
		/// <summary>
		/// Disapproved
		/// </summary>
		Disapproved,
		/// <summary>
		/// Approved - family safe
		/// </summary>
		FamilySafe,
		/// <summary>
		/// Approved - non-family safe
		/// </summary>
		NonFamilySafe,
		/// <summary>
		/// Approved - adult content
		/// </summary>
		Porn,
		/// <summary>
		/// Pending review
		/// </summary>
		Unchecked,
		Unknown
	}
	/// <summary>
	/// Indicates too many ads were added/enabled under the specified adgroup.
	/// </summary>
	public class AdGroupAdCountLimitExceeded : EntityCountLimitExceeded, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdCountLimitExceeded");
		}
	}
	/// <summary>
	/// Error information for AdGroupAdService.
	/// </summary>
	public class AdGroupAdError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdGroupAdErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdGroupAdErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum AdGroupAdErrorReason
	{
		/// <summary>
		/// No link found between the adgroup ad and the label.
		/// </summary>
		AdGroupAdLabelDoesNotExist,
		/// <summary>
		/// The label has already been attached to the adgroup ad.
		/// </summary>
		AdGroupAdLabelAlreadyExists,
		/// <summary>
		/// The specified ad was not found in the adgroup
		/// </summary>
		AdNotUnderAdgroup,
		/// <summary>
		/// Removed ads may not be modified
		/// </summary>
		CannotOperateOnRemovedAdgroupad,
		/// <summary>
		/// An ad of this type is deprecated and cannot be created. Only deletions
		/// are permitted.
		/// </summary>
		CannotCreateDeprecatedAds,
		/// <summary>
		/// A required field was not specified or is an empty string.
		/// </summary>
		EmptyField,
		/// <summary>
		/// An ad may only be modified once per call
		/// </summary>
		EntityReferencedInMultipleOps,
		/// <summary>
		/// The specified operation is not supported.  Only ADD, SET, and REMOVE
		/// are supported
		/// </summary>
		UnsupportedOperation
	}
	/// <summary>
	/// Manages the labels associated with an AdGroupAd.
	/// </summary>
	public class AdGroupAdLabel : ISoapable
	{
		/// <summary>
		/// The id of the adgroup containing the ad that the label to be applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The id of the ad that the label to be applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? AdId { get; set; }
		/// <summary>
		/// The id of an existing label to be applied to the adgroup ad.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? LabelId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			AdId = null;
			LabelId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "adId")
				{
					AdId = long.Parse(xItem.Value);
				}
				else if (localName == "labelId")
				{
					LabelId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdId != null)
			{
				xItem = new XElement(XName.Get("adId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdId.Value.ToString());
				xE.Add(xItem);
			}
			if (LabelId != null)
			{
				xItem = new XElement(XName.Get("labelId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operations for adding/removing labels from AdGroupAds.
	/// </summary>
	public class AdGroupAdLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupAdLabel to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupAdLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupAdLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link AdGroupAdService#mutateLabel} call.
	/// </summary>
	public class AdGroupAdLabelReturnValue : ListReturnValue, ISoapable
	{
		public List<AdGroupAdLabel> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupAdLabel>();
					var valueItem = new AdGroupAdLabel();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdLabelReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// AdGroupAd service operations.
	/// </summary>
	public class AdGroupAdOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupAd to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupAd Operand { get; set; }
		/// <summary>
		/// Exemption requests for any policy violations in this Ad.  This field is
		/// only used for ADD operations
		/// </summary>
		public List<ExemptionRequest> ExemptionRequests { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			ExemptionRequests = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupAd();
					Operand.ReadFrom(xItem);
				}
				else if (localName == "exemptionRequests")
				{
					if (ExemptionRequests == null) ExemptionRequests = new List<ExemptionRequest>();
					var exemptionRequestsItem = new ExemptionRequest();
					exemptionRequestsItem.ReadFrom(xItem);
					ExemptionRequests.Add(exemptionRequestsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ExemptionRequests != null)
			{
				foreach (var exemptionRequestsItem in ExemptionRequests)
				{
					xItem = new XElement(XName.Get("exemptionRequests", "https://adwords.google.com/api/adwords/cm/v201609"));
					exemptionRequestsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a page of {@link AdGroupAd}s resulting from the query done by
	/// {@link AdGroupAdService}.
	/// </summary>
	public class AdGroupAdPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<AdGroupAd> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupAd>();
					var entriesItem = new AdGroupAd();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the AdGroupAdService.
	/// </summary>
	public class AdGroupAdReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// List of ads in an ad group.
		/// </summary>
		public List<AdGroupAd> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupAd>();
					var valueItem = new AdGroupAd();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupAdReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The current status of an Ad.
	/// </summary>
	public enum AdGroupAdStatus
	{
		/// <summary>
		/// Enabled.
		/// </summary>
		Enabled,
		/// <summary>
		/// Paused.
		/// </summary>
		Paused,
		/// <summary>
		/// Disabled.
		/// </summary>
		Disabled
	}
	/// <summary>
	/// Represents data about a bidlandscape for an adgroup.
	/// </summary>
	public class AdGroupBidLandscape : BidLandscape, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "LandscapeType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupBidLandscapeType? Type { get; set; }
		/// <summary>
		/// Only applies to landscapes with {@code landscapeType == DEFAULT}. If true, then this bid
		/// landscape contains the set of ad group criteria that <em>currently</em> do not have
		/// criterion-level bid overrides. If false, then this bid landscape was derived from an earlier
		/// snapshot of ad group criteria, so it may contain criteria to which bid overrides were recently
		/// added, and may not contain criteria from which bid overrides were recently removed.
		/// <span class="constraint Selectable">This field can be selected using the value "LandscapeCurrent".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public bool? LandscapeCurrent { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Type = null;
			LandscapeCurrent = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "type")
				{
					Type = AdGroupBidLandscapeTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "landscapeCurrent")
				{
					LandscapeCurrent = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupBidLandscape");
			XElement xItem = null;
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (LandscapeCurrent != null)
			{
				xItem = new XElement(XName.Get("landscapeCurrent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LandscapeCurrent.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of {@link AdGroupBidLandscape} objects resulting from the
	/// filtering and paging of {@link DataService#getAdGroupBidLandscape} call.
	/// </summary>
	public class AdGroupBidLandscapePage : NoStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<AdGroupBidLandscape> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupBidLandscape>();
					var entriesItem = new AdGroupBidLandscape();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupBidLandscapePage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Used to specify the type of {@code AdGroupLandscape}
	/// </summary>
	public enum AdGroupBidLandscapeType
	{
		/// <summary>
		/// Signifies that the bid of this ad group was applied to all criteria under the ad group.
		/// Criteria with bid overrides are <em>included</em>, but the overrides on these criteria
		/// were ignored when generating the landscape.
		/// </summary>
		Uniform,
		/// <summary>
		/// Signifies that the bid of this ad group was only applied to the ad group itself.
		/// Criteria with bid overrides are <em>excluded</em>.
		/// </summary>
		Default,
		Unknown
	}
	/// <summary>
	/// Represents an adgroup level bid modifier override for campaign level criterion
	/// bid modifier values.
	/// </summary>
	public class AdGroupBidModifier : ISoapable
	{
		/// <summary>
		/// The campaign that the criterion is in.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// The adgroup that the bid modifier override is in.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The criterion whose bid value is being overridden.
		///
		/// <p>Currently, bid modifier overrides are supported only for platform criterion
		/// (ID=30000, 30001, 30002) and preferred content criterion (ID = 400).
		/// The {@linkplain AdGroupBidModifierService#get} method returns all platform and
		/// preferred content criteria.
		///
		/// <p>Preferred Content Criteria is available in versions >= V201603.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Criterion Criterion { get; set; }
		/// <summary>
		/// The modifier for bids when the criterion matches.
		///
		/// <p>Valid modifier values range from {@code 0.1} to {@code 10.0}, with {@code 0.0} reserved
		/// for opting out of a platform.
		/// <span class="constraint Selectable">This field can be selected using the value "BidModifier".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public double? BidModifier { get; set; }
		/// <summary>
		/// ID of the base adgroup from which this draft/trial adgroup bid modifier was created. For
		/// base adgroups this is equal to the adgroup ID.  If the adgroup was created
		/// in the draft or trial and has no corresponding base adgroup, this field is null.
		/// This field is readonly and only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		/// <summary>
		/// Bid modifier source.
		/// <span class="constraint Selectable">This field can be selected using the value "BidModifierSource".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BidModifierSource? BidModifierSource { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			AdGroupId = null;
			Criterion = null;
			BidModifier = null;
			BaseAdGroupId = null;
			BidModifierSource = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "criterion")
				{
					Criterion = new Criterion();
					Criterion.ReadFrom(xItem);
				}
				else if (localName == "bidModifier")
				{
					BidModifier = double.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "bidModifierSource")
				{
					BidModifierSource = BidModifierSourceExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (Criterion != null)
			{
				xItem = new XElement(XName.Get("criterion", "https://adwords.google.com/api/adwords/cm/v201609"));
				Criterion.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidModifier != null)
			{
				xItem = new XElement(XName.Get("bidModifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifier.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (BidModifierSource != null)
			{
				xItem = new XElement(XName.Get("bidModifierSource", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifierSource.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation used to create or mutate a AdGroupBidModifier.
	/// </summary>
	public class AdGroupBidModifierOperation : Operation, ISoapable
	{
		/// <summary>
		/// The AdGroupBidModifier to create or mutate.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupBidModifier Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupBidModifier();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupBidModifierOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of adgroup bid modifiers resulting from a call to
	/// {@link AdGroupBidModifierService#get}.
	/// </summary>
	public class AdGroupBidModifierPage : Page, ISoapable
	{
		public List<AdGroupBidModifier> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupBidModifier>();
					var entriesItem = new AdGroupBidModifier();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupBidModifierPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the AdGroupBidModifierService.
	/// </summary>
	public class AdGroupBidModifierReturnValue : ListReturnValue, ISoapable
	{
		public List<AdGroupBidModifier> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupBidModifier>();
					var valueItem = new AdGroupBidModifier();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupBidModifierReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Holds information about a changed adgroup
	/// </summary>
	public class AdGroupChangeData : ISoapable
	{
		/// <summary>
		/// The ad group ID.
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// Whether or not the fields of this adgroup have changed, for example the AdGroup name. Changes
		/// to the Ads and Criteria are enumerated in their respective lists and will not be reflected in
		/// this status.
		/// </summary>
		public ChangeStatus? AdGroupChangeStatus { get; set; }
		/// <summary>
		/// The IDs of any changed ads of this ad group. This includes ads that have been deleted.
		/// </summary>
		public List<long> ChangedAds { get; set; }
		/// <summary>
		/// The IDs of any changed criterion of this ad group.
		/// </summary>
		public List<long> ChangedCriteria { get; set; }
		/// <summary>
		/// The IDs of any deleted criterion of this ad group.
		/// </summary>
		public List<long> RemovedCriteria { get; set; }
		/// <summary>
		/// A list of feed IDs for AdGroupFeeds that have been changed in this ad group. If an AdGroupFeed
		/// is deleted after a modification, it will not be included in this list.
		/// </summary>
		public List<long> ChangedFeeds { get; set; }
		/// <summary>
		/// A list of feed IDs for AdGroupFeeds that have been removed from the ad group.
		/// </summary>
		public List<long> RemovedFeeds { get; set; }
		/// <summary>
		/// Set of campaign criterion that have a bid modifier override at ad group level. If the
		/// associated bid modifier override is deleted after a modification, it will not be included in
		/// this list.
		/// </summary>
		public List<long> ChangedAdGroupBidModifierCriteria { get; set; }
		/// <summary>
		/// Set of campaign criterion whose bid modifier override at ad group level has been removed.
		/// </summary>
		public List<long> RemovedAdGroupBidModifierCriteria { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			AdGroupChangeStatus = null;
			ChangedAds = null;
			ChangedCriteria = null;
			RemovedCriteria = null;
			ChangedFeeds = null;
			RemovedFeeds = null;
			ChangedAdGroupBidModifierCriteria = null;
			RemovedAdGroupBidModifierCriteria = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupChangeStatus")
				{
					AdGroupChangeStatus = ChangeStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "changedAds")
				{
					if (ChangedAds == null) ChangedAds = new List<long>();
					ChangedAds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "changedCriteria")
				{
					if (ChangedCriteria == null) ChangedCriteria = new List<long>();
					ChangedCriteria.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedCriteria")
				{
					if (RemovedCriteria == null) RemovedCriteria = new List<long>();
					RemovedCriteria.Add(long.Parse(xItem.Value));
				}
				else if (localName == "changedFeeds")
				{
					if (ChangedFeeds == null) ChangedFeeds = new List<long>();
					ChangedFeeds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedFeeds")
				{
					if (RemovedFeeds == null) RemovedFeeds = new List<long>();
					RemovedFeeds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "changedAdGroupBidModifierCriteria")
				{
					if (ChangedAdGroupBidModifierCriteria == null) ChangedAdGroupBidModifierCriteria = new List<long>();
					ChangedAdGroupBidModifierCriteria.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedAdGroupBidModifierCriteria")
				{
					if (RemovedAdGroupBidModifierCriteria == null) RemovedAdGroupBidModifierCriteria = new List<long>();
					RemovedAdGroupBidModifierCriteria.Add(long.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupChangeStatus != null)
			{
				xItem = new XElement(XName.Get("adGroupChangeStatus", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(AdGroupChangeStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ChangedAds != null)
			{
				foreach (var changedAdsItem in ChangedAds)
				{
					xItem = new XElement(XName.Get("changedAds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedAdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ChangedCriteria != null)
			{
				foreach (var changedCriteriaItem in ChangedCriteria)
				{
					xItem = new XElement(XName.Get("changedCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedCriteria != null)
			{
				foreach (var removedCriteriaItem in RemovedCriteria)
				{
					xItem = new XElement(XName.Get("removedCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ChangedFeeds != null)
			{
				foreach (var changedFeedsItem in ChangedFeeds)
				{
					xItem = new XElement(XName.Get("changedFeeds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedFeedsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedFeeds != null)
			{
				foreach (var removedFeedsItem in RemovedFeeds)
				{
					xItem = new XElement(XName.Get("removedFeeds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedFeedsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ChangedAdGroupBidModifierCriteria != null)
			{
				foreach (var changedAdGroupBidModifierCriteriaItem in ChangedAdGroupBidModifierCriteria)
				{
					xItem = new XElement(XName.Get("changedAdGroupBidModifierCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedAdGroupBidModifierCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedAdGroupBidModifierCriteria != null)
			{
				foreach (var removedAdGroupBidModifierCriteriaItem in RemovedAdGroupBidModifierCriteria)
				{
					xItem = new XElement(XName.Get("removedAdGroupBidModifierCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedAdGroupBidModifierCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a criterion in an ad group, used with AdGroupCriterionService.
	/// </summary>
	public class AdGroupCriterion : ISoapable
	{
		/// <summary>
		/// The ad group this criterion is in.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "CriterionUse".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CriterionUse? CriterionUse { get; set; }
		/// <summary>
		/// The criterion part of the ad group criterion.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Criterion Criterion { get; set; }
		/// <summary>
		/// Labels that are attached to the AdGroupCriterion. To associate an existing {@link Label} to an
		/// existing {@link AdGroupCriterion}, use {@link AdGroupCriterionService#mutateLabel} with ADD
		/// operator. To remove an associated {@link Label} from the {@link AdGroupCriterion}, use
		/// {@link AdGroupCriterionService#mutateLabel} with REMOVE operator. To filter on {@link Label}s,
		/// use one of {@link Predicate.Operator#CONTAINS_ALL}, {@link Predicate.Operator#CONTAINS_ANY},
		/// {@link Predicate.Operator#CONTAINS_NONE} operators with a list of {@link Label} ids.
		/// <span class="constraint Selectable">This field can be selected using the value "Labels".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public List<Label> Labels { get; set; }
		/// <summary>
		/// This Map provides a place to put new features and settings in older versions
		/// of the AdWords API in the rare instance we need to introduce a new feature in
		/// an older version.
		///
		/// It is presently unused.  Do not set a value.
		/// </summary>
		public List<String_StringMapEntry> ForwardCompatibilityMap { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial ad group criterion was created.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// ID of the base ad group from which this draft/trial ad group criterion was created. For
		/// base ad groups this is equal to the ad group ID.  If the ad group was created
		/// in the draft or trial and has no corresponding base ad group, this field is null.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of AdGroupCriterion.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string AdGroupCriterionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			CriterionUse = null;
			Criterion = null;
			Labels = null;
			ForwardCompatibilityMap = null;
			BaseCampaignId = null;
			BaseAdGroupId = null;
			AdGroupCriterionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "criterionUse")
				{
					CriterionUse = CriterionUseExtensions.Parse(xItem.Value);
				}
				else if (localName == "criterion")
				{
					Criterion = new Criterion();
					Criterion.ReadFrom(xItem);
				}
				else if (localName == "labels")
				{
					if (Labels == null) Labels = new List<Label>();
					var labelsItem = new Label();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
				else if (localName == "forwardCompatibilityMap")
				{
					if (ForwardCompatibilityMap == null) ForwardCompatibilityMap = new List<String_StringMapEntry>();
					var forwardCompatibilityMapItem = new String_StringMapEntry();
					forwardCompatibilityMapItem.ReadFrom(xItem);
					ForwardCompatibilityMap.Add(forwardCompatibilityMapItem);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "AdGroupCriterion.Type")
				{
					AdGroupCriterionType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (CriterionUse != null)
			{
				xItem = new XElement(XName.Get("criterionUse", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionUse.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Criterion != null)
			{
				xItem = new XElement(XName.Get("criterion", "https://adwords.google.com/api/adwords/cm/v201609"));
				Criterion.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/cm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ForwardCompatibilityMap != null)
			{
				foreach (var forwardCompatibilityMapItem in ForwardCompatibilityMap)
				{
					xItem = new XElement(XName.Get("forwardCompatibilityMap", "https://adwords.google.com/api/adwords/cm/v201609"));
					forwardCompatibilityMapItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupCriterionType != null)
			{
				xItem = new XElement(XName.Get("AdGroupCriterion.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupCriterionType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Base error class for Ad Group Criterion Service.
	/// </summary>
	public class AdGroupCriterionError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdGroupCriterionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdGroupCriterionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum AdGroupCriterionErrorReason
	{
		/// <summary>
		/// No link found between the AdGroupCriterion and the label.
		/// </summary>
		AdGroupCriterionLabelDoesNotExist,
		/// <summary>
		/// The label has already been attached to the AdGroupCriterion.
		/// </summary>
		AdGroupCriterionLabelAlreadyExists,
		/// <summary>
		/// Negative AdGroupCriterion cannot have labels.
		/// </summary>
		CannotAddLabelToNegativeCriterion,
		/// <summary>
		/// Too many operations for a single call.
		/// </summary>
		TooManyOperations,
		/// <summary>
		/// Negative ad group criteria are not updateable.
		/// </summary>
		CantUpdateNegative,
		/// <summary>
		/// Concrete type of criterion (keyword v.s. placement) is required for
		/// ADD and SET operations.
		/// </summary>
		ConcreteTypeRequired,
		/// <summary>
		/// Bid is incompatible with ad group's bidding settings.
		/// </summary>
		BidIncompatibleWithAdgroup,
		/// <summary>
		/// Cannot target and exclude the same criterion at once.
		/// </summary>
		CannotTargetAndExclude,
		/// <summary>
		/// The URL of a placement is invalid.
		/// </summary>
		IllegalUrl,
		/// <summary>
		/// Keyword text was invalid.
		/// </summary>
		InvalidKeywordText,
		/// <summary>
		/// Destination URL was invalid.
		/// </summary>
		InvalidDestinationUrl,
		/// <summary>
		/// The destination url must contain at least one tag (e.g. {lpurl})
		/// </summary>
		MissingDestinationUrlTag,
		/// <summary>
		/// Keyword-level cpm bid is not supported
		/// </summary>
		KeywordLevelBidNotSupportedForManualcpm,
		/// <summary>
		/// For example, cannot add a biddable ad group criterion that had been removed.
		/// </summary>
		InvalidUserStatus,
		/// <summary>
		/// Criteria type cannot be targeted for the ad group. Either the account
		/// is restricted to keywords only, the criteria type is incompatible
		/// with the campaign's bidding strategy, or the criteria type can only
		/// be applied to campaigns.
		/// </summary>
		CannotAddCriteriaType,
		/// <summary>
		/// Criteria type cannot be excluded for the ad group. Refer to the
		/// documentation for a specific criterion to check if it is excludable.
		/// </summary>
		CannotExcludeCriteriaType,
		/// <summary>
		/// Ad group is invalid due to the product partitions it contains.
		/// </summary>
		InvalidProductPartitionHierarchy,
		/// <summary>
		/// Product partition unit cannot have children.
		/// </summary>
		ProductPartitionUnitCannotHaveChildren,
		/// <summary>
		/// Subdivided product partitions must have an "others" case.
		/// </summary>
		ProductPartitionSubdivisionRequiresOthersCase,
		/// <summary>
		/// Dimension type of product partition must be the same as that of its siblings.
		/// </summary>
		ProductPartitionRequiresSameDimensionTypeAsSiblings,
		/// <summary>
		/// Product partition cannot be added to the ad group because it already exists.
		/// </summary>
		ProductPartitionAlreadyExists,
		/// <summary>
		/// Product partition referenced in the operation was not found in the ad group.
		/// </summary>
		ProductPartitionDoesNotExist,
		/// <summary>
		/// Recursive removal failed because product partition subdivision is being created or modified
		/// in this request.
		/// </summary>
		ProductPartitionCannotBeRemoved,
		/// <summary>
		/// Product partition type is not allowed for specified AdGroupCriterion type.
		/// </summary>
		InvalidProductPartitionType,
		/// <summary>
		/// Product partition in an ADD operation specifies a non temporary CriterionId.
		/// </summary>
		ProductPartitionAddMayOnlyUseTempId,
		/// <summary>
		/// Partial failure is not supported for shopping campaign mutate operations.
		/// </summary>
		CampaignTypeNotCompatibleWithPartialFailure,
		/// <summary>
		/// Operations in the mutate request changes too many shopping ad groups. Please split
		/// requests for multiple shopping ad groups across multiple requests.
		/// </summary>
		OperationsForTooManyShoppingAdgroups,
		/// <summary>
		/// Not allowed to modify url fields of an ad group criterion if there are duplicate elements
		/// for that ad group criterion in the request.
		/// </summary>
		CannotModifyUrlFieldsWithDuplicateElements,
		/// <summary>
		/// Cannot set url fields without also setting final urls.
		/// </summary>
		CannotSetWithoutFinalUrls,
		/// <summary>
		/// Cannot clear final urls if final mobile urls exist.
		/// </summary>
		CannotClearFinalUrlsIfFinalMobileUrlsExist,
		/// <summary>
		/// Cannot clear final urls if final app urls exist.
		/// </summary>
		CannotClearFinalUrlsIfFinalAppUrlsExist,
		/// <summary>
		/// Cannot clear final urls if tracking url template exists.
		/// </summary>
		CannotClearFinalUrlsIfTrackingUrlTemplateExists,
		/// <summary>
		/// Cannot clear final urls if url custom parameters exist.
		/// </summary>
		CannotClearFinalUrlsIfUrlCustomParametersExist,
		/// <summary>
		/// Cannot set both destination url and final urls.
		/// </summary>
		CannotSetBothDestinationUrlAndFinalUrls,
		/// <summary>
		/// Cannot set both destination url and tracking url template.
		/// </summary>
		CannotSetBothDestinationUrlAndTrackingUrlTemplate,
		/// <summary>
		/// Final urls are not supported for this criterion type.
		/// </summary>
		FinalUrlsNotSupportedForCriterionType,
		/// <summary>
		/// Final mobile urls are not supported for this criterion type.
		/// </summary>
		FinalMobileUrlsNotSupportedForCriterionType,
		Unknown
	}
	/// <summary>
	/// Manages the labels associated with an AdGroupCriterion.
	/// </summary>
	public class AdGroupCriterionLabel : ISoapable
	{
		/// <summary>
		/// The id of the adgroup containing the criterion that the label is applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The id of the criterion that the label is applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? CriterionId { get; set; }
		/// <summary>
		/// The id of an existing label to be applied to the adgroup criterion.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? LabelId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			CriterionId = null;
			LabelId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "criterionId")
				{
					CriterionId = long.Parse(xItem.Value);
				}
				else if (localName == "labelId")
				{
					LabelId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (CriterionId != null)
			{
				xItem = new XElement(XName.Get("criterionId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionId.Value.ToString());
				xE.Add(xItem);
			}
			if (LabelId != null)
			{
				xItem = new XElement(XName.Get("labelId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operations for adding/removing labels from AdGroupCriterion.
	/// </summary>
	public class AdGroupCriterionLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupCriterionLabel to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupCriterionLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupCriterionLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link AdGroupCriterionService#mutateLabel} call.
	/// </summary>
	public class AdGroupCriterionLabelReturnValue : ListReturnValue, ISoapable
	{
		public List<AdGroupCriterionLabel> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupCriterionLabel>();
					var valueItem = new AdGroupCriterionLabel();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionLabelReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Signals that too many criteria were added to some ad group.
	/// </summary>
	public class AdGroupCriterionLimitExceeded : EntityCountLimitExceeded, ISoapable
	{
		public AdGroupCriterionLimitExceededCriteriaLimitType? LimitType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			LimitType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "limitType")
				{
					LimitType = AdGroupCriterionLimitExceededCriteriaLimitTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionLimitExceeded");
			XElement xItem = null;
			if (LimitType != null)
			{
				xItem = new XElement(XName.Get("limitType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LimitType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The entity type that exceeded the limit.
	/// </summary>
	public enum AdGroupCriterionLimitExceededCriteriaLimitType
	{
		AdgroupKeyword,
		AdgroupWebsite,
		AdgroupCriterion,
		Unknown
	}
	/// <summary>
	/// Operation (add, remove and set) on adgroup criteria.
	/// </summary>
	public class AdGroupCriterionOperation : Operation, ISoapable
	{
		/// <summary>
		/// The adgroup criterion being operated on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupCriterion Operand { get; set; }
		/// <summary>
		/// List of exemption requests for policy violations flagged by this criterion.
		///
		/// <p>Only set this field when adding criteria that trigger policy violations
		/// for which you wish to get exemptions for.
		/// </summary>
		public List<ExemptionRequest> ExemptionRequests { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			ExemptionRequests = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupCriterion();
					Operand.ReadFrom(xItem);
				}
				else if (localName == "exemptionRequests")
				{
					if (ExemptionRequests == null) ExemptionRequests = new List<ExemptionRequest>();
					var exemptionRequestsItem = new ExemptionRequest();
					exemptionRequestsItem.ReadFrom(xItem);
					ExemptionRequests.Add(exemptionRequestsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ExemptionRequests != null)
			{
				foreach (var exemptionRequestsItem in ExemptionRequests)
				{
					xItem = new XElement(XName.Get("exemptionRequests", "https://adwords.google.com/api/adwords/cm/v201609"));
					exemptionRequestsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Contains a subset of adgroup criteria resulting from a
	/// {@link AdGroupCriterionService#get} call.
	/// </summary>
	public class AdGroupCriterionPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<AdGroupCriterion> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupCriterion>();
					var entriesItem = new AdGroupCriterion();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the AdGroupCriterionService.
	/// </summary>
	public class AdGroupCriterionReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// List of adgroup criteria.
		/// </summary>
		public List<AdGroupCriterion> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupCriterion>();
					var valueItem = new AdGroupCriterion();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupCriterionReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents the estimate results for a single ad group.
	/// </summary>
	public class AdGroupEstimate : Estimate, ISoapable
	{
		/// <summary>
		/// The adGroupId of the ad group specified in the request.
		///
		/// This will be <code>null</code> for new ad groups.
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The estimates for the keywords specified in the request.
		///
		/// The list of estimates are returned in the same order as the keywords that
		/// were sent in the request.
		/// </summary>
		public List<KeywordEstimate> KeywordEstimates { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AdGroupId = null;
			KeywordEstimates = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "keywordEstimates")
				{
					if (KeywordEstimates == null) KeywordEstimates = new List<KeywordEstimate>();
					var keywordEstimatesItem = new KeywordEstimate();
					keywordEstimatesItem.ReadFrom(xItem);
					KeywordEstimates.Add(keywordEstimatesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "AdGroupEstimate");
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (KeywordEstimates != null)
			{
				foreach (var keywordEstimatesItem in KeywordEstimates)
				{
					xItem = new XElement(XName.Get("keywordEstimates", "https://adwords.google.com/api/adwords/o/v201609"));
					keywordEstimatesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents an ad group that will be estimated. Ad groups may be all
	/// new or all existing, or a mixture of new and existing. Only existing
	/// campaigns can contain estimates for existing ad groups.<p>
	///
	/// <p>To make a keyword estimates request in which estimates do not consider
	/// existing account information (e.g. historical ad group performance), set both
	/// {@link #adGroupId} and the enclosing {@link CampaignEstimateRequest}'s
	/// {@code campaignId} to {@code null}.
	///
	/// <p>For more details on usage, refer to document at
	/// {@link CampaignEstimateRequest}.
	/// </summary>
	public class AdGroupEstimateRequest : EstimateRequest, ISoapable
	{
		/// <summary>
		/// The adGroupId for an ad group that belongs to the containing campaign from
		/// {@link CampaignEstimateRequest} or {@code null}.
		///
		/// <p>For usage, refer to document from {@link CampaignEstimateRequest}.
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The keywords to estimate.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<KeywordEstimateRequest> KeywordEstimateRequests { get; set; }
		/// <summary>
		/// The max CPC bid to use for estimates for this ad group.
		///
		/// <p>This value overrides the max CPC of AdGroup specified by
		/// {@link #adGroupId}.
		/// </summary>
		public Money MaxCpc { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AdGroupId = null;
			KeywordEstimateRequests = null;
			MaxCpc = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "keywordEstimateRequests")
				{
					if (KeywordEstimateRequests == null) KeywordEstimateRequests = new List<KeywordEstimateRequest>();
					var keywordEstimateRequestsItem = new KeywordEstimateRequest();
					keywordEstimateRequestsItem.ReadFrom(xItem);
					KeywordEstimateRequests.Add(keywordEstimateRequestsItem);
				}
				else if (localName == "maxCpc")
				{
					MaxCpc = new Money();
					MaxCpc.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "AdGroupEstimateRequest");
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (KeywordEstimateRequests != null)
			{
				foreach (var keywordEstimateRequestsItem in KeywordEstimateRequests)
				{
					xItem = new XElement(XName.Get("keywordEstimateRequests", "https://adwords.google.com/api/adwords/o/v201609"));
					keywordEstimateRequestsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (MaxCpc != null)
			{
				xItem = new XElement(XName.Get("maxCpc", "https://adwords.google.com/api/adwords/o/v201609"));
				MaxCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An AdGroupExtensionSetting is used to add or modify extensions being served for the specified
	/// ad group.
	/// </summary>
	public class AdGroupExtensionSetting : ISoapable
	{
		/// <summary>
		/// The id of the ad group for the feed items being added or modified.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The extension type the extension setting applies to.
		/// <span class="constraint Selectable">This field can be selected using the value "ExtensionType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FeedType? ExtensionType { get; set; }
		/// <summary>
		/// The extension setting specifying which extensions to serve for the specified ad group. If
		/// extensionSetting is empty (i.e. has an empty list of feed items and null platformRestrictions),
		/// extensions are disabled for the specified extensionType.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public ExtensionSetting ExtensionSetting { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			ExtensionType = null;
			ExtensionSetting = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "extensionType")
				{
					ExtensionType = FeedTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "extensionSetting")
				{
					ExtensionSetting = new ExtensionSetting();
					ExtensionSetting.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (ExtensionType != null)
			{
				xItem = new XElement(XName.Get("extensionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExtensionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ExtensionSetting != null)
			{
				xItem = new XElement(XName.Get("extensionSetting", "https://adwords.google.com/api/adwords/cm/v201609"));
				ExtensionSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation used to create or mutate an AdGroupExtensionSetting.
	/// </summary>
	public class AdGroupExtensionSettingOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupExtensionSetting to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupExtensionSetting Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupExtensionSetting();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupExtensionSettingOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of AdGroupExtensionSetting objects resulting from a
	/// {@code AdGroupExtensionSettingService#get} call.
	/// </summary>
	public class AdGroupExtensionSettingPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<AdGroupExtensionSetting> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupExtensionSetting>();
					var entriesItem = new AdGroupExtensionSetting();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupExtensionSettingPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from a {@code AdGroupExtensionSettingService#mutate} call.
	/// </summary>
	public class AdGroupExtensionSettingReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting AdGroupExtensionSettings.
		/// </summary>
		public List<AdGroupExtensionSetting> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupExtensionSetting>();
					var valueItem = new AdGroupExtensionSetting();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupExtensionSettingReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// AdGroupFeeds are used to link a feed to an adgroup using a matching function,
	/// making the feed's feed items available in the adgroup's ads for substitution.
	/// </summary>
	public class AdGroupFeed : ISoapable
	{
		/// <summary>
		/// Id of the Feed associated with the AdGroupFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Id of the AdGroup associated with the AdGroupFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// Matching function associated with the AdGroupFeed.
		/// The matching function will return true/false indicating
		/// which feed items may serve.
		/// <span class="constraint Selectable">This field can be selected using the value "MatchingFunction".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Function MatchingFunction { get; set; }
		/// <summary>
		/// Indicates which placeholder types the feed may populate under the connected AdGroup.
		/// <span class="constraint Selectable">This field can be selected using the value "PlaceholderTypes".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<int> PlaceholderTypes { get; set; }
		/// <summary>
		/// Status of the AdGroupFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public AdGroupFeedStatus? Status { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial ad group feed was created.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// ID of the base ad group from which this draft/trial ad group feed was created. For
		/// base ad groups this is equal to the ad group ID.  If the ad group was created
		/// in the draft or trial and has no corresponding base ad group, this field is null.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			AdGroupId = null;
			MatchingFunction = null;
			PlaceholderTypes = null;
			Status = null;
			BaseCampaignId = null;
			BaseAdGroupId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "matchingFunction")
				{
					MatchingFunction = new Function();
					MatchingFunction.ReadFrom(xItem);
				}
				else if (localName == "placeholderTypes")
				{
					if (PlaceholderTypes == null) PlaceholderTypes = new List<int>();
					PlaceholderTypes.Add(int.Parse(xItem.Value));
				}
				else if (localName == "status")
				{
					Status = AdGroupFeedStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (MatchingFunction != null)
			{
				xItem = new XElement(XName.Get("matchingFunction", "https://adwords.google.com/api/adwords/cm/v201609"));
				MatchingFunction.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (PlaceholderTypes != null)
			{
				foreach (var placeholderTypesItem in PlaceholderTypes)
				{
					xItem = new XElement(XName.Get("placeholderTypes", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(placeholderTypesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an error for the AdGroupFeedService.
	/// </summary>
	public class AdGroupFeedError : ApiError, ISoapable
	{
		/// <summary>
		/// Error reason.
		/// </summary>
		public AdGroupFeedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdGroupFeedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupFeedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum AdGroupFeedErrorReason
	{
		/// <summary>
		/// An active feed already exists for this adgroup and place holder type.
		/// </summary>
		FeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// The specified id does not exist.
		/// </summary>
		InvalidId,
		/// <summary>
		/// The specified feed is deleted.
		/// </summary>
		CannotAddForDeletedFeed,
		/// <summary>
		/// The AdGroupFeed already exists. SET should be used to modify the existing AdGroupFeed.
		/// </summary>
		CannotAddAlreadyExistingAdgroupFeed,
		/// <summary>
		/// Cannot operate on removed adgroup feed.
		/// </summary>
		CannotOperateOnRemovedAdgroupFeed,
		/// <summary>
		/// Invalid placeholder type ids.
		/// </summary>
		InvalidPlaceholderTypes,
		/// <summary>
		/// Feed mapping for this placeholder type does not exist.
		/// </summary>
		MissingFeedmappingForPlaceholderType,
		/// <summary>
		/// Location AdGroupFeeds cannot be created unless there is a location CustomerFeed
		/// for the specified feed.
		/// </summary>
		NoExistingLocationCustomerFeed,
		Unknown
	}
	/// <summary>
	/// Operation used to create or mutate an AdGroupFeed.
	/// </summary>
	public class AdGroupFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupFeed to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The result of a call to AdGroupFeedService#get. Contains a list of
	/// associations between ad groups and feeds.
	/// </summary>
	public class AdGroupFeedPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The resulting AdGroupFeeds.
		/// </summary>
		public List<AdGroupFeed> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroupFeed>();
					var entriesItem = new AdGroupFeed();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupFeedPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to AdGroupFeedService#mutate.
	/// </summary>
	public class AdGroupFeedReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting AdGroupFeeds.
		/// </summary>
		public List<AdGroupFeed> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupFeed>();
					var valueItem = new AdGroupFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of the AdGroupFeed.
	/// </summary>
	public enum AdGroupFeedStatus
	{
		/// <summary>
		/// This AdGroupFeed's data is currently being used.
		/// </summary>
		Enabled,
		/// <summary>
		/// This AdGroupFeed's data is not used anymore.
		/// </summary>
		Removed,
		/// <summary>
		/// Unknown status.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Manages the labels associated with an {@link AdGroup}.
	/// </summary>
	public class AdGroupLabel : ISoapable
	{
		/// <summary>
		/// The id of the adGroup that the label is applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// The id of an existing label to be applied to the ad group.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? LabelId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			LabelId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "labelId")
				{
					LabelId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (LabelId != null)
			{
				xItem = new XElement(XName.Get("labelId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operations for adding/removing labels from AdGroup.
	/// </summary>
	public class AdGroupLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroupLabel to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroupLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroupLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link AdGroupService#mutateLabel} call.
	/// </summary>
	public class AdGroupLabelReturnValue : ListReturnValue, ISoapable
	{
		public List<AdGroupLabel> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroupLabel>();
					var valueItem = new AdGroupLabel();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupLabelReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// AdGroup operations for adding/updating/removing adgroups.
	/// </summary>
	public class AdGroupOperation : Operation, ISoapable
	{
		/// <summary>
		/// AdGroup to operate on
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdGroup Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdGroup();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of ad groups resulting from the filtering and paging of the
	/// {@link AdGroupService#get} call.
	/// </summary>
	public class AdGroupPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<AdGroup> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdGroup>();
					var entriesItem = new AdGroup();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the AdGroupService.
	/// </summary>
	public class AdGroupReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// List of AdGroups
		/// </summary>
		public List<AdGroup> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<AdGroup>();
					var valueItem = new AdGroup();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents possible error codes in AdGroupService.
	/// </summary>
	public class AdGroupServiceError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdGroupServiceErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdGroupServiceErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdGroupServiceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the adgroup service error.
	/// </summary>
	public enum AdGroupServiceErrorReason
	{
		/// <summary>
		/// AdGroup with the same name already exists for the campaign.
		/// </summary>
		DuplicateAdgroupName,
		/// <summary>
		/// AdGroup name is not valid.
		/// </summary>
		InvalidAdgroupName,
		/// <summary>
		/// Cannot remove an adgroup, adgroup status can be marked removed
		/// using set operator.
		/// </summary>
		UseSetOperatorAndMarkStatusToRemoved,
		/// <summary>
		/// Advertiser is not allowed to target sites or set site bids that are
		/// not on the Google Search Network.
		/// </summary>
		AdvertiserNotOnContentNetwork,
		/// <summary>
		/// Bid amount is too big.
		/// </summary>
		BidTooBig,
		/// <summary>
		/// AdGroup bid does not match the campaign's bidding strategy.
		/// </summary>
		BidTypeAndBiddingStrategyMismatch,
		/// <summary>
		/// AdGroup name is required for Add.
		/// </summary>
		MissingAdgroupName,
		/// <summary>
		/// No link found between the ad group and the label.
		/// </summary>
		AdgroupLabelDoesNotExist,
		/// <summary>
		/// The label has already been attached to the ad group.
		/// </summary>
		AdgroupLabelAlreadyExists,
		/// <summary>
		/// The CriterionTypeGroup is not supported for the content bid dimension.
		/// </summary>
		InvalidContentBidCriterionTypeGroup
	}
	/// <summary>
	/// Status of this ad group.
	/// </summary>
	public enum AdGroupStatus
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Active.
		/// </summary>
		Enabled,
		/// <summary>
		/// Paused.
		/// </summary>
		Paused,
		/// <summary>
		/// Removed.
		/// </summary>
		Removed
	}
	/// <summary>
	/// Represents an ad parameter.  Use ad parameters to update numeric values
	/// (such as prices or inventory levels) in any line of a text ad, including
	/// the destination URL. You can set two <code>AdParam</code> objects
	/// (one for each value of {@link #paramIndex}) per ad group
	/// <a href="AdGroupCriterionService.Keyword.html">Keyword</a>
	/// criterion.
	/// <p>When setting or removing an <code>AdParam</code>, it is uniquely
	/// identified by the combination of these three fields:</p>
	/// <ul>
	/// <li><code>adGroupId</code></li>
	/// <li><code>criterionId</code></li>
	/// <li><code>paramIndex</code></li>
	/// </ul>
	/// </summary>
	public class AdParam : ISoapable
	{
		/// <summary>
		/// ID of the associated ad group. Text ads in this ad group will be
		/// candidates for parameterized text replacement.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// ID of the associated <code>Keyword</code> criterion. The keyword must be
		/// in the same ad group as this <code>AdParam</code>. Text ads triggered by
		/// this keyword will have their
		/// <code>{param<var>N</var>:<var>default-value</var>}</code> snippet
		/// replaced by the contents of {@link #insertionText}.
		/// <span class="constraint Selectable">This field can be selected using the value "CriterionId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CriterionId { get; set; }
		/// <summary>
		/// Numeric value to insert into the ad text. The following restrictions
		/// apply:
		/// <ul>
		/// <li>Can use <code><b>,</b></code> or <code><b>.</b></code> as a
		/// separator, with an optional <code><b>.</b></code> or
		/// <code><b>,</b></code> (respectively) for fractional values. For
		/// example, <code>1,000,000.00</code> and <code>2.000.000,10</code> are
		/// valid.</li>
		/// <li>Can be prepended or appended with a currency symbol.
		/// For example, <code>$99.99</code> and <code>200&pound;</code> are
		/// valid.</li>
		/// <li>Can be prepended or appended with a currency code.
		/// For example, <code>99.99USD</code> and <code>EUR200</code> are
		/// valid.</li>
		/// <li>Can use <code>%</code>. For example, <code>1.0%</code> and
		/// <code>1,0%</code> are valid.</li>
		/// <li>Can use <code>+</code> or <code>-</code>. For example,
		/// <code>-10.99</code> and <code>25+</code> are valid.</li>
		/// <li>Can use <code>/</code> between two numbers. For example
		/// <code>4/1</code> and <code>0.95/0.45</code> are valid.</li>
		/// </ul>
		/// <span class="constraint Selectable">This field can be selected using the value "InsertionText".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive.</span>
		/// </summary>
		public string InsertionText { get; set; }
		/// <summary>
		/// Defines which parameterized snippet of ad text to replace. For example, a
		/// value of <code>1</code> indicates a replacement for the
		/// <code>{<b>param1</b>:<var>default-value</var>}</code> token.
		/// <span class="constraint Selectable">This field can be selected using the value "ParamIndex".</span>
		/// <span class="constraint InRange">This field must be between 1 and 2, inclusive.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? ParamIndex { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdGroupId = null;
			CriterionId = null;
			InsertionText = null;
			ParamIndex = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "criterionId")
				{
					CriterionId = long.Parse(xItem.Value);
				}
				else if (localName == "insertionText")
				{
					InsertionText = xItem.Value;
				}
				else if (localName == "paramIndex")
				{
					ParamIndex = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (CriterionId != null)
			{
				xItem = new XElement(XName.Get("criterionId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionId.Value.ToString());
				xE.Add(xItem);
			}
			if (InsertionText != null)
			{
				xItem = new XElement(XName.Get("insertionText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(InsertionText);
				xE.Add(xItem);
			}
			if (ParamIndex != null)
			{
				xItem = new XElement(XName.Get("paramIndex", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ParamIndex.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors for AdParamService.
	/// </summary>
	public class AdParamError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdParamErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdParamErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdParamError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum AdParamErrorReason
	{
		/// <summary>
		/// The same ad param cannot be specified in multiple operations
		/// </summary>
		AdParamCannotBeSpecifiedMultipleTimes,
		/// <summary>
		/// Specified AdParam does not exist
		/// </summary>
		AdParamDoesNotExist,
		/// <summary>
		/// Specified criterion is not a keyword
		/// </summary>
		CriterionSpecifiedMustBeKeyword,
		/// <summary>
		/// The (AdGroupId,CriterionId) is invalid
		/// </summary>
		InvalidAdgroupCriterionSpecified,
		/// <summary>
		/// The insertion text is invalid
		/// </summary>
		InvalidInsertionTextFormat,
		/// <summary>
		/// Must specify AdGroupId in selector
		/// </summary>
		MustSpecifyAdgroupId,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents an operation on an {@link AdParam}. The supported operators
	/// are {@code SET} and {@code REMOVE}.
	/// </summary>
	public class AdParamOperation : Operation, ISoapable
	{
		/// <summary>
		/// The ad parameter to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AdParam Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new AdParam();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdParamOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a page of AdParams returned by the {@link AdParamService}.
	/// </summary>
	public class AdParamPage : ISoapable
	{
		/// <summary>
		/// The result entries in this page
		/// </summary>
		public List<AdParam> Entries { get; set; }
		/// <summary>
		/// Total number of entries in the result which this page is a part of.
		/// </summary>
		public int? TotalNumEntries { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Entries = null;
			TotalNumEntries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<AdParam>();
					var entriesItem = new AdParam();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
				else if (localName == "totalNumEntries")
				{
					TotalNumEntries = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (TotalNumEntries != null)
			{
				xItem = new XElement(XName.Get("totalNumEntries", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalNumEntries.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Policy violation for an AdParam.
	/// </summary>
	public class AdParamPolicyError : PolicyViolationError, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdParamPolicyError");
		}
	}
	/// <summary>
	/// Represents an AdSchedule Criterion.
	/// AdSchedule is specified as day and time of the week criteria to target
	/// the Ads.
	/// <p><b>Note:</b> An AdSchedule may not have more than <b>six</b> intervals
	/// in a day.</p>
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class AdSchedule : Criterion, ISoapable
	{
		/// <summary>
		/// Day of the week the schedule applies to.
		/// <span class="constraint Selectable">This field can be selected using the value "DayOfWeek".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public DayOfWeek? DayOfWeek { get; set; }
		/// <summary>
		/// Starting hour in 24 hour time.
		/// <span class="constraint Selectable">This field can be selected using the value "StartHour".</span>
		/// <span class="constraint InRange">This field must be between 0 and 23, inclusive.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public int? StartHour { get; set; }
		/// <summary>
		/// Interval starts these minutes after the starting hour.
		/// The value can be 0, 15, 30, and 45.
		/// <span class="constraint Selectable">This field can be selected using the value "StartMinute".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public MinuteOfHour? StartMinute { get; set; }
		/// <summary>
		/// Ending hour in 24 hour time; <code>24</code> signifies end of the day.
		/// <span class="constraint Selectable">This field can be selected using the value "EndHour".</span>
		/// <span class="constraint InRange">This field must be between 0 and 24, inclusive.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public int? EndHour { get; set; }
		/// <summary>
		/// Interval ends these minutes after the ending hour.
		/// The value can be 0, 15, 30, and 45.
		/// <span class="constraint Selectable">This field can be selected using the value "EndMinute".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public MinuteOfHour? EndMinute { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DayOfWeek = null;
			StartHour = null;
			StartMinute = null;
			EndHour = null;
			EndMinute = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "dayOfWeek")
				{
					DayOfWeek = DayOfWeekExtensions.Parse(xItem.Value);
				}
				else if (localName == "startHour")
				{
					StartHour = int.Parse(xItem.Value);
				}
				else if (localName == "startMinute")
				{
					StartMinute = MinuteOfHourExtensions.Parse(xItem.Value);
				}
				else if (localName == "endHour")
				{
					EndHour = int.Parse(xItem.Value);
				}
				else if (localName == "endMinute")
				{
					EndMinute = MinuteOfHourExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdSchedule");
			XElement xItem = null;
			if (DayOfWeek != null)
			{
				xItem = new XElement(XName.Get("dayOfWeek", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DayOfWeek.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (StartHour != null)
			{
				xItem = new XElement(XName.Get("startHour", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartHour.Value.ToString());
				xE.Add(xItem);
			}
			if (StartMinute != null)
			{
				xItem = new XElement(XName.Get("startMinute", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartMinute.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (EndHour != null)
			{
				xItem = new XElement(XName.Get("endHour", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndHour.Value.ToString());
				xE.Add(xItem);
			}
			if (EndMinute != null)
			{
				xItem = new XElement(XName.Get("endMinute", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndMinute.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Ad serving status of campaign.
	/// </summary>
	public enum AdServingOptimizationStatus
	{
		/// <summary>
		/// Ad serving is optimized based on CTR for the campaign.
		/// </summary>
		Optimize,
		/// <summary>
		/// Ad serving is optimized based on CTR * Conversion for the campaign. If the campaign is not in
		/// the conversion optimizer bidding strategy, it will default to OPTIMIZED.
		/// </summary>
		ConversionOptimize,
		/// <summary>
		/// Ads are rotated evenly for 90 days, then optimized for clicks.
		/// </summary>
		Rotate,
		/// <summary>
		/// Show lower performing ads more evenly with higher performing ads, and do not optimize.
		/// </summary>
		RotateIndefinitely,
		/// <summary>
		/// Ad serving optimization status is not available.
		/// </summary>
		Unavailable,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The types of ads.
	/// </summary>
	public enum AdType
	{
		DeprecatedAd,
		ImageAd,
		ProductAd,
		TemplateAd,
		TextAd,
		ThirdPartyRedirectAd,
		DynamicSearchAd,
		CallOnlyAd,
		ExpandedTextAd,
		ResponsiveDisplayAd,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents an id indicating a grouping of Ads under some heuristic.
	/// </summary>
	public class AdUnionId : ISoapable
	{
		/// <summary>
		/// The ID of the ad union
		/// <span class="constraint InRange">This field must be greater than or equal to 1.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of AdUnionId.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string AdUnionIdType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			AdUnionIdType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "AdUnionId.Type")
				{
					AdUnionIdType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (AdUnionIdType != null)
			{
				xItem = new XElement(XName.Get("AdUnionId.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdUnionIdType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an upgrade operation to upgrade Ad.url.
	/// </summary>
	public class AdUrlUpgrade : ISoapable
	{
		/// <summary>
		/// ID of ad to upgrade.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdId { get; set; }
		/// <summary>
		/// Final url of the ad. This is required for all Ad types, except for DynamicSearchAd and
		/// ProductAd.
		/// </summary>
		public string FinalUrl { get; set; }
		/// <summary>
		/// Mobile final url of the ad. This field is optional.
		/// </summary>
		public string FinalMobileUrl { get; set; }
		/// <summary>
		/// Tracking url template of the Ad.
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AdId = null;
			FinalUrl = null;
			FinalMobileUrl = null;
			TrackingUrlTemplate = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adId")
				{
					AdId = long.Parse(xItem.Value);
				}
				else if (localName == "finalUrl")
				{
					FinalUrl = xItem.Value;
				}
				else if (localName == "finalMobileUrl")
				{
					FinalMobileUrl = xItem.Value;
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AdId != null)
			{
				xItem = new XElement(XName.Get("adId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdId.Value.ToString());
				xE.Add(xItem);
			}
			if (FinalUrl != null)
			{
				xItem = new XElement(XName.Get("finalUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FinalUrl);
				xE.Add(xItem);
			}
			if (FinalMobileUrl != null)
			{
				xItem = new XElement(XName.Get("finalMobileUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FinalMobileUrl);
				xE.Add(xItem);
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A non-mutable specialization of an Advertising Channel.
	/// </summary>
	public enum AdvertisingChannelSubType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Mobile App Campaigns for Search
		/// </summary>
		SearchMobileApp,
		/// <summary>
		/// Mobile App Campaigns for Display
		/// </summary>
		DisplayMobileApp,
		/// <summary>
		/// AdWords Express campaigns for search.
		/// </summary>
		SearchExpress,
		/// <summary>
		/// AdWords Express campaigns for display.
		/// </summary>
		DisplayExpress,
		/// <summary>
		/// Campaigns specialized for advertising mobile app installations, that targets
		/// multiple advertising channels across search, display and youtube.  Google
		/// manages the keywords and ads for these campaigns.
		/// </summary>
		UniversalAppCampaign
	}
	/// <summary>
	/// The channel type a campaign may target to serve on.
	/// </summary>
	public enum AdvertisingChannelType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Search Network. Includes display bundled, and Search+ campaigns.
		/// </summary>
		Search,
		/// <summary>
		/// Google Display Network only.
		/// </summary>
		Display,
		/// <summary>
		/// Shopping campaigns serve on the shopping property and on google.com search
		/// results.
		/// </summary>
		Shopping,
		/// <summary>
		/// Universal app campaigns that target multiple channels across search, display,
		/// youtube, etc.
		/// </summary>
		MultiChannel
	}
	/// <summary>
	/// A conversion tracker created through AdWords Conversion Tracking.
	/// </summary>
	public class AdWordsConversionTracker : ConversionTracker, ISoapable
	{
		/// <summary>
		/// The generated snippet for this conversion tracker. This snippet is
		/// auto-generated by the API, and will be ignored in mutate operands. This
		/// field will always be returned. If the other fields are not selected, the
		/// snippet will use default values for them.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Snippet { get; set; }
		/// <summary>
		/// Text format for the site stats logo.
		/// <span class="constraint Selectable">This field can be selected using the value "TextFormat".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AdWordsConversionTrackerTextFormat? TextFormat { get; set; }
		/// <summary>
		/// Language used on the conversion page.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionPageLanguage".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string ConversionPageLanguage { get; set; }
		/// <summary>
		/// Background color for the site stats logo as a hex triplet (e.g. "99ccff").
		/// <span class="constraint Selectable">This field can be selected using the value "BackgroundColor".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string BackgroundColor { get; set; }
		/// <summary>
		/// Tracking code to use for the conversion type.
		/// <span class="constraint Selectable">This field can be selected using the value "TrackingCodeType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AdWordsConversionTrackerTrackingCodeType? TrackingCodeType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Snippet = null;
			TextFormat = null;
			ConversionPageLanguage = null;
			BackgroundColor = null;
			TrackingCodeType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
				else if (localName == "textFormat")
				{
					TextFormat = AdWordsConversionTrackerTextFormatExtensions.Parse(xItem.Value);
				}
				else if (localName == "conversionPageLanguage")
				{
					ConversionPageLanguage = xItem.Value;
				}
				else if (localName == "backgroundColor")
				{
					BackgroundColor = xItem.Value;
				}
				else if (localName == "trackingCodeType")
				{
					TrackingCodeType = AdWordsConversionTrackerTrackingCodeTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdWordsConversionTracker");
			XElement xItem = null;
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
			if (TextFormat != null)
			{
				xItem = new XElement(XName.Get("textFormat", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TextFormat.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ConversionPageLanguage != null)
			{
				xItem = new XElement(XName.Get("conversionPageLanguage", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionPageLanguage);
				xE.Add(xItem);
			}
			if (BackgroundColor != null)
			{
				xItem = new XElement(XName.Get("backgroundColor", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BackgroundColor);
				xE.Add(xItem);
			}
			if (TrackingCodeType != null)
			{
				xItem = new XElement(XName.Get("trackingCodeType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingCodeType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Text format to display on the conversion page.
	/// </summary>
	public enum AdWordsConversionTrackerTextFormat
	{
		/// <summary>
		/// The text will be displayed on one line.
		/// </summary>
		OneLine,
		/// <summary>
		/// The text will be displayed on two lines.
		/// </summary>
		TwoLine,
		/// <summary>
		/// The text will be hidden.
		/// </summary>
		Hidden
	}
	/// <summary>
	/// Type of snippet code to generate.
	/// </summary>
	public enum AdWordsConversionTrackerTrackingCodeType
	{
		/// <summary>
		/// The snippet that is fired as a result of a website page loading.
		/// </summary>
		Webpage,
		/// <summary>
		/// The snippet contains a JavaScript function which fires the tag. This function is typically
		/// called from an onClick handler added to a link or button element on the page.
		/// </summary>
		WebpageOnclick,
		/// <summary>
		/// For embedding on a (mobile) webpage. The snippet contains a JavaScript function which fires
		/// the tag. This function is typically called from an onClick handler added to a link or button
		/// element on the page that also instructs a mobile device to dial the advertiser's phone
		/// number.
		/// </summary>
		ClickToCall
	}
	/// <summary>
	/// Errors that are thrown when a non-AdX feature is accessed by an AdX customer.
	/// </summary>
	public class AdxError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AdxErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AdxErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AdxError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the AdX error.
	/// </summary>
	public enum AdxErrorReason
	{
		/// <summary>
		/// Attempt to use non-AdX feature by AdX customer.
		/// </summary>
		UnsupportedFeature
	}
	/// <summary>
	/// Represents an Age Range criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class AgeRange : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public AgeRangeAgeRangeType? AgeRangeType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AgeRangeType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ageRangeType")
				{
					AgeRangeType = AgeRangeAgeRangeTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AgeRange");
			XElement xItem = null;
			if (AgeRangeType != null)
			{
				xItem = new XElement(XName.Get("ageRangeType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AgeRangeType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum AgeRangeAgeRangeType
	{
		AgeRange1824,
		AgeRange2534,
		AgeRange3544,
		AgeRange4554,
		AgeRange5564,
		AgeRange65Up,
		AgeRangeUndetermined,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The API error base class that provides details about an error that occurred
	/// while processing a service request.
	///
	/// <p>The OGNL field path is provided for parsers to identify the request data
	/// element that may have caused the error.</p>
	/// </summary>
	public abstract class ApiError : Exception, ISoapable
	{
		public override string Message { get { return ErrorString; } }
		/// <summary>
		/// The OGNL field path to identify cause of error.
		/// </summary>
		public string FieldPath { get; set; }
		/// <summary>
		/// The data that caused the error.
		/// </summary>
		public string Trigger { get; set; }
		/// <summary>
		/// A simple string representation of the error and reason.
		/// </summary>
		public string ErrorString { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of ApiError.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ApiErrorType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FieldPath = null;
			Trigger = null;
			ErrorString = null;
			ApiErrorType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "fieldPath")
				{
					FieldPath = xItem.Value;
				}
				else if (localName == "trigger")
				{
					Trigger = xItem.Value;
				}
				else if (localName == "errorString")
				{
					ErrorString = xItem.Value;
				}
				else if (localName == "ApiError.Type")
				{
					ApiErrorType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FieldPath != null)
			{
				xItem = new XElement(XName.Get("fieldPath", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldPath);
				xE.Add(xItem);
			}
			if (Trigger != null)
			{
				xItem = new XElement(XName.Get("trigger", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Trigger);
				xE.Add(xItem);
			}
			if (ErrorString != null)
			{
				xItem = new XElement(XName.Get("errorString", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ErrorString);
				xE.Add(xItem);
			}
			if (ApiErrorType != null)
			{
				xItem = new XElement(XName.Get("ApiError.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ApiErrorType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Exception class for holding a list of service errors.
	/// </summary>
	public class ApiException : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiException");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A ConversionTracker for mobile apps.
	/// </summary>
	public class AppConversion : ConversionTracker, ISoapable
	{
		/// <summary>
		/// App ID of the app conversion tracker. This field is required for certain
		/// conversion types, in particular, Android app install (first open) and
		/// Android app install (from Google Play).
		/// <span class="constraint Selectable">This field can be selected using the value "AppId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string AppId { get; set; }
		/// <summary>
		/// App platform of the app conversion tracker. This field defaults to NONE.
		/// Once it is set to a value other than NONE it cannot be changed again. It must be
		/// set at the same time as AppConversionType.
		/// <span class="constraint Selectable">This field can be selected using the value "AppPlatform".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AppConversionAppPlatform? AppPlatform { get; set; }
		/// <summary>
		/// The generated snippet for this conversion tracker. This snippet is
		/// auto-generated by the API, and will be ignored in mutate operands. This
		/// field will always be returned.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Snippet { get; set; }
		/// <summary>
		/// The type of AppConversion, which identifies a conversion as being either download or
		/// in-app purchase. This field can only be set once and future reads will populate the type
		/// appropriately. It is an error to change the value once it is set. This field must be set
		/// at the same time as AppPlatform.
		/// </summary>
		public AppConversionAppConversionType? AppConversionType { get; set; }
		/// <summary>
		/// The postback URL. When the conversion type specifies a postback url,
		/// Google will send information about each conversion event to that url as they happen.
		/// Details, including formatting requirements for this field:
		/// https://developers.google.com/app-conversion-tracking/docs/app-install-feedback
		/// <span class="constraint Selectable">This field can be selected using the value "AppPostbackUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string AppPostbackUrl { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AppId = null;
			AppPlatform = null;
			Snippet = null;
			AppConversionType = null;
			AppPostbackUrl = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appId")
				{
					AppId = xItem.Value;
				}
				else if (localName == "appPlatform")
				{
					AppPlatform = AppConversionAppPlatformExtensions.Parse(xItem.Value);
				}
				else if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
				else if (localName == "appConversionType")
				{
					AppConversionType = AppConversionAppConversionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "appPostbackUrl")
				{
					AppPostbackUrl = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AppConversion");
			XElement xItem = null;
			if (AppId != null)
			{
				xItem = new XElement(XName.Get("appId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppId);
				xE.Add(xItem);
			}
			if (AppPlatform != null)
			{
				xItem = new XElement(XName.Get("appPlatform", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppPlatform.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
			if (AppConversionType != null)
			{
				xItem = new XElement(XName.Get("appConversionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppConversionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AppPostbackUrl != null)
			{
				xItem = new XElement(XName.Get("appPostbackUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppPostbackUrl);
				xE.Add(xItem);
			}
		}
	}
	public enum AppConversionAppConversionType
	{
		None,
		Download,
		InAppPurchase,
		FirstOpen
	}
	/// <summary>
	/// App platform for the AppConversionTracker.
	/// </summary>
	public enum AppConversionAppPlatform
	{
		None,
		Itunes,
		AndroidMarket,
		MobileAppChannel
	}
	/// <summary>
	/// Represents an App extension.
	/// </summary>
	public class AppFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// The application store that the target application belongs to.
		/// </summary>
		public AppFeedItemAppStore? AppStore { get; set; }
		/// <summary>
		/// The store-specific ID for the target application.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string AppId { get; set; }
		/// <summary>
		/// The visible text displayed when the link is rendered in an ad.
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string AppLinkText { get; set; }
		/// <summary>
		/// The destination URL of the in-app link.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 2076, inclusive, (trimmed).</span>
		/// </summary>
		public string AppUrl { get; set; }
		/// <summary>
		/// A list of possible final URLs after all cross domain redirects.
		/// </summary>
		public UrlList AppFinalUrls { get; set; }
		/// <summary>
		/// A list of possible final mobile URLs after all cross domain redirects.
		/// </summary>
		public UrlList AppFinalMobileUrls { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL. To clear this field, set its value to the empty
		/// string.
		/// </summary>
		public string AppTrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// </summary>
		public CustomParameters AppUrlCustomParameters { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AppStore = null;
			AppId = null;
			AppLinkText = null;
			AppUrl = null;
			AppFinalUrls = null;
			AppFinalMobileUrls = null;
			AppTrackingUrlTemplate = null;
			AppUrlCustomParameters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appStore")
				{
					AppStore = AppFeedItemAppStoreExtensions.Parse(xItem.Value);
				}
				else if (localName == "appId")
				{
					AppId = xItem.Value;
				}
				else if (localName == "appLinkText")
				{
					AppLinkText = xItem.Value;
				}
				else if (localName == "appUrl")
				{
					AppUrl = xItem.Value;
				}
				else if (localName == "appFinalUrls")
				{
					AppFinalUrls = new UrlList();
					AppFinalUrls.ReadFrom(xItem);
				}
				else if (localName == "appFinalMobileUrls")
				{
					AppFinalMobileUrls = new UrlList();
					AppFinalMobileUrls.ReadFrom(xItem);
				}
				else if (localName == "appTrackingUrlTemplate")
				{
					AppTrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "appUrlCustomParameters")
				{
					AppUrlCustomParameters = new CustomParameters();
					AppUrlCustomParameters.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AppFeedItem");
			XElement xItem = null;
			if (AppStore != null)
			{
				xItem = new XElement(XName.Get("appStore", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppStore.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AppId != null)
			{
				xItem = new XElement(XName.Get("appId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppId);
				xE.Add(xItem);
			}
			if (AppLinkText != null)
			{
				xItem = new XElement(XName.Get("appLinkText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppLinkText);
				xE.Add(xItem);
			}
			if (AppUrl != null)
			{
				xItem = new XElement(XName.Get("appUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppUrl);
				xE.Add(xItem);
			}
			if (AppFinalUrls != null)
			{
				xItem = new XElement(XName.Get("appFinalUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				AppFinalUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AppFinalMobileUrls != null)
			{
				xItem = new XElement(XName.Get("appFinalMobileUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				AppFinalMobileUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AppTrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("appTrackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppTrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (AppUrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("appUrlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				AppUrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The available application stores for app extensions.
	/// </summary>
	public enum AppFeedItemAppStore
	{
		AppleItunes,
		GooglePlay,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Base class for exceptions.
	/// </summary>
	public class ApplicationException : ISoapable
	{
		/// <summary>
		/// Error message.
		/// </summary>
		public string Message { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of ApplicationException.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ApplicationExceptionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Message = null;
			ApplicationExceptionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "message")
				{
					Message = xItem.Value;
				}
				else if (localName == "ApplicationException.Type")
				{
					ApplicationExceptionType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Message != null)
			{
				xItem = new XElement(XName.Get("message", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Message);
				xE.Add(xItem);
			}
			if (ApplicationExceptionType != null)
			{
				xItem = new XElement(XName.Get("ApplicationException.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ApplicationExceptionType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a criterion for targeting paid apps.
	///
	/// <p>Possible IDs: {@code 30} ({@code APP_PAYMENT_MODEL_PAID}).</p>
	/// <p>A criterion of this type can only be created using an ID. A criterion of this type is only targetable.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class AppPaymentModel : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "AppPaymentModelType".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public AppPaymentModelAppPaymentModelType? AppPaymentModelType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AppPaymentModelType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appPaymentModelType")
				{
					AppPaymentModelType = AppPaymentModelAppPaymentModelTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AppPaymentModel");
			XElement xItem = null;
			if (AppPaymentModelType != null)
			{
				xItem = new XElement(XName.Get("appPaymentModelType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppPaymentModelType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The possible types of App Payment Model.
	/// </summary>
	public enum AppPaymentModelAppPaymentModelType
	{
		/// <summary>
		/// Represents paid-for apps.
		/// </summary>
		AppPaymentModelPaid,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Errors returned when App Postback Url is invalid.
	/// </summary>
	public class AppPostbackUrlError : ApiError, ISoapable
	{
		public AppPostbackUrlErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AppPostbackUrlErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AppPostbackUrlError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum AppPostbackUrlErrorReason
	{
		/// <summary>
		/// Invalid Url format.
		/// </summary>
		InvalidUrlFormat,
		/// <summary>
		/// Invalid domain.
		/// </summary>
		InvalidDomain,
		/// <summary>
		/// Some of the required macros were not found.
		/// </summary>
		RequiredMacroNotFound
	}
	/// <summary>
	/// Approval status for the criterion.
	/// Note: there are more states involved but we only expose two to users.
	/// </summary>
	public enum ApprovalStatus
	{
		/// <summary>
		/// Criterion with no reportable policy problems.
		/// </summary>
		Approved,
		/// <summary>
		/// Criterion that is yet to be reviewed.
		/// </summary>
		PendingReview,
		/// <summary>
		/// Criterion that is under review.
		/// </summary>
		UnderReview,
		/// <summary>
		/// Criterion disapproved due to policy violation.
		/// </summary>
		Disapproved
	}
	/// <summary>
	/// A URL for deep linking into an app for the given operating system.
	/// </summary>
	public class AppUrl : ISoapable
	{
		/// <summary>
		/// The app deep link url. E.g. "android-app://com.my.App"
		/// </summary>
		public string Url { get; set; }
		/// <summary>
		/// The operating system targeted by this url.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public AppUrlOsType? OsType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Url = null;
			OsType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "url")
				{
					Url = xItem.Value;
				}
				else if (localName == "osType")
				{
					OsType = AppUrlOsTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Url != null)
			{
				xItem = new XElement(XName.Get("url", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Url);
				xE.Add(xItem);
			}
			if (OsType != null)
			{
				xItem = new XElement(XName.Get("osType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OsType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Wrapper object for a list of AppUrls. The list can be cleared if a request contains
	/// an AppUrlList with an empty urls list.
	/// </summary>
	public class AppUrlList : ISoapable
	{
		/// <summary>
		/// List of URLs. On SET operation, empty list indicates to clear the list.
		/// <span class="constraint CollectionSize">The maximum size of this collection is 10.</span>
		/// </summary>
		public List<AppUrl> AppUrls { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AppUrls = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appUrls")
				{
					if (AppUrls == null) AppUrls = new List<AppUrl>();
					var appUrlsItem = new AppUrl();
					appUrlsItem.ReadFrom(xItem);
					AppUrls.Add(appUrlsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AppUrls != null)
			{
				foreach (var appUrlsItem in AppUrls)
				{
					xItem = new XElement(XName.Get("appUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
					appUrlsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The possible os types for an AppUrl
	/// </summary>
	public enum AppUrlOsType
	{
		/// <summary>
		/// The Apple IOS operating system,
		/// </summary>
		OsTypeIos,
		/// <summary>
		/// The Android operating system.
		/// </summary>
		OsTypeAndroid,
		Unknown
	}
	/// <summary>
	/// {@link Attribute}s encompass the core information about a particular {@link TargetingIdea}. Some
	/// attributes are for {@code KEYWORD} {@link IdeaType}s, some are for {@code PLACEMENT}
	/// {@link IdeaType}s, and some are for both. Ultimately, an {@link Attribute} instance simply wraps
	/// an actual value of interest. For example, {@link KeywordAttribute} wraps the keyword itself,
	/// while a {@link BooleanAttribute} simply wraps a boolean describing some information about the
	/// keyword idea.
	/// </summary>
	public abstract class Attribute : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of Attribute.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string AttributeType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AttributeType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "Attribute.Type")
				{
					AttributeType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AttributeType != null)
			{
				xItem = new XElement(XName.Get("Attribute.Type", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(AttributeType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a mapping between a feed attribute and a placeholder field.
	///
	/// <p>For a list of feed placeholders, see
	/// <a href="/adwords/api/docs/appendix/placeholders">
	/// https://developers.google.com/adwords/api/docs/appendix/placeholders
	/// </a></p>
	/// </summary>
	public class AttributeFieldMapping : ISoapable
	{
		/// <summary>
		/// The feed attribute that this mapping references.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedAttributeId { get; set; }
		/// <summary>
		/// The constant placeholder field that this mapping references.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? FieldId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedAttributeId = null;
			FieldId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedAttributeId")
				{
					FeedAttributeId = long.Parse(xItem.Value);
				}
				else if (localName == "fieldId")
				{
					FieldId = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedAttributeId != null)
			{
				xItem = new XElement(XName.Get("feedAttributeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedAttributeId.Value.ToString());
				xE.Add(xItem);
			}
			if (FieldId != null)
			{
				xItem = new XElement(XName.Get("fieldId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents the type of {@link Attribute}.
	/// <p><b>{@link IdeaType} KEYWORD supports the following {@link AttributeType}s:</b><br/>
	/// <ul><li>{@link #AVERAGE_CPC}</li>
	/// <li>{@link #CATEGORY_PRODUCTS_AND_SERVICES}</li>
	/// <li>{@link #COMPETITION}</li>
	/// <li>{@link #EXTRACTED_FROM_WEBPAGE}</li>
	/// <li>{@link #IDEA_TYPE}</li>
	/// <li>{@link #KEYWORD_TEXT}</li>
	/// <li>{@link #SEARCH_VOLUME}</li>
	/// <li>{@link #TARGETED_MONTHLY_SEARCHES}</li>
	/// </ul>
	/// </summary>
	public enum AttributeType
	{
		/// <summary>
		/// Value substituted in when the actual value is not available in the Web API
		/// version being used.  (Please upgrade to the latest published WSDL.)
		/// <p>This element is not supported directly by any {@link IdeaType}.
		/// </summary>
		Unknown,
		/// <summary>
		/// Represents a category ID in the "Products and Services" taxonomy.
		///
		/// <p>Resulting attribute is {@link IntegerSetAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		CategoryProductsAndServices,
		/// <summary>
		/// Represents the relative amount of competition associated with the given keyword idea,
		/// relative to other keywords. This value will be between 0 and 1 (inclusive).
		///
		/// <p>Resulting attribute is {@link DoubleAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		Competition,
		/// <summary>
		/// Represents the webpage from which this keyword idea was extracted (if applicable.)
		///
		/// <p>Resulting attribute is {@link WebpageDescriptorAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		ExtractedFromWebpage,
		/// <summary>
		/// Represents the type of the given idea.
		///
		/// <p>Resulting attribute is {@link IdeaTypeAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		IdeaType,
		/// <summary>
		/// Represents the keyword text for the given keyword idea.
		///
		/// <p>Resulting attribute is {@link StringAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		KeywordText,
		/// <summary>
		/// Represents either the (approximate) number of searches for the given keyword idea on google.com
		/// or google.com and partners, depending on the user's targeting.
		///
		/// <p>Resulting attribute is {@link LongAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		SearchVolume,
		/// <summary>
		/// Represents the average cost per click historically paid for the keyword.
		///
		/// <p>Resulting attribute is {@link MoneyAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		AverageCpc,
		/// <summary>
		/// Represents the (approximated) number of searches on this keyword idea (as available for the
		/// past twelve months), targeted to the specified geographies.
		///
		/// <p>Resulting attribute is {@link MonthlySearchVolumeAttribute}.
		/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
		/// </summary>
		TargetedMonthlySearches
	}
	/// <summary>
	/// Attribution models describing how to distribute credit for a particular
	/// conversion across potentially many prior interactions. See
	/// https://support.google.com/adwords/answer/6259715 for more information about
	/// attribution modeling in AdWords.
	/// </summary>
	public enum AttributionModelType
	{
		Unknown,
		/// <summary>
		/// Attributes all credit for a conversion to its last click.
		/// </summary>
		LastClick,
		/// <summary>
		/// Attributes all credit for a conversion to its first click.
		/// </summary>
		FirstClick,
		/// <summary>
		/// Attributes credit for a conversion equally across all of its clicks.
		/// </summary>
		Linear,
		/// <summary>
		/// Attributes exponentially more credit for a conversion to its more recent clicks
		/// (half-life is 1 week).
		/// </summary>
		TimeDecay,
		/// <summary>
		/// Attributes 40% of the credit for a conversion to its first and last clicks.
		/// Remaining 20% is evenly distributed across all other clicks.
		/// </summary>
		UShaped,
		/// <summary>
		/// Flexible model that uses machine learning to determine the appropriate
		/// distribution of credit among clicks.
		/// </summary>
		DataDriven
	}
	/// <summary>
	/// Encapsulates an Audio media identified by a MediaId.
	/// </summary>
	public class Audio : Media, ISoapable
	{
		/// <summary>
		/// The duration of the associated audio, in milliseconds.
		/// <span class="constraint Selectable">This field can be selected using the value "DurationMillis".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? DurationMillis { get; set; }
		/// <summary>
		/// The streaming URL of the audio.
		/// <span class="constraint Selectable">This field can be selected using the value "StreamingUrl".</span>
		/// </summary>
		public string StreamingUrl { get; set; }
		/// <summary>
		/// Indicates whether the audio is ready to play on the web.
		/// <span class="constraint Selectable">This field can be selected using the value "ReadyToPlayOnTheWeb".</span>
		/// </summary>
		public bool? ReadyToPlayOnTheWeb { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DurationMillis = null;
			StreamingUrl = null;
			ReadyToPlayOnTheWeb = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "durationMillis")
				{
					DurationMillis = long.Parse(xItem.Value);
				}
				else if (localName == "streamingUrl")
				{
					StreamingUrl = xItem.Value;
				}
				else if (localName == "readyToPlayOnTheWeb")
				{
					ReadyToPlayOnTheWeb = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Audio");
			XElement xItem = null;
			if (DurationMillis != null)
			{
				xItem = new XElement(XName.Get("durationMillis", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DurationMillis.Value.ToString());
				xE.Add(xItem);
			}
			if (StreamingUrl != null)
			{
				xItem = new XElement(XName.Get("streamingUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StreamingUrl);
				xE.Add(xItem);
			}
			if (ReadyToPlayOnTheWeb != null)
			{
				xItem = new XElement(XName.Get("readyToPlayOnTheWeb", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReadyToPlayOnTheWeb.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error class for errors associated with parsing audio data.
	/// </summary>
	public class AudioError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AudioErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AudioErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AudioError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum AudioErrorReason
	{
		InvalidAudio,
		ProblemReadingAudioFile,
		ErrorStoringAudio,
		FileTooLarge,
		UnsupportedAudio,
		ErrorGeneratingStreamingUrl
	}
	/// <summary>
	/// Errors returned when Authentication failed.
	/// </summary>
	public class AuthenticationError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AuthenticationErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AuthenticationErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AuthenticationError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The single reason for the authentication failure.
	/// </summary>
	public enum AuthenticationErrorReason
	{
		/// <summary>
		/// Authentication of the request failed.
		/// </summary>
		AuthenticationFailed,
		/// <summary>
		/// Client Customer Id is required if CustomerIdMode is set to CLIENT_EXTERNAL_CUSTOMER_ID.
		/// Starting version V201409 ClientCustomerId will be required for all requests except
		/// for {@link CustomerService#get}
		/// </summary>
		ClientCustomerIdIsRequired,
		/// <summary>
		/// Client Email is required if CustomerIdMode is set to CLIENT_EXTERNAL_EMAIL_FIELD.
		/// </summary>
		ClientEmailRequired,
		/// <summary>
		/// Client customer Id is not a number.
		/// </summary>
		ClientCustomerIdInvalid,
		/// <summary>
		/// Client customer Id is not a number.
		/// </summary>
		ClientEmailInvalid,
		/// <summary>
		/// Client email is not a valid customer email.
		/// </summary>
		ClientEmailFailedToAuthenticate,
		/// <summary>
		/// No customer found for the customer id provided in the header.
		/// </summary>
		CustomerNotFound,
		/// <summary>
		/// Client's Google Account is deleted.
		/// </summary>
		GoogleAccountDeleted,
		/// <summary>
		/// Google account login token in the cookie is invalid.
		/// </summary>
		GoogleAccountCookieInvalid,
		/// <summary>
		/// problem occurred during Google account authentication.
		/// </summary>
		FailedToAuthenticateGoogleAccount,
		/// <summary>
		/// The user in the google account login token does not match the UserId in the cookie.
		/// </summary>
		GoogleAccountUserAndAdsUserMismatch,
		/// <summary>
		/// Login cookie is required for authentication.
		/// </summary>
		LoginCookieRequired,
		/// <summary>
		/// User in the cookie is not a valid Ads user.
		/// </summary>
		NotAdsUser,
		/// <summary>
		/// Oauth token in the header is not valid.
		/// </summary>
		OauthTokenInvalid,
		/// <summary>
		/// Oauth token in the header has expired.
		/// </summary>
		OauthTokenExpired,
		/// <summary>
		/// Oauth token in the header has been disabled.
		/// </summary>
		OauthTokenDisabled,
		/// <summary>
		/// Oauth token in the header has been revoked.
		/// </summary>
		OauthTokenRevoked,
		/// <summary>
		/// Oauth token HTTP header is malformed.
		/// </summary>
		OauthTokenHeaderInvalid,
		/// <summary>
		/// Login cookie is not valid.
		/// </summary>
		LoginCookieInvalid,
		/// <summary>
		/// Failed to decrypt the login cookie.
		/// </summary>
		FailedToRetrieveLoginCookie,
		/// <summary>
		/// User Id in the header is not a valid id.
		/// </summary>
		UserIdInvalid
	}
	/// <summary>
	/// Errors encountered when trying to authorize a user.
	/// </summary>
	public class AuthorizationError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public AuthorizationErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = AuthorizationErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "AuthorizationError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the database error.
	/// </summary>
	public enum AuthorizationErrorReason
	{
		/// <summary>
		/// Could not complete authorization due to an internal problem.
		/// </summary>
		UnableToAuthorize,
		/// <summary>
		/// Customer has no AdWords account.
		/// </summary>
		NoAdwordsAccountForCustomer,
		/// <summary>
		/// User doesn't have permission to access customer.
		/// </summary>
		UserPermissionDenied,
		/// <summary>
		/// Effective user doesn't have permission to access this customer.
		/// </summary>
		EffectiveUserPermissionDenied,
		/// <summary>
		/// User has read-only permission cannot mutate.
		/// </summary>
		UserHasReadonlyPermission,
		/// <summary>
		/// No customer found.
		/// </summary>
		NoCustomerFound,
		/// <summary>
		/// Developer doesn't have permission to access service.
		/// </summary>
		ServiceAccessDenied
	}
	/// <summary>
	/// User list targeting as a collection of conversion types.
	/// </summary>
	public class BasicUserList : UserList, ISoapable
	{
		/// <summary>
		/// Conversion types associated with this user list.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionTypes".</span>
		/// </summary>
		public List<UserListConversionType> ConversionTypes { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ConversionTypes = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "conversionTypes")
				{
					if (ConversionTypes == null) ConversionTypes = new List<UserListConversionType>();
					var conversionTypesItem = new UserListConversionType();
					conversionTypesItem.ReadFrom(xItem);
					ConversionTypes.Add(conversionTypesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "BasicUserList");
			XElement xItem = null;
			if (ConversionTypes != null)
			{
				foreach (var conversionTypesItem in ConversionTypes)
				{
					xItem = new XElement(XName.Get("conversionTypes", "https://adwords.google.com/api/adwords/rm/v201609"));
					conversionTypesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a large mutation job.
	/// </summary>
	public class BatchJob : ISoapable
	{
		/// <summary>
		/// ID of this job.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Status of this job.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public BatchJobStatus? Status { get; set; }
		/// <summary>
		/// Statistics related to the progress of this job.
		/// <span class="constraint Selectable">This field can be selected using the value "ProgressStats".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ProgressStats ProgressStats { get; set; }
		/// <summary>
		/// The URL to use to upload operations for this job. The URL is unique to this
		/// job, and will expire 1 week after the job is created. This field is only
		/// returned when calling {@link BatchJobService#mutate} with an {@code ADD}
		/// operation. To upload a file, for versions equal to or older than V201509,
		/// make a PUT request to the uploadUrl with the Content-Type header equal to
		/// "application/xml". The body of the request should contain the operations of
		/// the BatchJob in XML format. For versions newer than V201509, make a POST
		/// request to the uploadUrl and retrieve the "Location" header from the response
		/// as the url to upload operations. For the set of operations that BatchJobService
		/// supports, see
		/// {@link https://adwords.google.com/api/adwords/cm/xsd/v201509/BatchJobOps.xsd}.
		/// For more information about how to upload files, see
		/// {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload}.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public TemporaryUrl UploadUrl { get; set; }
		/// <summary>
		/// The URL to use to download results for this job. Results will be available
		/// for 30 days after job completion. This field is only returned once
		/// {@link #status} is either {@code DONE} or {@code CANCELED}.
		/// <span class="constraint Selectable">This field can be selected using the value "DownloadUrl".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public TemporaryUrl DownloadUrl { get; set; }
		/// <summary>
		/// A list of any errors that occurred during processing, not related to specific
		/// input operations, e.g. input file corruption errors.
		/// <span class="constraint Selectable">This field can be selected using the value "ProcessingErrors".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<BatchJobProcessingError> ProcessingErrors { get; set; }
		/// <summary>
		/// Disk quota balance of the batch job's customer in KB, which is the limit of batch job disk
		/// usage for the customer. The field is only returned when calling {@link BatchJobService#mutate}
		/// with an {@code ADD} operation.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? DiskUsageQuotaBalance { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Status = null;
			ProgressStats = null;
			UploadUrl = null;
			DownloadUrl = null;
			ProcessingErrors = null;
			DiskUsageQuotaBalance = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = BatchJobStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "progressStats")
				{
					ProgressStats = new ProgressStats();
					ProgressStats.ReadFrom(xItem);
				}
				else if (localName == "uploadUrl")
				{
					UploadUrl = new TemporaryUrl();
					UploadUrl.ReadFrom(xItem);
				}
				else if (localName == "downloadUrl")
				{
					DownloadUrl = new TemporaryUrl();
					DownloadUrl.ReadFrom(xItem);
				}
				else if (localName == "processingErrors")
				{
					if (ProcessingErrors == null) ProcessingErrors = new List<BatchJobProcessingError>();
					var processingErrorsItem = new BatchJobProcessingError();
					processingErrorsItem.ReadFrom(xItem);
					ProcessingErrors.Add(processingErrorsItem);
				}
				else if (localName == "diskUsageQuotaBalance")
				{
					DiskUsageQuotaBalance = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ProgressStats != null)
			{
				xItem = new XElement(XName.Get("progressStats", "https://adwords.google.com/api/adwords/cm/v201609"));
				ProgressStats.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (UploadUrl != null)
			{
				xItem = new XElement(XName.Get("uploadUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				UploadUrl.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (DownloadUrl != null)
			{
				xItem = new XElement(XName.Get("downloadUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				DownloadUrl.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ProcessingErrors != null)
			{
				foreach (var processingErrorsItem in ProcessingErrors)
				{
					xItem = new XElement(XName.Get("processingErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					processingErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (DiskUsageQuotaBalance != null)
			{
				xItem = new XElement(XName.Get("diskUsageQuotaBalance", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DiskUsageQuotaBalance.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An error related to a {@code BatchJob}.
	/// </summary>
	public class BatchJobError : ApiError, ISoapable
	{
		public BatchJobErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BatchJobErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BatchJobError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the error.
	/// </summary>
	public enum BatchJobErrorReason
	{
		Unknown,
		/// <summary>
		/// The user exceeded allowed disk quota for in-flight jobs.
		/// </summary>
		DiskQuotaExceeded,
		/// <summary>
		/// An internal error resulted in a failure to create the job.
		/// </summary>
		FailedToCreateJob,
		/// <summary>
		/// The requested state change was invalid.
		/// </summary>
		InvalidStateChange
	}
	/// <summary>
	/// An operation on a {@code BatchJob}.
	///
	/// <p class="note"><b>Note:</b> Only the <code>ADD</code> and <code>SET</code>
	/// operators are supported.
	/// </summary>
	public class BatchJobOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public BatchJob Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new BatchJob();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BatchJobOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A page of {@code BatchJob}s.
	/// </summary>
	public class BatchJobPage : Page, ISoapable
	{
		public List<BatchJob> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<BatchJob>();
					var entriesItem = new BatchJob();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BatchJobPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An error related to processing a {@code BatchJob}.
	/// </summary>
	public class BatchJobProcessingError : ApiError, ISoapable
	{
		public BatchJobProcessingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BatchJobProcessingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BatchJobProcessingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the error.
	/// </summary>
	public enum BatchJobProcessingErrorReason
	{
		Unknown,
		/// <summary>
		/// The input file was corrupted.
		/// </summary>
		InputFileCorruption,
		/// <summary>
		/// An internal API error occurred while processing the batch.
		/// </summary>
		InternalError,
		/// <summary>
		/// Unable to complete a batch in the allotted time.
		/// </summary>
		DeadlineExceeded,
		/// <summary>
		/// The input file had a format error.
		/// </summary>
		FileFormatError
	}
	/// <summary>
	/// A container for return values from the BatchJobService.
	/// </summary>
	public class BatchJobReturnValue : ListReturnValue, ISoapable
	{
		public List<BatchJob> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<BatchJob>();
					var valueItem = new BatchJob();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BatchJobReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The current status of a BatchJob.
	/// </summary>
	public enum BatchJobStatus
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Initial state of a BatchJob. While a job has this status, it is awaiting a file
		/// upload to Google Cloud Storage.
		/// </summary>
		AwaitingFile,
		/// <summary>
		/// Indicates that a job has an associated file and is being executed.
		/// </summary>
		Active,
		/// <summary>
		/// Indicates that a job is being canceled. It will remain in this status until any
		/// partial results are written, and then will be marked CANCELED. Send this status
		/// in a SET operation to cancel a job that is in progress. This is the only status
		/// that can be explicitly set.
		/// </summary>
		Canceling,
		/// <summary>
		/// Indicates that a job has been canceled. It will be garbage-collected 30 days
		/// after cancellation.
		/// </summary>
		Canceled,
		/// <summary>
		/// Indicates that a job has completed. It will be garbage-collected 30 days after
		/// completion.
		/// </summary>
		Done
	}
	/// <summary>
	/// Represents a bid of a certain amount.
	/// </summary>
	public class Bid : ISoapable
	{
		/// <summary>
		/// Bid amount.
		/// </summary>
		public Money Amount { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Amount = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "amount")
				{
					Amount = new Money();
					Amount.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Amount != null)
			{
				xItem = new XElement(XName.Get("amount", "https://adwords.google.com/api/adwords/cm/v201609"));
				Amount.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A biddable (positive) criterion in an adgroup.
	/// </summary>
	public class BiddableAdGroupCriterion : AdGroupCriterion, ISoapable
	{
		/// <summary>
		/// Current user-set state of criterion.
		/// UserStatus may not be set to {@code REMOVED} and is not supported for ProductPartition
		/// criterion. On add, defaults to {@code ENABLED} if unspecified.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public UserStatus? UserStatus { get; set; }
		/// <summary>
		/// Serving status.
		/// <span class="constraint Selectable">This field can be selected using the value "SystemServingStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SystemServingStatus? SystemServingStatus { get; set; }
		/// <summary>
		/// Approval status.
		/// <span class="constraint Selectable">This field can be selected using the value "ApprovalStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ApprovalStatus? ApprovalStatus { get; set; }
		/// <summary>
		/// List of disapproval reasons.
		/// <span class="constraint Selectable">This field can be selected using the value "DisapprovalReasons".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> DisapprovalReasons { get; set; }
		/// <summary>
		/// Destination URL override when Ad is triggered by this criterion.
		///
		/// <p>Some sample valid URLs are: "http://www.website.com",
		/// "http://www.domain.com/somepath".
		/// <p>Set to the empty string ("") to clear the destination URL.
		/// <span class="constraint Selectable">This field can be selected using the value "DestinationUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string DestinationUrl { get; set; }
		/// <summary>
		/// First page Cpc for this criterion.
		/// <span class="constraint Selectable">This field can be selected using the value "FirstPageCpc".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Bid FirstPageCpc { get; set; }
		/// <summary>
		/// An estimate of the cpc bid needed for your ad to appear above the
		/// first page of Google search results when a query matches the keywords exactly.
		/// Note that meeting this estimate is not a guarantee of ad position,
		/// which may depend on other factors.
		/// <span class="constraint Selectable">This field can be selected using the value "TopOfPageCpc".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Bid TopOfPageCpc { get; set; }
		/// <summary>
		/// An estimate of the cpc bid needed for your ad to regularly appear in the top position above
		/// the search results on google.com when a query matches the keywords exactly.  Note that meeting
		/// this estimate is not a guarantee of ad position, which may depend on other factors.
		/// <span class="constraint Selectable">This field can be selected using the value "FirstPositionCpc".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Bid FirstPositionCpc { get; set; }
		/// <summary>
		/// Contains quality information about the criterion.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public QualityInfo QualityInfo { get; set; }
		/// <summary>
		/// Bidding configuration for this ad group criterion. To set the bids on the ad groups
		/// use {@link BiddingStrategyConfiguration#bids}. Multiple bids can be set on
		/// ad group criterion at the same time. Only the bids that apply to the campaign's bidding
		/// strategy {@linkplain Campaign#biddingStrategyConfiguration bidding strategy}
		/// will be used.
		/// </summary>
		public BiddingStrategyConfiguration BiddingStrategyConfiguration { get; set; }
		/// <summary>
		/// Bid modifier of the criterion which is used when the criterion is not in an absolute bidding
		/// dimension.
		/// <span class="constraint Selectable">This field can be selected using the value "BidModifier".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public double? BidModifier { get; set; }
		/// <summary>
		/// A list of possible final URLs after all cross domain redirects.
		/// <span class="constraint Selectable">This field can be selected using the value "FinalUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public UrlList FinalUrls { get; set; }
		/// <summary>
		/// A list of possible final mobile URLs after all cross domain redirects.
		/// <span class="constraint Selectable">This field can be selected using the value "FinalMobileUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public UrlList FinalMobileUrls { get; set; }
		/// <summary>
		/// A list of final app URLs that will be used on mobile if the user has the specific app
		/// installed.
		/// <span class="constraint Selectable">This field can be selected using the value "FinalAppUrls".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AppUrlList FinalAppUrls { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL.
		///
		/// <p>On update, empty string ("") indicates to clear the field.
		/// <span class="constraint Selectable">This field can be selected using the value "TrackingUrlTemplate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// <span class="constraint Selectable">This field can be selected using the value "UrlCustomParameters".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CustomParameters UrlCustomParameters { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			UserStatus = null;
			SystemServingStatus = null;
			ApprovalStatus = null;
			DisapprovalReasons = null;
			DestinationUrl = null;
			FirstPageCpc = null;
			TopOfPageCpc = null;
			FirstPositionCpc = null;
			QualityInfo = null;
			BiddingStrategyConfiguration = null;
			BidModifier = null;
			FinalUrls = null;
			FinalMobileUrls = null;
			FinalAppUrls = null;
			TrackingUrlTemplate = null;
			UrlCustomParameters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userStatus")
				{
					UserStatus = UserStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "systemServingStatus")
				{
					SystemServingStatus = SystemServingStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "approvalStatus")
				{
					ApprovalStatus = ApprovalStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "disapprovalReasons")
				{
					if (DisapprovalReasons == null) DisapprovalReasons = new List<string>();
					DisapprovalReasons.Add(xItem.Value);
				}
				else if (localName == "destinationUrl")
				{
					DestinationUrl = xItem.Value;
				}
				else if (localName == "firstPageCpc")
				{
					FirstPageCpc = new Bid();
					FirstPageCpc.ReadFrom(xItem);
				}
				else if (localName == "topOfPageCpc")
				{
					TopOfPageCpc = new Bid();
					TopOfPageCpc.ReadFrom(xItem);
				}
				else if (localName == "firstPositionCpc")
				{
					FirstPositionCpc = new Bid();
					FirstPositionCpc.ReadFrom(xItem);
				}
				else if (localName == "qualityInfo")
				{
					QualityInfo = new QualityInfo();
					QualityInfo.ReadFrom(xItem);
				}
				else if (localName == "biddingStrategyConfiguration")
				{
					BiddingStrategyConfiguration = new BiddingStrategyConfiguration();
					BiddingStrategyConfiguration.ReadFrom(xItem);
				}
				else if (localName == "bidModifier")
				{
					BidModifier = double.Parse(xItem.Value);
				}
				else if (localName == "finalUrls")
				{
					FinalUrls = new UrlList();
					FinalUrls.ReadFrom(xItem);
				}
				else if (localName == "finalMobileUrls")
				{
					FinalMobileUrls = new UrlList();
					FinalMobileUrls.ReadFrom(xItem);
				}
				else if (localName == "finalAppUrls")
				{
					FinalAppUrls = new AppUrlList();
					FinalAppUrls.ReadFrom(xItem);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "urlCustomParameters")
				{
					UrlCustomParameters = new CustomParameters();
					UrlCustomParameters.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddableAdGroupCriterion");
			XElement xItem = null;
			if (UserStatus != null)
			{
				xItem = new XElement(XName.Get("userStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SystemServingStatus != null)
			{
				xItem = new XElement(XName.Get("systemServingStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SystemServingStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ApprovalStatus != null)
			{
				xItem = new XElement(XName.Get("approvalStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ApprovalStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DisapprovalReasons != null)
			{
				foreach (var disapprovalReasonsItem in DisapprovalReasons)
				{
					xItem = new XElement(XName.Get("disapprovalReasons", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(disapprovalReasonsItem);
					xE.Add(xItem);
				}
			}
			if (DestinationUrl != null)
			{
				xItem = new XElement(XName.Get("destinationUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DestinationUrl);
				xE.Add(xItem);
			}
			if (FirstPageCpc != null)
			{
				xItem = new XElement(XName.Get("firstPageCpc", "https://adwords.google.com/api/adwords/cm/v201609"));
				FirstPageCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TopOfPageCpc != null)
			{
				xItem = new XElement(XName.Get("topOfPageCpc", "https://adwords.google.com/api/adwords/cm/v201609"));
				TopOfPageCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (FirstPositionCpc != null)
			{
				xItem = new XElement(XName.Get("firstPositionCpc", "https://adwords.google.com/api/adwords/cm/v201609"));
				FirstPositionCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (QualityInfo != null)
			{
				xItem = new XElement(XName.Get("qualityInfo", "https://adwords.google.com/api/adwords/cm/v201609"));
				QualityInfo.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BiddingStrategyConfiguration != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyConfiguration", "https://adwords.google.com/api/adwords/cm/v201609"));
				BiddingStrategyConfiguration.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidModifier != null)
			{
				xItem = new XElement(XName.Get("bidModifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifier.Value.ToString());
				xE.Add(xItem);
			}
			if (FinalUrls != null)
			{
				xItem = new XElement(XName.Get("finalUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				FinalUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (FinalMobileUrls != null)
			{
				xItem = new XElement(XName.Get("finalMobileUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				FinalMobileUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (FinalAppUrls != null)
			{
				xItem = new XElement(XName.Get("finalAppUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				FinalAppUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (UrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("urlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				UrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents error codes for bidding strategy entities.
	/// </summary>
	public class BiddingErrors : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public BiddingErrorsReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BiddingErrorsReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddingErrors");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum BiddingErrorsReason
	{
		/// <summary>
		/// Cannot transition to new bidding strategy.
		/// </summary>
		BiddingStrategyTransitionNotAllowed,
		/// <summary>
		/// Bidding strategy cannot be overridden by current ad group bidding strategy.
		/// </summary>
		BiddingStrategyNotCompatibleWithAdgroupOverrides,
		/// <summary>
		/// Bidding strategy cannot be overridden by current criteria bidding strategy.
		/// </summary>
		BiddingStrategyNotCompatibleWithAdgroupCriteriaOverrides,
		/// <summary>
		/// Cannot override campaign bidding strategy.
		/// </summary>
		CampaignBiddingStrategyCannotBeOverridden,
		/// <summary>
		/// Cannot override ad group bidding strategy.
		/// </summary>
		AdgroupBiddingStrategyCannotBeOverridden,
		/// <summary>
		/// Cannot attach bidding strategy to campaign.
		/// </summary>
		CannotAttachBiddingStrategyToCampaign,
		/// <summary>
		/// Cannot attach bidding strategy to ad group.
		/// </summary>
		CannotAttachBiddingStrategyToAdgroup,
		/// <summary>
		/// Cannot attach bidding strategy to criteria.
		/// </summary>
		CannotAttachBiddingStrategyToAdgroupCriteria,
		/// <summary>
		/// Bidding strategy is not supported or cannot be used as anonymous.
		/// </summary>
		InvalidAnonymousBiddingStrategyType,
		/// <summary>
		/// No bids may be set. The bid list must be null or empty.
		/// </summary>
		BidsNotAlllowed,
		/// <summary>
		/// The bid list contains two or more bids of the same type.
		/// </summary>
		DuplicateBids,
		/// <summary>
		/// The bidding scheme does not match the bidding strategy type.
		/// </summary>
		InvalidBiddingScheme,
		/// <summary>
		/// The type does not match the named strategy's type.
		/// </summary>
		InvalidBiddingStrategyType,
		/// <summary>
		/// The bidding strategy type is missing.
		/// </summary>
		MissingBiddingStrategyType,
		/// <summary>
		/// The bid list contains a null entry.
		/// </summary>
		NullBid,
		/// <summary>
		/// The bid is invalid.
		/// </summary>
		InvalidBid,
		/// <summary>
		/// Bidding strategy is not available for the account type.
		/// </summary>
		BiddingStrategyNotAvailableForAccountType,
		/// <summary>
		/// Conversion tracking is not enabled for the campaign for VBB transition.
		/// </summary>
		ConversionTrackingNotEnabled,
		/// <summary>
		/// Not enough conversions tracked for VBB transitions.
		/// </summary>
		NotEnoughConversions,
		/// <summary>
		/// Campaign can not be created with given bidding strategy. It can be transitioned to the
		/// strategy, once eligible.
		/// </summary>
		CannotCreateCampaignWithBiddingStrategy,
		/// <summary>
		/// Cannot target content network only as ad group uses Page One Promoted bidding strategy.
		/// </summary>
		CannotTargetContentNetworkOnlyWithAdGroupLevelPopBiddingStrategy,
		/// <summary>
		/// Cannot target content network only as campaign uses Page One Promoted bidding strategy.
		/// </summary>
		CannotTargetContentNetworkOnlyWithCampaignLevelPopBiddingStrategy,
		/// <summary>
		/// Budget Optimizer and Target Spend bidding strategies are not supported for campaigns with
		/// AdSchedule targeting.
		/// </summary>
		BiddingStrategyNotSupportedWithAdSchedule,
		/// <summary>
		/// Pay per conversion is not available to all the customer, only few whitelisted customers
		/// can use this.
		/// </summary>
		PayPerConversionNotAvailableForCustomer,
		/// <summary>
		/// Pay per conversion is not allowed with Target CPA.
		/// </summary>
		PayPerConversionNotAllowedWithTargetCpa,
		/// <summary>
		/// Cannot set bidding strategy to Manual CPM for search network only campaigns.
		/// </summary>
		BiddingStrategyNotAllowedForSearchOnlyCampaigns,
		/// <summary>
		/// The bidding strategy is not supported for use in drafts or experiments.
		/// </summary>
		BiddingStrategyNotSupportedInDraftsOrExperiments,
		/// <summary>
		/// Bidding strategy type does not support product type ad group criterion.
		/// </summary>
		BiddingStrategyTypeDoesNotSupportProductTypeAdgroupCriterion,
		/// <summary>
		/// Bid amount is too small.
		/// </summary>
		BidTooSmall,
		/// <summary>
		/// Bid amount is too big.
		/// </summary>
		BidTooBig,
		/// <summary>
		/// Bid has too many fractional digit precision.
		/// </summary>
		BidTooManyFractionalDigits,
		Unknown
	}
	/// <summary>
	/// Base class for all bidding schemes.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public abstract class BiddingScheme : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of BiddingScheme.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string BiddingSchemeType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BiddingSchemeType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "BiddingScheme.Type")
				{
					BiddingSchemeType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BiddingSchemeType != null)
			{
				xItem = new XElement(XName.Get("BiddingScheme.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BiddingSchemeType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Encapsulates the information about bids and bidding strategies.
	///
	/// <p>Bidding Strategy can be set on campaigns, ad groups or ad group criteria.
	/// <p>A bidding strategy can be set using one of the following:
	/// <ul>
	/// <li>{@linkplain BiddingStrategyConfiguration#biddingScheme bidding scheme}</li>
	/// <li>{@linkplain BiddingStrategyConfiguration#biddingStrategyType bidding strategy type}</li>
	/// <li>{@linkplain BiddingStrategyConfiguration#biddingStrategyId bidding strategy ID} for
	/// flexible bid strategies.</li>
	/// </ul>
	/// <p>If the bidding strategy type is used, then schemes are created using default values.
	///
	/// <p>Bids can be set only on ad groups and ad group criteria. They cannot be set on campaigns.
	/// Multiple bids can be set at the same time. Only the bids that apply to the effective
	/// bidding strategy will be used. Effective bidding strategy is considered to be the directly
	/// attached strategy or inherited strategy from above level(s) when there is no directly attached
	/// strategy.
	///
	/// <p>For more information on flexible bidding, visit the
	/// <a href="https://support.google.com/adwords/answer/2979071">Help Center</a>.
	/// </summary>
	public class BiddingStrategyConfiguration : ISoapable
	{
		/// <summary>
		/// Id of the bidding strategy to be associated with the campaign, ad group or ad group criteria.
		/// A bidding strategy is created using the BiddingStrategyService ADD operation and is
		/// assigned a BiddingStrategyId. The BiddingStrategyId can be shared across campaigns,
		/// ad groups and ad group criteria.
		/// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
		/// </summary>
		public long? BiddingStrategyId { get; set; }
		/// <summary>
		/// Name of the bidding strategy. This is applicable only for flexible bidding strategies.
		/// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string BiddingStrategyName { get; set; }
		/// <summary>
		/// The type of the bidding strategy to be attached.
		///
		/// <p>For details on portfolio vs. standard availability, see the
		/// <a href="https://developers.google.com/adwords/api/docs/guides/bidding">bidding guide</a>.
		/// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, ENHANCED_CPC, TARGET_ROAS, TARGET_SPEND for campaign channel type SHOPPING.</span>
		/// <span class="constraint CampaignType">This field may only be set to the values: BUDGET_OPTIMIZER, CONVERSION_OPTIMIZER, MANUAL_CPC, MANUAL_CPM, TARGET_SPEND, ENHANCED_CPC, TARGET_CPA, TARGET_ROAS for campaign channel type DISPLAY.</span>
		/// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, CONVERSION_OPTIMIZER, TARGET_CPA for campaign channel type DISPLAY with campaign channel subtype DISPLAY_MOBILE_APP.</span>
		/// <span class="constraint CampaignType">This field may only be set to the values: BUDGET_OPTIMIZER, MANUAL_CPC, NONE, PAGE_ONE_PROMOTED, TARGET_CPA, TARGET_OUTRANK_SHARE, TARGET_ROAS, TARGET_SPEND for campaign channel subtype SEARCH_MOBILE_APP.</span>
		/// <span class="constraint CampaignType">This field may only be set to TARGET_CPA for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public BiddingStrategyType? BiddingStrategyType { get; set; }
		/// <summary>
		/// Indicates where the bidding strategy is associated i.e. campaign, ad group or
		/// ad group criterion.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BiddingStrategySource? BiddingStrategySource { get; set; }
		/// <summary>
		/// The bidding strategy metadata. Bidding strategy can be associated using the
		/// {@linkplain BiddingStrategyConfiguration#biddingStrategyType} or the bidding scheme.
		///
		/// <p>For details on portfolio vs. standard availability, see the
		/// <a href="https://developers.google.com/adwords/api/docs/guides/bidding">bidding guide</a>.
		/// </summary>
		public BiddingScheme BiddingScheme { get; set; }
		/// <summary>
		/// Specifies the bids. Bids can be set only on ad groups and ad group criteria.
		/// Bids cannot be set on campaign.
		///
		/// Default CPC and CPM bid values will be set if they are not provided during {@linkplain AdGroup}
		/// creation. Default CPC and CPM values are minimal billable amounts in local currencies.
		/// For example, for US Dollars CPC and CPM default values are $0.01 and $0.01, respectively.
		/// </summary>
		public List<Bids> Bids { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BiddingStrategyId = null;
			BiddingStrategyName = null;
			BiddingStrategyType = null;
			BiddingStrategySource = null;
			BiddingScheme = null;
			Bids = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "biddingStrategyId")
				{
					BiddingStrategyId = long.Parse(xItem.Value);
				}
				else if (localName == "biddingStrategyName")
				{
					BiddingStrategyName = xItem.Value;
				}
				else if (localName == "biddingStrategyType")
				{
					BiddingStrategyType = BiddingStrategyTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "biddingStrategySource")
				{
					BiddingStrategySource = BiddingStrategySourceExtensions.Parse(xItem.Value);
				}
				else if (localName == "biddingScheme")
				{
					BiddingScheme = InstanceCreator.CreateBiddingScheme(xItem);
					BiddingScheme.ReadFrom(xItem);
				}
				else if (localName == "bids")
				{
					if (Bids == null) Bids = new List<Bids>();
					var bidsItem = InstanceCreator.CreateBids(xItem);
					bidsItem.ReadFrom(xItem);
					Bids.Add(bidsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BiddingStrategyId != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BiddingStrategyId.Value.ToString());
				xE.Add(xItem);
			}
			if (BiddingStrategyName != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BiddingStrategyName);
				xE.Add(xItem);
			}
			if (BiddingStrategyType != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BiddingStrategyType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BiddingStrategySource != null)
			{
				xItem = new XElement(XName.Get("biddingStrategySource", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BiddingStrategySource.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BiddingScheme != null)
			{
				xItem = new XElement(XName.Get("biddingScheme", "https://adwords.google.com/api/adwords/cm/v201609"));
				BiddingScheme.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Bids != null)
			{
				foreach (var bidsItem in Bids)
				{
					xItem = new XElement(XName.Get("bids", "https://adwords.google.com/api/adwords/cm/v201609"));
					bidsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents error codes for bidding strategy entities.
	/// </summary>
	public class BiddingStrategyError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public BiddingStrategyErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BiddingStrategyErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddingStrategyError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum BiddingStrategyErrorReason
	{
		/// <summary>
		/// Each bidding strategy must have a unique name.
		/// </summary>
		DuplicateName,
		/// <summary>
		/// Bidding strategy type is immutable.
		/// </summary>
		CannotChangeBiddingStrategyType,
		/// <summary>
		/// Only bidding strategies not linked to campaigns, adgroups or adgroup criteria can be
		/// removed.
		/// </summary>
		CannotRemoveAssociatedStrategy,
		/// <summary>
		/// The specified bidding strategy is not supported.
		/// </summary>
		BiddingStrategyNotSupported,
		Unknown
	}
	/// <summary>
	/// Operations for adding/updating bidding strategies.
	/// </summary>
	public class BiddingStrategyOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public SharedBiddingStrategy Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new SharedBiddingStrategy();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddingStrategyOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of bidding strategies resulting from the filtering and paging
	/// of {@link BiddingStrategy#get} call.
	/// </summary>
	public class BiddingStrategyPage : Page, ISoapable
	{
		public List<SharedBiddingStrategy> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<SharedBiddingStrategy>();
					var entriesItem = new SharedBiddingStrategy();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddingStrategyPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link BiddingStrategyService#mutate} call.
	/// </summary>
	public class BiddingStrategyReturnValue : ListReturnValue, ISoapable
	{
		public List<SharedBiddingStrategy> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<SharedBiddingStrategy>();
					var valueItem = new SharedBiddingStrategy();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BiddingStrategyReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Indicates where bidding strategy came from: campaign, adgroup or criterion.
	/// </summary>
	public enum BiddingStrategySource
	{
		/// <summary>
		/// Bidding strategy is defined on campaign level.
		/// </summary>
		Campaign,
		/// <summary>
		/// Bidding strategy is defined on adgroup level.
		/// </summary>
		Adgroup,
		/// <summary>
		/// Bidding strategy is defined on criterion level.
		/// </summary>
		Criterion
	}
	/// <summary>
	/// The status of the bid strategy, with respect to circumstances that could affect
	/// the automation system.
	/// </summary>
	public enum BiddingStrategySystemStatus
	{
		Unknown,
		/// <summary>
		/// The bid strategy is active, and AdWords cannot find any specific issues with the
		/// strategy.
		/// </summary>
		Unconstrained,
		/// <summary>
		/// The bid strategy is learning because it has been recently created or recently
		/// reactivated.
		/// </summary>
		LearningNew,
		/// <summary>
		/// The bid strategy is learning because of a recent setting change.
		/// </summary>
		LearningSettingChange,
		/// <summary>
		/// The bid strategy is learning because of a recent budget change.
		/// </summary>
		LearningBudgetChange,
		/// <summary>
		/// The bid strategy is learning because of recent change in number of campaigns, ad
		/// groups or keywords attached to it.
		/// </summary>
		LearningCompositionChange,
		/// <summary>
		/// The bid strategy depends on conversion reporting and the customer recently
		/// modified conversion types that were relevant to the bid strategy.
		/// </summary>
		LearningConversionTypeChange,
		/// <summary>
		/// The bid strategy depends on conversion reporting and the customer recently
		/// changed their conversion settings.
		/// </summary>
		LearningConversionSettingChange,
		/// <summary>
		/// The bid strategy is limited by its bid constraints (bid floor, ceiling, or
		/// both). Deprecated for the specific LIMITED_BY_*_LIMIT statuses.
		/// </summary>
		LimitedByBidConstraints,
		/// <summary>
		/// The bid strategy is limited by its bid ceiling.
		/// </summary>
		LimitedByMaxBidLimit,
		/// <summary>
		/// The bid strategy is limited by its bid floor.
		/// </summary>
		LimitedByMinBidLimit,
		/// <summary>
		/// The bid strategy is limited by its ROAS floor.
		/// </summary>
		LimitedByMinRoasLimit,
		/// <summary>
		/// The bid strategy is limited because there was not enough conversion traffic over
		/// the past weeks.
		/// </summary>
		LimitedByData,
		/// <summary>
		/// A significant fraction of keywords in this bid strategy are limited by budget.
		/// </summary>
		LimitedByBudget,
		/// <summary>
		/// The bid strategy cannot reach its target spend because its spend has been
		/// de-prioritized.
		/// </summary>
		LimitedByLowPrioritySpend,
		/// <summary>
		/// A significant fraction of keywords in this bid strategy have a low Quality
		/// Score.
		/// </summary>
		LimitedByLowQuality,
		/// <summary>
		/// The bid strategy depends on conversion reporting and the customer is lacking
		/// conversion types that might be reported against this strategy.
		/// </summary>
		MisconfiguredConversionTypes,
		/// <summary>
		/// The bid strategy depends on conversion reporting and the customer's conversion
		/// settings are misconfigured.
		/// </summary>
		MisconfiguredConversionSettings,
		/// <summary>
		/// The bid strategy is not active. Either there are no active campaigns, ad groups
		/// or keywords attached to the bid strategy. Or there are no active budgets
		/// connected to the bid strategy.
		/// </summary>
		Inactive,
		/// <summary>
		/// The system status is not currently available for this bid strategy.
		/// </summary>
		Unavailable,
		/// <summary>
		/// There were multiple LEARNING_* statuses for this bid strategy during the time in
		/// question.
		/// </summary>
		MultipleLearning,
		/// <summary>
		/// There were multiple LIMITED_* statuses for this bid strategy during the time in
		/// question.
		/// </summary>
		MultipleLimited,
		/// <summary>
		/// There were multiple MISCONFIGURED_* system statuses for this bid strategy during
		/// the time in question.
		/// </summary>
		MultipleMisconfigured,
		/// <summary>
		/// There were multiple system statuses for this bid strategy during the time in
		/// question.
		/// </summary>
		Multiple
	}
	/// <summary>
	/// The bidding strategy type. See {@linkplain BiddingStrategyConfiguration}
	/// for additional information.
	/// </summary>
	public enum BiddingStrategyType
	{
		/// <summary>
		/// Replaced by TARGET_SPEND. Kept only for legacy support.
		/// </summary>
		BudgetOptimizer,
		/// <summary>
		/// Replaced by TARGET_CPA. Kept only for legacy support.
		/// </summary>
		ConversionOptimizer,
		/// <summary>
		/// Manual click based bidding where user pays per click. See
		/// {@linkplain ManualCpcBiddingScheme} for more details.
		/// </summary>
		ManualCpc,
		/// <summary>
		/// Manual impression based bidding where user pays per thousand
		/// impressions. See {@linkplain ManualCpmBiddingScheme} for more
		/// details.
		/// </summary>
		ManualCpm,
		/// <summary>
		/// Page-One Promoted is an automated bid strategy that sets max CPC bids
		/// to target impressions on page one or page one promoted slots on
		/// google.com. See {@linkplain PageOnePromotedBiddingScheme} for
		/// more details.
		/// </summary>
		PageOnePromoted,
		/// <summary>
		/// Target Spend (Maximize Clicks) is an automated bid strategy that sets
		/// your bids to help get as many clicks as possible within your budget.
		/// See {@linkplain TargetSpendBiddingScheme} for more details.
		/// </summary>
		TargetSpend,
		/// <summary>
		/// Enhanced CPC is a bidding strategy that raises your bids for clicks
		/// that seem more likely to lead to a conversion and lowers them for clicks
		/// where they seem less likely. See {@linkplain EnhancedCpcBiddingScheme}
		/// for more details.
		/// </summary>
		EnhancedCpc,
		/// <summary>
		/// Target CPA is an automated bid strategy that sets bids to help get
		/// as many conversions as possible at the target cost per acquisition
		/// (CPA) you set. See {@linkplain TargetCpaBiddingScheme}
		/// for more details.
		/// </summary>
		TargetCpa,
		/// <summary>
		/// Target ROAS is an automated bidding strategy that helps you maximize
		/// revenue while averaging a specific target Return On Average Spend (ROAS).
		/// See {@linkplain TargetRoasBiddingScheme} for more details.
		/// </summary>
		TargetRoas,
		/// <summary>
		/// Target Outrank Share is an automated bidding strategy that sets bids
		/// based on the target fraction of auctions where the advertiser should
		/// outrank a specific competitor. See {@linkplain TargetOutrankShareBiddingScheme}
		/// for more details.
		/// </summary>
		TargetOutrankShare,
		/// <summary>
		/// Special bidding strategy type used to reset the bidding strategy at AdGroup and
		/// AdGroupCriterion.
		/// </summary>
		None,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents data about a bid landscape for an ad group or criterion.
	/// </summary>
	public abstract class BidLandscape : DataEntry, ISoapable
	{
		/// <summary>
		/// ID of the campaign that contains the criterion with which this bid
		/// landscape is associated.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// ID of the ad group that contains the criterion with which this bid
		/// landscape is associated.
		/// Only available for ad group bid landscapes and ad group criterion bid landscapes.
		/// <span class="constraint Selectable">This field can be selected using the value "AdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		/// <summary>
		/// First day on which this landscape is based. Typically, it could be
		/// up to a week ago.
		/// <span class="constraint Selectable">This field can be selected using the value "StartDate".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string StartDate { get; set; }
		/// <summary>
		/// Last day on which this landscape is based.
		/// <span class="constraint Selectable">This field can be selected using the value "EndDate".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string EndDate { get; set; }
		/// <summary>
		/// List of landscape points, each corresponding to a specifid bid amount.
		/// </summary>
		public List<BidLandscapeLandscapePoint> LandscapePoints { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CampaignId = null;
			AdGroupId = null;
			StartDate = null;
			EndDate = null;
			LandscapePoints = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "startDate")
				{
					StartDate = xItem.Value;
				}
				else if (localName == "endDate")
				{
					EndDate = xItem.Value;
				}
				else if (localName == "landscapePoints")
				{
					if (LandscapePoints == null) LandscapePoints = new List<BidLandscapeLandscapePoint>();
					var landscapePointsItem = new BidLandscapeLandscapePoint();
					landscapePointsItem.ReadFrom(xItem);
					LandscapePoints.Add(landscapePointsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BidLandscape");
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (StartDate != null)
			{
				xItem = new XElement(XName.Get("startDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartDate);
				xE.Add(xItem);
			}
			if (EndDate != null)
			{
				xItem = new XElement(XName.Get("endDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndDate);
				xE.Add(xItem);
			}
			if (LandscapePoints != null)
			{
				foreach (var landscapePointsItem in LandscapePoints)
				{
					xItem = new XElement(XName.Get("landscapePoints", "https://adwords.google.com/api/adwords/cm/v201609"));
					landscapePointsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A set of estimates for a criterion's performance for a specific bid
	/// amount.
	/// </summary>
	public class BidLandscapeLandscapePoint : ISoapable
	{
		/// <summary>
		/// The bid amount used to estimate this landscape point's data.
		/// Only available for ad group bid landscapes and ad group criterion bid landscapes.
		/// <span class="constraint Selectable">This field can be selected using the value "Bid".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Money Bid { get; set; }
		/// <summary>
		/// Estimated number of clicks at this bid. For mobile bid modifier landscapes, this is the
		/// estimated number of clicks for mobile only.
		/// <span class="constraint Selectable">This field can be selected using the value "LocalClicks".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? Clicks { get; set; }
		/// <summary>
		/// Estimated cost at this bid. For mobile bid modifier landscapes, this is the estimated cost
		/// for mobile only.
		/// <span class="constraint Selectable">This field can be selected using the value "LocalCost".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public Money Cost { get; set; }
		/// <summary>
		/// Estimated number of impressions at this bid. For mobile bid modifier landscapes, this is the
		/// estimated number of impressions for mobile only.
		/// <span class="constraint Selectable">This field can be selected using the value "LocalImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? Impressions { get; set; }
		/// <summary>
		/// Estimated number of promoted impressions.
		/// <span class="constraint Selectable">This field can be selected using the value "PromotedImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? PromotedImpressions { get; set; }
		/// <summary>
		/// Required daily budget to achieve the predicted stats at this bid.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "RequiredBudget".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public Money RequiredBudget { get; set; }
		/// <summary>
		/// The bid modifier value of this point.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "BidModifier".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public double? BidModifier { get; set; }
		/// <summary>
		/// Estimated total impressions for all devices in mobile bid modifier landscape.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "TotalLocalImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? TotalLocalImpressions { get; set; }
		/// <summary>
		/// Estimated total clicks for all devices in mobile bid modifier landscape.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "TotalLocalClicks".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? TotalLocalClicks { get; set; }
		/// <summary>
		/// Estimated total cost for all devices in mobile bid modifier landscape.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "TotalLocalCost".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public Money TotalLocalCost { get; set; }
		/// <summary>
		/// Estimated total promoted impressions for all devices in mobile bid modifier landscape.
		/// Only available for campaign criterion bid landscapes (versions >= v201603).
		/// <span class="constraint Selectable">This field can be selected using the value "TotalLocalPromotedImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? TotalLocalPromotedImpressions { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Bid = null;
			Clicks = null;
			Cost = null;
			Impressions = null;
			PromotedImpressions = null;
			RequiredBudget = null;
			BidModifier = null;
			TotalLocalImpressions = null;
			TotalLocalClicks = null;
			TotalLocalCost = null;
			TotalLocalPromotedImpressions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bid")
				{
					Bid = new Money();
					Bid.ReadFrom(xItem);
				}
				else if (localName == "clicks")
				{
					Clicks = long.Parse(xItem.Value);
				}
				else if (localName == "cost")
				{
					Cost = new Money();
					Cost.ReadFrom(xItem);
				}
				else if (localName == "impressions")
				{
					Impressions = long.Parse(xItem.Value);
				}
				else if (localName == "promotedImpressions")
				{
					PromotedImpressions = long.Parse(xItem.Value);
				}
				else if (localName == "requiredBudget")
				{
					RequiredBudget = new Money();
					RequiredBudget.ReadFrom(xItem);
				}
				else if (localName == "bidModifier")
				{
					BidModifier = double.Parse(xItem.Value);
				}
				else if (localName == "totalLocalImpressions")
				{
					TotalLocalImpressions = long.Parse(xItem.Value);
				}
				else if (localName == "totalLocalClicks")
				{
					TotalLocalClicks = long.Parse(xItem.Value);
				}
				else if (localName == "totalLocalCost")
				{
					TotalLocalCost = new Money();
					TotalLocalCost.ReadFrom(xItem);
				}
				else if (localName == "totalLocalPromotedImpressions")
				{
					TotalLocalPromotedImpressions = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Bid != null)
			{
				xItem = new XElement(XName.Get("bid", "https://adwords.google.com/api/adwords/cm/v201609"));
				Bid.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Clicks != null)
			{
				xItem = new XElement(XName.Get("clicks", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Clicks.Value.ToString());
				xE.Add(xItem);
			}
			if (Cost != null)
			{
				xItem = new XElement(XName.Get("cost", "https://adwords.google.com/api/adwords/cm/v201609"));
				Cost.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Impressions != null)
			{
				xItem = new XElement(XName.Get("impressions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Impressions.Value.ToString());
				xE.Add(xItem);
			}
			if (PromotedImpressions != null)
			{
				xItem = new XElement(XName.Get("promotedImpressions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PromotedImpressions.Value.ToString());
				xE.Add(xItem);
			}
			if (RequiredBudget != null)
			{
				xItem = new XElement(XName.Get("requiredBudget", "https://adwords.google.com/api/adwords/cm/v201609"));
				RequiredBudget.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidModifier != null)
			{
				xItem = new XElement(XName.Get("bidModifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifier.Value.ToString());
				xE.Add(xItem);
			}
			if (TotalLocalImpressions != null)
			{
				xItem = new XElement(XName.Get("totalLocalImpressions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalLocalImpressions.Value.ToString());
				xE.Add(xItem);
			}
			if (TotalLocalClicks != null)
			{
				xItem = new XElement(XName.Get("totalLocalClicks", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalLocalClicks.Value.ToString());
				xE.Add(xItem);
			}
			if (TotalLocalCost != null)
			{
				xItem = new XElement(XName.Get("totalLocalCost", "https://adwords.google.com/api/adwords/cm/v201609"));
				TotalLocalCost.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TotalLocalPromotedImpressions != null)
			{
				xItem = new XElement(XName.Get("totalLocalPromotedImpressions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalLocalPromotedImpressions.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enumerates possible sources for bid modifier.
	/// </summary>
	public enum BidModifierSource
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The bid modifier is specified at the campaign level, on the campaign level
		/// criterion.
		/// </summary>
		Campaign,
		/// <summary>
		/// The bid modifier is specified (overridden) at the ad group level.
		/// </summary>
		AdGroup
	}
	/// <summary>
	/// Base class for all bids.
	/// </summary>
	public abstract class Bids : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of Bids.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string BidsType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BidsType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "Bids.Type")
				{
					BidsType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BidsType != null)
			{
				xItem = new XElement(XName.Get("Bids.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidsType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Indicate where a criterion's bid came from: criterion or the adgroup it
	/// belongs to.
	/// </summary>
	public enum BidSource
	{
		/// <summary>
		/// Effective Bid is Adgroup level bid
		/// </summary>
		Adgroup,
		/// <summary>
		/// Effective Bid is Keyword level bid
		/// </summary>
		Criterion,
		/// <summary>
		/// Effective Bid is inherited from Adgroup Bidding Strategy
		/// </summary>
		AdgroupBiddingStrategy,
		/// <summary>
		/// Effective Bid is inherited from Campaign Bidding Strategy
		/// </summary>
		CampaignBiddingStrategy
	}
	/// <summary>
	/// Represents an account to which invoices are sent in
	/// <a href="https://support.google.com/adwords/answer/2375371">consolidated billing</a>.
	/// </summary>
	public class BillingAccount : ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Id { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CurrencyCode { get; set; }
		/// <summary>
		/// A 12 digit billing id assigned to the user by Google.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string PrimaryBillingId { get; set; }
		/// <summary>
		/// An optional secondary billing id assigned to the user by Google.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string SecondaryBillingId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			CurrencyCode = null;
			PrimaryBillingId = null;
			SecondaryBillingId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = xItem.Value;
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "currencyCode")
				{
					CurrencyCode = xItem.Value;
				}
				else if (localName == "primaryBillingId")
				{
					PrimaryBillingId = xItem.Value;
				}
				else if (localName == "secondaryBillingId")
				{
					SecondaryBillingId = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Id);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (CurrencyCode != null)
			{
				xItem = new XElement(XName.Get("currencyCode", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(CurrencyCode);
				xE.Add(xItem);
			}
			if (PrimaryBillingId != null)
			{
				xItem = new XElement(XName.Get("primaryBillingId", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(PrimaryBillingId);
				xE.Add(xItem);
			}
			if (SecondaryBillingId != null)
			{
				xItem = new XElement(XName.Get("secondaryBillingId", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(SecondaryBillingId);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a boolean value.
	/// </summary>
	public class BooleanAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Boolean value contained by this {@link Attribute}.
		/// </summary>
		public bool? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "BooleanAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Budgets are used for managing the amount of money spent on AdWords.
	/// </summary>
	public class Budget : ISoapable
	{
		/// <summary>
		/// A Budget is created using the BudgetService ADD operation and is
		/// assigned a BudgetId. The BudgetId is used when modifying the
		/// Budget with BudgetService, or associating the Budget to a
		/// Campaign with CampaignService. A BudgetId can be shared across
		/// different campaigns--the system will then allocate the Budget
		/// among the Campaigns to get the optimum result.
		/// <span class="constraint Selectable">This field can be selected using the value "BudgetId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? BudgetId { get; set; }
		/// <summary>
		/// Name of the Budget. When creating a Budget through BudgetService, every explicitly shared
		/// Budget must have a non-null non-empty name. In addition, all explicitly shared Budget
		/// names owned by an account must be distinct. Budgets that are not explicitly shared derive
		/// their name from the attached Campaign's name.
		/// <span class="constraint Selectable">This field can be selected using the value "BudgetName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 255, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Amount of budget in the local currency for the account.
		/// <span class="constraint Selectable">This field can be selected using the value "Amount".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 1.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public Money Amount { get; set; }
		/// <summary>
		/// Delivery method for the Budget which determines the rate at which the
		/// Budget is spent. Defaults to STANDARD and can be changed through
		/// BudgetService ADD or SET operations.
		/// <span class="constraint Selectable">This field can be selected using the value "DeliveryMethod".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public BudgetBudgetDeliveryMethod? DeliveryMethod { get; set; }
		/// <summary>
		/// Number of campaigns actively using this budget. This field is only
		/// populated for Get operations.
		/// <span class="constraint Selectable">This field can be selected using the value "BudgetReferenceCount".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? ReferenceCount { get; set; }
		/// <summary>
		/// If true, this budget was created with the purpose of sharing
		/// this budget across one or more campaigns.
		/// <p>If false, this budget was created with the intention to be
		/// dedicatedly used with a single campaign, and the Budget's name
		/// and status will stay in the sync with the associated Campaign's name
		/// and status. Attempting to share this budget with a second Campaign will
		/// result in an error.</p>
		/// <span class="constraint Selectable">This field can be selected using the value "IsBudgetExplicitlyShared".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public bool? IsExplicitlyShared { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "BudgetStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BudgetBudgetStatus? Status { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BudgetId = null;
			Name = null;
			Amount = null;
			DeliveryMethod = null;
			ReferenceCount = null;
			IsExplicitlyShared = null;
			Status = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "budgetId")
				{
					BudgetId = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "amount")
				{
					Amount = new Money();
					Amount.ReadFrom(xItem);
				}
				else if (localName == "deliveryMethod")
				{
					DeliveryMethod = BudgetBudgetDeliveryMethodExtensions.Parse(xItem.Value);
				}
				else if (localName == "referenceCount")
				{
					ReferenceCount = int.Parse(xItem.Value);
				}
				else if (localName == "isExplicitlyShared")
				{
					IsExplicitlyShared = bool.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = BudgetBudgetStatusExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BudgetId != null)
			{
				xItem = new XElement(XName.Get("budgetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BudgetId.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Amount != null)
			{
				xItem = new XElement(XName.Get("amount", "https://adwords.google.com/api/adwords/cm/v201609"));
				Amount.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (DeliveryMethod != null)
			{
				xItem = new XElement(XName.Get("deliveryMethod", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeliveryMethod.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ReferenceCount != null)
			{
				xItem = new XElement(XName.Get("referenceCount", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReferenceCount.Value.ToString());
				xE.Add(xItem);
			}
			if (IsExplicitlyShared != null)
			{
				xItem = new XElement(XName.Get("isExplicitlyShared", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsExplicitlyShared.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Budget delivery methods.
	/// </summary>
	public enum BudgetBudgetDeliveryMethod
	{
		/// <summary>
		/// The budget server will throttle serving evenly across the entire time period.
		/// </summary>
		Standard,
		/// <summary>
		/// The budget server will not throttle serving, and ads will serve as fast as possible.
		/// </summary>
		Accelerated,
		Unknown
	}
	public enum BudgetBudgetStatus
	{
		Enabled,
		Removed,
		Unknown
	}
	/// <summary>
	/// A list of all the error codes being used by the common budget domain package.
	/// </summary>
	public class BudgetError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public BudgetErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BudgetErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BudgetError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the budget error.
	/// </summary>
	public enum BudgetErrorReason
	{
		/// <summary>
		/// The requested budget no longer exists.
		/// </summary>
		BudgetRemoved,
		/// <summary>
		/// Default budget error.
		/// </summary>
		BudgetError,
		/// <summary>
		/// The budget is associated with at least one campaign, and so the budget cannot be removed.
		/// </summary>
		BudgetInUse,
		/// <summary>
		/// Customer is not whitelisted for this budget period.
		/// </summary>
		BudgetPeriodNotAvailable,
		/// <summary>
		/// Customer cannot use CampaignService to edit a shared budget.
		/// </summary>
		CannotEditSharedBudget,
		/// <summary>
		/// This field is not mutable on implicitly shared budgets
		/// </summary>
		CannotModifyFieldOfImplicitlySharedBudget,
		/// <summary>
		/// Cannot change explicitly shared budgets back to implicitly shared ones.
		/// </summary>
		CannotUpdateBudgetToImplicitlyShared,
		/// <summary>
		/// An implicit budget without a name cannot be changed to explicitly shared budget.
		/// </summary>
		CannotUpdateBudgetToExplicitlySharedWithoutName,
		/// <summary>
		/// Only explicitly shared budgets can be used with multiple campaigns.
		/// </summary>
		CannotUseImplicitlySharedBudgetWithMultipleCampaigns,
		/// <summary>
		/// A budget with this name already exists.
		/// </summary>
		DuplicateName,
		/// <summary>
		/// A money amount was not in the expected currency.
		/// </summary>
		MoneyAmountInWrongCurrency,
		/// <summary>
		/// A money amount was less than the minimum CPC for currency.
		/// </summary>
		MoneyAmountLessThanCurrencyMinimumCpc,
		/// <summary>
		/// A money amount was greater than the maximum allowed.
		/// </summary>
		MoneyAmountTooLarge,
		/// <summary>
		/// A money amount was negative.
		/// </summary>
		NegativeMoneyAmount,
		/// <summary>
		/// A money amount was not a multiple of a minimum unit.
		/// </summary>
		NonMultipleOfMinimumCurrencyUnit
	}
	/// <summary>
	/// Operations for adding/updating Budget entities.
	/// </summary>
	public class BudgetOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Budget Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Budget();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BudgetOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// In budget optimizer, Google automatically places bids for the user based on
	/// their daily/monthly budget.
	///
	/// <p><b>Note:</b>
	/// This bidding strategy has been deprecated and replaced with
	/// {@linkplain TargetSpendBiddingScheme TargetSpend}. We no longer allow
	/// advertisers to opt into this strategy--{@code BudgetOptimizerBiddingScheme}
	/// solely exists so that advertisers can access campaigns that had specified
	/// this strategy.</p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class BudgetOptimizerBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// Ceiling on bids placed by the budget optimizer.
		/// <span class="constraint Selectable">This field can be selected using the value "BidCeiling".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money BidCeiling { get; set; }
		/// <summary>
		/// The enhanced CPC bidding option for the campaign, which enables
		/// bids to be enhanced based on conversion optimizer data. For more
		/// information about enhanced CPC, see the
		/// <a href="//support.google.com/adwords/answer/2464964"
		/// >AdWords Help Center</a>.
		/// <span class="constraint Selectable">This field can be selected using the value "EnhancedCpcEnabled".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? EnhancedCpcEnabled { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			BidCeiling = null;
			EnhancedCpcEnabled = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bidCeiling")
				{
					BidCeiling = new Money();
					BidCeiling.ReadFrom(xItem);
				}
				else if (localName == "enhancedCpcEnabled")
				{
					EnhancedCpcEnabled = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BudgetOptimizerBiddingScheme");
			XElement xItem = null;
			if (BidCeiling != null)
			{
				xItem = new XElement(XName.Get("bidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				BidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (EnhancedCpcEnabled != null)
			{
				xItem = new XElement(XName.Get("enhancedCpcEnabled", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnhancedCpcEnabled.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A <a href="https://support.google.com/adwords/answer/2393037">budget order</a>
	/// links an account-wide budget with a {@link BillingAccount}.
	/// </summary>
	public class BudgetOrder : ISoapable
	{
		/// <summary>
		/// This must be passed as a string with dashes, e.g. "1234-5678-9012-3456".
		/// <span class="constraint Selectable">This field can be selected using the value "BillingAccountId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string BillingAccountId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Enables user to specify meaningful name for a billing account
		/// to aid in reconciling monthly invoices.
		///
		/// This name will be printed in the monthly invoices.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "BillingAccountName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 0 and 80, inclusive, (trimmed).</span>
		/// </summary>
		public string BillingAccountName { get; set; }
		/// <summary>
		/// Enables user to enter a value that helps them reference this budget order
		/// in their monthly invoices.
		///
		/// This number will be printed in the monthly invoices.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "PoNumber".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 0 and 30, inclusive, (trimmed).</span>
		/// </summary>
		public string PoNumber { get; set; }
		/// <summary>
		/// Enables user to specify meaningful name for referencing this budget order. A default name
		/// will be provided if none is specified.
		///
		/// This name will be printed in the monthly invoices.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "BudgetOrderName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 0 and 40, inclusive, (trimmed).</span>
		/// </summary>
		public string BudgetOrderName { get; set; }
		/// <summary>
		/// A 12 digit billing ID assigned to the user by Google. This must be passed in
		/// as a string with dashes, e.g. "1234-5678-9012".
		///
		/// For mutate.add, this field is required if billingAccountId is not specified.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "PrimaryBillingId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 0 and 14, inclusive, (trimmed).</span>
		/// </summary>
		public string PrimaryBillingId { get; set; }
		/// <summary>
		/// For certain users, a secondary billing ID will be required on mutate.add.
		/// If this requirement was not communicated to the user, the user may ignore this parameter.
		/// If specified, this must be passed in as a string with dashes, e.g. "1234-5678-9012".
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "SecondaryBillingId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 0 and 14, inclusive, (trimmed).</span>
		/// </summary>
		public string SecondaryBillingId { get; set; }
		/// <summary>
		/// The spending limit in micros. To specify an unlimited budget, set spendingLimit to -1,
		/// otherwise spendingLimit must be greater than 0. Note, that for get requests the spending limit
		/// includes any adjustments that have been applied to the budget order. For mutate,
		/// the spending limit represents the maximum allowed spend prior to considering any adjustments.
		/// When making mutate requests, make sure to account for any adjustments that may be reported
		/// in the get value of the spending limit.
		/// <span class="constraint Selectable">This field can be selected using the value "SpendingLimit".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Money SpendingLimit { get; set; }
		/// <summary>
		/// The adjustments amount in micros. Adjustments from Google come in the form of credits or
		/// debits to your budget order. You can use the adjustments amount to compute your current base
		/// spendingLimit by subtracting your adjustments from the value returned from spendingLimit
		/// in get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "TotalAdjustments".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Money TotalAdjustments { get; set; }
		/// <summary>
		/// StartDateTime cannot be in the past, it must be on or before
		/// "20361231 235959 America/Los_Angeles". StartDateTime and EndDateTime
		/// must use the same time zone.
		/// <span class="constraint Selectable">This field can be selected using the value "StartDateTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string StartDateTime { get; set; }
		/// <summary>
		/// EndDateTime must be on or before "20361231 235959 America/Los_Angeles" or
		/// must set the same instant as "20371230 235959 America/Los_Angeles" to
		/// indicate infinite end date. StartDateTime and EndDateTime
		/// must use the same time zone.
		/// <span class="constraint Selectable">This field can be selected using the value "EndDateTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string EndDateTime { get; set; }
		/// <summary>
		/// Contains fields that provide information on the last set of values that
		/// were passed in through the parent BudgetOrder for mutate.add and
		/// mutate.set.
		/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "LastRequest".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BudgetOrderRequest LastRequest { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BillingAccountId = null;
			Id = null;
			BillingAccountName = null;
			PoNumber = null;
			BudgetOrderName = null;
			PrimaryBillingId = null;
			SecondaryBillingId = null;
			SpendingLimit = null;
			TotalAdjustments = null;
			StartDateTime = null;
			EndDateTime = null;
			LastRequest = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "billingAccountId")
				{
					BillingAccountId = xItem.Value;
				}
				else if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "billingAccountName")
				{
					BillingAccountName = xItem.Value;
				}
				else if (localName == "poNumber")
				{
					PoNumber = xItem.Value;
				}
				else if (localName == "budgetOrderName")
				{
					BudgetOrderName = xItem.Value;
				}
				else if (localName == "primaryBillingId")
				{
					PrimaryBillingId = xItem.Value;
				}
				else if (localName == "secondaryBillingId")
				{
					SecondaryBillingId = xItem.Value;
				}
				else if (localName == "spendingLimit")
				{
					SpendingLimit = new Money();
					SpendingLimit.ReadFrom(xItem);
				}
				else if (localName == "totalAdjustments")
				{
					TotalAdjustments = new Money();
					TotalAdjustments.ReadFrom(xItem);
				}
				else if (localName == "startDateTime")
				{
					StartDateTime = xItem.Value;
				}
				else if (localName == "endDateTime")
				{
					EndDateTime = xItem.Value;
				}
				else if (localName == "lastRequest")
				{
					LastRequest = new BudgetOrderRequest();
					LastRequest.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BillingAccountId != null)
			{
				xItem = new XElement(XName.Get("billingAccountId", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(BillingAccountId);
				xE.Add(xItem);
			}
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (BillingAccountName != null)
			{
				xItem = new XElement(XName.Get("billingAccountName", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(BillingAccountName);
				xE.Add(xItem);
			}
			if (PoNumber != null)
			{
				xItem = new XElement(XName.Get("poNumber", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(PoNumber);
				xE.Add(xItem);
			}
			if (BudgetOrderName != null)
			{
				xItem = new XElement(XName.Get("budgetOrderName", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(BudgetOrderName);
				xE.Add(xItem);
			}
			if (PrimaryBillingId != null)
			{
				xItem = new XElement(XName.Get("primaryBillingId", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(PrimaryBillingId);
				xE.Add(xItem);
			}
			if (SecondaryBillingId != null)
			{
				xItem = new XElement(XName.Get("secondaryBillingId", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(SecondaryBillingId);
				xE.Add(xItem);
			}
			if (SpendingLimit != null)
			{
				xItem = new XElement(XName.Get("spendingLimit", "https://adwords.google.com/api/adwords/billing/v201609"));
				SpendingLimit.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TotalAdjustments != null)
			{
				xItem = new XElement(XName.Get("totalAdjustments", "https://adwords.google.com/api/adwords/billing/v201609"));
				TotalAdjustments.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (StartDateTime != null)
			{
				xItem = new XElement(XName.Get("startDateTime", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(StartDateTime);
				xE.Add(xItem);
			}
			if (EndDateTime != null)
			{
				xItem = new XElement(XName.Get("endDateTime", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(EndDateTime);
				xE.Add(xItem);
			}
			if (LastRequest != null)
			{
				xItem = new XElement(XName.Get("lastRequest", "https://adwords.google.com/api/adwords/billing/v201609"));
				LastRequest.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error information for BudgetOrderService.
	/// </summary>
	public class BudgetOrderError : ApiError, ISoapable
	{
		public BudgetOrderErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = BudgetOrderErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "BudgetOrderError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum BudgetOrderErrorReason
	{
		/// <summary>
		/// Existing pending request is being approved.
		/// </summary>
		BudgetApprovalInProgress,
		/// <summary>
		/// A server backend was not available.
		/// </summary>
		ServiceUnavailable,
		/// <summary>
		/// The request contains a field that is only available if the manager account
		/// is whitelisted for new billing backend.
		/// </summary>
		FieldNotEligibleForCurrentBilling,
		/// <summary>
		/// The billing account was invalid.
		/// </summary>
		InvalidBillingAccount,
		/// <summary>
		/// Unspecified billing service error.
		/// </summary>
		GenericBillingError,
		/// <summary>
		/// The billing account ID format was invalid.
		/// </summary>
		InvalidBillingAccountIdFormat,
		/// <summary>
		/// Budget date range was invalid.
		/// </summary>
		InvalidBudgetDateRange,
		/// <summary>
		/// Customer's currency is different from what is in the billing system.
		/// </summary>
		IncompatibleCurrency,
		/// <summary>
		/// User does not have permission to update this budget.
		/// </summary>
		BudgetUpdateDenied,
		/// <summary>
		/// User attempted to cancel a started budget.
		/// </summary>
		BudgetAlreadyStarted,
		/// <summary>
		/// User attempted to change an ended budget.
		/// </summary>
		BudgetAlreadyEnded,
		/// <summary>
		/// Invalid amount, start date or end date specified.
		/// </summary>
		InvalidConstraint,
		/// <summary>
		/// The bid is too high.
		/// </summary>
		InvalidBidTooLarge,
		/// <summary>
		/// Budget was not found.
		/// </summary>
		NoSuchBudgetFound,
		/// <summary>
		/// The budget cannot be lowered below the amount which has already been spent.
		/// </summary>
		InvalidBudgetAlreadySpent,
		/// <summary>
		/// Time zone from user input is different from user's account time zone.
		/// </summary>
		InvalidTimezoneInDate,
		/// <summary>
		/// The BudgetOrder's ID was set in an add operation.
		/// </summary>
		AccountBudgetIdSetInAdd,
		/// <summary>
		/// We don't support more than one operation per mutate call.
		/// </summary>
		MoreThanOneOperations,
		/// <summary>
		/// Manager account not found.
		/// </summary>
		InvalidManagerAccount,
		Unknown
	}
	/// <summary>
	/// Operation for {@link BudgetOrder}.
	/// </summary>
	public class BudgetOrderOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public BudgetOrder Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new BudgetOrder();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "BudgetOrderOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/billing/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A page of {@link BudgetOrder}s from {@link BudgetOrderService#get}
	/// method.
	/// </summary>
	public class BudgetOrderPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<BudgetOrder> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<BudgetOrder>();
					var entriesItem = new BudgetOrder();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "BudgetOrderPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/billing/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Holds fields that provide information on the last set of values that were passed in through
	/// the parent BudgetOrder for mutate.add and mutate.set.
	/// <span class="constraint Billing">This element only applies if manager account is whitelisted for new billing backend.</span>
	/// </summary>
	public class BudgetOrderRequest : ISoapable
	{
		/// <summary>
		/// Status of the last {@link BudgetOrder} change.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BudgetOrderRequestStatus? Status { get; set; }
		/// <summary>
		/// {@link DateTime} of when the request was received.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Date { get; set; }
		/// <summary>
		/// Enables user to specify meaningful name for a billing account
		/// to aid in reconciling monthly invoices. This name will be printed in the monthly invoices.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string BillingAccountName { get; set; }
		/// <summary>
		/// Enables user to enter a value that helps them reference this budget order
		/// in their monthly invoices. This number will be printed in the monthly invoices.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string PoNumber { get; set; }
		/// <summary>
		/// Enables user to specify meaningful name for referencing this budget order. A default name
		/// will be provided if none is specified. This name will be printed in the monthly invoices.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string BudgetOrderName { get; set; }
		/// <summary>
		/// The spending limit in micros. To specify an unlimited budget, set spendingLimit to -1,
		/// otherwise spendingLimit must be greater than 0.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Money SpendingLimit { get; set; }
		/// <summary>
		/// StartDateTime cannot be in the past, it must be on or before
		/// "20361231 235959 America/Los_Angeles". StartDateTime and EndDateTime
		/// must use the same time zone.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string StartDateTime { get; set; }
		/// <summary>
		/// EndDateTime must be on or before "20361231 235959 America/Los_Angeles" or
		/// must set the same instant as "20371230 235959 America/Los_Angeles" to
		/// indicate infinite end date. StartDateTime and EndDateTime
		/// must use the same time zone.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string EndDateTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Status = null;
			Date = null;
			BillingAccountName = null;
			PoNumber = null;
			BudgetOrderName = null;
			SpendingLimit = null;
			StartDateTime = null;
			EndDateTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "status")
				{
					Status = BudgetOrderRequestStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "date")
				{
					Date = xItem.Value;
				}
				else if (localName == "billingAccountName")
				{
					BillingAccountName = xItem.Value;
				}
				else if (localName == "poNumber")
				{
					PoNumber = xItem.Value;
				}
				else if (localName == "budgetOrderName")
				{
					BudgetOrderName = xItem.Value;
				}
				else if (localName == "spendingLimit")
				{
					SpendingLimit = new Money();
					SpendingLimit.ReadFrom(xItem);
				}
				else if (localName == "startDateTime")
				{
					StartDateTime = xItem.Value;
				}
				else if (localName == "endDateTime")
				{
					EndDateTime = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Date != null)
			{
				xItem = new XElement(XName.Get("date", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Date);
				xE.Add(xItem);
			}
			if (BillingAccountName != null)
			{
				xItem = new XElement(XName.Get("billingAccountName", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(BillingAccountName);
				xE.Add(xItem);
			}
			if (PoNumber != null)
			{
				xItem = new XElement(XName.Get("poNumber", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(PoNumber);
				xE.Add(xItem);
			}
			if (BudgetOrderName != null)
			{
				xItem = new XElement(XName.Get("budgetOrderName", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(BudgetOrderName);
				xE.Add(xItem);
			}
			if (SpendingLimit != null)
			{
				xItem = new XElement(XName.Get("spendingLimit", "https://adwords.google.com/api/adwords/billing/v201609"));
				SpendingLimit.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (StartDateTime != null)
			{
				xItem = new XElement(XName.Get("startDateTime", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(StartDateTime);
				xE.Add(xItem);
			}
			if (EndDateTime != null)
			{
				xItem = new XElement(XName.Get("endDateTime", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(EndDateTime);
				xE.Add(xItem);
			}
		}
	}
	public enum BudgetOrderRequestStatus
	{
		/// <summary>
		/// The budget request is under review.
		/// </summary>
		UnderReview,
		/// <summary>
		/// The budget request has been approved.
		/// </summary>
		Approved,
		/// <summary>
		/// The budget request has been rejected.
		/// </summary>
		Rejected,
		/// <summary>
		/// The budget request has been cancelled.
		/// </summary>
		Cancelled,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// A container for return values from the {@link BudgetOrderService#mutate}
	/// method.
	/// </summary>
	public class BudgetOrderReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// List of {@link BudgetOrder}s affected by the mutate call.
		/// </summary>
		public List<BudgetOrder> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<BudgetOrder>();
					var valueItem = new BudgetOrder();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "BudgetOrderReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/billing/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Contains a list of budgets resulting from the filtering and paging of
	/// {@link BudgetService#get} call.
	/// </summary>
	public class BudgetPage : Page, ISoapable
	{
		public List<Budget> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Budget>();
					var entriesItem = new Budget();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BudgetPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link BudgetService#mutate} call.
	/// </summary>
	public class BudgetReturnValue : ListReturnValue, ISoapable
	{
		public List<Budget> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Budget>();
					var valueItem = new Budget();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "BudgetReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Conversion type for a call extension.
	/// </summary>
	public class CallConversionType : ISoapable
	{
		/// <summary>
		/// The ID of an AdCallMetricsConversion object. This object contains the phoneCallDuration field
		/// which is the minimum duration (in seconds) of a call to be considered a conversion.
		/// </summary>
		public long? ConversionTypeId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ConversionTypeId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "conversionTypeId")
				{
					ConversionTypeId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ConversionTypeId != null)
			{
				xItem = new XElement(XName.Get("conversionTypeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTypeId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a Call extension.
	/// </summary>
	public class CallFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// The advertiser's phone number to append to the ad.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string CallPhoneNumber { get; set; }
		/// <summary>
		/// Uppercase two-letter country code of the advertiser's phone number.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string CallCountryCode { get; set; }
		/// <summary>
		/// Indicates whether call tracking is enabled. By default, call tracking is not enabled.
		/// </summary>
		public bool? CallTracking { get; set; }
		/// <summary>
		/// Call conversion type. To clear this field, set a CallConversionType with a value of null in its
		/// conversionTypeId field. This value should not be set if
		/// {@linkPlain CallFeedItem#disableCallConversionTracking} is true.
		/// </summary>
		public CallConversionType CallConversionType { get; set; }
		/// <summary>
		/// If set, disable call conversion tracking. {@linkPlain CallFeedItem#callConversionType} should
		/// not be set if this value is true.
		/// </summary>
		public bool? DisableCallConversionTracking { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CallPhoneNumber = null;
			CallCountryCode = null;
			CallTracking = null;
			CallConversionType = null;
			DisableCallConversionTracking = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "callPhoneNumber")
				{
					CallPhoneNumber = xItem.Value;
				}
				else if (localName == "callCountryCode")
				{
					CallCountryCode = xItem.Value;
				}
				else if (localName == "callTracking")
				{
					CallTracking = bool.Parse(xItem.Value);
				}
				else if (localName == "callConversionType")
				{
					CallConversionType = new CallConversionType();
					CallConversionType.ReadFrom(xItem);
				}
				else if (localName == "disableCallConversionTracking")
				{
					DisableCallConversionTracking = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CallFeedItem");
			XElement xItem = null;
			if (CallPhoneNumber != null)
			{
				xItem = new XElement(XName.Get("callPhoneNumber", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallPhoneNumber);
				xE.Add(xItem);
			}
			if (CallCountryCode != null)
			{
				xItem = new XElement(XName.Get("callCountryCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallCountryCode);
				xE.Add(xItem);
			}
			if (CallTracking != null)
			{
				xItem = new XElement(XName.Get("callTracking", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallTracking.Value.ToString());
				xE.Add(xItem);
			}
			if (CallConversionType != null)
			{
				xItem = new XElement(XName.Get("callConversionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				CallConversionType.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (DisableCallConversionTracking != null)
			{
				xItem = new XElement(XName.Get("disableCallConversionTracking", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisableCallConversionTracking.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a CallOnlyAd.
	///
	/// <p class="caution"><b>Caution:</b> Call only ads do not use {@link #url url},
	/// {@link #finalUrls finalUrls}, {@link #finalMobileUrls finalMobileUrls},
	/// {@link #finalAppUrls finalAppUrls}, {@link #urlCustomParameters urlCustomParameters},
	/// or {@link #trackingUrlTemplate trackingUrlTemplate};
	/// setting these fields on a call only ad will cause an error.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class CallOnlyAd : Ad, ISoapable
	{
		/// <summary>
		/// Two letter country code for the ad. Examples: 'US', 'GB'.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdCountryCode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string CountryCode { get; set; }
		/// <summary>
		/// Phone number string for the ad.
		/// Examples: '(800) 356-9377', "16502531234", "+442001234567"
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdPhoneNumber".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string PhoneNumber { get; set; }
		/// <summary>
		/// Business name of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdBusinessName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string BusinessName { get; set; }
		/// <summary>
		/// First line of ad text.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdDescription1".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description1 { get; set; }
		/// <summary>
		/// Second line of ad text.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdDescription2".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description2 { get; set; }
		/// <summary>
		/// If set to true, enable call tracking for the creative. Enabling call
		/// tracking also enables call conversions.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdCallTracked".</span>
		/// </summary>
		public bool? CallTracked { get; set; }
		/// <summary>
		/// By default, call conversions are enabled when callTracked is on.
		/// To disable call conversions, set this field to true.
		/// Only in effect if callTracked is also set to true. If callTracked is set
		/// to false, this field is ignored.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdDisableCallConversion".</span>
		/// </summary>
		public bool? DisableCallConversion { get; set; }
		/// <summary>
		/// Conversion type to attribute a call conversion to. If not set, then a
		/// default conversion type id is used. Only in effect if callTracked is also
		/// set to true otherwise this field is ignored.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdConversionTypeId".</span>
		/// </summary>
		public long? ConversionTypeId { get; set; }
		/// <summary>
		/// Url to be used for phone number verification.
		/// <span class="constraint Selectable">This field can be selected using the value "CallOnlyAdPhoneNumberVerificationUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string PhoneNumberVerificationUrl { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CountryCode = null;
			PhoneNumber = null;
			BusinessName = null;
			Description1 = null;
			Description2 = null;
			CallTracked = null;
			DisableCallConversion = null;
			ConversionTypeId = null;
			PhoneNumberVerificationUrl = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "countryCode")
				{
					CountryCode = xItem.Value;
				}
				else if (localName == "phoneNumber")
				{
					PhoneNumber = xItem.Value;
				}
				else if (localName == "businessName")
				{
					BusinessName = xItem.Value;
				}
				else if (localName == "description1")
				{
					Description1 = xItem.Value;
				}
				else if (localName == "description2")
				{
					Description2 = xItem.Value;
				}
				else if (localName == "callTracked")
				{
					CallTracked = bool.Parse(xItem.Value);
				}
				else if (localName == "disableCallConversion")
				{
					DisableCallConversion = bool.Parse(xItem.Value);
				}
				else if (localName == "conversionTypeId")
				{
					ConversionTypeId = long.Parse(xItem.Value);
				}
				else if (localName == "phoneNumberVerificationUrl")
				{
					PhoneNumberVerificationUrl = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CallOnlyAd");
			XElement xItem = null;
			if (CountryCode != null)
			{
				xItem = new XElement(XName.Get("countryCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CountryCode);
				xE.Add(xItem);
			}
			if (PhoneNumber != null)
			{
				xItem = new XElement(XName.Get("phoneNumber", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PhoneNumber);
				xE.Add(xItem);
			}
			if (BusinessName != null)
			{
				xItem = new XElement(XName.Get("businessName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BusinessName);
				xE.Add(xItem);
			}
			if (Description1 != null)
			{
				xItem = new XElement(XName.Get("description1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description1);
				xE.Add(xItem);
			}
			if (Description2 != null)
			{
				xItem = new XElement(XName.Get("description2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description2);
				xE.Add(xItem);
			}
			if (CallTracked != null)
			{
				xItem = new XElement(XName.Get("callTracked", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallTracked.Value.ToString());
				xE.Add(xItem);
			}
			if (DisableCallConversion != null)
			{
				xItem = new XElement(XName.Get("disableCallConversion", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisableCallConversion.Value.ToString());
				xE.Add(xItem);
			}
			if (ConversionTypeId != null)
			{
				xItem = new XElement(XName.Get("conversionTypeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTypeId.Value.ToString());
				xE.Add(xItem);
			}
			if (PhoneNumberVerificationUrl != null)
			{
				xItem = new XElement(XName.Get("phoneNumberVerificationUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PhoneNumberVerificationUrl);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a callout extension.
	/// </summary>
	public class CalloutFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// The callout text.
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string CalloutText { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CalloutText = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "calloutText")
				{
					CalloutText = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CalloutFeedItem");
			XElement xItem = null;
			if (CalloutText != null)
			{
				xItem = new XElement(XName.Get("calloutText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CalloutText);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Data representing an AdWords campaign.
	/// </summary>
	public class Campaign : ISoapable
	{
		/// <summary>
		/// ID of this campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of this campaign.
		/// This field is required and should not be {@code null} for ADD operations.
		///
		/// For SET and REMOVE operations, this can be used to address the campaign
		/// by name when the campaign is ENABLED or PAUSED. Removed campaigns cannot
		/// be addressed by name. If you wish to rename a campaign, you must provide
		/// the ID.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint MatchesRegex">Campaign names must not contain any null (code point 0x0), NL line feed (code point 0xA) or carriage return (code point 0xD) characters. This is checked by the regular expression '[^\x00\x0A\x0D]*'.</span>
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Status of this campaign. On add, defaults to {@code ENABLED}.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CampaignStatus? Status { get; set; }
		/// <summary>
		/// Serving status.
		/// <span class="constraint Selectable">This field can be selected using the value "ServingStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ServingStatus? ServingStatus { get; set; }
		/// <summary>
		/// Date the campaign begins. On add, defaults to the current day
		/// in the parent account's local timezone. The date's format should be YYYYMMDD.
		/// <span class="constraint Selectable">This field can be selected using the value "StartDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string StartDate { get; set; }
		/// <summary>
		/// Date the campaign ends. On add, defaults to <code>20371230</code>, which means the
		/// campaign will run indefinitely. To set an existing campaign to run indefinitely, set this
		/// field to <code>203712<b>30</b></code>. The date's format should be YYYYMMDD.
		/// <span class="constraint Selectable">This field can be selected using the value "EndDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string EndDate { get; set; }
		/// <summary>
		/// Current base budget of campaign; default if no custom budgets are enabled.
		/// </summary>
		public Budget Budget { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ConversionOptimizerEligibility ConversionOptimizerEligibility { get; set; }
		/// <summary>
		/// Ad serving optimization status.
		/// <span class="constraint Selectable">This field can be selected using the value "AdServingOptimizationStatus".</span>
		/// <span class="constraint CampaignType">This field may only be set to CONVERSION_OPTIMIZE for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public AdServingOptimizationStatus? AdServingOptimizationStatus { get; set; }
		/// <summary>
		/// Frequency cap for this campaign.
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtypes: UNIVERSAL_APP_CAMPAIGN, SEARCH_MOBILE_APP.</span>
		/// </summary>
		public FrequencyCap FrequencyCap { get; set; }
		/// <summary>
		/// List of settings for the campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "Settings".</span>
		/// </summary>
		public List<Setting> Settings { get; set; }
		/// <summary>
		/// The primary serving target for ads within this campaign. The targeting options can be refined
		/// in NetworkSetting. May only be set for new campaigns.
		/// This field is required and should not be {@code null} when it is contained within
		/// {@link Operator}s : ADD
		/// <span class="constraint Selectable">This field can be selected using the value "AdvertisingChannelType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// </summary>
		public AdvertisingChannelType? AdvertisingChannelType { get; set; }
		/// <summary>
		/// Optional refinement of advertisingChannelType. Must be a valid sub-type of the parent channel
		/// type. May only be set for new campaigns and cannot be changed once set.
		/// <span class="constraint Selectable">This field can be selected using the value "AdvertisingChannelSubType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// </summary>
		public AdvertisingChannelSubType? AdvertisingChannelSubType { get; set; }
		/// <summary>
		/// Network settings for the campaign indicating where the campaign will serve.
		/// </summary>
		public NetworkSetting NetworkSetting { get; set; }
		/// <summary>
		/// Labels that are attached to the campaign. To associate an existing {@link Label} to an
		/// existing {@link Campaign}, use {@link CampaignService#mutateLabel} with the ADD
		/// operator. To remove an associated {@link Label} from the {@link Campaign}, use
		/// {@link CampaignService#mutateLabel} with the REMOVE operator. To filter on {@link Label}s,
		/// use one of {@link Predicate.Operator#CONTAINS_ALL}, {@link Predicate.Operator#CONTAINS_ANY},
		/// {@link Predicate.Operator#CONTAINS_NONE} operators with a list of {@link Label} ids.
		/// <span class="constraint Selectable">This field can be selected using the value "Labels".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public List<Label> Labels { get; set; }
		/// <summary>
		/// Bidding configuration for this campaign. To change an existing campaign's
		/// bidding strategy, set the {@link BiddingStrategyConfiguration#biddingStrategyType}
		/// or {@link BiddingStrategyConfiguration#biddingScheme}.
		/// This field is required and should not be {@code null} when it is contained within
		/// {@link Operator}s : ADD
		/// </summary>
		public BiddingStrategyConfiguration BiddingStrategyConfiguration { get; set; }
		/// <summary>
		/// Indicates if this campaign is a normal campaign, a draft campaign,
		/// or a trial campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignTrialType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CampaignTrialType? CampaignTrialType { get; set; }
		/// <summary>
		/// ID of the base campaign of the draft or trial campaign. For base campaigns, this is equal to
		/// the campaign ID.  This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// This Map provides a place to put new features and settings in older versions
		/// of the AdWords API in the rare instance we need to introduce a new feature in
		/// an older version.
		///
		/// It is presently unused.  Do not set a value.
		/// </summary>
		public List<String_StringMapEntry> ForwardCompatibilityMap { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL.
		///
		/// <p>On update, empty string ("") indicates to clear the field.
		/// <span class="constraint Selectable">This field can be selected using the value "TrackingUrlTemplate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// <span class="constraint Selectable">This field can be selected using the value "UrlCustomParameters".</span>
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public CustomParameters UrlCustomParameters { get; set; }
		/// <summary>
		/// Describes how unbranded pharma ads will be displayed.
		/// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public VanityPharma VanityPharma { get; set; }
		/// <summary>
		/// Selective optimization setting for this campaign, which includes a set of conversion
		/// types to optimize this campaign towards.
		/// <span class="constraint Selectable">This field can be selected using the value "SelectiveOptimization".</span>
		/// <span class="constraint CampaignType">This field may only be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint CampaignType">This field may not be set.</span>
		/// </summary>
		public SelectiveOptimization SelectiveOptimization { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Status = null;
			ServingStatus = null;
			StartDate = null;
			EndDate = null;
			Budget = null;
			ConversionOptimizerEligibility = null;
			AdServingOptimizationStatus = null;
			FrequencyCap = null;
			Settings = null;
			AdvertisingChannelType = null;
			AdvertisingChannelSubType = null;
			NetworkSetting = null;
			Labels = null;
			BiddingStrategyConfiguration = null;
			CampaignTrialType = null;
			BaseCampaignId = null;
			ForwardCompatibilityMap = null;
			TrackingUrlTemplate = null;
			UrlCustomParameters = null;
			VanityPharma = null;
			SelectiveOptimization = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = CampaignStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "servingStatus")
				{
					ServingStatus = ServingStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "startDate")
				{
					StartDate = xItem.Value;
				}
				else if (localName == "endDate")
				{
					EndDate = xItem.Value;
				}
				else if (localName == "budget")
				{
					Budget = new Budget();
					Budget.ReadFrom(xItem);
				}
				else if (localName == "conversionOptimizerEligibility")
				{
					ConversionOptimizerEligibility = new ConversionOptimizerEligibility();
					ConversionOptimizerEligibility.ReadFrom(xItem);
				}
				else if (localName == "adServingOptimizationStatus")
				{
					AdServingOptimizationStatus = AdServingOptimizationStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "frequencyCap")
				{
					FrequencyCap = new FrequencyCap();
					FrequencyCap.ReadFrom(xItem);
				}
				else if (localName == "settings")
				{
					if (Settings == null) Settings = new List<Setting>();
					var settingsItem = InstanceCreator.CreateSetting(xItem);
					settingsItem.ReadFrom(xItem);
					Settings.Add(settingsItem);
				}
				else if (localName == "advertisingChannelType")
				{
					AdvertisingChannelType = AdvertisingChannelTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "advertisingChannelSubType")
				{
					AdvertisingChannelSubType = AdvertisingChannelSubTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "networkSetting")
				{
					NetworkSetting = new NetworkSetting();
					NetworkSetting.ReadFrom(xItem);
				}
				else if (localName == "labels")
				{
					if (Labels == null) Labels = new List<Label>();
					var labelsItem = new Label();
					labelsItem.ReadFrom(xItem);
					Labels.Add(labelsItem);
				}
				else if (localName == "biddingStrategyConfiguration")
				{
					BiddingStrategyConfiguration = new BiddingStrategyConfiguration();
					BiddingStrategyConfiguration.ReadFrom(xItem);
				}
				else if (localName == "campaignTrialType")
				{
					CampaignTrialType = CampaignTrialTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "forwardCompatibilityMap")
				{
					if (ForwardCompatibilityMap == null) ForwardCompatibilityMap = new List<String_StringMapEntry>();
					var forwardCompatibilityMapItem = new String_StringMapEntry();
					forwardCompatibilityMapItem.ReadFrom(xItem);
					ForwardCompatibilityMap.Add(forwardCompatibilityMapItem);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "urlCustomParameters")
				{
					UrlCustomParameters = new CustomParameters();
					UrlCustomParameters.ReadFrom(xItem);
				}
				else if (localName == "vanityPharma")
				{
					VanityPharma = new VanityPharma();
					VanityPharma.ReadFrom(xItem);
				}
				else if (localName == "selectiveOptimization")
				{
					SelectiveOptimization = new SelectiveOptimization();
					SelectiveOptimization.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ServingStatus != null)
			{
				xItem = new XElement(XName.Get("servingStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServingStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (StartDate != null)
			{
				xItem = new XElement(XName.Get("startDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartDate);
				xE.Add(xItem);
			}
			if (EndDate != null)
			{
				xItem = new XElement(XName.Get("endDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndDate);
				xE.Add(xItem);
			}
			if (Budget != null)
			{
				xItem = new XElement(XName.Get("budget", "https://adwords.google.com/api/adwords/cm/v201609"));
				Budget.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ConversionOptimizerEligibility != null)
			{
				xItem = new XElement(XName.Get("conversionOptimizerEligibility", "https://adwords.google.com/api/adwords/cm/v201609"));
				ConversionOptimizerEligibility.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AdServingOptimizationStatus != null)
			{
				xItem = new XElement(XName.Get("adServingOptimizationStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdServingOptimizationStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FrequencyCap != null)
			{
				xItem = new XElement(XName.Get("frequencyCap", "https://adwords.google.com/api/adwords/cm/v201609"));
				FrequencyCap.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Settings != null)
			{
				foreach (var settingsItem in Settings)
				{
					xItem = new XElement(XName.Get("settings", "https://adwords.google.com/api/adwords/cm/v201609"));
					settingsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (AdvertisingChannelType != null)
			{
				xItem = new XElement(XName.Get("advertisingChannelType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdvertisingChannelType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AdvertisingChannelSubType != null)
			{
				xItem = new XElement(XName.Get("advertisingChannelSubType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdvertisingChannelSubType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (NetworkSetting != null)
			{
				xItem = new XElement(XName.Get("networkSetting", "https://adwords.google.com/api/adwords/cm/v201609"));
				NetworkSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Labels != null)
			{
				foreach (var labelsItem in Labels)
				{
					xItem = new XElement(XName.Get("labels", "https://adwords.google.com/api/adwords/cm/v201609"));
					labelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (BiddingStrategyConfiguration != null)
			{
				xItem = new XElement(XName.Get("biddingStrategyConfiguration", "https://adwords.google.com/api/adwords/cm/v201609"));
				BiddingStrategyConfiguration.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CampaignTrialType != null)
			{
				xItem = new XElement(XName.Get("campaignTrialType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignTrialType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (ForwardCompatibilityMap != null)
			{
				foreach (var forwardCompatibilityMapItem in ForwardCompatibilityMap)
				{
					xItem = new XElement(XName.Get("forwardCompatibilityMap", "https://adwords.google.com/api/adwords/cm/v201609"));
					forwardCompatibilityMapItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (UrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("urlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				UrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (VanityPharma != null)
			{
				xItem = new XElement(XName.Get("vanityPharma", "https://adwords.google.com/api/adwords/cm/v201609"));
				VanityPharma.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (SelectiveOptimization != null)
			{
				xItem = new XElement(XName.Get("selectiveOptimization", "https://adwords.google.com/api/adwords/cm/v201609"));
				SelectiveOptimization.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Holds information about a changed campaign and any ad groups under that have changed.
	/// </summary>
	public class CampaignChangeData : ISoapable
	{
		/// <summary>
		/// The campaign ID.
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// Whether or not the fields of this campaign have changed. Changes to campaign level criteria and
		/// ad extensions are enumerated in their respective lists and will not be reflected in this
		/// status.
		/// </summary>
		public ChangeStatus? CampaignChangeStatus { get; set; }
		/// <summary>
		/// A list of change information for all changed adgroups belonging to the campaign.
		/// </summary>
		public List<AdGroupChangeData> ChangedAdGroups { get; set; }
		/// <summary>
		/// A list of criteria IDs that have been added as campaign criteria. This list includes any
		/// criteria that can be downloaded using CampaignCriterionService.
		/// </summary>
		public List<long> AddedCampaignCriteria { get; set; }
		/// <summary>
		/// A list of criteria IDs that have been deleted as campaign criteria. This list includes any
		/// criteria that can be downloaded using CampaignCriterionService.
		/// </summary>
		public List<long> RemovedCampaignCriteria { get; set; }
		/// <summary>
		/// A list of feed IDs for CampaignFeeds that have been changed in this campaign. If a CampaignFeed
		/// is deleted after a modification, it will not be included in this list.
		/// </summary>
		public List<long> ChangedFeeds { get; set; }
		/// <summary>
		/// A list of feed IDs for CampaignFeeds that have been removed from the campaign.
		/// </summary>
		public List<long> RemovedFeeds { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			CampaignChangeStatus = null;
			ChangedAdGroups = null;
			AddedCampaignCriteria = null;
			RemovedCampaignCriteria = null;
			ChangedFeeds = null;
			RemovedFeeds = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "campaignChangeStatus")
				{
					CampaignChangeStatus = ChangeStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "changedAdGroups")
				{
					if (ChangedAdGroups == null) ChangedAdGroups = new List<AdGroupChangeData>();
					var changedAdGroupsItem = new AdGroupChangeData();
					changedAdGroupsItem.ReadFrom(xItem);
					ChangedAdGroups.Add(changedAdGroupsItem);
				}
				else if (localName == "addedCampaignCriteria")
				{
					if (AddedCampaignCriteria == null) AddedCampaignCriteria = new List<long>();
					AddedCampaignCriteria.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedCampaignCriteria")
				{
					if (RemovedCampaignCriteria == null) RemovedCampaignCriteria = new List<long>();
					RemovedCampaignCriteria.Add(long.Parse(xItem.Value));
				}
				else if (localName == "changedFeeds")
				{
					if (ChangedFeeds == null) ChangedFeeds = new List<long>();
					ChangedFeeds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedFeeds")
				{
					if (RemovedFeeds == null) RemovedFeeds = new List<long>();
					RemovedFeeds.Add(long.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignChangeStatus != null)
			{
				xItem = new XElement(XName.Get("campaignChangeStatus", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(CampaignChangeStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ChangedAdGroups != null)
			{
				foreach (var changedAdGroupsItem in ChangedAdGroups)
				{
					xItem = new XElement(XName.Get("changedAdGroups", "https://adwords.google.com/api/adwords/ch/v201609"));
					changedAdGroupsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (AddedCampaignCriteria != null)
			{
				foreach (var addedCampaignCriteriaItem in AddedCampaignCriteria)
				{
					xItem = new XElement(XName.Get("addedCampaignCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(addedCampaignCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedCampaignCriteria != null)
			{
				foreach (var removedCampaignCriteriaItem in RemovedCampaignCriteria)
				{
					xItem = new XElement(XName.Get("removedCampaignCriteria", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedCampaignCriteriaItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ChangedFeeds != null)
			{
				foreach (var changedFeedsItem in ChangedFeeds)
				{
					xItem = new XElement(XName.Get("changedFeeds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedFeedsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedFeeds != null)
			{
				foreach (var removedFeedsItem in RemovedFeeds)
				{
					xItem = new XElement(XName.Get("removedFeeds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedFeedsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a campaign level criterion.
	/// </summary>
	public class CampaignCriterion : ISoapable
	{
		/// <summary>
		/// The campaign that the criterion is in.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "IsNegative".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsNegative { get; set; }
		/// <summary>
		/// The criterion part of the campaign criterion.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Criterion Criterion { get; set; }
		/// <summary>
		/// The modifier for bids when the criterion matches.
		///
		/// <p> Valid modifier values range from {@code 0.1} to {@code 10.0}, with {@code 0.0} reserved
		/// for opting out of platform criterion.
		/// <p>Specify {@code -1.0} to clear existing bid modifier.
		/// <span class="constraint Selectable">This field can be selected using the value "BidModifier".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public double? BidModifier { get; set; }
		/// <summary>
		/// The status for criteria.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignCriterionStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CampaignCriterionCampaignCriterionStatus? CampaignCriterionStatus { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial campaign criterion was created.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// This Map provides a place to put new features and settings in older versions
		/// of the AdWords API in the rare instance we need to introduce a new feature in
		/// an older version.
		///
		/// It is presently unused.  Do not set a value.
		/// </summary>
		public List<String_StringMapEntry> ForwardCompatibilityMap { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of CampaignCriterion.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string CampaignCriterionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			IsNegative = null;
			Criterion = null;
			BidModifier = null;
			CampaignCriterionStatus = null;
			BaseCampaignId = null;
			ForwardCompatibilityMap = null;
			CampaignCriterionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "isNegative")
				{
					IsNegative = bool.Parse(xItem.Value);
				}
				else if (localName == "criterion")
				{
					Criterion = new Criterion();
					Criterion.ReadFrom(xItem);
				}
				else if (localName == "bidModifier")
				{
					BidModifier = double.Parse(xItem.Value);
				}
				else if (localName == "campaignCriterionStatus")
				{
					CampaignCriterionStatus = CampaignCriterionCampaignCriterionStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "forwardCompatibilityMap")
				{
					if (ForwardCompatibilityMap == null) ForwardCompatibilityMap = new List<String_StringMapEntry>();
					var forwardCompatibilityMapItem = new String_StringMapEntry();
					forwardCompatibilityMapItem.ReadFrom(xItem);
					ForwardCompatibilityMap.Add(forwardCompatibilityMapItem);
				}
				else if (localName == "CampaignCriterion.Type")
				{
					CampaignCriterionType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (IsNegative != null)
			{
				xItem = new XElement(XName.Get("isNegative", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsNegative.Value.ToString());
				xE.Add(xItem);
			}
			if (Criterion != null)
			{
				xItem = new XElement(XName.Get("criterion", "https://adwords.google.com/api/adwords/cm/v201609"));
				Criterion.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidModifier != null)
			{
				xItem = new XElement(XName.Get("bidModifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifier.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignCriterionStatus != null)
			{
				xItem = new XElement(XName.Get("campaignCriterionStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignCriterionStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (ForwardCompatibilityMap != null)
			{
				foreach (var forwardCompatibilityMapItem in ForwardCompatibilityMap)
				{
					xItem = new XElement(XName.Get("forwardCompatibilityMap", "https://adwords.google.com/api/adwords/cm/v201609"));
					forwardCompatibilityMapItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (CampaignCriterionType != null)
			{
				xItem = new XElement(XName.Get("CampaignCriterion.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignCriterionType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The status of the campaign criteria.
	/// </summary>
	public enum CampaignCriterionCampaignCriterionStatus
	{
		Active,
		Removed,
		Paused
	}
	/// <summary>
	/// Base error class for Campaign Criterion Service.
	/// </summary>
	public class CampaignCriterionError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public CampaignCriterionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CampaignCriterionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignCriterionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum CampaignCriterionErrorReason
	{
		/// <summary>
		/// Concrete type of criterion (keyword v.s. placement) is required for
		/// ADD and SET operations.
		/// </summary>
		ConcreteTypeRequired,
		/// <summary>
		/// Invalid placement URL.
		/// </summary>
		InvalidPlacementUrl,
		/// <summary>
		/// Criteria type can not be excluded for the campaign by the customer.
		/// like AOL account type cannot target site type criteria
		/// </summary>
		CannotExcludeCriteriaType,
		/// <summary>
		/// Cannot set the campaign criterion status for this criteria type.
		/// </summary>
		CannotSetStatusForCriteriaType,
		/// <summary>
		/// Cannot set the campaign criterion status for an excluded criteria.
		/// </summary>
		CannotSetStatusForExcludedCriteria,
		/// <summary>
		/// Cannot target and exclude the same criterion.
		/// </summary>
		CannotTargetAndExclude,
		/// <summary>
		/// The #mutate operation contained too many operations.
		/// </summary>
		TooManyOperations,
		/// <summary>
		/// This operator cannot be applied to a criterion of this type.
		/// </summary>
		OperatorNotSupportedForCriterionType,
		/// <summary>
		/// The Shopping campaign sales country is not supported for ProductSalesChannel targeting.
		/// </summary>
		ShoppingCampaignSalesCountryNotSupportedForSalesChannel,
		Unknown,
		/// <summary>
		/// The existing field can't be updated with ADD operation. It can be updated with
		/// SET operation only.
		/// </summary>
		CannotAddExistingField
	}
	/// <summary>
	/// Generic operation (add, remove and set) for campaign criteria.
	/// </summary>
	public class CampaignCriterionOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CampaignCriterion Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CampaignCriterion();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignCriterionOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of campaign criteria resulting from a call to
	/// {@link CampaignCriterionService#get}.
	/// </summary>
	public class CampaignCriterionPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<CampaignCriterion> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CampaignCriterion>();
					var entriesItem = new CampaignCriterion();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignCriterionPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the CampaignCriterionService.
	/// </summary>
	public class CampaignCriterionReturnValue : ListReturnValue, ISoapable
	{
		public List<CampaignCriterion> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CampaignCriterion>();
					var valueItem = new CampaignCriterion();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignCriterionReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Base error class for Campaign Service.
	/// </summary>
	public class CampaignError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public CampaignErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CampaignErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum CampaignErrorReason
	{
		/// <summary>
		/// A complete campaign cannot go back to being incomplete
		/// </summary>
		CannotGoBackToIncomplete,
		/// <summary>
		/// Cannot target content network.
		/// </summary>
		CannotTargetContentNetwork,
		/// <summary>
		/// Cannot target search network.
		/// </summary>
		CannotTargetSearchNetwork,
		/// <summary>
		/// Cannot cover search network without google search network.
		/// </summary>
		CannotTargetSearchNetworkWithoutGoogleSearch,
		/// <summary>
		/// Cannot target Google Search network for a CPM campaign.
		/// </summary>
		CannotTargetGoogleSearchForCpmCampaign,
		/// <summary>
		/// Must target at least one network.
		/// </summary>
		CampaignMustTargetAtLeastOneNetwork,
		/// <summary>
		/// Only some Google partners are allowed to target partner search network.
		/// </summary>
		CannotTargetPartnerSearchNetwork,
		/// <summary>
		/// Cannot target content network only as campaign has criteria-level bidding strategy.
		/// </summary>
		CannotTargetContentNetworkOnlyWithCriteriaLevelBiddingStrategy,
		/// <summary>
		/// Cannot modify the start or end date such that the campaign duration would not contain the
		/// durations of all runnable trials.
		/// </summary>
		CampaignDurationMustContainAllRunnableTrials,
		/// <summary>
		/// Cannot modify dates, budget or campaign name of a trial campaign.
		/// </summary>
		CannotModifyForTrialCampaign,
		/// <summary>
		/// Trying to modify the name of an active or paused campaign, where the name is already
		/// assigned to another active or paused campaign.
		/// </summary>
		DuplicateCampaignName,
		/// <summary>
		/// Two fields are in conflicting modes.
		/// </summary>
		IncompatibleCampaignField,
		/// <summary>
		/// Campaign name cannot be used.
		/// </summary>
		InvalidCampaignName,
		/// <summary>
		/// Given status is invalid.
		/// </summary>
		InvalidAdServingOptimizationStatus,
		/// <summary>
		/// Error in the campaign level tracking url.
		/// </summary>
		InvalidTrackingUrl,
		/// <summary>
		/// Cannot set both tracking url template and tracking setting. An user has to clear legacy
		/// tracking setting in order to add tracking url template.
		/// </summary>
		CannotSetBothTrackingUrlTemplateAndTrackingSetting,
		/// <summary>
		/// The maximum number of impressions for Frequency Cap should be an integer greater than 0.
		/// </summary>
		MaxImpressionsNotInRange,
		/// <summary>
		/// Only the Day, Week and Month time units are supported.
		/// </summary>
		TimeUnitNotSupported,
		/// <summary>
		/// Operation not allowed on a campaign whose serving status has ended
		/// </summary>
		InvalidOperationIfServingStatusHasEnded,
		/// <summary>
		/// This budget is exclusively linked to a Campaign that is using @link{Experiment}s
		/// so it cannot be shared.
		/// </summary>
		BudgetCannotBeShared,
		/// <summary>
		/// Campaigns using @link{Experiment}s cannot use a shared budget.
		/// </summary>
		CampaignCannotUseSharedBudget,
		/// <summary>
		/// A different budget cannot be assigned to a campaign when there are running or scheduled
		/// trials.
		/// </summary>
		CannotChangeBudgetOnCampaignWithTrials,
		/// <summary>
		/// No link found between the campaign and the label.
		/// </summary>
		CampaignLabelDoesNotExist,
		/// <summary>
		/// The label has already been attached to the campaign.
		/// </summary>
		CampaignLabelAlreadyExists,
		/// <summary>
		/// A ShoppingSetting was not found when creating a shopping campaign.
		/// </summary>
		MissingShoppingSetting,
		/// <summary>
		/// The country in shopping setting is not an allowed country.
		/// </summary>
		InvalidShoppingSalesCountry,
		/// <summary>
		/// A Campaign with channel sub type UNIVERSAL_APP_CAMPAIGN must have a
		/// UniversalAppCampaignSetting specified.
		/// </summary>
		MissingUniversalAppCampaignSetting,
		/// <summary>
		/// The requested channel type is not available according to the customer's account setting.
		/// </summary>
		AdvertisingChannelTypeNotAvailableForAccountType,
		/// <summary>
		/// The AdvertisingChannelSubType is not a valid subtype of the primary channel type.
		/// </summary>
		InvalidAdvertisingChannelSubType,
		/// <summary>
		/// At least one conversion must be selected.
		/// </summary>
		AtLeastOneConversionMustBeSelected,
		/// <summary>
		/// Default error
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents the estimate results for a single campaign.
	/// </summary>
	public class CampaignEstimate : Estimate, ISoapable
	{
		/// <summary>
		/// The campaignId of the campaign specified in the request.
		///
		/// This will be <code>null</code> for new campaigns.
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// The estimates for the ad groups belonging to this campaign in the request.
		///
		/// They will be returned in the same order that they were sent in the request.
		/// </summary>
		public List<AdGroupEstimate> AdGroupEstimates { get; set; }
		/// <summary>
		/// Traffic estimates segmented by platform for this campaign.
		/// </summary>
		public List<PlatformCampaignEstimate> PlatformEstimates { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CampaignId = null;
			AdGroupEstimates = null;
			PlatformEstimates = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupEstimates")
				{
					if (AdGroupEstimates == null) AdGroupEstimates = new List<AdGroupEstimate>();
					var adGroupEstimatesItem = new AdGroupEstimate();
					adGroupEstimatesItem.ReadFrom(xItem);
					AdGroupEstimates.Add(adGroupEstimatesItem);
				}
				else if (localName == "platformEstimates")
				{
					if (PlatformEstimates == null) PlatformEstimates = new List<PlatformCampaignEstimate>();
					var platformEstimatesItem = new PlatformCampaignEstimate();
					platformEstimatesItem.ReadFrom(xItem);
					PlatformEstimates.Add(platformEstimatesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CampaignEstimate");
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupEstimates != null)
			{
				foreach (var adGroupEstimatesItem in AdGroupEstimates)
				{
					xItem = new XElement(XName.Get("adGroupEstimates", "https://adwords.google.com/api/adwords/o/v201609"));
					adGroupEstimatesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PlatformEstimates != null)
			{
				foreach (var platformEstimatesItem in PlatformEstimates)
				{
					xItem = new XElement(XName.Get("platformEstimates", "https://adwords.google.com/api/adwords/o/v201609"));
					platformEstimatesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a campaign that will be estimated.<p>
	///
	/// Returns traffic estimates for the requested set of campaigns.
	/// The campaigns can be all new or all existing, or a mixture of
	/// new and existing. Only existing campaigns may contain estimates for existing
	/// ad groups.<p>
	///
	/// For existing campaigns, the campaign and optionally the ad group will be
	/// used as context to produce more accurate estimates. Traffic estimates may
	/// only be requested on keywords, so regardless of whether campaign and ad group
	/// IDs are provided or left blank, at least one keyword is required to estimate
	/// traffic.<p>
	///
	/// To make a keyword estimates request in which estimates do not consider
	/// existing account information (e.g. historical ad group performance), set
	/// {@link #campaignId} to {@code null}.
	/// </summary>
	public class CampaignEstimateRequest : EstimateRequest, ISoapable
	{
		/// <summary>
		/// The campaignId of an existing campaign or {@code null}.<p>
		///
		/// Refer to the {@link CampaignEstimateRequest} documentation for
		/// detailed usage.
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// The list of ad groups to estimate. This field is required and should not be {@code null}. At
		/// least one ad group is required.
		///
		/// <p>New campaigns may only contain new ad groups. If an
		/// {@link AdGroupEstimateRequest} has an adGroupId but the campaign is new,
		/// the API will return an error.
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<AdGroupEstimateRequest> AdGroupEstimateRequests { get; set; }
		/// <summary>
		/// A list of {@link Criterion}s to be used for this Campaign. Criteria
		/// provide information about geographical and language targeting.
		///
		/// <p>Values in this field override the current targets in the Campaign
		/// specified by {@link #campaignId} by the following mechanism:
		///
		/// <p>This field accepts two types of {@link Criterion}s: {@link Location}, which should contain
		/// all geographic targeting and {@link Language}, which should contain all language targeting.
		/// If {@link Location}s are passed in, all geographic targeting in the campaign will be
		/// overridden.  If any {@link Language}s are passed in, all language targeting in the campaign
		/// will be overridden.
		///
		/// <p>If multiple {@link Location}s are specified, the traffic estimate will
		/// be the sum of the estimates for each targeted area. This means that if
		/// criteria are chosen which overlap each other (for example, targeting both
		/// a country and a city within that country), the traffic estimate will be
		/// be larger than if no overlap were present - i. e., the overlap region will
		/// be double-counted in the estimate.
		///
		/// <p>If no criteria are specified and this is for a new campaign then it
		/// will default to all languages in all countries and territories, and
		/// Google search.
		///
		/// <p>If no criteria are specified and this is for an existing campaign
		/// then the current targeting on that campaign will be used.
		///
		/// <p>While there's no solid limit on number of criteria,
		/// TrafficEstimatorService may return error with TOO_MANY_TARGETS if the
		/// request contains too many criteria across all
		/// {@link CampaignEstimateRequest}s in a {@link TrafficEstimatorSelector}.
		///
		/// <p>Supported Criteria : {@link Language} and {@link Location}.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<Criterion> Criteria { get; set; }
		/// <summary>
		/// A {@link NetworkSetting} to be used for this Campaign. The value of this
		/// field overrides the current targets in the Campaign specified by
		/// {@link #campaignId}.
		///
		/// <p>For non Google partner accounts, only
		/// {@link NetworkSetting#targetGoogleSearch} and
		/// {@link NetworkSetting#targetSearchNetwork} are supported, they may be
		/// combined to sum the estimates.
		///
		/// <p>For some Google partner accounts, in addition
		/// {@link NetworkSetting#getTargetPartnerSearchNetwork} is supported.
		///
		/// <p>If all request network settings and Campaign's network settings are
		/// empty, the default is {@link NetworkSetting#targetGoogleSearch}.
		/// </summary>
		public NetworkSetting NetworkSetting { get; set; }
		/// <summary>
		/// Daily campaign budget to use in traffic estimation.  If not specified,
		/// the daily budget is unlimited.
		/// </summary>
		public Money DailyBudget { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CampaignId = null;
			AdGroupEstimateRequests = null;
			Criteria = null;
			NetworkSetting = null;
			DailyBudget = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "adGroupEstimateRequests")
				{
					if (AdGroupEstimateRequests == null) AdGroupEstimateRequests = new List<AdGroupEstimateRequest>();
					var adGroupEstimateRequestsItem = new AdGroupEstimateRequest();
					adGroupEstimateRequestsItem.ReadFrom(xItem);
					AdGroupEstimateRequests.Add(adGroupEstimateRequestsItem);
				}
				else if (localName == "criteria")
				{
					if (Criteria == null) Criteria = new List<Criterion>();
					var criteriaItem = new Criterion();
					criteriaItem.ReadFrom(xItem);
					Criteria.Add(criteriaItem);
				}
				else if (localName == "networkSetting")
				{
					NetworkSetting = new NetworkSetting();
					NetworkSetting.ReadFrom(xItem);
				}
				else if (localName == "dailyBudget")
				{
					DailyBudget = new Money();
					DailyBudget.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CampaignEstimateRequest");
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdGroupEstimateRequests != null)
			{
				foreach (var adGroupEstimateRequestsItem in AdGroupEstimateRequests)
				{
					xItem = new XElement(XName.Get("adGroupEstimateRequests", "https://adwords.google.com/api/adwords/o/v201609"));
					adGroupEstimateRequestsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Criteria != null)
			{
				foreach (var criteriaItem in Criteria)
				{
					xItem = new XElement(XName.Get("criteria", "https://adwords.google.com/api/adwords/o/v201609"));
					criteriaItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (NetworkSetting != null)
			{
				xItem = new XElement(XName.Get("networkSetting", "https://adwords.google.com/api/adwords/o/v201609"));
				NetworkSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (DailyBudget != null)
			{
				xItem = new XElement(XName.Get("dailyBudget", "https://adwords.google.com/api/adwords/o/v201609"));
				DailyBudget.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A CampaignExtensionSetting is used to add or modify extensions being served for the specified
	/// campaign.
	/// </summary>
	public class CampaignExtensionSetting : ISoapable
	{
		/// <summary>
		/// The id of the campaign for the feed items being added or modified.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// The extension type the extension setting applies to.
		/// <span class="constraint Selectable">This field can be selected using the value "ExtensionType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FeedType? ExtensionType { get; set; }
		/// <summary>
		/// The extension setting specifying which extensions to serve for the specified campaign. If
		/// extensionSetting is empty (i.e. has an empty list of feed items and null platformRestrictions),
		/// extensions are disabled for the specified extensionType.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public ExtensionSetting ExtensionSetting { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			ExtensionType = null;
			ExtensionSetting = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "extensionType")
				{
					ExtensionType = FeedTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "extensionSetting")
				{
					ExtensionSetting = new ExtensionSetting();
					ExtensionSetting.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (ExtensionType != null)
			{
				xItem = new XElement(XName.Get("extensionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExtensionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ExtensionSetting != null)
			{
				xItem = new XElement(XName.Get("extensionSetting", "https://adwords.google.com/api/adwords/cm/v201609"));
				ExtensionSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation used to create or mutate a CampaignExtensionSetting.
	/// </summary>
	public class CampaignExtensionSettingOperation : Operation, ISoapable
	{
		/// <summary>
		/// CampaignExtensionSetting to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CampaignExtensionSetting Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CampaignExtensionSetting();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignExtensionSettingOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of CampaignExtensionSetting objects resulting from a
	/// {@code CampaignExtensionSettingService#get} call.
	/// </summary>
	public class CampaignExtensionSettingPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<CampaignExtensionSetting> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CampaignExtensionSetting>();
					var entriesItem = new CampaignExtensionSetting();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignExtensionSettingPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from a {@code CampaignExtensionSettingService#mutate} call.
	/// </summary>
	public class CampaignExtensionSettingReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting CampaignExtensionSettings.
		/// </summary>
		public List<CampaignExtensionSetting> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CampaignExtensionSetting>();
					var valueItem = new CampaignExtensionSetting();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignExtensionSettingReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// CampaignFeeds are used to link a feed to a campaign using a matching function,
	/// making the feed's feed items available in the campaign's ads for substitution.
	/// </summary>
	public class CampaignFeed : ISoapable
	{
		/// <summary>
		/// Id of the Feed associated with the CampaignFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Id of the Campaign associated with the CampaignFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// Matching function associated with the CampaignFeed.
		/// The matching function will return true/false indicating
		/// which feed items may serve.
		/// <span class="constraint Selectable">This field can be selected using the value "MatchingFunction".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Function MatchingFunction { get; set; }
		/// <summary>
		/// Indicates which <a href="/adwords/api/docs/appendix/placeholders">
		/// placeholder types</a> the feed may populate under the
		/// connected Campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "PlaceholderTypes".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<int> PlaceholderTypes { get; set; }
		/// <summary>
		/// Status of the CampaignFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CampaignFeedStatus? Status { get; set; }
		/// <summary>
		/// ID of the base campaign from which this draft/trial feed was created.
		/// This field is only returned on get requests.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			CampaignId = null;
			MatchingFunction = null;
			PlaceholderTypes = null;
			Status = null;
			BaseCampaignId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "matchingFunction")
				{
					MatchingFunction = new Function();
					MatchingFunction.ReadFrom(xItem);
				}
				else if (localName == "placeholderTypes")
				{
					if (PlaceholderTypes == null) PlaceholderTypes = new List<int>();
					PlaceholderTypes.Add(int.Parse(xItem.Value));
				}
				else if (localName == "status")
				{
					Status = CampaignFeedStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (MatchingFunction != null)
			{
				xItem = new XElement(XName.Get("matchingFunction", "https://adwords.google.com/api/adwords/cm/v201609"));
				MatchingFunction.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (PlaceholderTypes != null)
			{
				foreach (var placeholderTypesItem in PlaceholderTypes)
				{
					xItem = new XElement(XName.Get("placeholderTypes", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(placeholderTypesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an error for the CampaignFeedService.
	/// </summary>
	public class CampaignFeedError : ApiError, ISoapable
	{
		/// <summary>
		/// Error reason.
		/// </summary>
		public CampaignFeedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CampaignFeedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignFeedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum CampaignFeedErrorReason
	{
		/// <summary>
		/// An active feed already exists for this campaign and place holder type.
		/// </summary>
		FeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// The specified id does not exist.
		/// </summary>
		InvalidId,
		/// <summary>
		/// The specified feed is deleted.
		/// </summary>
		CannotAddForDeletedFeed,
		/// <summary>
		/// The CampaignFeed already exists. SET should be used to modify the existing CampaignFeed.
		/// </summary>
		CannotAddAlreadyExistingCampaignFeed,
		/// <summary>
		/// Cannot operate on deleted campaign feed.
		/// </summary>
		CannotOperateOnRemovedCampaignFeed,
		/// <summary>
		/// Invalid placeholder type ids.
		/// </summary>
		InvalidPlaceholderTypes,
		/// <summary>
		/// Feed mapping for this placeholder type does not exist.
		/// </summary>
		MissingFeedmappingForPlaceholderType,
		/// <summary>
		/// Location CampaignFeeds cannot be created unless there is a location CustomerFeed
		/// for the specified feed.
		/// </summary>
		NoExistingLocationCustomerFeed,
		Unknown
	}
	/// <summary>
	/// Operation used to create or mutate a CampaignFeed.
	/// </summary>
	public class CampaignFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// CampaignFeed operand.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CampaignFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CampaignFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link CampaignFeedService#get}. Contains a list of
	/// associations between campaign and feeds.
	/// </summary>
	public class CampaignFeedPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The resulting CampaignFeeds.
		/// </summary>
		public List<CampaignFeed> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CampaignFeed>();
					var entriesItem = new CampaignFeed();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignFeedPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link CampaignFeedService#mutate}.
	/// </summary>
	public class CampaignFeedReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting CampaignFeeds.
		/// </summary>
		public List<CampaignFeed> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CampaignFeed>();
					var valueItem = new CampaignFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of the CampaignFeed.
	/// </summary>
	public enum CampaignFeedStatus
	{
		/// <summary>
		/// This CampaignFeed's data is currently being used.
		/// </summary>
		Enabled,
		/// <summary>
		/// This CampaignFeed's data is not used anymore.
		/// </summary>
		Removed,
		/// <summary>
		/// Unknown status.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Manages the labels associated with a campaign.
	/// </summary>
	public class CampaignLabel : ISoapable
	{
		/// <summary>
		/// The id of the campaign that the label is applied to.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// The id of an existing label to be applied to the campaign.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? LabelId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			LabelId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "labelId")
				{
					LabelId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (LabelId != null)
			{
				xItem = new XElement(XName.Get("labelId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operations for adding/removing labels from Campaign.
	/// </summary>
	public class CampaignLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// CampaignLabel to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CampaignLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CampaignLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link CampaignService#mutateLabel} call.
	/// </summary>
	public class CampaignLabelReturnValue : ListReturnValue, ISoapable
	{
		public List<CampaignLabel> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CampaignLabel>();
					var valueItem = new CampaignLabel();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignLabelReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An operation on an AdWords campaign.
	/// <p class="note"><b>Note:</b> The <code>REMOVE</code> operator is not
	/// supported. To remove a campaign, set its {@link Campaign#status status}
	/// to {@code REMOVED}.</p>
	/// </summary>
	public class CampaignOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Campaign Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Campaign();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a set of campaigns resulting from the filtering and paging of the
	/// {@link CampaignService#get} call.
	/// </summary>
	public class CampaignPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<Campaign> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Campaign>();
					var entriesItem = new Campaign();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents error codes for campaign preferences.
	/// </summary>
	public class CampaignPreferenceError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public CampaignPreferenceErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CampaignPreferenceErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignPreferenceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum CampaignPreferenceErrorReason
	{
		/// <summary>
		/// A campaign cannot have two preferences with the same preference key.
		/// </summary>
		PreferenceAlreadyExists,
		/// <summary>
		/// No preference matched the given preference key.
		/// </summary>
		PreferenceNotFound,
		Unknown
	}
	/// <summary>
	/// A container for return values from the CampaignService.
	/// </summary>
	public class CampaignReturnValue : ListReturnValue, ISoapable
	{
		public List<Campaign> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Campaign>();
					var valueItem = new Campaign();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// CampaignSharedSets are used for managing the shared sets
	/// associated with a campaign.
	/// </summary>
	public class CampaignSharedSet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "SharedSetId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? SharedSetId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "SharedSetName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string SharedSetName { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "SharedSetType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint CampaignType">This field may only be set to NEGATIVE_KEYWORDS for campaign channel type SHOPPING.</span>
		/// <span class="constraint CampaignType">This field may only be set to NEGATIVE_PLACEMENTS for campaign channel subtype DISPLAY_MOBILE_APP.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SharedSetType? SharedSetType { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CampaignName { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CampaignSharedSetStatus? Status { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SharedSetId = null;
			CampaignId = null;
			SharedSetName = null;
			SharedSetType = null;
			CampaignName = null;
			Status = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "sharedSetId")
				{
					SharedSetId = long.Parse(xItem.Value);
				}
				else if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "sharedSetName")
				{
					SharedSetName = xItem.Value;
				}
				else if (localName == "sharedSetType")
				{
					SharedSetType = SharedSetTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "campaignName")
				{
					CampaignName = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = CampaignSharedSetStatusExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SharedSetId != null)
			{
				xItem = new XElement(XName.Get("sharedSetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SharedSetId.Value.ToString());
				xE.Add(xItem);
			}
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (SharedSetName != null)
			{
				xItem = new XElement(XName.Get("sharedSetName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SharedSetName);
				xE.Add(xItem);
			}
			if (SharedSetType != null)
			{
				xItem = new XElement(XName.Get("sharedSetType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SharedSetType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (CampaignName != null)
			{
				xItem = new XElement(XName.Get("campaignName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignName);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents error codes for the CampaignSharedSetService.
	/// </summary>
	public class CampaignSharedSetError : ApiError, ISoapable
	{
		public CampaignSharedSetErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CampaignSharedSetErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignSharedSetError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons
	/// </summary>
	public enum CampaignSharedSetErrorReason
	{
		CampaignSharedSetDoesNotExist,
		SharedSetNotActive,
		Unknown
	}
	/// <summary>
	/// Operations for adding/updating CampaignSharedSet entities.
	/// </summary>
	public class CampaignSharedSetOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CampaignSharedSet Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CampaignSharedSet();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignSharedSetOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of associations between campaigns and shared sets
	/// resulting from the filtering and paging of
	/// {@link CampaignSharedSetService#get} call.
	/// </summary>
	public class CampaignSharedSetPage : NullStatsPage, ISoapable
	{
		public List<CampaignSharedSet> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CampaignSharedSet>();
					var entriesItem = new CampaignSharedSet();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignSharedSetPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link CampaignSharedSetService#mutate} call.
	/// </summary>
	public class CampaignSharedSetReturnValue : ListReturnValue, ISoapable
	{
		public List<CampaignSharedSet> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CampaignSharedSet>();
					var valueItem = new CampaignSharedSet();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CampaignSharedSetReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of association between campaign and shared set.
	/// </summary>
	public enum CampaignSharedSetStatus
	{
		Enabled,
		Removed,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Campaign status.
	/// </summary>
	public enum CampaignStatus
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Campaign is currently serving ads depending on budget information.
		/// </summary>
		Enabled,
		/// <summary>
		/// Campaign has been paused by the user.
		/// </summary>
		Paused,
		/// <summary>
		/// Campaign has been removed.
		/// </summary>
		Removed
	}
	/// <summary>
	/// This enum is used to indicate if this campaign is a normal campaign, a draft
	/// campaign, or a trial campaign.
	/// </summary>
	public enum CampaignTrialType
	{
		/// <summary>
		/// Invalid type. Should not be used except for detecting values that are incorrect,
		/// or values that are not yet known to the user.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// This is a regular campaign created by the advertiser.
		/// </summary>
		Base,
		/// <summary>
		/// This is a draft version of a campaign. It has some modifications from a base
		/// campaign, but it does not serve or accrue stats.
		/// </summary>
		Draft,
		/// <summary>
		/// This is a trial version of a campaign. It has some modifications from a base
		/// campaign, and a percentage of traffic is being diverted from the BASE campaign
		/// to this trial campaign.
		/// </summary>
		Trial
	}
	/// <summary>
	/// Represents a Carrier Criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Carrier : Criterion, ISoapable
	{
		/// <summary>
		/// Name of the carrier.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Country code of the carrier.
		/// Can be {@code null} if not applicable, e.g., for Carrier "Wifi".
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CountryCode { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Name = null;
			CountryCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "countryCode")
				{
					CountryCode = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Carrier");
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (CountryCode != null)
			{
				xItem = new XElement(XName.Get("countryCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CountryCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} for {@code KEYWORD} {@link IdeaType}s that
	/// sets a keyword category that all search results should belong to.
	/// Uses the newer "Products and Services" taxonomy.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS.
	/// </summary>
	public class CategoryProductsAndServicesSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A keyword category ID in the "Products and Services" taxonomy that all
		/// search results should belong to.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? CategoryId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CategoryId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "categoryId")
				{
					CategoryId = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CategoryProductsAndServicesSearchParameter");
			XElement xItem = null;
			if (CategoryId != null)
			{
				xItem = new XElement(XName.Get("categoryId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(CategoryId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An enum used to classify the types of changes that have been made to an adgroup/campaign during a
	/// specified date range. This only refers to the field of the entity itself, and not its children.
	///
	/// <p>For example, if an AdGroup name changed, this status would be FIELDS_CHANGED, but if only bids
	/// on keywords belonging an AdGroup were changed this status would be FIELDS_UNCHANGED.
	/// </summary>
	public enum ChangeStatus
	{
		/// <summary>
		/// The fields of this entity have not changed, but there may still be changes to its children.
		/// </summary>
		FieldsUnchanged,
		/// <summary>
		/// The fields of this entity have changed, for example the name of an adgroup.
		/// </summary>
		FieldsChanged,
		/// <summary>
		/// This entity was created during the time frame we're looking at. We will not enumerate all of
		/// the individual changes to this entity and its children. Instead it should be loaded from the
		/// appropriate service.
		/// </summary>
		New
	}
	/// <summary>
	/// Error due to user not accepting the AdWords terms of service.
	/// </summary>
	public class ClientTermsError : ApiError, ISoapable
	{
		public ClientTermsErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ClientTermsErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ClientTermsError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enums for the various reasons an error can be thrown as a result of
	/// ClientTerms violation.
	/// </summary>
	public enum ClientTermsErrorReason
	{
		/// <summary>
		/// Customer has not agreed to the latest AdWords Terms & Conditions
		/// </summary>
		IncompleteSignupCurrentAdwordsTncNotAgreed
	}
	/// <summary>
	/// Errors associated with the size of the given collection being
	/// out of bounds.
	/// </summary>
	public class CollectionSizeError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public CollectionSizeErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CollectionSizeErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CollectionSizeError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum CollectionSizeErrorReason
	{
		TooFew,
		TooMany
	}
	/// <summary>
	/// Comparable types for constructing ranges with.
	/// </summary>
	public abstract class ComparableValue : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of ComparableValue.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ComparableValueType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ComparableValueType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ComparableValue.Type")
				{
					ComparableValueType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ComparableValueType != null)
			{
				xItem = new XElement(XName.Get("ComparableValue.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ComparableValueType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} for {@code KEYWORD} {@link IdeaType}s used to
	/// filter the results by the amount of competition (eg: LOW, MEDIUM, HIGH).
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class CompetitionSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A set of {@link Level}s indicating a relative amount of competition that
		/// {@code KEYWORD} {@link IdeaType}s should have in the  results.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<CompetitionSearchParameterLevel> Levels { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Levels = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "levels")
				{
					if (Levels == null) Levels = new List<CompetitionSearchParameterLevel>();
					Levels.Add(CompetitionSearchParameterLevelExtensions.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CompetitionSearchParameter");
			XElement xItem = null;
			if (Levels != null)
			{
				foreach (var levelsItem in Levels)
				{
					xItem = new XElement(XName.Get("levels", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(levelsItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An enumeration of possible values to be used in conjunction with the
	/// {@link CompetitionSearchParameter} to specify the granularity of
	/// competition to be filtered.
	/// </summary>
	public enum CompetitionSearchParameterLevel
	{
		/// <summary>
		/// Low - competition rate [0.0000, 0.3333]
		/// </summary>
		Low,
		/// <summary>
		/// Medium - competition rate (0.3333, 0.6667]
		/// </summary>
		Medium,
		/// <summary>
		/// High - competition rate (0.6667, 1.0000]
		/// </summary>
		High
	}
	/// <summary>
	/// Marker interface for ConstantDataService objects. This is primarily required for field
	/// catalog generation.
	/// </summary>
	public class ConstantData : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of ConstantData.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ConstantDataType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ConstantDataType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ConstantData.Type")
				{
					ConstantDataType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ConstantDataType != null)
			{
				xItem = new XElement(XName.Get("ConstantData.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConstantDataType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An enumeration of possible user interest taxonomy types.
	/// </summary>
	public enum ConstantDataServiceUserInterestTaxonomyType
	{
		/// <summary>
		/// The brand for this user interest.
		/// </summary>
		Brand,
		/// <summary>
		/// The market for this user interest.
		/// </summary>
		InMarket,
		/// <summary>
		/// Users known to have installed applications in the specified categories.
		/// </summary>
		MobileAppInstallUser,
		/// <summary>
		/// The geographical location of the interest-based vertical.
		/// </summary>
		VerticalGeo,
		/// <summary>
		/// User interest criteria for new smart phone users.
		/// </summary>
		NewSmartPhoneUser
	}
	/// <summary>
	/// A constant operand in a matching function.
	/// </summary>
	public class ConstantOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// Type of constant in this operand.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ConstantOperandConstantType? Type { get; set; }
		/// <summary>
		/// Units of constant in this operand.
		/// </summary>
		public ConstantOperandUnit? Unit { get; set; }
		/// <summary>
		/// Long value of the operand if it is a long type.
		/// </summary>
		public long? LongValue { get; set; }
		/// <summary>
		/// Boolean value of the operand if it is a boolean type.
		/// </summary>
		public bool? BooleanValue { get; set; }
		/// <summary>
		/// Double value of the operand if it is a double type.
		/// </summary>
		public double? DoubleValue { get; set; }
		/// <summary>
		/// String value of the operand if it is a string type.
		/// </summary>
		public string StringValue { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Type = null;
			Unit = null;
			LongValue = null;
			BooleanValue = null;
			DoubleValue = null;
			StringValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "type")
				{
					Type = ConstantOperandConstantTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "unit")
				{
					Unit = ConstantOperandUnitExtensions.Parse(xItem.Value);
				}
				else if (localName == "longValue")
				{
					LongValue = long.Parse(xItem.Value);
				}
				else if (localName == "booleanValue")
				{
					BooleanValue = bool.Parse(xItem.Value);
				}
				else if (localName == "doubleValue")
				{
					DoubleValue = double.Parse(xItem.Value);
				}
				else if (localName == "stringValue")
				{
					StringValue = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConstantOperand");
			XElement xItem = null;
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Unit != null)
			{
				xItem = new XElement(XName.Get("unit", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Unit.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (LongValue != null)
			{
				xItem = new XElement(XName.Get("longValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LongValue.Value.ToString());
				xE.Add(xItem);
			}
			if (BooleanValue != null)
			{
				xItem = new XElement(XName.Get("booleanValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BooleanValue.Value.ToString());
				xE.Add(xItem);
			}
			if (DoubleValue != null)
			{
				xItem = new XElement(XName.Get("doubleValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DoubleValue.Value.ToString());
				xE.Add(xItem);
			}
			if (StringValue != null)
			{
				xItem = new XElement(XName.Get("stringValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StringValue);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The types of constant operands.
	/// </summary>
	public enum ConstantOperandConstantType
	{
		/// <summary>
		/// Boolean constant type. booleanValue should be set for this type.
		/// </summary>
		Boolean,
		/// <summary>
		/// Double constant type. doubleValue should be set for this type.
		/// </summary>
		Double,
		/// <summary>
		/// Long constant type. longValue should be set for this type.
		/// </summary>
		Long,
		/// <summary>
		/// String constant type. stringValue should be set for this type.
		/// </summary>
		String
	}
	/// <summary>
	/// The units of constant operands, if applicable.
	/// </summary>
	public enum ConstantOperandUnit
	{
		/// <summary>
		/// Meters.
		/// </summary>
		Meters,
		/// <summary>
		/// Miles.
		/// </summary>
		Miles,
		None
	}
	/// <summary>
	/// Content Label for category exclusion.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ContentLabel : Criterion, ISoapable
	{
		/// <summary>
		/// Content label type
		/// <span class="constraint Selectable">This field can be selected using the value "ContentLabelType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ContentLabelType? ContentLabelType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ContentLabelType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "contentLabelType")
				{
					ContentLabelType = ContentLabelTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ContentLabel");
			XElement xItem = null;
			if (ContentLabelType != null)
			{
				xItem = new XElement(XName.Get("contentLabelType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ContentLabelType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Content label type.
	/// </summary>
	public enum ContentLabelType
	{
		/// <summary>
		/// Sexually suggestive content
		/// </summary>
		Adultish,
		/// <summary>
		/// Error pages
		/// </summary>
		Afe,
		/// <summary>
		/// Below the fold placements
		/// </summary>
		BelowTheFold,
		/// <summary>
		/// Military & international conflict
		/// </summary>
		Conflict,
		/// <summary>
		/// Parked domains
		/// </summary>
		Dp,
		/// <summary>
		/// Embedded video
		/// </summary>
		EmbeddedVideo,
		/// <summary>
		/// Games
		/// </summary>
		Games,
		/// <summary>
		/// Juvenile, gross & bizarre content
		/// </summary>
		Juvenile,
		/// <summary>
		/// Profanity & rough language
		/// </summary>
		Profanity,
		/// <summary>
		/// Forums
		/// </summary>
		UgcForums,
		/// <summary>
		/// Image-sharing pages
		/// </summary>
		UgcImages,
		/// <summary>
		/// Social networks
		/// </summary>
		UgcSocial,
		/// <summary>
		/// Video-sharing pages
		/// </summary>
		UgcVideos,
		/// <summary>
		/// Crime, police & emergency
		/// </summary>
		Sirens,
		/// <summary>
		/// Death & tragedy
		/// </summary>
		Tragedy,
		/// <summary>
		/// Video
		/// </summary>
		Video,
		/// <summary>
		/// Content rating: G
		/// </summary>
		VideoRatingDvG,
		/// <summary>
		/// Content rating: PG
		/// </summary>
		VideoRatingDvPg,
		/// <summary>
		/// Content rating: T
		/// </summary>
		VideoRatingDvT,
		/// <summary>
		/// Content rating: MA
		/// </summary>
		VideoRatingDvMa,
		/// <summary>
		/// Content rating: not yet rated
		/// </summary>
		VideoNotYetRated,
		/// <summary>
		/// Live streaming video
		/// </summary>
		LiveStreamingVideo,
		/// <summary>
		/// Allowed gambling content.
		/// </summary>
		AllowedGamblingContent,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Conversion deduplication mode for Conversion Optimizer. That is, whether to
	/// optimize for number of clicks that get at least one conversion, or total number
	/// of conversions per click.
	/// </summary>
	public enum ConversionDeduplicationMode
	{
		/// <summary>
		/// Number of clicks that get at least one conversion.
		/// </summary>
		OnePerClick,
		/// <summary>
		/// Total number of conversions per click.
		/// </summary>
		ManyPerClick
	}
	/// <summary>
	/// This bidding strategy has been deprecated and replaced with
	/// {@linkplain TargetCpaBiddingScheme TargetCpa}. After V201601, we no longer allow
	/// advertisers to opt into this strategy--{@code ConversionOptimizerBiddingScheme}
	/// solely exists so that advertisers can access campaigns that had specified
	/// this strategy.</p>
	///
	/// <p>Conversion optimizer bidding strategy helps you maximize your return on investment
	/// (ROI) by automatically getting you the most possible conversions for your budget.
	///
	/// <p class="warning">{@code pricingMode} currently defaults to {@code CLICKS} and
	/// cannot be changed.</p>
	///
	/// <p>Note that campaigns must meet <a
	/// href="https://support.google.com/adwords/answer/2471188#CORequirements">
	/// specific eligibility requirements</a> before they can use the
	/// <code>ConversionOptimizer</code> bidding strategy.</p>
	///
	/// <p>For more information on conversion optimizer, visit the
	/// <a href="https://support.google.com/adwords/answer/2390684"
	/// >Conversion Optimizer help center</a>.</p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class ConversionOptimizerBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// <b>Note:</b> The value for this field currently cannot be changed.
		///
		/// Pricing model indicates whether it is a pay per clicks or pay per
		/// conversions campaign. If the pricing model is not specified it
		/// defaults to Clicks.
		/// <span class="constraint Selectable">This field can be selected using the value "PricingMode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ConversionOptimizerBiddingSchemePricingMode? PricingMode { get; set; }
		/// <summary>
		/// Bid type indicates if it is a Target CPA campaign. If the Bid type is
		/// not specified it defaults to Target CPA.
		/// <span class="constraint Selectable">This field can be selected using the value "BidType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ConversionOptimizerBiddingSchemeBidType? BidType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PricingMode = null;
			BidType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "pricingMode")
				{
					PricingMode = ConversionOptimizerBiddingSchemePricingModeExtensions.Parse(xItem.Value);
				}
				else if (localName == "bidType")
				{
					BidType = ConversionOptimizerBiddingSchemeBidTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConversionOptimizerBiddingScheme");
			XElement xItem = null;
			if (PricingMode != null)
			{
				xItem = new XElement(XName.Get("pricingMode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PricingMode.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BidType != null)
			{
				xItem = new XElement(XName.Get("bidType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum ConversionOptimizerBiddingSchemeBidType
	{
		/// <summary>
		/// Average cost-per-acquisition (targetCPA) bid type.
		/// </summary>
		TargetCpa
	}
	public enum ConversionOptimizerBiddingSchemePricingMode
	{
		Clicks,
		Conversions
	}
	/// <summary>
	/// Eligibility data for Campaign to transition to Conversion Optimizer
	/// </summary>
	public class ConversionOptimizerEligibility : ISoapable
	{
		/// <summary>
		/// If the campaign is eligible to enter conversion optimizer.
		/// <span class="constraint Selectable">This field can be selected using the value "Eligible".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? Eligible { get; set; }
		/// <summary>
		/// Reason why a campaign would be rejected for conversion optimizer.
		/// <span class="constraint Selectable">This field can be selected using the value "RejectionReasons".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<ConversionOptimizerEligibilityRejectionReason> RejectionReasons { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Eligible = null;
			RejectionReasons = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "eligible")
				{
					Eligible = bool.Parse(xItem.Value);
				}
				else if (localName == "rejectionReasons")
				{
					if (RejectionReasons == null) RejectionReasons = new List<ConversionOptimizerEligibilityRejectionReason>();
					RejectionReasons.Add(ConversionOptimizerEligibilityRejectionReasonExtensions.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Eligible != null)
			{
				xItem = new XElement(XName.Get("eligible", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Eligible.Value.ToString());
				xE.Add(xItem);
			}
			if (RejectionReasons != null)
			{
				foreach (var rejectionReasonsItem in RejectionReasons)
				{
					xItem = new XElement(XName.Get("rejectionReasons", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(rejectionReasonsItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	public enum ConversionOptimizerEligibilityRejectionReason
	{
		/// <summary>
		/// Campaign is not active
		/// </summary>
		CampaignIsNotActive,
		/// <summary>
		/// Conversion optimizer is available to only Manual CPC campaign
		/// </summary>
		NotCpcCampaign,
		/// <summary>
		/// Conversion tracking is not enabled for the Campaign
		/// </summary>
		ConversionTrackingNotEnabled,
		/// <summary>
		/// The campaign does not meet the requirement to have a sufficient count
		/// of conversions.
		/// </summary>
		NotEnoughConversions,
		Unknown
	}
	/// <summary>
	/// An abstract Conversion base class.
	/// </summary>
	public abstract class ConversionTracker : ISoapable
	{
		/// <summary>
		/// ID of this conversion tracker, {@code null} when creating a new one.
		///
		/// <p>There are some system-defined conversion trackers that are available
		/// for all customers to use.  See {@link ConversionTrackerService#mutate} for
		/// more information about how to modify these types.
		/// <ul>
		/// <li>179 - Calls from Ads</li>
		/// <li>214 - Android Downloads</li>
		/// <li>239 - Store Visits</li>
		/// </ul>
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// The ID of the original conversion type on which this ConversionType is based.
		/// This is used to facilitate a connection between an existing shared conversion type
		/// (e.g. Calls from ads) and an advertiser-specific conversion type. This may only be specified
		/// for ADD operations, and can never be modified once a ConversionType is created.
		/// <span class="constraint Selectable">This field can be selected using the value "OriginalConversionTypeId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// </summary>
		public long? OriginalConversionTypeId { get; set; }
		/// <summary>
		/// Name of this conversion tracker.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Status of this conversion tracker.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ConversionTrackerStatus? Status { get; set; }
		/// <summary>
		/// The category of conversion that is being tracked.
		/// <span class="constraint Selectable">This field can be selected using the value "Category".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ConversionTrackerCategory? Category { get; set; }
		/// <summary>
		/// The status of the data-driven attribution model for the conversion type.
		/// <span class="constraint Selectable">This field can be selected using the value "DataDrivenModelStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public DataDrivenModelStatus? DataDrivenModelStatus { get; set; }
		/// <summary>
		/// The external customer ID of the conversion type owner, or 0 if this is a system-defined
		/// conversion type. Only the conversion type owner may edit properties of the conversion type.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionTypeOwnerCustomerId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? ConversionTypeOwnerCustomerId { get; set; }
		/// <summary>
		/// Lookback window for view-through conversions in days. This is the length of
		/// time in which a conversion without a click can be attributed to an
		/// impression.
		/// <span class="constraint Selectable">This field can be selected using the value "ViewthroughLookbackWindow".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be between 1 and 30, inclusive.</span>
		/// </summary>
		public int? ViewthroughLookbackWindow { get; set; }
		/// <summary>
		/// The click-through conversion (ctc) lookback window is the maximum number of days between
		/// the time a conversion event happens and the previous corresponding ad click.
		///
		/// <p>Conversion events that occur more than this many days after the click are ignored.
		///
		/// <p>This field is only editable for Adwords Conversions and Upload Conversions, but has a system
		/// defined default for other types of conversions. The allowed range of values for this window
		/// depends on the type of conversion and may expand, but 7-90 days is the currently-allowed
		/// range.
		/// <span class="constraint Selectable">This field can be selected using the value "CtcLookbackWindow".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public int? CtcLookbackWindow { get; set; }
		/// <summary>
		/// How to count events for this conversion tracker.
		/// If countingType is MANY_PER_CLICK, then all conversion events are counted.
		/// If countingType is ONE_PER_CLICK, then only the first conversion event of this type
		/// following a given click will be counted.
		/// More information is available at https://support.google.com/adwords/answer/3438531
		/// <span class="constraint Selectable">This field can be selected using the value "CountingType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ConversionDeduplicationMode? CountingType { get; set; }
		/// <summary>
		/// The value to use when the tag for this conversion tracker sends conversion events without
		/// values. This value is applied on the server side, and is applicable to all ConversionTracker
		/// subclasses.
		/// <p>
		/// See also the corresponding {@link ConversionTracker#defaultRevenueCurrencyCode}, and see
		/// {@link ConversionTracker#alwaysUseDefaultRevenueValue} for details about when this value is
		/// used.
		/// <span class="constraint Selectable">This field can be selected using the value "DefaultRevenueValue".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be between 0 and 1000000000000, inclusive.</span>
		/// </summary>
		public double? DefaultRevenueValue { get; set; }
		/// <summary>
		/// The currency code to use when the tag for this conversion tracker sends conversion events
		/// without currency codes. This code is applied on the server side, and is applicable to all
		/// ConversionTracker subclasses. It must be a valid ISO4217 3-character code, such as USD.
		/// <p>
		/// This code is used if the code in the tag is not supplied or is unsupported, or if
		/// {@link ConversionTracker#alwaysUseDefaultRevenueValue} is set to true. If this default code is
		/// not set the currency code of the account is used as the default code.
		/// <p>
		/// Set the default code to XXX in order to specify that this conversion type does not have units
		/// of a currency (that is, it is unitless). In this case no currency conversion will occur even if
		/// a currency code is set in the tag.
		/// <span class="constraint Selectable">This field can be selected using the value "DefaultRevenueCurrencyCode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string DefaultRevenueCurrencyCode { get; set; }
		/// <summary>
		/// Controls whether conversion event values and currency codes are taken from the tag snippet or
		/// from {@link ConversionTracker#defaultRevenueValue} and
		/// {@link ConversionTracker#defaultRevenueCurrencyCode}. If alwaysUseDefaultRevenueValue is true,
		/// then conversion events will always use defaultRevenueValue and defaultRevenueCurrencyCode, even
		/// if the tag has supplied a value and/or code when reporting the conversion event.  If
		/// alwaysUseDefaultRevenueValue is false, then defaultRevenueValue and defaultRevenueCurrencyCode
		/// are only used if the tag does not supply a value, or the tag's value is unparseable.
		/// <span class="constraint Selectable">This field can be selected using the value "AlwaysUseDefaultRevenueValue".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? AlwaysUseDefaultRevenueValue { get; set; }
		/// <summary>
		/// Whether this conversion tracker should be excluded from the "Conversions" columns in reports.
		/// <p>
		/// If true, the conversion tracker will not be counted towards Conversions.
		/// If false, it will be counted in Conversions. This is the default.</p>
		///
		/// Either way, conversions will still be counted in the "AllConversions" columns in reports.
		/// <span class="constraint Selectable">This field can be selected using the value "ExcludeFromBidding".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? ExcludeFromBidding { get; set; }
		/// <summary>
		/// Attribution models describing how to distribute credit for a particular conversion across
		/// potentially many prior interactions. See https://support.google.com/adwords/answer/6259715 for
		/// more information about attribution modeling in AdWords.
		/// <span class="constraint Selectable">This field can be selected using the value "AttributionModelType".</span>
		/// </summary>
		public AttributionModelType? AttributionModelType { get; set; }
		/// <summary>
		/// The date of the most recent ad click that led to a conversion of this conversion type.
		///
		/// <p>This date is in the <b>advertiser's defined time zone</b>.</p>
		/// <span class="constraint Selectable">This field can be selected using the value "MostRecentConversionDate".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string MostRecentConversionDate { get; set; }
		/// <summary>
		/// The last time a conversion tag for this conversion type successfully fired and was seen by
		/// AdWords. This firing event may not have been the result of an attributable conversion
		/// (ex: because the tag was fired from a browser that did not previously click an ad from the
		/// appropriate advertiser).
		///
		/// <p>This datetime is in <b>UTC</b>, not the advertiser's time zone.</p>
		/// <span class="constraint Selectable">This field can be selected using the value "LastReceivedRequestTime".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string LastReceivedRequestTime { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of ConversionTracker.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ConversionTrackerType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			OriginalConversionTypeId = null;
			Name = null;
			Status = null;
			Category = null;
			DataDrivenModelStatus = null;
			ConversionTypeOwnerCustomerId = null;
			ViewthroughLookbackWindow = null;
			CtcLookbackWindow = null;
			CountingType = null;
			DefaultRevenueValue = null;
			DefaultRevenueCurrencyCode = null;
			AlwaysUseDefaultRevenueValue = null;
			ExcludeFromBidding = null;
			AttributionModelType = null;
			MostRecentConversionDate = null;
			LastReceivedRequestTime = null;
			ConversionTrackerType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "originalConversionTypeId")
				{
					OriginalConversionTypeId = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = ConversionTrackerStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "category")
				{
					Category = ConversionTrackerCategoryExtensions.Parse(xItem.Value);
				}
				else if (localName == "dataDrivenModelStatus")
				{
					DataDrivenModelStatus = DataDrivenModelStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "conversionTypeOwnerCustomerId")
				{
					ConversionTypeOwnerCustomerId = long.Parse(xItem.Value);
				}
				else if (localName == "viewthroughLookbackWindow")
				{
					ViewthroughLookbackWindow = int.Parse(xItem.Value);
				}
				else if (localName == "ctcLookbackWindow")
				{
					CtcLookbackWindow = int.Parse(xItem.Value);
				}
				else if (localName == "countingType")
				{
					CountingType = ConversionDeduplicationModeExtensions.Parse(xItem.Value);
				}
				else if (localName == "defaultRevenueValue")
				{
					DefaultRevenueValue = double.Parse(xItem.Value);
				}
				else if (localName == "defaultRevenueCurrencyCode")
				{
					DefaultRevenueCurrencyCode = xItem.Value;
				}
				else if (localName == "alwaysUseDefaultRevenueValue")
				{
					AlwaysUseDefaultRevenueValue = bool.Parse(xItem.Value);
				}
				else if (localName == "excludeFromBidding")
				{
					ExcludeFromBidding = bool.Parse(xItem.Value);
				}
				else if (localName == "attributionModelType")
				{
					AttributionModelType = AttributionModelTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "mostRecentConversionDate")
				{
					MostRecentConversionDate = xItem.Value;
				}
				else if (localName == "lastReceivedRequestTime")
				{
					LastReceivedRequestTime = xItem.Value;
				}
				else if (localName == "ConversionTracker.Type")
				{
					ConversionTrackerType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (OriginalConversionTypeId != null)
			{
				xItem = new XElement(XName.Get("originalConversionTypeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OriginalConversionTypeId.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Category != null)
			{
				xItem = new XElement(XName.Get("category", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Category.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DataDrivenModelStatus != null)
			{
				xItem = new XElement(XName.Get("dataDrivenModelStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DataDrivenModelStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ConversionTypeOwnerCustomerId != null)
			{
				xItem = new XElement(XName.Get("conversionTypeOwnerCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTypeOwnerCustomerId.Value.ToString());
				xE.Add(xItem);
			}
			if (ViewthroughLookbackWindow != null)
			{
				xItem = new XElement(XName.Get("viewthroughLookbackWindow", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ViewthroughLookbackWindow.Value.ToString());
				xE.Add(xItem);
			}
			if (CtcLookbackWindow != null)
			{
				xItem = new XElement(XName.Get("ctcLookbackWindow", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CtcLookbackWindow.Value.ToString());
				xE.Add(xItem);
			}
			if (CountingType != null)
			{
				xItem = new XElement(XName.Get("countingType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CountingType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DefaultRevenueValue != null)
			{
				xItem = new XElement(XName.Get("defaultRevenueValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DefaultRevenueValue.Value.ToString());
				xE.Add(xItem);
			}
			if (DefaultRevenueCurrencyCode != null)
			{
				xItem = new XElement(XName.Get("defaultRevenueCurrencyCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DefaultRevenueCurrencyCode);
				xE.Add(xItem);
			}
			if (AlwaysUseDefaultRevenueValue != null)
			{
				xItem = new XElement(XName.Get("alwaysUseDefaultRevenueValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AlwaysUseDefaultRevenueValue.Value.ToString());
				xE.Add(xItem);
			}
			if (ExcludeFromBidding != null)
			{
				xItem = new XElement(XName.Get("excludeFromBidding", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExcludeFromBidding.Value.ToString());
				xE.Add(xItem);
			}
			if (AttributionModelType != null)
			{
				xItem = new XElement(XName.Get("attributionModelType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AttributionModelType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (MostRecentConversionDate != null)
			{
				xItem = new XElement(XName.Get("mostRecentConversionDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MostRecentConversionDate);
				xE.Add(xItem);
			}
			if (LastReceivedRequestTime != null)
			{
				xItem = new XElement(XName.Get("lastReceivedRequestTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LastReceivedRequestTime);
				xE.Add(xItem);
			}
			if (ConversionTrackerType != null)
			{
				xItem = new XElement(XName.Get("ConversionTracker.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTrackerType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The category of conversion tracker that is being tracked.
	/// </summary>
	public enum ConversionTrackerCategory
	{
		Default,
		PageView,
		Purchase,
		Signup,
		Lead,
		Remarketing,
		/// <summary>
		/// Download is applicable only to {@link AppConversion} types,
		/// and is an error to use in conjunction with other types.
		/// AppConversions must use download only if they also specify
		/// {@link AppConversion#appConversionType} as DOWNLOAD or FIRST_OPEN.
		/// If any other appConversionType is used, then some other category besides
		/// DOWNLOAD must be used.
		/// </summary>
		Download
	}
	/// <summary>
	/// Operations for conversion tracker.
	/// </summary>
	public class ConversionTrackerOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ConversionTracker Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = InstanceCreator.CreateConversionTracker(xItem);
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConversionTrackerOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of {@link ConversionTracker}s resulting from the filtering
	/// and paging of the {@link ConversionTrackerService#get} call.
	/// </summary>
	public class ConversionTrackerPage : NoStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<ConversionTracker> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<ConversionTracker>();
					var entriesItem = InstanceCreator.CreateConversionTracker(xItem);
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConversionTrackerPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the ConversionTrackerService.
	/// </summary>
	public class ConversionTrackerReturnValue : ListReturnValue, ISoapable
	{
		public List<ConversionTracker> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<ConversionTracker>();
					var valueItem = InstanceCreator.CreateConversionTracker(xItem);
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConversionTrackerReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of the conversion tracker. The user cannot ADD or SET the
	/// status to {@code HIDDEN}.
	/// </summary>
	public enum ConversionTrackerStatus
	{
		/// <summary>
		/// Visits to the conversion page will be recorded.
		/// </summary>
		Enabled,
		/// <summary>
		/// Visits to the conversion page will not be recorded.
		/// </summary>
		Disabled,
		/// <summary>
		/// Conversions will be recorded, but the conversion tracker will not appear in the UI.
		/// </summary>
		Hidden
	}
	/// <summary>
	/// An error that can occur during calls to the ConversionTypeService.
	/// </summary>
	public class ConversionTrackingError : ApiError, ISoapable
	{
		public ConversionTrackingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ConversionTrackingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ConversionTrackingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enumerates all the possible reasons for a ConversionTypeError.
	/// </summary>
	public enum ConversionTrackingErrorReason
	{
		/// <summary>
		/// An attempt to make a forked conversion type from a global conversion type was made,
		/// but there already exists a conversion type forked from this global conversion type.
		/// </summary>
		AlreadyCreatedCustomConversionType,
		/// <summary>
		/// This user is not whitelisted for the import of Analytics goals and profiles, and yet
		/// requested to mutate an Analytics conversion type.
		/// </summary>
		AnalyticsNotAllowed,
		/// <summary>
		/// Cannot execute an ADD operation on this subclass of ConversionType (currently, only
		/// instances of AdWordsConversionType may be added).
		/// </summary>
		CannotAddConversionTypeSubclass,
		/// <summary>
		/// AppConversions cannot change app conversion types once it has been set.
		/// </summary>
		CannotChangeAppConversionType,
		/// <summary>
		/// AppConversions cannot change app platforms once it has been set.
		/// </summary>
		CannotChangeAppPlatform,
		/// <summary>
		/// Cannot change between subclasses of ConversionType
		/// </summary>
		CannnotChangeConversionSubclass,
		/// <summary>
		/// If a conversion type's status is initially non-hidden, it may not be changed to Hidden;
		/// nor may hidden conversion types be created through the API. Hidden conversion types are
		/// typically created by backend processes.
		/// </summary>
		CannotSetHiddenStatus,
		/// <summary>
		/// The user attempted to change the Category when it was uneditable.
		/// </summary>
		CategoryIsUneditable,
		/// <summary>
		/// The attribution model of the conversion type is uneditable.
		/// </summary>
		AttributionModelIsUneditable,
		/// <summary>
		/// The attribution model cannot be set to DATA_DRIVEN because a data-driven model has never been
		/// generated.
		/// </summary>
		DataDrivenModelWasNeverGenerated,
		/// <summary>
		/// The attribution model cannot be set to DATA_DRIVEN because the data-driven model is expired.
		/// </summary>
		DataDrivenModelIsExpired,
		/// <summary>
		/// The attribution model cannot be set to DATA_DRIVEN because the data-driven model is stale.
		/// </summary>
		DataDrivenModelIsStale,
		/// <summary>
		/// The attribution model cannot be set to DATA_DRIVEN because the data-driven model is
		/// unavailable or the conversion type was newly added.
		/// </summary>
		DataDrivenModelIsUnknown,
		/// <summary>
		/// An attempt to access a conversion type failed because no conversion type with this ID
		/// exists for this account.
		/// </summary>
		ConversionTypeNotFound,
		/// <summary>
		/// The user attempted to change the click-through conversion (ctc) lookback window when it is
		/// not editable.
		/// </summary>
		CtcLookbackWindowIsUneditable,
		/// <summary>
		/// An exception occurred in the domain layer during an attempt to process a
		/// ConversionTypeOperation.
		/// </summary>
		DomainException,
		/// <summary>
		/// An attempt was made to set a counting type inconsistent with other properties.
		/// Currently, AppConversion with appConversionType = DOWNLOAD and appPlatform = ANDROID_MARKET
		/// cannot have a countingType of MANY_PER_CLICK
		/// </summary>
		InconsistentCountingType,
		/// <summary>
		/// The user specified two identical app ids when attempting to create or modify a
		/// conversion type.
		/// </summary>
		DuplicateAppId,
		/// <summary>
		/// The user specified two identical names when attempting to create or rename multiple
		/// conversion types.
		/// </summary>
		DuplicateName,
		/// <summary>
		/// An error occurred while the server was sending the email.
		/// </summary>
		EmailFailed,
		/// <summary>
		/// The maximum number of active conversion types for this account has been exceeded.
		/// </summary>
		ExceededConversionTypeLimit,
		/// <summary>
		/// The user requested to modify an existing conversion type, but did not supply an ID.
		/// </summary>
		IdIsNull,
		/// <summary>
		/// App ids must adhere to valid Java package naming requirements.
		/// </summary>
		InvalidAppId,
		/// <summary>
		/// App id can not be set to forked system-defined Android download conversion type.
		/// </summary>
		CannotSetAppId,
		/// <summary>
		/// The user entered an invalid background color. The background color must be a valid
		/// HTML hex color code, such as "99ccff".
		/// </summary>
		InvalidColor,
		/// <summary>
		/// The date range specified in the stats selector is invalid.
		/// </summary>
		InvalidDateRange,
		/// <summary>
		/// The email address of the sender or the recipient of a snippet email was invalid.
		/// </summary>
		InvalidEmailAddress,
		/// <summary>
		/// When providing a global conversion type id to fork from in an ADD operation,
		/// the global conversion type id is not acceptable (i.e.: we don't allow this global conversion
		/// type to be forked from)
		/// </summary>
		InvalidOriginalConversionTypeId,
		/// <summary>
		/// The AppPlatform and AppConversionType must be set at the same time. It is an error to set
		/// just one or the other.
		/// </summary>
		MustSetAppPlatformAndAppConversionTypeTogether,
		/// <summary>
		/// The user attempted to create a new conversion type, or to rename an existing conversion type,
		/// whose new name matches one of the other conversion types for his account.
		/// </summary>
		NameAlreadyExists,
		/// <summary>
		/// The user asked to send a notification email, but specified no recipients.
		/// </summary>
		NoRecipients,
		/// <summary>
		/// The requested conversion type has no snippet, and thus its snippet email cannot be sent.
		/// </summary>
		NoSnippet,
		/// <summary>
		/// The requested date range contains too many webpages to be processed.
		/// </summary>
		TooManyWebpages,
		/// <summary>
		/// An unknown sorting type was specified in the selector.
		/// </summary>
		UnknownSortingType,
		/// <summary>
		/// AppConversionType cannot be set to DOWNLOAD when AppPlatform is ITUNES.
		/// </summary>
		UnsupportedAppConversionType
	}
	/// <summary>
	/// A collection of customer-wide settings related to AdWords Conversion Tracking. Settings
	/// that apply at the conversion type level can be accessed and modified though
	/// {@code ConversionTrackerService}.
	/// </summary>
	public class ConversionTrackingSettings : ISoapable
	{
		/// <summary>
		/// With Cross-Account Conversion Tracking, a manager can share its conversion tracking ID among
		/// the clients it manages. If a customer is using a manager's conversion tracking ID we store
		/// it as the customer's effective conversion tracking ID.
		///
		/// <p>This is the conversion tracking ID used for this customer. If this is 0, the customer is
		/// not using conversion tracking. If the customer is using cross-account conversion tracking,
		/// this conversion tracking ID has been shared from the manager's account. Otherwise, for a
		/// customer who is not using cross-account conversion tracking, this is the customer's own
		/// conversion tracking ID.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? EffectiveConversionTrackingId { get; set; }
		/// <summary>
		/// True if a customer is using cross-account conversion tracking.
		/// False if the customer is not using conversion tracking, or if the customer is using
		/// his own conversion tracking ID.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? UsesCrossAccountConversionTracking { get; set; }
		/// <summary>
		/// True if customer has selected to include cross-device conversions
		/// in the "Conversions" column, which is used by any conversion-based bid
		/// strategies; false otherwise.
		/// </summary>
		public bool? OptimizeOnEstimatedConversions { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			EffectiveConversionTrackingId = null;
			UsesCrossAccountConversionTracking = null;
			OptimizeOnEstimatedConversions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "effectiveConversionTrackingId")
				{
					EffectiveConversionTrackingId = long.Parse(xItem.Value);
				}
				else if (localName == "usesCrossAccountConversionTracking")
				{
					UsesCrossAccountConversionTracking = bool.Parse(xItem.Value);
				}
				else if (localName == "optimizeOnEstimatedConversions")
				{
					OptimizeOnEstimatedConversions = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (EffectiveConversionTrackingId != null)
			{
				xItem = new XElement(XName.Get("effectiveConversionTrackingId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(EffectiveConversionTrackingId.Value.ToString());
				xE.Add(xItem);
			}
			if (UsesCrossAccountConversionTracking != null)
			{
				xItem = new XElement(XName.Get("usesCrossAccountConversionTracking", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(UsesCrossAccountConversionTracking.Value.ToString());
				xE.Add(xItem);
			}
			if (OptimizeOnEstimatedConversions != null)
			{
				xItem = new XElement(XName.Get("optimizeOnEstimatedConversions", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(OptimizeOnEstimatedConversions.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// CPA Bids.
	/// </summary>
	public class CpaBid : Bids, ISoapable
	{
		/// <summary>
		/// Target cost per acquisition (CPA). This is applicable only at the ad group level.
		///
		/// <p>If an ad group-level target is not set and the strategy type is TARGET_CPA,
		/// the strategy level target will be used. To set the strategy-level target,
		/// set the {@linkplain TargetCpaBiddingScheme#targetCpa} on the strategy's
		/// {@linkplain BiddingStrategyConfiguration#biddingScheme}.
		/// </summary>
		public Money Bid { get; set; }
		/// <summary>
		/// The level (ad group, ad group strategy, or campaign strategy) at which the bid was set.
		/// This is applicable only at the ad group level.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BidSource? BidSource { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Bid = null;
			BidSource = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bid")
				{
					Bid = new Money();
					Bid.ReadFrom(xItem);
				}
				else if (localName == "bidSource")
				{
					BidSource = BidSourceExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CpaBid");
			XElement xItem = null;
			if (Bid != null)
			{
				xItem = new XElement(XName.Get("bid", "https://adwords.google.com/api/adwords/cm/v201609"));
				Bid.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidSource != null)
			{
				xItem = new XElement(XName.Get("bidSource", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidSource.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Manual click based bids.
	/// </summary>
	public class CpcBid : Bids, ISoapable
	{
		/// <summary>
		/// Max CPC (cost per click) bid.
		/// At the ad group level, this represents the default bid applicable for
		/// <ul><li>keyword targeting on search network.</li>
		/// <li>keywords & placements for content targeting.</li></ul>
		/// At the ad group criteria level, this is the max cpc bid.
		/// </summary>
		public Money Bid { get; set; }
		/// <summary>
		/// The level (ad group or criterion) at which the bid was set. This is applicable
		/// only at the criteria level.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BidSource? CpcBidSource { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Bid = null;
			CpcBidSource = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bid")
				{
					Bid = new Money();
					Bid.ReadFrom(xItem);
				}
				else if (localName == "cpcBidSource")
				{
					CpcBidSource = BidSourceExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CpcBid");
			XElement xItem = null;
			if (Bid != null)
			{
				xItem = new XElement(XName.Get("bid", "https://adwords.google.com/api/adwords/cm/v201609"));
				Bid.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CpcBidSource != null)
			{
				xItem = new XElement(XName.Get("cpcBidSource", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CpcBidSource.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Manual impression based bids.
	/// </summary>
	public class CpmBid : Bids, ISoapable
	{
		/// <summary>
		/// Max CPM (cost per thousand impressions) bid.
		/// </summary>
		public Money Bid { get; set; }
		/// <summary>
		/// The level (ad group or criterion) at which the bid was set. This is applicable
		/// only at the criteria level.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BidSource? CpmBidSource { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Bid = null;
			CpmBidSource = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bid")
				{
					Bid = new Money();
					Bid.ReadFrom(xItem);
				}
				else if (localName == "cpmBidSource")
				{
					CpmBidSource = BidSourceExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CpmBid");
			XElement xItem = null;
			if (Bid != null)
			{
				xItem = new XElement(XName.Get("bid", "https://adwords.google.com/api/adwords/cm/v201609"));
				Bid.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CpmBidSource != null)
			{
				xItem = new XElement(XName.Get("cpmBidSource", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CpmBidSource.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a criterion (such as a keyword, placement, or vertical).
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class Criterion : ISoapable
	{
		/// <summary>
		/// ID of this criterion.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "CriteriaType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CriterionType? Type { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Criterion.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string CriterionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Type = null;
			CriterionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "type")
				{
					Type = CriterionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "Criterion.Type")
				{
					CriterionType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (CriterionType != null)
			{
				xItem = new XElement(XName.Get("Criterion.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a {@link Criterion} value.
	/// </summary>
	public class CriterionAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Criterion value contained by this {@link Attribute}.
		/// </summary>
		public Criterion Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new Criterion();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CriterionAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The bid landscape for a criterion.  A bid landscape estimates how a
	/// a criterion will perform based on different bid amounts.
	/// </summary>
	public class CriterionBidLandscape : BidLandscape, ISoapable
	{
		/// <summary>
		/// ID of the criterion associated with this landscape.
		/// <span class="constraint Selectable">This field can be selected using the value "CriterionId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? CriterionId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CriterionId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "criterionId")
				{
					CriterionId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionBidLandscape");
			XElement xItem = null;
			if (CriterionId != null)
			{
				xItem = new XElement(XName.Get("criterionId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of {@link CriterionBidLandscapePage} objects resulting from the
	/// filtering and paging of {@link DataService#getCriterionBidLandscape} call.
	/// </summary>
	public class CriterionBidLandscapePage : NoStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<CriterionBidLandscape> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CriterionBidLandscape>();
					var entriesItem = new CriterionBidLandscape();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionBidLandscapePage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Error class used for reporting criteria related errors.
	/// </summary>
	public class CriterionError : ApiError, ISoapable
	{
		public CriterionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CriterionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum CriterionErrorReason
	{
		/// <summary>
		/// Concrete type of criterion is required for ADD and SET operations.
		/// </summary>
		ConcreteTypeRequired,
		/// <summary>
		/// The category requested for exclusion is invalid.
		/// </summary>
		InvalidExcludedCategory,
		/// <summary>
		/// Invalid keyword criteria text.
		/// </summary>
		InvalidKeywordText,
		/// <summary>
		/// Keyword text should be less than 80 chars.
		/// </summary>
		KeywordTextTooLong,
		/// <summary>
		/// Keyword text has too many words.
		/// </summary>
		KeywordHasTooManyWords,
		/// <summary>
		/// Keyword text has invalid characters or symbols.
		/// </summary>
		KeywordHasInvalidChars,
		/// <summary>
		/// Invalid placement URL.
		/// </summary>
		InvalidPlacementUrl,
		/// <summary>
		/// Invalid user list criterion.
		/// </summary>
		InvalidUserList,
		/// <summary>
		/// Invalid user interest criterion.
		/// </summary>
		InvalidUserInterest,
		/// <summary>
		/// Placement URL has wrong format.
		/// </summary>
		InvalidFormatForPlacementUrl,
		/// <summary>
		/// Placement URL is too long.
		/// </summary>
		PlacementUrlIsTooLong,
		/// <summary>
		/// Indicates the URL contains an illegal character.
		/// </summary>
		PlacementUrlHasIllegalChar,
		/// <summary>
		/// Indicates the URL contains multiple comma separated URLs.
		/// </summary>
		PlacementUrlHasMultipleSitesInLine,
		/// <summary>
		/// Indicates the domain is blacklisted.
		/// </summary>
		PlacementIsNotAvailableForTargetingOrExclusion,
		/// <summary>
		/// Invalid vertical path.
		/// </summary>
		InvalidVerticalPath,
		/// <summary>
		/// Indicates the placement is a YouTube vertical channel, which is no longer supported.
		/// </summary>
		YoutubeVerticalChannelDeprecated,
		/// <summary>
		/// Indicates the placement is a YouTube demographic channel, which is no longer supported.
		/// </summary>
		YoutubeDemographicChannelDeprecated,
		/// <summary>
		/// YouTube urls are not supported in Placement criterion. Use YouTubeChannel and
		/// YouTubeVideo criterion instead.
		/// </summary>
		YoutubeUrlUnsupported,
		/// <summary>
		/// Criteria type can not be excluded by the customer,
		/// like AOL account type cannot target site type criteria.
		/// </summary>
		CannotExcludeCriteriaType,
		/// <summary>
		/// Criteria type can not be targeted.
		/// </summary>
		CannotAddCriteriaType,
		/// <summary>
		/// Product filter in the product criteria has invalid characters.
		/// Operand and the argument in the filter can not have "==" or "&+".
		/// </summary>
		InvalidProductFilter,
		/// <summary>
		/// Product filter in the product criteria is translated to a string as
		/// operand1==argument1&+operand2==argument2, maximum allowed length for
		/// the string is 255 chars.
		/// </summary>
		ProductFilterTooLong,
		/// <summary>
		/// Not allowed to exclude similar user list.
		/// </summary>
		CannotExcludeSimilarUserList,
		/// <summary>
		/// Not allowed to add display only UserLists to search only campaigns.
		/// </summary>
		CannotAddDisplayOnlyListsToSearchOnlyCampaigns,
		/// <summary>
		/// Not allowed to add display only UserLists to search plus campaigns.
		/// </summary>
		CannotAddDisplayOnlyListsToSearchCampaigns,
		/// <summary>
		/// Not allowed to add User interests to search only campaigns.
		/// </summary>
		CannotAddUserInterestsToSearchCampaigns,
		/// <summary>
		/// Not allowed to set bids for this criterion type in search campaigns
		/// </summary>
		CannotSetBidsOnCriterionTypeInSearchCampaigns,
		/// <summary>
		/// Destination URL cannot be set for the criterion types of Gender, AgeRange,
		/// UserList, Placement, MobileApp, and MobileAppCategory in search campaigns.
		/// </summary>
		CannotAddDestinationUrlToCriterionTypeInSearchCampaigns,
		/// <summary>
		/// IP address is not valid.
		/// </summary>
		InvalidIpAddress,
		/// <summary>
		/// IP format is not valid.
		/// </summary>
		InvalidIpFormat,
		/// <summary>
		/// Mobile application is not valid.
		/// </summary>
		InvalidMobileApp,
		/// <summary>
		/// Mobile application category is not valid.
		/// </summary>
		InvalidMobileAppCategory,
		/// <summary>
		/// The CriterionId does not exist or is of the incorrect type.
		/// </summary>
		InvalidCriterionId,
		/// <summary>
		/// The Criterion is not allowed to be targeted.
		/// </summary>
		CannotTargetCriterion,
		/// <summary>
		/// The criterion is not allowed to be targeted as it is deprecated.
		/// </summary>
		CannotTargetObsoleteCriterion,
		/// <summary>
		/// The CriterionId is not valid for the type.
		/// </summary>
		CriterionIdAndTypeMismatch,
		/// <summary>
		/// Distance for the radius for the proximity criterion is invalid.
		/// </summary>
		InvalidProximityRadius,
		/// <summary>
		/// Units for the distance for the radius for the proximity criterion is invalid.
		/// </summary>
		InvalidProximityRadiusUnits,
		/// <summary>
		/// Street address is too short.
		/// </summary>
		InvalidStreetaddressLength,
		/// <summary>
		/// City name in the address is too short.
		/// </summary>
		InvalidCitynameLength,
		/// <summary>
		/// Region code in the address is too short.
		/// </summary>
		InvalidRegioncodeLength,
		/// <summary>
		/// Region name in the address is not valid.
		/// </summary>
		InvalidRegionnameLength,
		/// <summary>
		/// Postal code in the address is not valid.
		/// </summary>
		InvalidPostalcodeLength,
		/// <summary>
		/// Country code in the address is not valid.
		/// </summary>
		InvalidCountryCode,
		/// <summary>
		/// Latitude for the GeoPoint is not valid.
		/// </summary>
		InvalidLatitude,
		/// <summary>
		/// Longitude for the GeoPoint is not valid.
		/// </summary>
		InvalidLongitude,
		/// <summary>
		/// The Proximity input is not valid. Both address and geoPoint cannot be null.
		/// </summary>
		ProximityGeopointAndAddressBothCannotBeNull,
		/// <summary>
		/// The Proximity address cannot be geocoded to a valid lat/long.
		/// </summary>
		InvalidProximityAddress,
		/// <summary>
		/// User domain name is not valid.
		/// </summary>
		InvalidUserDomainName,
		/// <summary>
		/// Length of serialized criterion parameter exceeded size limit.
		/// </summary>
		CriterionParameterTooLong,
		/// <summary>
		/// Time interval in the AdSchedule overlaps with another AdSchedule.
		/// </summary>
		AdScheduleTimeIntervalsOverlap,
		/// <summary>
		/// AdSchedule time interval cannot span multiple days.
		/// </summary>
		AdScheduleIntervalCannotSpanMultipleDays,
		/// <summary>
		/// AdSchedule time interval specified is invalid,
		/// endTime cannot be earlier than startTime.
		/// </summary>
		AdScheduleInvalidTimeInterval,
		/// <summary>
		/// The number of AdSchedule entries in a day exceeds the limit.
		/// </summary>
		AdScheduleExceededIntervalsPerDayLimit,
		/// <summary>
		/// CriteriaId does not match the interval of the AdSchedule specified.
		/// </summary>
		AdScheduleCriterionIdMismatchingFields,
		/// <summary>
		/// Cannot set bid modifier for this criterion type.
		/// </summary>
		CannotBidModifyCriterionType,
		/// <summary>
		/// Cannot bid modify criterion, since it is opted out of the campaign.
		/// </summary>
		CannotBidModifyCriterionCampaignOptedOut,
		/// <summary>
		/// Cannot set bid modifier for a negative criterion.
		/// </summary>
		CannotBidModifyNegativeCriterion,
		/// <summary>
		/// Bid Modifier already exists. Use SET operation to update.
		/// </summary>
		BidModifierAlreadyExists,
		/// <summary>
		/// Feed Id is not allowed in these Location Groups.
		/// </summary>
		FeedIdNotAllowed,
		/// <summary>
		/// The account may not use the requested criteria type. For example, some
		/// accounts are restricted to keywords only.
		/// </summary>
		AccountIneligibleForCriteriaType,
		/// <summary>
		/// The requested criteria type cannot be used with campaign or ad group bidding strategy.
		/// </summary>
		CriteriaTypeInvalidForBiddingStrategy,
		/// <summary>
		/// The Criterion is not allowed to be excluded.
		/// </summary>
		CannotExcludeCriterion,
		/// <summary>
		/// The criterion is not allowed to be removed. For example, we cannot remove any
		/// of the platform criterion.
		/// </summary>
		CannotRemoveCriterion,
		/// <summary>
		/// The combined length of product dimension values of the product scope criterion is too long.
		/// </summary>
		ProductScopeTooLong,
		/// <summary>
		/// Product scope contains too many dimensions.
		/// </summary>
		ProductScopeTooManyDimensions,
		/// <summary>
		/// The combined length of product dimension values of the product partition criterion is too
		/// long.
		/// </summary>
		ProductPartitionTooLong,
		/// <summary>
		/// Product partition contains too many dimensions.
		/// </summary>
		ProductPartitionTooManyDimensions,
		/// <summary>
		/// The product dimension is invalid (e.g. dimension contains illegal value, dimension type is
		/// represented with wrong class, etc). Product dimension value can not contain "==" or "&+".
		/// </summary>
		InvalidProductDimension,
		/// <summary>
		/// Product dimension type is either invalid for campaigns of this type or cannot be used in the
		/// current context. BIDDING_CATEGORY_Lx and PRODUCT_TYPE_Lx product dimensions must be used in
		/// ascending order of their levels: L1, L2, L3, L4, L5... The levels must be specified
		/// sequentially and start from L1. Furthermore, an "others" product partition cannot be
		/// subdivided with a dimension of the same type but of a higher level ("others"
		/// BIDDING_CATEGORY_L3 can be subdivided with BRAND but not with BIDDING_CATEGORY_L4).
		/// </summary>
		InvalidProductDimensionType,
		/// <summary>
		/// Bidding categories do not form a valid path in the Shopping bidding category taxonomy.
		/// </summary>
		InvalidProductBiddingCategory,
		/// <summary>
		/// ShoppingSetting must be added to the campaign before ProductScope criteria can be added.
		/// </summary>
		MissingShoppingSetting,
		/// <summary>
		/// Matching function is invalid.
		/// </summary>
		InvalidMatchingFunction,
		/// <summary>
		/// Filter parameters not allowed for location groups targeting.
		/// </summary>
		LocationFilterNotAllowed,
		/// <summary>
		/// Given location filter parameter is invalid for location groups targeting.
		/// </summary>
		LocationFilterInvalid,
		/// <summary>
		/// Criteria type cannot be associated with a campaign and its ad group(s) simultaneously.
		/// </summary>
		CannotAttachCriteriaAtCampaignAndAdgroup,
		Unknown
	}
	/// <summary>
	/// Base type of criterion parameters.
	/// </summary>
	public abstract class CriterionParameter : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of CriterionParameter.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string CriterionParameterType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CriterionParameterType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "CriterionParameter.Type")
				{
					CriterionParameterType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CriterionParameterType != null)
			{
				xItem = new XElement(XName.Get("CriterionParameter.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionParameterType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains the policy violations for a single BiddableAdGroupCriterion.
	/// </summary>
	public class CriterionPolicyError : PolicyViolationError, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionPolicyError");
		}
	}
	/// <summary>
	/// The types of criteria.
	/// </summary>
	public enum CriterionType
	{
		/// <summary>
		/// Content label for exclusion.
		/// </summary>
		ContentLabel,
		/// <summary>
		/// Keyword. e.g. 'mars cruise'
		/// </summary>
		Keyword,
		/// <summary>
		/// Placement. aka Website. e.g. 'www.flowers4sale.com'
		/// </summary>
		Placement,
		/// <summary>
		/// Vertical, e.g. 'category::Animals>Pets'  This is for vertical targeting on the content
		/// network.
		/// </summary>
		Vertical,
		/// <summary>
		/// User lists, are links to sets of users defined by the advertiser.
		/// </summary>
		UserList,
		/// <summary>
		/// User interests, categories of interests the user is interested in.
		/// </summary>
		UserInterest,
		/// <summary>
		/// Mobile applications to target.
		/// </summary>
		MobileApplication,
		/// <summary>
		/// Mobile application categories to target.
		/// </summary>
		MobileAppCategory,
		/// <summary>
		/// Product partition (product group) in a shopping campaign.
		/// </summary>
		ProductPartition,
		/// <summary>
		/// IP addresses to exclude.
		/// </summary>
		IpBlock,
		/// <summary>
		/// Webpages of an advertiser's website to target.
		/// </summary>
		Webpage,
		/// <summary>
		/// Languages to target.
		/// </summary>
		Language,
		/// <summary>
		/// Geographic regions to target.
		/// </summary>
		Location,
		/// <summary>
		/// Age Range to exclude.
		/// </summary>
		AgeRange,
		/// <summary>
		/// Mobile carriers to target.
		/// </summary>
		Carrier,
		/// <summary>
		/// Mobile operating system versions to target.
		/// </summary>
		OperatingSystemVersion,
		/// <summary>
		/// Mobile devices to target.
		/// </summary>
		MobileDevice,
		/// <summary>
		/// Gender to exclude.
		/// </summary>
		Gender,
		/// <summary>
		/// Parent to target and exclude.
		/// </summary>
		Parent,
		/// <summary>
		/// Proximity (area within a radius) to target.
		/// </summary>
		Proximity,
		/// <summary>
		/// Platforms to target.
		/// </summary>
		Platform,
		/// <summary>
		/// Representing preferred content bid modifier.
		/// </summary>
		PreferredContent,
		/// <summary>
		/// AdSchedule or specific days and time intervals to target.
		/// </summary>
		AdSchedule,
		/// <summary>
		/// Targeting based on location groups.
		/// </summary>
		LocationGroups,
		/// <summary>
		/// Scope of products. Contains a list of product dimensions, all of which a product has to match
		/// to be included in the campaign.
		/// </summary>
		ProductScope,
		/// <summary>
		/// YouTube video to target.
		/// </summary>
		YoutubeVideo,
		/// <summary>
		/// YouTube channel to target.
		/// </summary>
		YoutubeChannel,
		/// <summary>
		/// Enables advertisers to target paid apps.
		/// </summary>
		AppPaymentModel,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The list of groupings of criteria types.
	/// </summary>
	public enum CriterionTypeGroup
	{
		/// <summary>
		/// Criteria for targeting keywords. e.g. 'mars cruise'
		/// KEYWORD may be used as a content bid dimension. Keywords are always a targeting dimension,
		/// so may not be set as a target "ALL" dimension with {@link TargetRestriction}.
		/// </summary>
		Keyword,
		/// <summary>
		/// Criteria for targeting lists of users.  Lists may represent users with particular
		/// interests, or they may represent users who have interacted with an advertiser's site in
		/// particular ways.
		/// </summary>
		UserInterestAndList,
		/// <summary>
		/// Criteria for targeting similar categories of placements, e.g. 'category::Animals>Pets'
		/// Used only for content network targeting.
		/// </summary>
		Vertical,
		/// <summary>
		/// Criteria for targeting gender.
		/// </summary>
		Gender,
		/// <summary>
		/// Criteria for targeting age ranges.
		/// </summary>
		AgeRange,
		/// <summary>
		/// Criteria for targeting placements. aka Website. e.g. 'www.flowers4sale.com'
		/// This group also includes mobile applications and mobile app categories.
		/// </summary>
		Placement,
		/// <summary>
		/// Criteria for parental status targeting.
		/// </summary>
		Parent,
		/// <summary>
		/// Special criteria type group used to reset the existing value.
		/// </summary>
		None,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The way a criterion is used - biddable or negative.
	/// </summary>
	public enum CriterionUse
	{
		/// <summary>
		/// Biddable (positive) criterion
		/// </summary>
		Biddable,
		/// <summary>
		/// Negative criterion
		/// </summary>
		Negative
	}
	/// <summary>
	/// User Interest represents a particular interest-based vertical to be targeted.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class CriterionUserInterest : Criterion, ISoapable
	{
		/// <summary>
		/// Id of this user interest. This is a required field.
		/// <span class="constraint Selectable">This field can be selected using the value "UserInterestId".</span>
		/// </summary>
		public long? UserInterestId { get; set; }
		/// <summary>
		/// Parent Id of this user interest.
		/// <span class="constraint Selectable">This field can be selected using the value "UserInterestParentId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? UserInterestParentId { get; set; }
		/// <summary>
		/// Name of this user interest.
		/// <span class="constraint Selectable">This field can be selected using the value "UserInterestName".</span>
		/// </summary>
		public string UserInterestName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			UserInterestId = null;
			UserInterestParentId = null;
			UserInterestName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userInterestId")
				{
					UserInterestId = long.Parse(xItem.Value);
				}
				else if (localName == "userInterestParentId")
				{
					UserInterestParentId = long.Parse(xItem.Value);
				}
				else if (localName == "userInterestName")
				{
					UserInterestName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionUserInterest");
			XElement xItem = null;
			if (UserInterestId != null)
			{
				xItem = new XElement(XName.Get("userInterestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserInterestId.Value.ToString());
				xE.Add(xItem);
			}
			if (UserInterestParentId != null)
			{
				xItem = new XElement(XName.Get("userInterestParentId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserInterestParentId.Value.ToString());
				xE.Add(xItem);
			}
			if (UserInterestName != null)
			{
				xItem = new XElement(XName.Get("userInterestName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserInterestName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// UserList - represents a user list that is defined by the advertiser to be targeted.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class CriterionUserList : Criterion, ISoapable
	{
		/// <summary>
		/// Id of this user list. This is a required field.
		/// <span class="constraint Selectable">This field can be selected using the value "UserListId".</span>
		/// </summary>
		public long? UserListId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "UserListName".</span>
		/// </summary>
		public string UserListName { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "UserListMembershipStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public CriterionUserListMembershipStatus? UserListMembershipStatus { get; set; }
		/// <summary>
		/// Determines whether a user list is eligible for targeting in the google.com
		/// (search) network.
		/// <span class="constraint Selectable">This field can be selected using the value "UserListEligibleForSearch".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? UserListEligibleForSearch { get; set; }
		/// <summary>
		/// Determines whether a user list is eligible for targeting in the display network.
		/// <span class="constraint Selectable">This field can be selected using the value "UserListEligibleForDisplay".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? UserListEligibleForDisplay { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			UserListId = null;
			UserListName = null;
			UserListMembershipStatus = null;
			UserListEligibleForSearch = null;
			UserListEligibleForDisplay = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userListId")
				{
					UserListId = long.Parse(xItem.Value);
				}
				else if (localName == "userListName")
				{
					UserListName = xItem.Value;
				}
				else if (localName == "userListMembershipStatus")
				{
					UserListMembershipStatus = CriterionUserListMembershipStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "userListEligibleForSearch")
				{
					UserListEligibleForSearch = bool.Parse(xItem.Value);
				}
				else if (localName == "userListEligibleForDisplay")
				{
					UserListEligibleForDisplay = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CriterionUserList");
			XElement xItem = null;
			if (UserListId != null)
			{
				xItem = new XElement(XName.Get("userListId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserListId.Value.ToString());
				xE.Add(xItem);
			}
			if (UserListName != null)
			{
				xItem = new XElement(XName.Get("userListName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserListName);
				xE.Add(xItem);
			}
			if (UserListMembershipStatus != null)
			{
				xItem = new XElement(XName.Get("userListMembershipStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserListMembershipStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (UserListEligibleForSearch != null)
			{
				xItem = new XElement(XName.Get("userListEligibleForSearch", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserListEligibleForSearch.Value.ToString());
				xE.Add(xItem);
			}
			if (UserListEligibleForDisplay != null)
			{
				xItem = new XElement(XName.Get("userListEligibleForDisplay", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserListEligibleForDisplay.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Membership status of the user list.
	/// </summary>
	public enum CriterionUserListMembershipStatus
	{
		/// <summary>
		/// Open status - list is accruing members and can be targeted to.
		/// </summary>
		Open,
		/// <summary>
		/// Closed status - No new members being added. Can not be used for targeting.
		/// </summary>
		Closed
	}
	/// <summary>
	/// UserList of CRM users provided by the advertiser.
	/// </summary>
	public class CrmBasedUserList : UserList, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "CrmBasedUserList");
		}
	}
	/// <summary>
	/// Errors for currency codes.
	/// </summary>
	public class CurrencyCodeError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public CurrencyCodeErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CurrencyCodeErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "CurrencyCodeError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Encodes the reason (cause) of a particular {@link CurrencyCodeError}.
	/// </summary>
	public enum CurrencyCodeErrorReason
	{
		UnsupportedCurrencyCode
	}
	/// <summary>
	/// Represents a customer for the CustomerService.
	/// </summary>
	public class Customer : ISoapable
	{
		/// <summary>
		/// The 10-digit AdWords Customer ID.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? CustomerId { get; set; }
		/// <summary>
		/// The currency in which this account operates.
		/// We support a subset of the currency codes derived from the ISO 4217 standard.
		/// See <a href="https://developers.google.com/adwords/api/docs/appendix/currencycodes"
		/// >Currency Codes</a> for the currently supported currencies.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// <span class="constraint StringLength">The length of this string should be between 3 and 3, inclusive.</span>
		/// </summary>
		public string CurrencyCode { get; set; }
		/// <summary>
		/// The local timezone ID for this customer.
		/// See <a href="https://developers.google.com/adwords/api/docs/appendix/timezones"
		/// >Time Zone Codes</a> for the currently supported list.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string DateTimeZone { get; set; }
		/// <summary>
		/// An optional, non-unique descriptive name for this customer.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DescriptiveName { get; set; }
		/// <summary>
		/// An optional, non-unique company name for this customer.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CompanyName { get; set; }
		/// <summary>
		/// Whether this customer can manage other AdWords customers
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? CanManageClients { get; set; }
		/// <summary>
		/// Whether this customer's account is a test account.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? TestAccount { get; set; }
		/// <summary>
		/// Whether auto-tagging is enabled for this customer.
		/// </summary>
		public bool? AutoTaggingEnabled { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL.
		///
		/// <p>On update, empty string ("") indicates to clear the field.
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// Customer-level AdWords Conversion Tracking settings
		/// </summary>
		public ConversionTrackingSettings ConversionTrackingSettings { get; set; }
		/// <summary>
		/// Customer-level AdWords Remarketing settings
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public RemarketingSettings RemarketingSettings { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CustomerId = null;
			CurrencyCode = null;
			DateTimeZone = null;
			DescriptiveName = null;
			CompanyName = null;
			CanManageClients = null;
			TestAccount = null;
			AutoTaggingEnabled = null;
			TrackingUrlTemplate = null;
			ConversionTrackingSettings = null;
			RemarketingSettings = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "customerId")
				{
					CustomerId = long.Parse(xItem.Value);
				}
				else if (localName == "currencyCode")
				{
					CurrencyCode = xItem.Value;
				}
				else if (localName == "dateTimeZone")
				{
					DateTimeZone = xItem.Value;
				}
				else if (localName == "descriptiveName")
				{
					DescriptiveName = xItem.Value;
				}
				else if (localName == "companyName")
				{
					CompanyName = xItem.Value;
				}
				else if (localName == "canManageClients")
				{
					CanManageClients = bool.Parse(xItem.Value);
				}
				else if (localName == "testAccount")
				{
					TestAccount = bool.Parse(xItem.Value);
				}
				else if (localName == "autoTaggingEnabled")
				{
					AutoTaggingEnabled = bool.Parse(xItem.Value);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "conversionTrackingSettings")
				{
					ConversionTrackingSettings = new ConversionTrackingSettings();
					ConversionTrackingSettings.ReadFrom(xItem);
				}
				else if (localName == "remarketingSettings")
				{
					RemarketingSettings = new RemarketingSettings();
					RemarketingSettings.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CustomerId != null)
			{
				xItem = new XElement(XName.Get("customerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CustomerId.Value.ToString());
				xE.Add(xItem);
			}
			if (CurrencyCode != null)
			{
				xItem = new XElement(XName.Get("currencyCode", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CurrencyCode);
				xE.Add(xItem);
			}
			if (DateTimeZone != null)
			{
				xItem = new XElement(XName.Get("dateTimeZone", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(DateTimeZone);
				xE.Add(xItem);
			}
			if (DescriptiveName != null)
			{
				xItem = new XElement(XName.Get("descriptiveName", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(DescriptiveName);
				xE.Add(xItem);
			}
			if (CompanyName != null)
			{
				xItem = new XElement(XName.Get("companyName", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CompanyName);
				xE.Add(xItem);
			}
			if (CanManageClients != null)
			{
				xItem = new XElement(XName.Get("canManageClients", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CanManageClients.Value.ToString());
				xE.Add(xItem);
			}
			if (TestAccount != null)
			{
				xItem = new XElement(XName.Get("testAccount", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(TestAccount.Value.ToString());
				xE.Add(xItem);
			}
			if (AutoTaggingEnabled != null)
			{
				xItem = new XElement(XName.Get("autoTaggingEnabled", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(AutoTaggingEnabled.Value.ToString());
				xE.Add(xItem);
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (ConversionTrackingSettings != null)
			{
				xItem = new XElement(XName.Get("conversionTrackingSettings", "https://adwords.google.com/api/adwords/mcm/v201609"));
				ConversionTrackingSettings.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (RemarketingSettings != null)
			{
				xItem = new XElement(XName.Get("remarketingSettings", "https://adwords.google.com/api/adwords/mcm/v201609"));
				RemarketingSettings.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Holds information about changes to a customer
	/// </summary>
	public class CustomerChangeData : ISoapable
	{
		/// <summary>
		/// A list of campaign changes for the customer, as specified by the selector. If a campaign is
		/// included in the selector it will be included in this list, even if the campaign did not change.
		/// </summary>
		public List<CampaignChangeData> ChangedCampaigns { get; set; }
		/// <summary>
		/// A list of feed changes for the customer as specified in the selector. If a feed is included in
		/// the selector then it will be included in this list, even if the feed did not change.
		/// </summary>
		public List<FeedChangeData> ChangedFeeds { get; set; }
		/// <summary>
		/// The timestamp for the last changed processed for this customer. It is important that this
		/// timestamp be used for subsequent requests to avoid missing any changes.
		/// </summary>
		public string LastChangeTimestamp { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ChangedCampaigns = null;
			ChangedFeeds = null;
			LastChangeTimestamp = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "changedCampaigns")
				{
					if (ChangedCampaigns == null) ChangedCampaigns = new List<CampaignChangeData>();
					var changedCampaignsItem = new CampaignChangeData();
					changedCampaignsItem.ReadFrom(xItem);
					ChangedCampaigns.Add(changedCampaignsItem);
				}
				else if (localName == "changedFeeds")
				{
					if (ChangedFeeds == null) ChangedFeeds = new List<FeedChangeData>();
					var changedFeedsItem = new FeedChangeData();
					changedFeedsItem.ReadFrom(xItem);
					ChangedFeeds.Add(changedFeedsItem);
				}
				else if (localName == "lastChangeTimestamp")
				{
					LastChangeTimestamp = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ChangedCampaigns != null)
			{
				foreach (var changedCampaignsItem in ChangedCampaigns)
				{
					xItem = new XElement(XName.Get("changedCampaigns", "https://adwords.google.com/api/adwords/ch/v201609"));
					changedCampaignsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ChangedFeeds != null)
			{
				foreach (var changedFeedsItem in ChangedFeeds)
				{
					xItem = new XElement(XName.Get("changedFeeds", "https://adwords.google.com/api/adwords/ch/v201609"));
					changedFeedsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (LastChangeTimestamp != null)
			{
				xItem = new XElement(XName.Get("lastChangeTimestamp", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(LastChangeTimestamp);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Possible error codes in CustomerService.
	/// </summary>
	public class CustomerError : ApiError, ISoapable
	{
		public CustomerErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CustomerErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "CustomerError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The ApiErrorReason for a CustomerError.
	/// </summary>
	public enum CustomerErrorReason
	{
		/// <summary>
		/// Referenced service link does not exist
		/// </summary>
		InvalidServiceLink,
		/// <summary>
		/// An {@code ACTIVE} link cannot be made {@code PENDING}
		/// </summary>
		InvalidStatus,
		/// <summary>
		/// A temporary server error. The request can be retried.
		/// </summary>
		Temporary,
		/// <summary>
		/// CustomerService cannot {@link CustomerService#get() get} an account that is not fully set
		/// up.
		/// </summary>
		AccountNotSetUp
	}
	/// <summary>
	/// A CustomerExtensionSetting is used to add or modify extensions being served for the customer.
	/// </summary>
	public class CustomerExtensionSetting : ISoapable
	{
		/// <summary>
		/// The extension type the extension setting applies to.
		/// <span class="constraint Selectable">This field can be selected using the value "ExtensionType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FeedType? ExtensionType { get; set; }
		/// <summary>
		/// The extension setting specifying which extensions to serve for all of the customer's campaigns.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public ExtensionSetting ExtensionSetting { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ExtensionType = null;
			ExtensionSetting = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "extensionType")
				{
					ExtensionType = FeedTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "extensionSetting")
				{
					ExtensionSetting = new ExtensionSetting();
					ExtensionSetting.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ExtensionType != null)
			{
				xItem = new XElement(XName.Get("extensionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExtensionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ExtensionSetting != null)
			{
				xItem = new XElement(XName.Get("extensionSetting", "https://adwords.google.com/api/adwords/cm/v201609"));
				ExtensionSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation used to create or mutate a CustomerExtensionSetting.
	/// </summary>
	public class CustomerExtensionSettingOperation : Operation, ISoapable
	{
		/// <summary>
		/// CustomerExtensionSetting to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CustomerExtensionSetting Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CustomerExtensionSetting();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerExtensionSettingOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of CustomerExtensionSetting objects resulting from a
	/// {@code CustomerExtensionSettingService#get} call.
	/// </summary>
	public class CustomerExtensionSettingPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<CustomerExtensionSetting> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CustomerExtensionSetting>();
					var entriesItem = new CustomerExtensionSetting();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerExtensionSettingPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from a {@code CustomerExtensionSettingService#mutate} call.
	/// </summary>
	public class CustomerExtensionSettingReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting CustomerExtensionSettings.
		/// </summary>
		public List<CustomerExtensionSetting> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CustomerExtensionSetting>();
					var valueItem = new CustomerExtensionSetting();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerExtensionSettingReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// CustomerFeeds are used to link a feed to the customer using a matching function,
	/// making the feed's feed items available in the customer's ads for substitution.
	/// </summary>
	public class CustomerFeed : ISoapable
	{
		/// <summary>
		/// Id of the Feed associated with the CustomerFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Matching function associated with the CustomerFeed.
		/// The matching function is used to filter the set of feed items selected.
		/// <span class="constraint Selectable">This field can be selected using the value "MatchingFunction".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Function MatchingFunction { get; set; }
		/// <summary>
		/// Indicates which <a href="/adwords/api/docs/appendix/placeholders">placeholder types</a>
		/// the feed may populate under the connected customer.
		/// <span class="constraint Selectable">This field can be selected using the value "PlaceholderTypes".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<int> PlaceholderTypes { get; set; }
		/// <summary>
		/// Status of the CustomerFeed.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public CustomerFeedStatus? Status { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			MatchingFunction = null;
			PlaceholderTypes = null;
			Status = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "matchingFunction")
				{
					MatchingFunction = new Function();
					MatchingFunction.ReadFrom(xItem);
				}
				else if (localName == "placeholderTypes")
				{
					if (PlaceholderTypes == null) PlaceholderTypes = new List<int>();
					PlaceholderTypes.Add(int.Parse(xItem.Value));
				}
				else if (localName == "status")
				{
					Status = CustomerFeedStatusExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (MatchingFunction != null)
			{
				xItem = new XElement(XName.Get("matchingFunction", "https://adwords.google.com/api/adwords/cm/v201609"));
				MatchingFunction.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (PlaceholderTypes != null)
			{
				foreach (var placeholderTypesItem in PlaceholderTypes)
				{
					xItem = new XElement(XName.Get("placeholderTypes", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(placeholderTypesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an error for the CustomerFeedService.
	/// </summary>
	public class CustomerFeedError : ApiError, ISoapable
	{
		/// <summary>
		/// Error reason.
		/// </summary>
		public CustomerFeedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CustomerFeedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerFeedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum CustomerFeedErrorReason
	{
		/// <summary>
		/// An active feed already exists for this customer and place holder type.
		/// </summary>
		FeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// The specified id does not exist.
		/// </summary>
		InvalidId,
		/// <summary>
		/// The specified feed is deleted.
		/// </summary>
		CannotAddForDeletedFeed,
		/// <summary>
		/// The CustomerFeed already exists. SET should be used to modify the existing CustomerFeed.
		/// </summary>
		CannotAddAlreadyExistingCustomerFeed,
		/// <summary>
		/// Cannot modify removed customer feed.
		/// </summary>
		CannotModifyRemovedCustomerFeed,
		/// <summary>
		/// Invalid placeholder types.
		/// </summary>
		InvalidPlaceholderTypes,
		/// <summary>
		/// Feed mapping for this placeholder type does not exist.
		/// </summary>
		MissingFeedmappingForPlaceholderType,
		/// <summary>
		/// Placeholder not allowed at the account level.
		/// </summary>
		PlaceholderTypeNotAllowedOnCustomerFeed,
		Unknown
	}
	/// <summary>
	/// Operation used to create or mutate a CustomerFeed.
	/// </summary>
	public class CustomerFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CustomerFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new CustomerFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link CustomerFeedService#get}. Contains a list of
	/// associations between customer and feeds.
	/// </summary>
	public class CustomerFeedPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The resulting CustomerFeeds.
		/// </summary>
		public List<CustomerFeed> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<CustomerFeed>();
					var entriesItem = new CustomerFeed();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerFeedPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link CustomerFeedService#mutate}.
	/// </summary>
	public class CustomerFeedReturnValue : ListReturnValue, ISoapable
	{
		public List<CustomerFeed> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<CustomerFeed>();
					var valueItem = new CustomerFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "CustomerFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of the CustomerFeed.
	/// </summary>
	public enum CustomerFeedStatus
	{
		/// <summary>
		/// Indicates that the feed is currently being used.
		/// </summary>
		Enabled,
		/// <summary>
		/// Indicates that the feed is not used anymore.
		/// </summary>
		Removed,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Error information returned for CustomerOrderLineService.
	/// </summary>
	public class CustomerOrderLineError : ApiError, ISoapable
	{
		public CustomerOrderLineErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CustomerOrderLineErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "CustomerOrderLineError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/billing/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enums for all the reasons an error can be thrown to the user during a CustomerOrderLine mutate
	/// operation.
	/// </summary>
	public enum CustomerOrderLineErrorReason
	{
		/// <summary>
		/// Order Line Id does not exist.
		/// </summary>
		InvalidOrderLineId,
		/// <summary>
		/// End date must be later than start date
		/// </summary>
		EndDateBeforeStartDate,
		/// <summary>
		/// Spending limit must be positive
		/// </summary>
		NegativeSpend,
		/// <summary>
		/// Cannot create order line with start date in the past
		/// </summary>
		CreateInPast,
		/// <summary>
		/// Cannot change start date after the order line has started
		/// </summary>
		AlreadyStarted,
		/// <summary>
		/// Cannot set spending limit below what has already been spent
		/// </summary>
		AlreadySpent,
		/// <summary>
		/// Cannot move end date into the past
		/// </summary>
		FinishedInThePast,
		/// <summary>
		/// Cannot cancel active order line
		/// </summary>
		CancelActive,
		/// <summary>
		/// Cannot make overlapping order lines.
		/// </summary>
		OverlapDateRange,
		/// <summary>
		/// Cannot make a COS order line non-COS.
		/// </summary>
		CosChange,
		/// <summary>
		/// Cannot create an order line on a non-adwords account
		/// </summary>
		NonAdwords,
		/// <summary>
		/// Cannot set contract start date to be after actual start date
		/// </summary>
		StartDateAfterActual,
		/// <summary>
		/// Cannot set contract start date to be after actual start date
		/// </summary>
		EndDatePastMax,
		/// <summary>
		/// only cancelled order lines may have themselves as parent
		/// </summary>
		ParentIsSelf,
		/// <summary>
		/// Cannot cancel new order line
		/// </summary>
		CannotCancelNew,
		/// <summary>
		/// Cannot cancel started order line
		/// </summary>
		CannotCancelStarted,
		/// <summary>
		/// Cannot promote an order line that is not pending.
		/// </summary>
		CannotPromoteNonPendingOrderline,
		/// <summary>
		/// Updating order line will shift current order line.
		/// </summary>
		UpdateOrderlineWillShiftCurrent,
		/// <summary>
		/// Only Order lines in normal or pending state can be modified.
		/// </summary>
		OrderlineBeingModifiedIsNotNormalOrPending,
		/// <summary>
		/// Invalid Status Change by client.
		/// </summary>
		InvalidStatusChange,
		/// <summary>
		/// More than one operation not permitted per call.
		/// </summary>
		MoreThanOneOperationNotPermitted,
		/// <summary>
		/// StartDate and EndDate should pass in the customer's account timeZone.
		/// </summary>
		InvalidTimezoneInDateRanges,
		Unknown
	}
	/// <summary>
	/// Represents CustomerSyncService specific errors
	/// </summary>
	public class CustomerSyncError : ApiError, ISoapable
	{
		public CustomerSyncErrorReason? Reason { get; set; }
		public long? CampaignId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			CampaignId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = CustomerSyncErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/ch/v201609", "CustomerSyncError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	public enum CustomerSyncErrorReason
	{
		/// <summary>
		/// The request attempted to access a campaign that either does not exist or belongs to a
		/// different account.
		/// </summary>
		InvalidCampaignId,
		/// <summary>
		/// The request attempted to access a feed that either does not exist or belongs to a different
		/// account.
		/// </summary>
		InvalidFeedId,
		/// <summary>
		/// The request asked for an invalid date range
		/// </summary>
		InvalidDateRange,
		/// <summary>
		/// There have been too many changes to sync the campaign over the requested date/time range. To
		/// avoid this error, try specifying a smaller date/time range. If this does not work, you should
		/// assume that everything has changed and retrieve the objects using their respective services.
		/// </summary>
		TooManyChanges
	}
	/// <summary>
	/// A filter for selecting change history data for a customer.
	/// </summary>
	public class CustomerSyncSelector : ISoapable
	{
		/// <summary>
		/// Only return entities that have changed during the specified time range. String Format: yyyyMMdd
		/// HHmmss <Timezone ID> (for example, 20100609 150223 America/New_York). See the <a
		/// href="https://developers.google.com/adwords/api/docs/appendix/timezones">Timezones</a> page for
		/// the complete list of Timezone IDs.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public DateTimeRange DateTimeRange { get; set; }
		/// <summary>
		/// Return entities belonging to these campaigns.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// </summary>
		public List<long> CampaignIds { get; set; }
		/// <summary>
		/// Return entities belonging to these feeds.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// </summary>
		public List<long> FeedIds { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DateTimeRange = null;
			CampaignIds = null;
			FeedIds = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "dateTimeRange")
				{
					DateTimeRange = new DateTimeRange();
					DateTimeRange.ReadFrom(xItem);
				}
				else if (localName == "campaignIds")
				{
					if (CampaignIds == null) CampaignIds = new List<long>();
					CampaignIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "feedIds")
				{
					if (FeedIds == null) FeedIds = new List<long>();
					FeedIds.Add(long.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DateTimeRange != null)
			{
				xItem = new XElement(XName.Get("dateTimeRange", "https://adwords.google.com/api/adwords/ch/v201609"));
				DateTimeRange.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CampaignIds != null)
			{
				foreach (var campaignIdsItem in CampaignIds)
				{
					xItem = new XElement(XName.Get("campaignIds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(campaignIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (FeedIds != null)
			{
				foreach (var feedIdsItem in FeedIds)
				{
					xItem = new XElement(XName.Get("feedIds", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(feedIdsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// CustomParameter is used to map a custom parameter key to its value.
	/// </summary>
	public class CustomParameter : ISoapable
	{
		/// <summary>
		/// The parameter key to be mapped.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 16, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Key { get; set; }
		/// <summary>
		/// The value this parameter should be mapped to. It should be null if isRemove is true.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 200, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Value { get; set; }
		/// <summary>
		/// On SET operation, indicates that the parameter should be removed from the existing parameters.
		/// If set to true, the value field must be null.
		/// </summary>
		public bool? IsRemove { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Value = null;
			IsRemove = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = xItem.Value;
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
				else if (localName == "isRemove")
				{
					IsRemove = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Key);
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
			if (IsRemove != null)
			{
				xItem = new XElement(XName.Get("isRemove", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsRemove.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// CustomParameters holds a list of CustomParameters to be treated as a map.
	/// It has a special field used to indicate that the current map should be cleared and replaced
	/// with this new map.
	/// </summary>
	public class CustomParameters : ISoapable
	{
		/// <summary>
		/// The list of custom parameters.
		///
		/// <p>On update, all parameters can be cleared by providing an empty or null list and setting
		/// doReplace to true.
		/// </summary>
		public List<CustomParameter> Parameters { get; set; }
		/// <summary>
		/// On SET operation, indicates that the current parameters should be cleared and replaced
		/// with these parameters.
		/// </summary>
		public bool? DoReplace { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Parameters = null;
			DoReplace = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "parameters")
				{
					if (Parameters == null) Parameters = new List<CustomParameter>();
					var parametersItem = new CustomParameter();
					parametersItem.ReadFrom(xItem);
					Parameters.Add(parametersItem);
				}
				else if (localName == "doReplace")
				{
					DoReplace = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Parameters != null)
			{
				foreach (var parametersItem in Parameters)
				{
					xItem = new XElement(XName.Get("parameters", "https://adwords.google.com/api/adwords/cm/v201609"));
					parametersItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (DoReplace != null)
			{
				xItem = new XElement(XName.Get("doReplace", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DoReplace.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors that are thrown due to a database access problem.
	/// </summary>
	public class DatabaseError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public DatabaseErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DatabaseErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DatabaseError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the database error.
	/// </summary>
	public enum DatabaseErrorReason
	{
		/// <summary>
		/// A concurrency problem occurred as two threads were attempting to modify same object.
		/// </summary>
		ConcurrentModification,
		/// <summary>
		/// The permission was denied to access an object.
		/// </summary>
		PermissionDenied,
		/// <summary>
		/// The user's access to an object has been prohibited.
		/// </summary>
		AccessProhibited,
		/// <summary>
		/// Requested campaign belongs to a product that is not supported by the api.
		/// </summary>
		CampaignProductNotSupported,
		/// <summary>
		/// a duplicate key was detected upon insertion
		/// </summary>
		DuplicateKey,
		/// <summary>
		/// a database error has occurred
		/// </summary>
		DatabaseError,
		/// <summary>
		/// an unknown error has occurred
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Enumerates data driven model statuses.
	/// </summary>
	public enum DataDrivenModelStatus
	{
		Unknown,
		Available,
		Stale,
		Expired,
		NeverGenerated
	}
	/// <summary>
	/// The base class of all return types of the table service.
	/// </summary>
	public abstract class DataEntry : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of DataEntry.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string DataEntryType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DataEntryType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "DataEntry.Type")
				{
					DataEntryType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DataEntryType != null)
			{
				xItem = new XElement(XName.Get("DataEntry.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DataEntryType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents errors thrown by the get operation.
	/// </summary>
	public class DataError : ApiError, ISoapable
	{
		public DataErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DataErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DataError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Reasons for error.
	/// </summary>
	public enum DataErrorReason
	{
		CannotCreateTableEntry,
		NoTableEntryClassForViewType,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		TableServiceError
	}
	/// <summary>
	/// Represents a date.
	/// </summary>
	public class Date : ISoapable
	{
		/// <summary>
		/// Year (e.g., 2009)
		/// </summary>
		public int? Year { get; set; }
		/// <summary>
		/// Month (1..12)
		/// </summary>
		public int? Month { get; set; }
		/// <summary>
		/// Day (1..31)
		/// </summary>
		public int? Day { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Year = null;
			Month = null;
			Day = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "year")
				{
					Year = int.Parse(xItem.Value);
				}
				else if (localName == "month")
				{
					Month = int.Parse(xItem.Value);
				}
				else if (localName == "day")
				{
					Day = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Year != null)
			{
				xItem = new XElement(XName.Get("year", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Year.Value.ToString());
				xE.Add(xItem);
			}
			if (Month != null)
			{
				xItem = new XElement(XName.Get("month", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Month.Value.ToString());
				xE.Add(xItem);
			}
			if (Day != null)
			{
				xItem = new XElement(XName.Get("day", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Day.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors associated with invalid dates and date ranges.
	/// </summary>
	public class DateError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public DateErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DateErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DateError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum DateErrorReason
	{
		/// <summary>
		/// Given field values do not correspond to a valid date.
		/// </summary>
		InvalidFieldValuesInDate,
		/// <summary>
		/// Given field values do not correspond to a valid date time.
		/// </summary>
		InvalidFieldValuesInDateTime,
		/// <summary>
		/// The string date's format should be yyyymmdd.
		/// </summary>
		InvalidStringDate,
		/// <summary>
		/// The string date range's format should be yyyymmdd yyyymmdd.
		/// </summary>
		InvalidStringDateRange,
		/// <summary>
		/// The string date time's format should be yyyymmdd hhmmss [tz].
		/// </summary>
		InvalidStringDateTime,
		/// <summary>
		/// Date is before allowed minimum.
		/// </summary>
		EarlierThanMinimumDate,
		/// <summary>
		/// Date is after allowed maximum.
		/// </summary>
		LaterThanMaximumDate,
		/// <summary>
		/// Date range bounds are not in order.
		/// </summary>
		DateRangeMinimumDateLaterThanMaximumDate,
		/// <summary>
		/// Both dates in range are null.
		/// </summary>
		DateRangeMinimumAndMaximumDatesBothNull
	}
	/// <summary>
	/// A custom parameter of date type. Supported date formats are listed as follows:
	/// <ul>
	/// <li> 2011-03-31T12:20:19-05:00
	/// <li> 03/31/2011 12:20:19-05:00
	/// <li> Fri, Mar 31 2011 12:20:19 EST
	/// <li> Fri, Mar 31 12:20:19 EST 2011
	/// </ul>
	/// <p>
	/// If time zone information is not present in the value,
	/// it is assumed to be PST. If time value is not specified,
	/// it defaults to midnight of the day.
	/// </summary>
	public class DateKey : ISoapable
	{
		/// <summary>
		/// <span class="constraint MatchesRegex">A name must begin with US-ascii letters or underscore or UTF8 code that is greater than 127 and consist of US-ascii letters or digits or underscore or UTF8 code that is greater than 127. This is checked by the regular expression '^[a-zA-Z_?-?][a-zA-Z0-9_?-?]*$'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a range of dates that has either an upper or a lower bound.
	/// The format for the date is YYYYMMDD.
	/// </summary>
	public class DateRange : ISoapable
	{
		/// <summary>
		/// the lower bound of this date range, inclusive.
		/// </summary>
		public string Min { get; set; }
		/// <summary>
		/// the upper bound of this date range, inclusive.
		/// </summary>
		public string Max { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Min = null;
			Max = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "min")
				{
					Min = xItem.Value;
				}
				else if (localName == "max")
				{
					Max = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Min != null)
			{
				xItem = new XElement(XName.Get("min", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Min);
				xE.Add(xItem);
			}
			if (Max != null)
			{
				xItem = new XElement(XName.Get("max", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Max);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A list of all the error codes being used for date range error.
	/// </summary>
	public class DateRangeError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public DateRangeErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DateRangeErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DateRangeError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the date range error.
	/// </summary>
	public enum DateRangeErrorReason
	{
		DateRangeError,
		/// <summary>
		/// Invalid date.
		/// </summary>
		InvalidDate,
		/// <summary>
		/// The start date was after the end date.
		/// </summary>
		StartDateAfterEndDate,
		/// <summary>
		/// Cannot set date to past time
		/// </summary>
		CannotSetDateToPast,
		/// <summary>
		/// A date was used that is past the system "last" date.
		/// </summary>
		AfterMaximumAllowableDate,
		/// <summary>
		/// Trying to change start date on a campaign that has started.
		/// </summary>
		CannotModifyStartDateIfAlreadyStarted
	}
	/// <summary>
	/// An atomic rule fragment composing of date operation.
	/// </summary>
	public class DateRuleItem : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public DateKey Key { get; set; }
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public DateRuleItemDateOperator? Op { get; set; }
		/// <summary>
		/// The right hand side of date rule item. The date's format should be YYYYMMDD.
		/// </summary>
		public string Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Op = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = new DateKey();
					Key.ReadFrom(xItem);
				}
				else if (localName == "op")
				{
					Op = DateRuleItemDateOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/rm/v201609"));
				Key.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Op != null)
			{
				xItem = new XElement(XName.Get("op", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Op.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Supported rule operator for date type.
	/// </summary>
	public enum DateRuleItemDateOperator
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		Equals,
		NotEqual,
		Before,
		After
	}
	/// <summary>
	/// Visitors of a page during specific dates. The visiting periods are defined as follows:
	/// <ul>
	/// <li> between {@code startDate} (inclusive) and {@code endDate} (inclusive);
	/// <li> before {@code endDate} (exclusive) with {@code startDate} = 2000-01-01;
	/// <li> after {@code startDate} (exclusive) with {@code endDate} = 2037-12-30.
	/// </ul>
	/// </summary>
	public class DateSpecificRuleUserList : RuleBasedUserList, ISoapable
	{
		/// <summary>
		/// Boolean rule that defines visitor of a page. This field is selected by default.
		/// <span class="constraint Selectable">This field can be selected using the value "DateSpecificListRule".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Rule Rule { get; set; }
		/// <summary>
		/// Start date of users visit. If set to <code>20000101</code>, then includes
		/// all users before <code>endDate</code>. The date's format should be YYYYMMDD.
		/// This field is selected by default.
		/// <span class="constraint Selectable">This field can be selected using the value "DateSpecificListStartDate".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string StartDate { get; set; }
		/// <summary>
		/// End date of users visit. If set to <code>20371230</code>, then includes
		/// all users after <code>startDate</code>. The date's format should be YYYYMMDD.
		/// This field is selected by default.
		/// <span class="constraint Selectable">This field can be selected using the value "DateSpecificListEndDate".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string EndDate { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Rule = null;
			StartDate = null;
			EndDate = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rule")
				{
					Rule = new Rule();
					Rule.ReadFrom(xItem);
				}
				else if (localName == "startDate")
				{
					StartDate = xItem.Value;
				}
				else if (localName == "endDate")
				{
					EndDate = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "DateSpecificRuleUserList");
			XElement xItem = null;
			if (Rule != null)
			{
				xItem = new XElement(XName.Get("rule", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rule.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (StartDate != null)
			{
				xItem = new XElement(XName.Get("startDate", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(StartDate);
				xE.Add(xItem);
			}
			if (EndDate != null)
			{
				xItem = new XElement(XName.Get("endDate", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(EndDate);
				xE.Add(xItem);
			}
		}
	}
	public class DateTimeRange : ISoapable
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Min = null;
			Max = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "min")
				{
					Min = xItem.Value;
				}
				else if (localName == "max")
				{
					Max = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Min != null)
			{
				xItem = new XElement(XName.Get("min", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Min);
				xE.Add(xItem);
			}
			if (Max != null)
			{
				xItem = new XElement(XName.Get("max", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Max);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Days of the week.
	/// </summary>
	public enum DayOfWeek
	{
		/// <summary>
		/// The day of week named Monday.
		/// </summary>
		Monday,
		/// <summary>
		/// The day of week named Tuesday.
		/// </summary>
		Tuesday,
		/// <summary>
		/// The day of week named Wednesday.
		/// </summary>
		Wednesday,
		/// <summary>
		/// The day of week named Thursday.
		/// </summary>
		Thursday,
		/// <summary>
		/// The day of week named Friday.
		/// </summary>
		Friday,
		/// <summary>
		/// The day of week named Saturday.
		/// </summary>
		Saturday,
		/// <summary>
		/// The day of week named Sunday.
		/// </summary>
		Sunday
	}
	/// <summary>
	/// Represents a deprecated ad.
	///
	/// Deprecated ads can be deleted, but cannot be created.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class DeprecatedAd : Ad, ISoapable
	{
		/// <summary>
		/// Name of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Type of the creative.
		/// <span class="constraint Selectable">This field can be selected using the value "Type".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public DeprecatedAdType? DeprecatedAdType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Name = null;
			DeprecatedAdType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "deprecatedAdType")
				{
					DeprecatedAdType = DeprecatedAdTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DeprecatedAd");
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (DeprecatedAdType != null)
			{
				xItem = new XElement(XName.Get("deprecatedAdType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeprecatedAdType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum DeprecatedAdType
	{
		/// <summary>
		/// Video ad.
		/// </summary>
		Video,
		/// <summary>
		/// Click to call ad.
		/// </summary>
		ClickToCall,
		/// <summary>
		/// Instream video ad.
		/// </summary>
		InStreamVideo,
		/// <summary>
		/// Froogle ad.
		/// </summary>
		Froogle,
		/// <summary>
		/// Text link ad.
		/// </summary>
		TextLink,
		/// <summary>
		/// Gadget ad.
		/// </summary>
		Gadget,
		/// <summary>
		/// Print ad.
		/// </summary>
		Print,
		/// <summary>
		/// Wide text ad.
		/// </summary>
		TextWide,
		/// <summary>
		/// Gadget template ad.
		/// </summary>
		GadgetTemplate,
		/// <summary>
		/// Text ad with video.
		/// </summary>
		TextWithVideo,
		/// <summary>
		/// Audio ad.
		/// </summary>
		Audio,
		/// <summary>
		/// Local business ads.
		/// </summary>
		LocalBusinessAd,
		/// <summary>
		/// Audio based template ads.
		/// </summary>
		AudioTemplate,
		/// <summary>
		/// Mobile ads
		/// </summary>
		MobileAd,
		/// <summary>
		/// Mobile image ads
		/// </summary>
		MobileImageAd,
		Unknown
	}
	/// <summary>
	/// Top level class for Dimensions.
	/// </summary>
	public abstract class DimensionProperties : DataEntry, ISoapable
	{
		public LevelOfDetail LevelOfDetail { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			LevelOfDetail = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "levelOfDetail")
				{
					LevelOfDetail = new LevelOfDetail();
					LevelOfDetail.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DimensionProperties");
			XElement xItem = null;
			if (LevelOfDetail != null)
			{
				xItem = new XElement(XName.Get("levelOfDetail", "https://adwords.google.com/api/adwords/cm/v201609"));
				LevelOfDetail.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a simple height-width dimension.
	/// </summary>
	public class Dimensions : ISoapable
	{
		/// <summary>
		/// Width of the dimension
		/// <span class="constraint Selectable">This field can be selected using the value "Width".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? Width { get; set; }
		/// <summary>
		/// Height of the dimension
		/// <span class="constraint Selectable">This field can be selected using the value "Height".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? Height { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Width = null;
			Height = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "width")
				{
					Width = int.Parse(xItem.Value);
				}
				else if (localName == "height")
				{
					Height = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Width != null)
			{
				xItem = new XElement(XName.Get("width", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Width.Value.ToString());
				xE.Add(xItem);
			}
			if (Height != null)
			{
				xItem = new XElement(XName.Get("height", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Height.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Container for information about why an AdWords entity was disapproved.
	/// </summary>
	public class DisapprovalReason : ISoapable
	{
		/// <summary>
		/// Short description of the disapproval reason, localized for the specific advertiser.
		/// </summary>
		public string ShortName { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ShortName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "shortName")
				{
					ShortName = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ShortName != null)
			{
				xItem = new XElement(XName.Get("shortName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ShortName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Attributes for Text Labels.
	/// </summary>
	public class DisplayAttribute : LabelAttribute, ISoapable
	{
		/// <summary>
		/// Background color of the label in RGB format.
		/// <span class="constraint MatchesRegex">A background color string must begin with a '#' character followed by either 6 or 3 hexadecimal characters (24 vs. 12 bits). This is checked by the regular expression '^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$'.</span>
		/// </summary>
		public string BackgroundColor { get; set; }
		/// <summary>
		/// A short description of the label.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 200, inclusive.</span>
		/// </summary>
		public string Description { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			BackgroundColor = null;
			Description = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "backgroundColor")
				{
					BackgroundColor = xItem.Value;
				}
				else if (localName == "description")
				{
					Description = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DisplayAttribute");
			XElement xItem = null;
			if (BackgroundColor != null)
			{
				xItem = new XElement(XName.Get("backgroundColor", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BackgroundColor);
				xE.Add(xItem);
			}
			if (Description != null)
			{
				xItem = new XElement(XName.Get("description", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors related to distinct ids or content.
	/// </summary>
	public class DistinctError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public DistinctErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DistinctErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DistinctError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the validation error.
	/// </summary>
	public enum DistinctErrorReason
	{
		DuplicateElement,
		DuplicateType
	}
	/// <summary>
	/// Represents categories that AdWords finds automatically for your website.
	///
	/// <p>
	/// No categories available means that AdWords couldn't automatically find categories for your
	/// website. To control how categories are assigned, manually add breadcrumbs to your webpages.
	///
	/// <p>
	/// Categories can be filtered by domain name or by a set of campaign IDs.
	/// </summary>
	public class DomainCategory : DimensionProperties, ISoapable
	{
		/// <summary>
		/// Recommended category for the website domain.
		/// <span class="constraint Selectable">This field can be selected using the value "Category".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Category { get; set; }
		/// <summary>
		/// Coverage is the number of docs that match a label / number of docs that match the
		/// immediate parent label.
		/// <p>
		/// Example : united states/ca/sfo matches 500 docs and united states/ca matches 1000
		/// docs. The coverage will be 50%.
		/// <span class="constraint Selectable">This field can be selected using the value "Coverage".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public double? Coverage { get; set; }
		/// <summary>
		/// The domain for the website. Since many different domains can have the same categories, the
		/// domain and the language are used to uniquely identify the categories.
		/// <p>
		/// The domain can be specified in the DynamicSearchAdsSetting required for dynamic search ads.
		/// <span class="constraint Selectable">This field can be selected using the value "DomainName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DomainName { get; set; }
		/// <summary>
		/// The language for the website. Since many different domains can have the same categories, the
		/// domain and the language are used to uniquely identify the categories.
		/// <p>
		/// The language can be specified in the DynamicSearchAdsSetting required for dynamic search ads.
		/// <span class="constraint Selectable">This field can be selected using the value "IsoLanguage".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string IsoLanguage { get; set; }
		/// <summary>
		/// The recommended cost per click for the category.
		/// <span class="constraint Selectable">This field can be selected using the value "RecommendedCpc".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public Money RecommendedCpc { get; set; }
		/// <summary>
		/// Used to determine whether a category has sub-categories associated with it.
		/// <span class="constraint Selectable">This field can be selected using the value "HasChild".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? HasChild { get; set; }
		/// <summary>
		/// The position of this category in the recommended set of categories.
		/// <span class="constraint Selectable">This field can be selected using the value "CategoryRank".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? CategoryRank { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Category = null;
			Coverage = null;
			DomainName = null;
			IsoLanguage = null;
			RecommendedCpc = null;
			HasChild = null;
			CategoryRank = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "category")
				{
					Category = xItem.Value;
				}
				else if (localName == "coverage")
				{
					Coverage = double.Parse(xItem.Value);
				}
				else if (localName == "domainName")
				{
					DomainName = xItem.Value;
				}
				else if (localName == "isoLanguage")
				{
					IsoLanguage = xItem.Value;
				}
				else if (localName == "recommendedCpc")
				{
					RecommendedCpc = new Money();
					RecommendedCpc.ReadFrom(xItem);
				}
				else if (localName == "hasChild")
				{
					HasChild = bool.Parse(xItem.Value);
				}
				else if (localName == "categoryRank")
				{
					CategoryRank = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DomainCategory");
			XElement xItem = null;
			if (Category != null)
			{
				xItem = new XElement(XName.Get("category", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Category);
				xE.Add(xItem);
			}
			if (Coverage != null)
			{
				xItem = new XElement(XName.Get("coverage", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Coverage.Value.ToString());
				xE.Add(xItem);
			}
			if (DomainName != null)
			{
				xItem = new XElement(XName.Get("domainName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DomainName);
				xE.Add(xItem);
			}
			if (IsoLanguage != null)
			{
				xItem = new XElement(XName.Get("isoLanguage", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsoLanguage);
				xE.Add(xItem);
			}
			if (RecommendedCpc != null)
			{
				xItem = new XElement(XName.Get("recommendedCpc", "https://adwords.google.com/api/adwords/cm/v201609"));
				RecommendedCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (HasChild != null)
			{
				xItem = new XElement(XName.Get("hasChild", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HasChild.Value.ToString());
				xE.Add(xItem);
			}
			if (CategoryRank != null)
			{
				xItem = new XElement(XName.Get("categoryRank", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CategoryRank.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of {@link DomainCategory} objects resulting from
	/// the filtering and paging of {@link DataService#getDomainCategory} call.
	/// </summary>
	public class DomainCategoryPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<DomainCategory> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<DomainCategory>();
					var entriesItem = new DomainCategory();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DomainCategoryPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a double value.
	/// </summary>
	public class DoubleAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Double value contained by this {@link Attribute}.
		/// </summary>
		public double? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = double.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "DoubleAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Number value type for constructing double valued ranges.
	/// </summary>
	public class DoubleValue : NumberValue, ISoapable
	{
		/// <summary>
		/// the underlying double value.
		/// </summary>
		public double? Number { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Number = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "number")
				{
					Number = double.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DoubleValue");
			XElement xItem = null;
			if (Number != null)
			{
				xItem = new XElement(XName.Get("number", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Number.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	public enum DownloadFormat
	{
		Csvforexcel,
		Csv,
		Tsv,
		Xml,
		GzippedCsv,
		GzippedXml
	}
	/// <summary>
	/// The interface object which contains the basic information of a draft.  Entity specific
	/// information in the campaign tree are represented by their respective entities objects with a
	/// corresponding draftId.
	/// </summary>
	public class Draft : ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "DraftId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public long? DraftId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "DraftName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 1024, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string DraftName { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "DraftStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public DraftStatus? DraftStatus { get; set; }
		/// <summary>
		/// The campaign id that references the draft version of the
		/// original campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "DraftCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? DraftCampaignId { get; set; }
		/// <summary>
		/// True, if a trial created from this draft is running. Only available via the Get action.
		/// <span class="constraint Selectable">This field can be selected using the value "HasRunningTrial".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? HasRunningTrial { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DraftId = null;
			BaseCampaignId = null;
			DraftName = null;
			DraftStatus = null;
			DraftCampaignId = null;
			HasRunningTrial = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "draftId")
				{
					DraftId = long.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "draftName")
				{
					DraftName = xItem.Value;
				}
				else if (localName == "draftStatus")
				{
					DraftStatus = DraftStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "draftCampaignId")
				{
					DraftCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "hasRunningTrial")
				{
					HasRunningTrial = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DraftId != null)
			{
				xItem = new XElement(XName.Get("draftId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (DraftName != null)
			{
				xItem = new XElement(XName.Get("draftName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftName);
				xE.Add(xItem);
			}
			if (DraftStatus != null)
			{
				xItem = new XElement(XName.Get("draftStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DraftCampaignId != null)
			{
				xItem = new XElement(XName.Get("draftCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (HasRunningTrial != null)
			{
				xItem = new XElement(XName.Get("hasRunningTrial", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HasRunningTrial.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An error that has occurred while asynchronously processing the promotion of a draft.
	/// </summary>
	public class DraftAsyncError : ISoapable
	{
		/// <summary>
		/// The error occurred during promotion while updating this Campaign or an entity in this Campaign.
		/// This field can only be used with Predicate Operators EQUALS and IN. When using a Predicate
		/// with this field, also include a Predicate for the field DraftId.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// The draft that was attempted to be promoted.  This field can only be used with Predicate
		/// Operators EQUALS and IN. When using a Predicate with this field, also include a Predicate for
		/// the field BaseCampaignId.
		/// <span class="constraint Selectable">This field can be selected using the value "DraftId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? DraftId { get; set; }
		/// <summary>
		/// The draft Campaign that was attempted to be promoted.
		/// <span class="constraint Selectable">This field can be selected using the value "DraftCampaignId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? DraftCampaignId { get; set; }
		/// <summary>
		/// The error that occurred while promoting the draft.
		/// <span class="constraint Selectable">This field can be selected using the value "AsyncError".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ApiError AsyncError { get; set; }
		/// <summary>
		/// The error occurred during promotion while updating this AdGroup or an entity in this AdGroup.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		/// <summary>
		/// The draft AdGroup that was attempted to be promoted.
		/// <span class="constraint Selectable">This field can be selected using the value "DraftAdGroupId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? DraftAdGroupId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BaseCampaignId = null;
			DraftId = null;
			DraftCampaignId = null;
			AsyncError = null;
			BaseAdGroupId = null;
			DraftAdGroupId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "draftId")
				{
					DraftId = long.Parse(xItem.Value);
				}
				else if (localName == "draftCampaignId")
				{
					DraftCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "asyncError")
				{
					AsyncError = InstanceCreator.CreateApiError(xItem);
					AsyncError.ReadFrom(xItem);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "draftAdGroupId")
				{
					DraftAdGroupId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (DraftId != null)
			{
				xItem = new XElement(XName.Get("draftId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftId.Value.ToString());
				xE.Add(xItem);
			}
			if (DraftCampaignId != null)
			{
				xItem = new XElement(XName.Get("draftCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (AsyncError != null)
			{
				xItem = new XElement(XName.Get("asyncError", "https://adwords.google.com/api/adwords/cm/v201609"));
				AsyncError.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (DraftAdGroupId != null)
			{
				xItem = new XElement(XName.Get("draftAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of DraftAsyncErrors resulting from the filtering and paging of
	/// {@link DraftAsyncErrorService#get} call.
	/// </summary>
	public class DraftAsyncErrorPage : Page, ISoapable
	{
		public List<DraftAsyncError> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<DraftAsyncError>();
					var entriesItem = new DraftAsyncError();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DraftAsyncErrorPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents error codes for DraftService.
	/// </summary>
	public class DraftError : ApiError, ISoapable
	{
		public DraftErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = DraftErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DraftError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum DraftErrorReason
	{
		/// <summary>
		/// The draft is archived and cannot be modified further.
		/// </summary>
		CannotChangeArchivedDraft,
		/// <summary>
		/// The draft has been promoted and cannot be modified further.
		/// </summary>
		CannotChangePromotedDraft,
		/// <summary>
		/// The draft has failed to be promoted and cannot be modified further.
		/// </summary>
		CannotChangePromoteFailedDraft,
		/// <summary>
		/// This customer is not allowed to create drafts.
		/// </summary>
		CustomerCannotCreateDraft,
		/// <summary>
		/// This campaign is not allowed to create drafts.
		/// </summary>
		CampaignCannotCreateDraft,
		/// <summary>
		/// A draft with this name already exists.
		/// </summary>
		DuplicateDraftName,
		/// <summary>
		/// This modification cannot be made on a draft.
		/// </summary>
		InvalidDraftChange,
		/// <summary>
		/// The draft cannot be transitioned to the specified status from the its current status.
		/// </summary>
		InvalidStatusTransition,
		/// <summary>
		/// The campaign has reached the maximum number of drafts that can be created for a campaign
		/// throughout its lifetime. No additional drafts can be created for this campaign. Archived
		/// drafts also count towards this limit.
		/// </summary>
		MaxNumberOfDraftsPerCampaignReached,
		DraftError
	}
	/// <summary>
	/// DraftOperation for creating drafts and changing draft states.
	/// </summary>
	public class DraftOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Draft Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Draft();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DraftOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of drafts resulting from the filtering and paging of
	/// {@link DraftService#get} call.
	/// </summary>
	public class DraftPage : NullStatsPage, ISoapable
	{
		public List<Draft> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Draft>();
					var entriesItem = new Draft();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DraftPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from a {@DraftService#mutate} call.
	/// </summary>
	public class DraftReturnValue : ListReturnValue, ISoapable
	{
		public List<Draft> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Draft>();
					var valueItem = new Draft();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DraftReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status diagram available at go/adsapi-commander
	/// </summary>
	public enum DraftStatus
	{
		/// <summary>
		/// Invalid status. Should not be used except for detecting values that are
		/// incorrect, or values that are not yet known to the user.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Initial state of the draft, the advertiser can start adding changes with no
		/// effect on serving.
		/// </summary>
		Proposed,
		/// <summary>
		/// The process to merge changes in the draft back to the original campaign has
		/// completedly successfully. The advertiser cannot set this status directly. To
		/// move the draft to this status, set the draft to status PROMOTING and the status
		/// will be updated to PROMOTED when the changes are applied to the original
		/// campaign.
		/// </summary>
		Promoted,
		/// <summary>
		/// The advertiser requested to merge changes in the draft back into the original
		/// campaigns. The update to the original campaign will be kicked off asynchronously
		/// and the status will be updated to PROMOTED or PROMOTE_FAILED upon completion.
		/// </summary>
		Promoting,
		/// <summary>
		/// The advertiser has archived the draft.
		/// </summary>
		Archived,
		/// <summary>
		/// The promotion failed after it was partially applied. Promote cannot be attempted
		/// again safely, so the issue must be corrected in the original campaign. More
		/// details about the errors are available through getErrors in the DraftService
		/// API.The advertiser cannot set this status directly. To promote the draft, set
		/// the draft in state PROMOTING and the status will be updated to PROMOTE_FAILED if
		/// errors are encountered while applying changes to the original campaign.
		/// </summary>
		PromoteFailed
	}
	/// <summary>
	/// Represents a dynamic search ad. This ad will have its headline and
	/// tracking URL auto-generated at serving time according to domain name
	/// specific information provided by {@link DomainInfoExtension} linked at the
	/// campaign level.
	///
	/// <p>Auto-generated fields: headline and optional tracking URL.</p>
	///
	/// <p><b>Required fields:</b> {@code description1}, {@code description2},
	/// {@code displayUrl}.</p>
	///
	/// <p>The tracking URL field must contain at least one of the following placeholder tags
	/// (URL parameters):</p>
	/// <ul>
	/// <li>{unescapedlpurl}</li>
	/// <li>{escapedlpurl}</li>
	/// <li>{lpurl}</li>
	/// <li>{lpurl+2}</li>
	/// <li>{lpurl+3}</li>
	/// </ul>
	///
	/// <ul>
	/// <li>{unescapedlpurl} will be replaced with the full landing page URL of the displayed ad.
	/// Extra query parameters can be added to the end, e.g.: "{unescapedlpurl}?lang=en".</li>
	///
	/// <li>{escapedlpurl} will be replaced with the URL-encoded version of the full
	/// landing page URL. This makes it suitable for use as a query parameter
	/// value (e.g.: "http://www.3rdpartytracker.com/?lp={escapedlpurl}") but
	/// not at the beginning of the URL field.</li>
	///
	/// <li>{lpurl} encodes the "?" and "=" of the landing page URL making it suitable
	/// for use as a query parameter. If found at the beginning of the URL field, it is
	/// replaced by the {unescapedlpurl} value.
	/// E.g.: "http://tracking.com/redir.php?tracking=xyz&url={lpurl}".</li>
	///
	/// <li>{lpurl+2} and {lpurl+3}  will be replaced with the landing page URL escaped two or three
	/// times, respectively.  This makes it suitable if there is a chain of redirects in the tracking
	/// URL.</li>
	/// </ul>
	///
	/// <p class="note">Note that {@code finalUrls} and {@code finalMobileUrls}
	/// cannot be set for dynamic search ads.</p>
	///
	/// <p>For more information, see the article
	/// <a href="//support.google.com/adwords/answer/2549100">Using dynamic tracking URLs</a>.
	/// </p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class DynamicSearchAd : Ad, ISoapable
	{
		/// <summary>
		/// The first description line.
		/// <span class="constraint Selectable">This field can be selected using the value "Description1".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description1 { get; set; }
		/// <summary>
		/// The second description line.
		/// <span class="constraint Selectable">This field can be selected using the value "Description2".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description2 { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Description1 = null;
			Description2 = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "description1")
				{
					Description1 = xItem.Value;
				}
				else if (localName == "description2")
				{
					Description2 = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DynamicSearchAd");
			XElement xItem = null;
			if (Description1 != null)
			{
				xItem = new XElement(XName.Get("description1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description1);
				xE.Add(xItem);
			}
			if (Description2 != null)
			{
				xItem = new XElement(XName.Get("description2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description2);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Setting for controlling Dynamic Search Ads (DSA). Contains the domain name and the language
	/// used by the DSA system to automatically generate landing pages and keywords for a campaign.
	/// </summary>
	public class DynamicSearchAdsSetting : Setting, ISoapable
	{
		/// <summary>
		/// The Internet domain name that this setting represents. E.g. "google.com" or "www.google.com".
		/// To disable the setting set the domainName field to "-" (a single dash character).
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string DomainName { get; set; }
		/// <summary>
		/// A language code that indicates what language the contents of the domain is in. E.g. "en"
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string LanguageCode { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DomainName = null;
			LanguageCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "domainName")
				{
					DomainName = xItem.Value;
				}
				else if (localName == "languageCode")
				{
					LanguageCode = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "DynamicSearchAdsSetting");
			XElement xItem = null;
			if (DomainName != null)
			{
				xItem = new XElement(XName.Get("domainName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DomainName);
				xE.Add(xItem);
			}
			if (LanguageCode != null)
			{
				xItem = new XElement(XName.Get("languageCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LanguageCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enhanced CPC is a bidding strategy that raises your bids for clicks that seem more likely to
	/// lead to a conversion and lowers them for clicks where they seem less likely.
	///
	/// This bidding scheme does not support criteria level bidding strategy overrides.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class EnhancedCpcBiddingScheme : BiddingScheme, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "EnhancedCpcBiddingScheme");
		}
	}
	/// <summary>
	/// Reports permission problems trying to access an entity.
	/// </summary>
	public class EntityAccessDenied : ApiError, ISoapable
	{
		/// <summary>
		/// Reason for this error.
		/// </summary>
		public EntityAccessDeniedReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = EntityAccessDeniedReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "EntityAccessDenied");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum EntityAccessDeniedReason
	{
		/// <summary>
		/// User did not have read access.
		/// </summary>
		ReadAccessDenied,
		/// <summary>
		/// User did not have write access.
		/// </summary>
		WriteAccessDenied
	}
	/// <summary>
	/// Signals that an entity count limit was exceeded for some level.
	/// For example, too many criteria for a campaign.
	/// </summary>
	public class EntityCountLimitExceeded : ApiError, ISoapable
	{
		/// <summary>
		/// Specifies which level's limit was exceeded.
		/// </summary>
		public EntityCountLimitExceededReason? Reason { get; set; }
		/// <summary>
		/// Id of the entity whose limit was exceeded.
		/// </summary>
		public string EnclosingId { get; set; }
		/// <summary>
		/// The limit which was exceeded.
		/// </summary>
		public int? Limit { get; set; }
		/// <summary>
		/// The account limit type which was exceeded.
		/// </summary>
		public string AccountLimitType { get; set; }
		/// <summary>
		/// The count of existing entities.
		/// </summary>
		public int? ExistingCount { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			EnclosingId = null;
			Limit = null;
			AccountLimitType = null;
			ExistingCount = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = EntityCountLimitExceededReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "enclosingId")
				{
					EnclosingId = xItem.Value;
				}
				else if (localName == "limit")
				{
					Limit = int.Parse(xItem.Value);
				}
				else if (localName == "accountLimitType")
				{
					AccountLimitType = xItem.Value;
				}
				else if (localName == "existingCount")
				{
					ExistingCount = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "EntityCountLimitExceeded");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (EnclosingId != null)
			{
				xItem = new XElement(XName.Get("enclosingId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnclosingId);
				xE.Add(xItem);
			}
			if (Limit != null)
			{
				xItem = new XElement(XName.Get("limit", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Limit.Value.ToString());
				xE.Add(xItem);
			}
			if (AccountLimitType != null)
			{
				xItem = new XElement(XName.Get("accountLimitType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AccountLimitType);
				xE.Add(xItem);
			}
			if (ExistingCount != null)
			{
				xItem = new XElement(XName.Get("existingCount", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExistingCount.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Limits at various levels of the account.
	/// </summary>
	public enum EntityCountLimitExceededReason
	{
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities for the AdWords
		/// account. The exact entity type and limit being checked can be inferred from
		/// {@link #accountLimitType}.
		/// </summary>
		AccountLimit,
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities in a Campaign.
		/// The exact entity type and limit being checked can be inferred from
		/// {@link #accountLimitType}, and the numeric id of the Campaign involved is given by
		/// {@link #enclosingId}.
		/// </summary>
		CampaignLimit,
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities in
		/// an ad group.  The exact entity type and limit being checked can be
		/// inferred from {@link #accountLimitType}, and the numeric id of the ad group
		/// involved is given by {@link #enclosingId}.
		/// </summary>
		AdgroupLimit,
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities in an ad group ad.
		/// The exact entity type and limit being checked can be inferred from {@link #accountLimitType},
		/// and the {@link #enclosingId} contains the ad group id followed by the ad id, separated by a
		/// single comma (,).
		/// </summary>
		AdGroupAdLimit,
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities in an ad group
		/// criterion.  The exact entity type and limit being checked can be inferred from
		/// {@link #accountLimitType}, and the {@link #enclosingId} contains the ad group id followed by
		/// the criterion id, separated by a single comma (,).
		/// </summary>
		AdGroupCriterionLimit,
		/// <summary>
		/// Indicates that this request would exceed the number of allowed entities in
		/// this shared set.  The exact entity type and limit being checked can be
		/// inferred from {@link #accountLimitType}, and the numeric id of the shared
		/// set involved is given by {@link #enclosingId}.
		/// </summary>
		SharedSetLimit,
		/// <summary>
		/// Exceeds a limit related to a matching function.
		/// </summary>
		MatchingFunctionLimit,
		/// <summary>
		/// Specific limit that has been exceeded is unknown (the client may be of an
		/// older version than the server).
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An id did not correspond to an entity, or it referred to an entity which does not belong to the
	/// customer.
	/// </summary>
	public class EntityNotFound : ApiError, ISoapable
	{
		/// <summary>
		/// Reason for this error.
		/// </summary>
		public EntityNotFoundReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = EntityNotFoundReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "EntityNotFound");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum EntityNotFoundReason
	{
		/// <summary>
		/// The specified id refered to an entity which either doesn't exist or is not accessible to the
		/// customer. e.g. campaign belongs to another customer.
		/// </summary>
		InvalidId
	}
	/// <summary>
	/// Represents information about enum values.
	/// </summary>
	public class EnumValuePair : ISoapable
	{
		/// <summary>
		/// The api enum value.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string EnumValue { get; set; }
		/// <summary>
		/// The enum value displayed in the downloaded report.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string EnumDisplayValue { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			EnumValue = null;
			EnumDisplayValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "enumValue")
				{
					EnumValue = xItem.Value;
				}
				else if (localName == "enumDisplayValue")
				{
					EnumDisplayValue = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (EnumValue != null)
			{
				xItem = new XElement(XName.Get("enumValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnumValue);
				xE.Add(xItem);
			}
			if (EnumDisplayValue != null)
			{
				xItem = new XElement(XName.Get("enumDisplayValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnumDisplayValue);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Abstract class representing an reply to an {@link EstimateRequest}.
	/// </summary>
	public class Estimate : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of Estimate.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string EstimateType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			EstimateType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "Estimate.Type")
				{
					EstimateType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (EstimateType != null)
			{
				xItem = new XElement(XName.Get("Estimate.Type", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(EstimateType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Abstract class representing a request to estimate stats.
	/// </summary>
	public abstract class EstimateRequest : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of EstimateRequest.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string EstimateRequestType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			EstimateRequestType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "EstimateRequest.Type")
				{
					EstimateRequestType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (EstimateRequestType != null)
			{
				xItem = new XElement(XName.Get("EstimateRequest.Type", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(EstimateRequestType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A request to be exempted from a {@link PolicyViolationError}.
	/// </summary>
	public class ExemptionRequest : ISoapable
	{
		/// <summary>
		/// Identifies the violation to request an exemption for.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public PolicyViolationKey Key { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = new PolicyViolationKey();
					Key.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				Key.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enhanced text ad format.
	///
	/// <p class="caution"><b>Caution:</b> Expanded text ads do not use {@link #url url},
	/// {@link #displayUrl displayUrl}, {@link #finalAppUrls finalAppUrls}, or
	/// {@link #devicePreference devicePreference};
	/// setting these fields on an expanded text ad will cause an error.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ExpandedTextAd : Ad, ISoapable
	{
		/// <summary>
		/// First part of the headline.
		/// <span class="constraint Selectable">This field can be selected using the value "HeadlinePart1".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string HeadlinePart1 { get; set; }
		/// <summary>
		/// Second part of the headline.
		/// <span class="constraint Selectable">This field can be selected using the value "HeadlinePart2".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string HeadlinePart2 { get; set; }
		/// <summary>
		/// The descriptive text of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "Description".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// Text that appears in the ad with the displayed URL.
		/// <span class="constraint Selectable">This field can be selected using the value "Path1".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Path1 { get; set; }
		/// <summary>
		/// In addition to {@link #path1}, more text that appears with the displayed URL.
		/// <span class="constraint Selectable">This field can be selected using the value "Path2".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Path2 { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			HeadlinePart1 = null;
			HeadlinePart2 = null;
			Description = null;
			Path1 = null;
			Path2 = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "headlinePart1")
				{
					HeadlinePart1 = xItem.Value;
				}
				else if (localName == "headlinePart2")
				{
					HeadlinePart2 = xItem.Value;
				}
				else if (localName == "description")
				{
					Description = xItem.Value;
				}
				else if (localName == "path1")
				{
					Path1 = xItem.Value;
				}
				else if (localName == "path2")
				{
					Path2 = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ExpandedTextAd");
			XElement xItem = null;
			if (HeadlinePart1 != null)
			{
				xItem = new XElement(XName.Get("headlinePart1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HeadlinePart1);
				xE.Add(xItem);
			}
			if (HeadlinePart2 != null)
			{
				xItem = new XElement(XName.Get("headlinePart2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HeadlinePart2);
				xE.Add(xItem);
			}
			if (Description != null)
			{
				xItem = new XElement(XName.Get("description", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description);
				xE.Add(xItem);
			}
			if (Path1 != null)
			{
				xItem = new XElement(XName.Get("path1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Path1);
				xE.Add(xItem);
			}
			if (Path2 != null)
			{
				xItem = new XElement(XName.Get("path2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Path2);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Settings for the
	/// <a href="//support.google.com/adwords/answer/190596">Display Campaign Optimizer</a>,
	/// initially termed "Explorer".
	/// </summary>
	public class ExplorerAutoOptimizerSetting : Setting, ISoapable
	{
		public bool? OptIn { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			OptIn = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "optIn")
				{
					OptIn = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ExplorerAutoOptimizerSetting");
			XElement xItem = null;
			if (OptIn != null)
			{
				xItem = new XElement(XName.Get("optIn", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OptIn.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Visitors of a page. The page visit is defined by one boolean rule expression.
	/// </summary>
	public class ExpressionRuleUserList : RuleBasedUserList, ISoapable
	{
		/// <summary>
		/// Boolean rule that defines this user list. The rule consists of a list of
		/// rule item groups. All the rule item groups are ORed for the evaluation. This
		/// field is selected by default.
		/// <span class="constraint Selectable">This field can be selected using the value "ExpressionListRule".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Rule Rule { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Rule = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rule")
				{
					Rule = new Rule();
					Rule.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "ExpressionRuleUserList");
			XElement xItem = null;
			if (Rule != null)
			{
				xItem = new XElement(XName.Get("rule", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rule.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains base extension feed item data for an extension in an extension feed managed by AdWords.
	/// </summary>
	public class ExtensionFeedItem : ISoapable
	{
		/// <summary>
		/// Id of this feed item's feed.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Id of the feed item.
		/// </summary>
		public long? FeedItemId { get; set; }
		/// <summary>
		/// Status of the feed item.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedItemStatus? Status { get; set; }
		/// <summary>
		/// The type of the feed containing this extension feed item data. The field will be set by a
		/// subclass with a defined feed type.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedType? FeedType { get; set; }
		/// <summary>
		/// Start time in which this feed item is effective and can begin serving. The time zone
		/// of startTime must either match the time zone of the account or be unspecified where
		/// the time zone defaults to the account time zone.
		/// This field may be null to indicate no start time restriction.
		/// The special value "00000101 000000" may be used to clear an existing start time.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public string StartTime { get; set; }
		/// <summary>
		/// End time in which this feed item is no longer effective and will stop serving. The time zone
		/// of endTime must either match the time zone of the account or be unspecified where
		/// the time zone defaults to the account time zone.
		/// This field may be null to indicate no end time restriction.
		/// The special value "00000101 000000" may be used to clear an existing end time.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public string EndTime { get; set; }
		/// <summary>
		/// Device preference for the feed item.
		/// </summary>
		public FeedItemDevicePreference DevicePreference { get; set; }
		/// <summary>
		/// FeedItemScheduling specifying times for when the feed item may serve.
		/// On retrieval or creation of the feed item, if the field is left null,
		/// no feed item scheduling restrictions are placed on the feed item.
		/// On update, if the field is left unspecified, the previous feedItemScheduling state will
		/// not be changed.
		/// On update, if the field is set with a FeedItemScheduling with an empty feedItemSchedules
		/// list, the scheduling will be cleared of all FeedItemSchedules indicating the feed item
		/// has no scheduling restrictions.
		/// </summary>
		public FeedItemScheduling Scheduling { get; set; }
		/// <summary>
		/// Campaign targeting specifying what campaign this extension can serve with.
		/// On update, if the field is left unspecified, the previous campaign targeting state
		/// will not be changed.
		/// On update, if the field is set with an empty FeedItemCampaignTargeting, the
		/// campaign targeting will be cleared.
		/// Note: If adGroupTargeting and campaignTargeting are set (either in the request or pre-existing
		/// from a previous request), the targeted campaign must match the targeted adgroup's campaign.
		/// If only adGroupTargeting is specified and there is no campaignTargeting, then a
		/// campaignTargeting will be set to the targeted adgroup's campaign.
		/// </summary>
		public FeedItemCampaignTargeting CampaignTargeting { get; set; }
		/// <summary>
		/// Adgroup targeting specifying what adgroup this extension can serve with.
		/// On update, if the field is left unspecified, the previous adgroup targeting state
		/// will not be changed.
		/// On update, if the field is set with an empty FeedItemAdGroupTargeting, the
		/// adgroup targeting will be cleared.
		/// Note: If adGroupTargeting and campaignTargeting are set (either in the request or pre-existing
		/// from a previous request), the targeted campaign must match the targeted adgroup's campaign.
		/// If only adGroupTargeting is specified and there is no campaignTargeting, then a
		/// campaignTargeting will be set to the targeted adgroup's campaign.
		/// </summary>
		public FeedItemAdGroupTargeting AdGroupTargeting { get; set; }
		/// <summary>
		/// Keyword targeting specifies what keyword this extension can serve with.
		/// On update, if the field is left unspecified, the previous keyword targeting state
		/// will not be changed.
		/// On update, if the field is set with a Keyword and without Keyword.text set keyword targeting
		/// will be cleared.
		/// </summary>
		public Keyword KeywordTargeting { get; set; }
		/// <summary>
		/// Geo targeting specifies what locations this extension can serve with.
		/// On update, if the field is left unspecified, the previous geo targeting state will not
		/// be changed.
		/// On update, if the field is set with a null value for criterionId, the geo targeting will be
		/// cleared.
		/// </summary>
		public Location GeoTargeting { get; set; }
		/// <summary>
		/// Geo targeting restriction specifies the type of location that can be used for targeting.
		/// On update, if the field is left unspecified, the previous geo targeting restriction state
		/// will not be changed.
		/// On update, if the field is set with a null GeoRestriction enum, the geo targeting restriction
		/// will be cleared.
		/// </summary>
		public FeedItemGeoRestriction GeoTargetingRestriction { get; set; }
		/// <summary>
		/// List of details about a feed item's validation and approval state.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<FeedItemPolicyData> PolicyData { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of ExtensionFeedItem.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ExtensionFeedItemType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			FeedItemId = null;
			Status = null;
			FeedType = null;
			StartTime = null;
			EndTime = null;
			DevicePreference = null;
			Scheduling = null;
			CampaignTargeting = null;
			AdGroupTargeting = null;
			KeywordTargeting = null;
			GeoTargeting = null;
			GeoTargetingRestriction = null;
			PolicyData = null;
			ExtensionFeedItemType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "feedItemId")
				{
					FeedItemId = long.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = FeedItemStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "feedType")
				{
					FeedType = FeedTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "startTime")
				{
					StartTime = xItem.Value;
				}
				else if (localName == "endTime")
				{
					EndTime = xItem.Value;
				}
				else if (localName == "devicePreference")
				{
					DevicePreference = new FeedItemDevicePreference();
					DevicePreference.ReadFrom(xItem);
				}
				else if (localName == "scheduling")
				{
					Scheduling = new FeedItemScheduling();
					Scheduling.ReadFrom(xItem);
				}
				else if (localName == "campaignTargeting")
				{
					CampaignTargeting = new FeedItemCampaignTargeting();
					CampaignTargeting.ReadFrom(xItem);
				}
				else if (localName == "adGroupTargeting")
				{
					AdGroupTargeting = new FeedItemAdGroupTargeting();
					AdGroupTargeting.ReadFrom(xItem);
				}
				else if (localName == "keywordTargeting")
				{
					KeywordTargeting = new Keyword();
					KeywordTargeting.ReadFrom(xItem);
				}
				else if (localName == "geoTargeting")
				{
					GeoTargeting = new Location();
					GeoTargeting.ReadFrom(xItem);
				}
				else if (localName == "geoTargetingRestriction")
				{
					GeoTargetingRestriction = new FeedItemGeoRestriction();
					GeoTargetingRestriction.ReadFrom(xItem);
				}
				else if (localName == "policyData")
				{
					if (PolicyData == null) PolicyData = new List<FeedItemPolicyData>();
					var policyDataItem = new FeedItemPolicyData();
					policyDataItem.ReadFrom(xItem);
					PolicyData.Add(policyDataItem);
				}
				else if (localName == "ExtensionFeedItem.Type")
				{
					ExtensionFeedItemType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedItemId != null)
			{
				xItem = new XElement(XName.Get("feedItemId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedItemId.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FeedType != null)
			{
				xItem = new XElement(XName.Get("feedType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (StartTime != null)
			{
				xItem = new XElement(XName.Get("startTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartTime);
				xE.Add(xItem);
			}
			if (EndTime != null)
			{
				xItem = new XElement(XName.Get("endTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndTime);
				xE.Add(xItem);
			}
			if (DevicePreference != null)
			{
				xItem = new XElement(XName.Get("devicePreference", "https://adwords.google.com/api/adwords/cm/v201609"));
				DevicePreference.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Scheduling != null)
			{
				xItem = new XElement(XName.Get("scheduling", "https://adwords.google.com/api/adwords/cm/v201609"));
				Scheduling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CampaignTargeting != null)
			{
				xItem = new XElement(XName.Get("campaignTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				CampaignTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AdGroupTargeting != null)
			{
				xItem = new XElement(XName.Get("adGroupTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				AdGroupTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (KeywordTargeting != null)
			{
				xItem = new XElement(XName.Get("keywordTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				KeywordTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (GeoTargeting != null)
			{
				xItem = new XElement(XName.Get("geoTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				GeoTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (GeoTargetingRestriction != null)
			{
				xItem = new XElement(XName.Get("geoTargetingRestriction", "https://adwords.google.com/api/adwords/cm/v201609"));
				GeoTargetingRestriction.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (PolicyData != null)
			{
				foreach (var policyDataItem in PolicyData)
				{
					xItem = new XElement(XName.Get("policyData", "https://adwords.google.com/api/adwords/cm/v201609"));
					policyDataItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ExtensionFeedItemType != null)
			{
				xItem = new XElement(XName.Get("ExtensionFeedItem.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExtensionFeedItemType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A setting specifying when and which extensions should serve at a given level (customer, campaign,
	/// or ad group).
	/// </summary>
	public class ExtensionSetting : ISoapable
	{
		/// <summary>
		/// The list of feed items to add or modify.
		/// <span class="constraint Selectable">This field can be selected using the value "Extensions".</span>
		/// </summary>
		public List<ExtensionFeedItem> Extensions { get; set; }
		/// <summary>
		/// Any platform (desktop, mobile) restrictions for feed items being served. If set to DESKTOP or
		/// MOBILE, only those feed items with the appropriate device preference or no device preference
		/// will serve.
		/// <span class="constraint Selectable">This field can be selected using the value "PlatformRestrictions".</span>
		/// </summary>
		public ExtensionSettingPlatform? PlatformRestrictions { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Extensions = null;
			PlatformRestrictions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "extensions")
				{
					if (Extensions == null) Extensions = new List<ExtensionFeedItem>();
					var extensionsItem = new ExtensionFeedItem();
					extensionsItem.ReadFrom(xItem);
					Extensions.Add(extensionsItem);
				}
				else if (localName == "platformRestrictions")
				{
					PlatformRestrictions = ExtensionSettingPlatformExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Extensions != null)
			{
				foreach (var extensionsItem in Extensions)
				{
					xItem = new XElement(XName.Get("extensions", "https://adwords.google.com/api/adwords/cm/v201609"));
					extensionsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PlatformRestrictions != null)
			{
				xItem = new XElement(XName.Get("platformRestrictions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PlatformRestrictions.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an error for various extension setting services.
	/// </summary>
	public class ExtensionSettingError : ApiError, ISoapable
	{
		/// <summary>
		/// Error reason.
		/// </summary>
		public ExtensionSettingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ExtensionSettingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ExtensionSettingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum ExtensionSettingErrorReason
	{
		/// <summary>
		/// A platform restriction was provided without input extensions or existing extensions.
		/// </summary>
		ExtensionsRequired,
		/// <summary>
		/// The provided feed type does not correspond to the provided extensions.
		/// </summary>
		FeedTypeExtensionTypeMismatch,
		/// <summary>
		/// The provided feed type cannot be used.
		/// </summary>
		InvalidFeedType,
		/// <summary>
		/// The provided feed type cannot be used at the customer level.
		/// </summary>
		InvalidFeedTypeForCustomerExtensionSetting,
		/// <summary>
		/// Can not change a feed item field on an ADD operation.
		/// </summary>
		CannotChangeFeedItemOnAdd,
		/// <summary>
		/// Cannot have a geo targeting restriction without having geo targeting.
		/// </summary>
		CannotHaveRestrictionOnEmptyGeoTargeting,
		/// <summary>
		/// Can not update an extension that is not already in this setting.
		/// </summary>
		CannotUpdateNewlyAddedExtension,
		/// <summary>
		/// There is no existing AdGroupExtensionSetting for this type.
		/// </summary>
		NoExistingAdGroupExtensionSettingForType,
		/// <summary>
		/// There is no existing CampaignExtensionSetting for this type.
		/// </summary>
		NoExistingCampaignExtensionSettingForType,
		/// <summary>
		/// There is no existing CustomerExtensionSetting for this type.
		/// </summary>
		NoExistingCustomerExtensionSettingForType,
		/// <summary>
		/// The AdGroupExtensionSetting already exists. SET should be used to modify the existing
		/// AdGroupExtensionSetting.
		/// </summary>
		AdGroupExtensionSettingAlreadyExists,
		/// <summary>
		/// The CampaignExtensionSetting already exists. SET should be used to modify the existing
		/// CampaignExtensionSetting.
		/// </summary>
		CampaignExtensionSettingAlreadyExists,
		/// <summary>
		/// The CustomerExtensionSetting already exists. SET should be used to modify the existing
		/// CustomerExtensionSetting.
		/// </summary>
		CustomerExtensionSettingAlreadyExists,
		/// <summary>
		/// An active ad group feed already exists for this place holder type.
		/// </summary>
		AdGroupFeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// An active campaign feed already exists for this place holder type.
		/// </summary>
		CampaignFeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// An active customer feed already exists for this place holder type.
		/// </summary>
		CustomerFeedAlreadyExistsForPlaceholderType,
		/// <summary>
		/// Value is not within the accepted range.
		/// </summary>
		ValueOutOfRange,
		/// <summary>
		/// Cannot simultaneously set sitelink field with final urls.
		/// </summary>
		CannotSetWithFinalUrls,
		/// <summary>
		/// Must set field with final urls.
		/// </summary>
		CannotSetWithoutFinalUrls,
		/// <summary>
		/// Cannot simultaneously set sitelink url field with tracking url template.
		/// </summary>
		CannotSetBothDestinationUrlAndTrackingUrlTemplate,
		/// <summary>
		/// Phone number for a call extension is invalid.
		/// </summary>
		InvalidPhoneNumber,
		/// <summary>
		/// Phone number for a call extension is not supported for the given country code.
		/// </summary>
		PhoneNumberNotSupportedForCountry,
		/// <summary>
		/// A carrier specific number in short format is not allowed for call extensions.
		/// </summary>
		CarrierSpecificShortNumberNotAllowed,
		/// <summary>
		/// Premium rate numbers are not allowed for call extensions.
		/// </summary>
		PremiumRateNumberNotAllowed,
		/// <summary>
		/// Phone number type for a call extension is not allowed.
		/// </summary>
		DisallowedNumberType,
		/// <summary>
		/// Phone number for a call extension does not meet domestic format requirements.
		/// </summary>
		InvalidDomesticPhoneNumberFormat,
		/// <summary>
		/// Vanity phone numbers (i.e. those including letters) are not allowed for call extensions.
		/// </summary>
		VanityPhoneNumberNotAllowed,
		/// <summary>
		/// Country code provided for a call extension is invalid.
		/// </summary>
		InvalidCountryCode,
		/// <summary>
		/// Call conversion type id provided for a call extension is invalid.
		/// </summary>
		InvalidCallConversionTypeId,
		/// <summary>
		/// For a call extension, the customer is not whitelisted for call tracking.
		/// </summary>
		CustomerNotWhitelistedForCalltracking,
		/// <summary>
		/// Call tracking is not supported for the given country for a call extension.
		/// </summary>
		CalltrackingNotSupportedForCountry,
		/// <summary>
		/// App id provided for an app extension is invalid.
		/// </summary>
		InvalidAppId,
		/// <summary>
		/// Quotation marks present in the review text for a review extension.
		/// </summary>
		QuotesInReviewExtensionSnippet,
		/// <summary>
		/// Hyphen character present in the review text for a review extension.
		/// </summary>
		HyphensInReviewExtensionSnippet,
		/// <summary>
		/// A blacklisted review source name or url was provided for a review extension.
		/// </summary>
		ReviewExtensionSourceIneligible,
		/// <summary>
		/// Review source name should not be found in the review text.
		/// </summary>
		SourceNameInReviewExtensionText,
		/// <summary>
		/// Field must be set.
		/// </summary>
		MissingField,
		/// <summary>
		/// Inconsistent currency codes.
		/// </summary>
		InconsistentCurrencyCodes,
		/// <summary>
		/// Price extension cannot have duplicated headers.
		/// </summary>
		PriceExtensionHasDuplicatedHeaders,
		/// <summary>
		/// Price item cannot have duplicated header and description.
		/// </summary>
		PriceItemHasDuplicatedHeaderAndDescription,
		/// <summary>
		/// Price extension has too few items
		/// </summary>
		PriceExtensionHasTooFewItems,
		/// <summary>
		/// Price extension has too many items
		/// </summary>
		PriceExtensionHasTooManyItems,
		/// <summary>
		/// The input value is not currently supported.
		/// </summary>
		UnsupportedValue,
		/// <summary>
		/// Unknown or unsupported device preference.
		/// </summary>
		InvalidDevicePreference,
		/// <summary>
		/// Invalid feed item schedule end time (i.e., endHour = 24 and endMinute != 0).
		/// </summary>
		InvalidScheduleEnd,
		/// <summary>
		/// Date time zone does not match the account's time zone.
		/// </summary>
		DateTimeMustBeInAccountTimeZone,
		/// <summary>
		/// Overlapping feed item schedule times (e.g., 7-10AM and 8-11AM) are not allowed.
		/// </summary>
		OverlappingSchedules,
		/// <summary>
		/// Feed item schedule end time must be after start time.
		/// </summary>
		ScheduleEndNotAfterStart,
		/// <summary>
		/// There are too many feed item schedules per day.
		/// </summary>
		TooManySchedulesPerDay,
		/// <summary>
		/// Cannot edit the same extension feed item id twice.
		/// </summary>
		DuplicateExtensionFeedItemEdit,
		/// <summary>
		/// Invalid structured snippet header.
		/// </summary>
		InvalidSnippetsHeader,
		/// <summary>
		/// Phone number not supported with call tracking enabled for country.
		/// </summary>
		PhoneNumberNotSupportedWithCalltrackingForCountry,
		/// <summary>
		/// Targeted adgroup's campaign does not match the targeted campaign.
		/// </summary>
		CampaignTargetingMismatch,
		/// <summary>
		/// The feed used by the ExtensionSetting is deleted and cannot be operated on. Remove the
		/// ExtensionSetting to allow a new one to be created using an active feed.
		/// </summary>
		CannotOperateOnDeletedFeed,
		/// <summary>
		/// Concrete sub type of ExtensionFeedItem is required for this operation.
		/// </summary>
		ConcreteExtensionTypeRequired,
		/// <summary>
		/// The matching function that links the extension feed to the customer, campaign, or ad group
		/// is not compatible with the ExtensionSetting services.
		/// </summary>
		IncompatibleUnderlyingMatchingFunction,
		Unknown
	}
	/// <summary>
	/// Different levels of platform restrictions.
	/// </summary>
	public enum ExtensionSettingPlatform
	{
		/// <summary>
		/// Desktop only.
		/// </summary>
		Desktop,
		/// <summary>
		/// Mobile only.
		/// </summary>
		Mobile,
		/// <summary>
		/// No restriction.
		/// </summary>
		None
	}
	/// <summary>
	/// A Feed identifies a source of data and its schema. The data for the Feed can either be
	/// user-entered via the FeedItemService or system-generated, in which case the data is provided
	/// automatically.
	/// </summary>
	public class Feed : ISoapable
	{
		/// <summary>
		/// Id of the Feed.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : REMOVE, SET.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of the Feed.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 128, inclusive, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The Feed's schema. In SET operations, these attributes will be considered new attributes and
		/// will be appended to the existing list of attributes unless this list is an exact copy of the
		/// existing list (as would be obtained via {@link FeedService#get}).
		/// If an empty attributes list is provided, the existing list of attributes will not be changed.
		/// <span class="constraint Selectable">This field can be selected using the value "Attributes".</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<FeedAttribute> Attributes { get; set; }
		/// <summary>
		/// Status of the Feed.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedStatus? Status { get; set; }
		/// <summary>
		/// Specifies who manages the {@link FeedAttribute}s for the {@link Feed}.
		/// <span class="constraint Selectable">This field can be selected using the value "Origin".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public FeedOrigin? Origin { get; set; }
		/// <summary>
		/// The system data for the Feed. This data specifies information for generating the feed items
		/// of the system generated feed.
		/// <span class="constraint Selectable">This field can be selected using the value "SystemFeedGenerationData".</span>
		/// </summary>
		public SystemFeedGenerationData SystemFeedGenerationData { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Attributes = null;
			Status = null;
			Origin = null;
			SystemFeedGenerationData = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "attributes")
				{
					if (Attributes == null) Attributes = new List<FeedAttribute>();
					var attributesItem = new FeedAttribute();
					attributesItem.ReadFrom(xItem);
					Attributes.Add(attributesItem);
				}
				else if (localName == "status")
				{
					Status = FeedStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "origin")
				{
					Origin = FeedOriginExtensions.Parse(xItem.Value);
				}
				else if (localName == "systemFeedGenerationData")
				{
					SystemFeedGenerationData = new SystemFeedGenerationData();
					SystemFeedGenerationData.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Attributes != null)
			{
				foreach (var attributesItem in Attributes)
				{
					xItem = new XElement(XName.Get("attributes", "https://adwords.google.com/api/adwords/cm/v201609"));
					attributesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Origin != null)
			{
				xItem = new XElement(XName.Get("origin", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Origin.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SystemFeedGenerationData != null)
			{
				xItem = new XElement(XName.Get("systemFeedGenerationData", "https://adwords.google.com/api/adwords/cm/v201609"));
				SystemFeedGenerationData.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// FeedAttributes define the types of data expected to be present in a Feed. A single FeedAttribute
	/// specifies the expected type of the FeedItemAttributes with the same FeedAttributeId. Optionally,
	/// a FeedAttribute can be marked as being part of a FeedItem's unique key.
	/// </summary>
	public class FeedAttribute : ISoapable
	{
		/// <summary>
		/// Id of the attribute.
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// The name of the attribute.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 30, inclusive, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The expected type of the data.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, SET.</span>
		/// </summary>
		public FeedAttributeType? Type { get; set; }
		/// <summary>
		/// Indicates that data corresponding to this attribute is part of a FeedItem's unique key. It
		/// defaults to false if it is unspecified. Note that a unique key is not required in a Feed's
		/// schema, in which case the FeedItems must be referenced by their FeedItemId.
		/// </summary>
		public bool? IsPartOfKey { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Type = null;
			IsPartOfKey = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "type")
				{
					Type = FeedAttributeTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "isPartOfKey")
				{
					IsPartOfKey = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (IsPartOfKey != null)
			{
				xItem = new XElement(XName.Get("isPartOfKey", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsPartOfKey.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a feed attribute reference to use in a function.
	/// </summary>
	public class FeedAttributeOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// Id of associated feed.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Id of the referenced feed attribute.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedAttributeId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			FeedId = null;
			FeedAttributeId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "feedAttributeId")
				{
					FeedAttributeId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedAttributeOperand");
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedAttributeId != null)
			{
				xItem = new XElement(XName.Get("feedAttributeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedAttributeId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An error indicating a problem with a reference to a feed attribute in an ad.
	/// </summary>
	public class FeedAttributeReferenceError : ApiError, ISoapable
	{
		public FeedAttributeReferenceErrorReason? Reason { get; set; }
		/// <summary>
		/// The referenced feed name.
		/// </summary>
		public string FeedName { get; set; }
		/// <summary>
		/// The referenced feed attribute name.
		/// </summary>
		public string FeedAttributeName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			FeedName = null;
			FeedAttributeName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FeedAttributeReferenceErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "feedName")
				{
					FeedName = xItem.Value;
				}
				else if (localName == "feedAttributeName")
				{
					FeedAttributeName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedAttributeReferenceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FeedName != null)
			{
				xItem = new XElement(XName.Get("feedName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedName);
				xE.Add(xItem);
			}
			if (FeedAttributeName != null)
			{
				xItem = new XElement(XName.Get("feedAttributeName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedAttributeName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Feed attribute reference error reasons.
	/// </summary>
	public enum FeedAttributeReferenceErrorReason
	{
		/// <summary>
		/// A feed referenced by ID has been deleted.
		/// </summary>
		CannotReferenceDeletedFeed,
		/// <summary>
		/// There is no active feed with the given name.
		/// </summary>
		InvalidFeedName,
		/// <summary>
		/// There is no feed attribute in an active feed with the given name.
		/// </summary>
		InvalidFeedAttributeName
	}
	/// <summary>
	/// Possible data types.
	/// </summary>
	public enum FeedAttributeType
	{
		Int64,
		Float,
		String,
		Boolean,
		Url,
		DateTime,
		Int64List,
		FloatList,
		StringList,
		BooleanList,
		UrlList,
		DateTimeList,
		Price,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Holds information about a changed feed and any feeds items within the feed.
	/// </summary>
	public class FeedChangeData : ISoapable
	{
		/// <summary>
		/// The feed ID.
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Whether or not the fields of this feed have changed.
		/// </summary>
		public ChangeStatus? FeedChangeStatus { get; set; }
		/// <summary>
		/// A list of feed item IDs that have been added or modified within the the feed. If a feed item is
		/// deleted after a modification, it will not be included in this list.
		/// </summary>
		public List<long> ChangedFeedItems { get; set; }
		/// <summary>
		/// A list feed item IDs that have been removed from the feed.
		/// </summary>
		public List<long> RemovedFeedItems { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			FeedChangeStatus = null;
			ChangedFeedItems = null;
			RemovedFeedItems = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "feedChangeStatus")
				{
					FeedChangeStatus = ChangeStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "changedFeedItems")
				{
					if (ChangedFeedItems == null) ChangedFeedItems = new List<long>();
					ChangedFeedItems.Add(long.Parse(xItem.Value));
				}
				else if (localName == "removedFeedItems")
				{
					if (RemovedFeedItems == null) RemovedFeedItems = new List<long>();
					RemovedFeedItems.Add(long.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedChangeStatus != null)
			{
				xItem = new XElement(XName.Get("feedChangeStatus", "https://adwords.google.com/api/adwords/ch/v201609"));
				xItem.Add(FeedChangeStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ChangedFeedItems != null)
			{
				foreach (var changedFeedItemsItem in ChangedFeedItems)
				{
					xItem = new XElement(XName.Get("changedFeedItems", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(changedFeedItemsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (RemovedFeedItems != null)
			{
				foreach (var removedFeedItemsItem in RemovedFeedItems)
				{
					xItem = new XElement(XName.Get("removedFeedItems", "https://adwords.google.com/api/adwords/ch/v201609"));
					xItem.Add(removedFeedItemsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An error caused by an invalid Feed in a FeedService request.
	/// </summary>
	public class FeedError : ApiError, ISoapable
	{
		/// <summary>
		/// The cause of the error.
		/// </summary>
		public FeedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FeedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons.
	/// </summary>
	public enum FeedErrorReason
	{
		/// <summary>
		/// The names of the FeedAttributes must be unique.
		/// </summary>
		AttributeNamesNotUnique,
		/// <summary>
		/// The attribute list must be an exact copy of the existing list if the attribute id's are
		/// present.
		/// </summary>
		AttributesDoNotMatchExistingAttributes,
		/// <summary>
		/// Origin can only be set during Feed creation.
		/// </summary>
		CannotChangeOrigin,
		/// <summary>
		/// Cannot specify USER origin for a system generated feed.
		/// </summary>
		CannotSpecifyUserOriginForSystemFeed,
		/// <summary>
		/// Cannot specify ADWORDS origin for a non-system generated feed.
		/// </summary>
		CannotSpecifyAdwordsOriginForNonSystemFeed,
		/// <summary>
		/// Cannot specify feed attributes for system feed.
		/// </summary>
		CannotSpecifyFeedAttributesForSystemFeed,
		/// <summary>
		/// Cannot update FeedAttributes on feed with origin adwords.
		/// </summary>
		CannotUpdateFeedAttributesWithOriginAdwords,
		/// <summary>
		/// The given id refers to a removed Feed. Removed Feeds are immutable.
		/// </summary>
		FeedRemoved,
		/// <summary>
		/// The origin of the feed is not valid for the client.
		/// </summary>
		InvalidOriginValue,
		/// <summary>
		/// A user can only create and modify feeds with user origin.
		/// </summary>
		FeedOriginIsNotUser,
		/// <summary>
		/// Feed name matches that of another active Feed.
		/// </summary>
		DuplicateFeedName,
		/// <summary>
		/// Name of feed is not allowed.
		/// </summary>
		InvalidFeedName,
		/// <summary>
		/// Missing OAuthInfo
		/// </summary>
		MissingOauthInfo,
		/// <summary>
		/// New FeedAttributes must not effect the unique key.
		/// </summary>
		NewAttributeCannotBePartOfUniqueKey,
		/// <summary>
		/// Too many FeedAttributes for a Feed.
		/// </summary>
		TooManyFeedAttributesForFeed,
		/// <summary>
		/// The business account is not valid.
		/// </summary>
		InvalidBusinessAccount,
		/// <summary>
		/// Business account cannot access Google My Business account.
		/// </summary>
		BusinessAccountCannotAccessLocationAccount,
		Unknown
	}
	/// <summary>
	/// Represents an item in a feed.
	/// </summary>
	public class FeedItem : ISoapable
	{
		/// <summary>
		/// ID of this feed item's feed
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// ID of this feed item.
		/// This may be unspecified if the user-defined key attributes are specified.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedItemId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public long? FeedItemId { get; set; }
		/// <summary>
		/// Status of feed item
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedItemStatus? Status { get; set; }
		/// <summary>
		/// Start time in which this feed item is effective and can begin serving. The time zone
		/// of startTime must either match the time zone of the account or be unspecified where
		/// the time zone defaults to the account time zone.
		/// This field may be null to indicate no start time restriction.
		/// The special value "00000101 000000" may be used to clear an existing start time.
		/// <span class="constraint Selectable">This field can be selected using the value "StartTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public string StartTime { get; set; }
		/// <summary>
		/// End time in which this feed item is no longer effective and will stop serving. The time zone
		/// of endTime must either match the time zone of the account or be unspecified where
		/// the time zone defaults to the account time zone.
		/// This field may be null to indicate no end time restriction.
		/// The special value "00000101 000000" may be used to clear an existing end time.
		/// <span class="constraint Selectable">This field can be selected using the value "EndTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public string EndTime { get; set; }
		/// <summary>
		/// The feed item's attribute values. For any unset/unspecified feed attributes, the value is
		/// considered unset/null on ADD and unchanged on SET.
		/// <span class="constraint Selectable">This field can be selected using the value "AttributeValues".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<FeedItemAttributeValue> AttributeValues { get; set; }
		/// <summary>
		/// List of details about a feed item's validation and approval state for active feed mappings.
		/// <span class="constraint Selectable">This field can be selected using the value "PolicyData".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<FeedItemPolicyData> PolicyData { get; set; }
		/// <summary>
		/// Device preference for the feed item.
		/// <span class="constraint Selectable">This field can be selected using the value "DevicePreference".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public FeedItemDevicePreference DevicePreference { get; set; }
		/// <summary>
		/// FeedItemScheduling specifying times for when the feed item may serve.
		/// On retrieval or creation of the feed item, if the field is left null,
		/// no feed item scheduling restrictions are placed on the feed item.
		/// On update, if the field is left unspecified, the previous feedItemScheduling state will
		/// not be changed.
		/// On update, if the field is set with a FeedItemScheduling with an empty feedItemSchedules
		/// list, the scheduling will be cleared of all FeedItemSchedules indicating the feed item
		/// has no scheduling restrictions.
		/// <span class="constraint Selectable">This field can be selected using the value "Scheduling".</span>
		/// </summary>
		public FeedItemScheduling Scheduling { get; set; }
		/// <summary>
		/// Campaign targeting specifying what campaign this feed item can serve with.
		/// On update, if the field is left unspecified, the previous campaign targeting state
		/// will not be changed.
		/// On update, if the field is set with an empty FeedItemCampaignTargeting, the
		/// campaign targeting will be cleared.
		/// Note: If adGroupTargeting and campaignTargeting are set (either in the request or pre-existing
		/// from a previous request), the targeted campaign must match the targeted adgroup's campaign.
		/// If only adGroupTargeting is specified and there is no campaignTargeting, then a
		/// campaignTargeting will be set to the targeted adgroup's campaign.
		/// </summary>
		public FeedItemCampaignTargeting CampaignTargeting { get; set; }
		/// <summary>
		/// Adgroup targeting specifying what adgroup this feed item can serve with.
		/// On update, if the field is left unspecified, the previous adgroup targeting state
		/// will not be changed.
		/// On update, if the field is set with an empty FeedItemAdGroupTargeting, the
		/// adgroup targeting will be cleared.
		/// Note: If adGroupTargeting and campaignTargeting are set (either in the request or pre-existing
		/// from a previous request), the targeted campaign must match the targeted adgroup's campaign.
		/// If only adGroupTargeting is specified and there is no campaignTargeting, then a
		/// campaignTargeting will be set to the targeted adgroup's campaign.
		/// </summary>
		public FeedItemAdGroupTargeting AdGroupTargeting { get; set; }
		/// <summary>
		/// Keyword targeting specifies what keyword this feed item can serve with.
		/// On update, if the field is left unspecified, the previous keyword targeting state
		/// will not be changed.
		/// On update, if the field is set with a Keyword and without Keyword.text set keyword targeting
		/// will be cleared.
		/// </summary>
		public Keyword KeywordTargeting { get; set; }
		/// <summary>
		/// Geo targeting specifies what locations this feed item can serve with.
		/// On update, if the field is left unspecified, the previous geo targeting state will not
		/// be changed.
		/// On update, if the field is set with a null value for criterionId, the geo targeting will be
		/// cleared.
		/// </summary>
		public Location GeoTargeting { get; set; }
		/// <summary>
		/// Geo targeting restriction specifies the type of location that can be used for targeting.
		/// On update, if the field is left unspecified, the previous geo targeting restriction state
		/// will not be changed.
		/// On update, if the field is set with a null GeoRestriction enum, the geo targeting restriction
		/// will be cleared.
		/// </summary>
		public FeedItemGeoRestriction GeoTargetingRestriction { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// <span class="constraint Selectable">This field can be selected using the value "UrlCustomParameters".</span>
		/// </summary>
		public CustomParameters UrlCustomParameters { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedId = null;
			FeedItemId = null;
			Status = null;
			StartTime = null;
			EndTime = null;
			AttributeValues = null;
			PolicyData = null;
			DevicePreference = null;
			Scheduling = null;
			CampaignTargeting = null;
			AdGroupTargeting = null;
			KeywordTargeting = null;
			GeoTargeting = null;
			GeoTargetingRestriction = null;
			UrlCustomParameters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "feedItemId")
				{
					FeedItemId = long.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = FeedItemStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "startTime")
				{
					StartTime = xItem.Value;
				}
				else if (localName == "endTime")
				{
					EndTime = xItem.Value;
				}
				else if (localName == "attributeValues")
				{
					if (AttributeValues == null) AttributeValues = new List<FeedItemAttributeValue>();
					var attributeValuesItem = new FeedItemAttributeValue();
					attributeValuesItem.ReadFrom(xItem);
					AttributeValues.Add(attributeValuesItem);
				}
				else if (localName == "policyData")
				{
					if (PolicyData == null) PolicyData = new List<FeedItemPolicyData>();
					var policyDataItem = new FeedItemPolicyData();
					policyDataItem.ReadFrom(xItem);
					PolicyData.Add(policyDataItem);
				}
				else if (localName == "devicePreference")
				{
					DevicePreference = new FeedItemDevicePreference();
					DevicePreference.ReadFrom(xItem);
				}
				else if (localName == "scheduling")
				{
					Scheduling = new FeedItemScheduling();
					Scheduling.ReadFrom(xItem);
				}
				else if (localName == "campaignTargeting")
				{
					CampaignTargeting = new FeedItemCampaignTargeting();
					CampaignTargeting.ReadFrom(xItem);
				}
				else if (localName == "adGroupTargeting")
				{
					AdGroupTargeting = new FeedItemAdGroupTargeting();
					AdGroupTargeting.ReadFrom(xItem);
				}
				else if (localName == "keywordTargeting")
				{
					KeywordTargeting = new Keyword();
					KeywordTargeting.ReadFrom(xItem);
				}
				else if (localName == "geoTargeting")
				{
					GeoTargeting = new Location();
					GeoTargeting.ReadFrom(xItem);
				}
				else if (localName == "geoTargetingRestriction")
				{
					GeoTargetingRestriction = new FeedItemGeoRestriction();
					GeoTargetingRestriction.ReadFrom(xItem);
				}
				else if (localName == "urlCustomParameters")
				{
					UrlCustomParameters = new CustomParameters();
					UrlCustomParameters.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedItemId != null)
			{
				xItem = new XElement(XName.Get("feedItemId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedItemId.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (StartTime != null)
			{
				xItem = new XElement(XName.Get("startTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartTime);
				xE.Add(xItem);
			}
			if (EndTime != null)
			{
				xItem = new XElement(XName.Get("endTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndTime);
				xE.Add(xItem);
			}
			if (AttributeValues != null)
			{
				foreach (var attributeValuesItem in AttributeValues)
				{
					xItem = new XElement(XName.Get("attributeValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					attributeValuesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PolicyData != null)
			{
				foreach (var policyDataItem in PolicyData)
				{
					xItem = new XElement(XName.Get("policyData", "https://adwords.google.com/api/adwords/cm/v201609"));
					policyDataItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (DevicePreference != null)
			{
				xItem = new XElement(XName.Get("devicePreference", "https://adwords.google.com/api/adwords/cm/v201609"));
				DevicePreference.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Scheduling != null)
			{
				xItem = new XElement(XName.Get("scheduling", "https://adwords.google.com/api/adwords/cm/v201609"));
				Scheduling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CampaignTargeting != null)
			{
				xItem = new XElement(XName.Get("campaignTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				CampaignTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AdGroupTargeting != null)
			{
				xItem = new XElement(XName.Get("adGroupTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				AdGroupTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (KeywordTargeting != null)
			{
				xItem = new XElement(XName.Get("keywordTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				KeywordTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (GeoTargeting != null)
			{
				xItem = new XElement(XName.Get("geoTargeting", "https://adwords.google.com/api/adwords/cm/v201609"));
				GeoTargeting.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (GeoTargetingRestriction != null)
			{
				xItem = new XElement(XName.Get("geoTargetingRestriction", "https://adwords.google.com/api/adwords/cm/v201609"));
				GeoTargetingRestriction.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (UrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("urlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				UrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Specifies the adgroup the request context must match in order for
	/// the feed item to be considered eligible for serving (aka the targeted adgroup).
	/// E.g., if the below adgroup targeting is set to adgroup = X, then the feed
	/// item can only serve under adgroup X.
	/// </summary>
	public class FeedItemAdGroupTargeting : ISoapable
	{
		/// <summary>
		/// The ID of the adgroup to target.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetingAdGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public long? TargetingAdGroupId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TargetingAdGroupId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "TargetingAdGroupId")
				{
					TargetingAdGroupId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TargetingAdGroupId != null)
			{
				xItem = new XElement(XName.Get("TargetingAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetingAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Feed item approval status.
	/// </summary>
	public enum FeedItemApprovalStatus
	{
		/// <summary>
		/// Pending review
		/// </summary>
		Unchecked,
		/// <summary>
		/// Approved
		/// </summary>
		Approved,
		/// <summary>
		/// Disapproved
		/// </summary>
		Disapproved
	}
	/// <summary>
	/// Contains validation error details for a set of feed attributes.
	/// </summary>
	public class FeedItemAttributeError : ISoapable
	{
		/// <summary>
		/// Contains the set of feed attribute ids whose attributes together triggered the error.
		/// Null or empty field means error code does not apply to a specific set of attributes.
		/// </summary>
		public List<long> FeedAttributeIds { get; set; }
		/// <summary>
		/// Validation error code. See the
		/// <a href="/adwords/api/docs/appendix/feed-errors">list of error codes</a>.
		/// </summary>
		public int? ValidationErrorCode { get; set; }
		/// <summary>
		/// Extra information about the error, including related field IDs.
		/// </summary>
		public string ErrorInformation { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedAttributeIds = null;
			ValidationErrorCode = null;
			ErrorInformation = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedAttributeIds")
				{
					if (FeedAttributeIds == null) FeedAttributeIds = new List<long>();
					FeedAttributeIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "validationErrorCode")
				{
					ValidationErrorCode = int.Parse(xItem.Value);
				}
				else if (localName == "errorInformation")
				{
					ErrorInformation = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedAttributeIds != null)
			{
				foreach (var feedAttributeIdsItem in FeedAttributeIds)
				{
					xItem = new XElement(XName.Get("feedAttributeIds", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(feedAttributeIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ValidationErrorCode != null)
			{
				xItem = new XElement(XName.Get("validationErrorCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidationErrorCode.Value.ToString());
				xE.Add(xItem);
			}
			if (ErrorInformation != null)
			{
				xItem = new XElement(XName.Get("errorInformation", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ErrorInformation);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a feed item's value for a particular feed attribute. A feed item's value is
	/// composed of a collection of these attribute values.
	/// </summary>
	public class FeedItemAttributeValue : ISoapable
	{
		/// <summary>
		/// Feed attribute id
		/// </summary>
		public long? FeedAttributeId { get; set; }
		/// <summary>
		/// Integer value. Should be set if feedAttributeId refers to a feed attribute of type INT64. Leave
		/// empty to clear an existing INT64 attribute value.
		/// </summary>
		public long? IntegerValue { get; set; }
		/// <summary>
		/// Double value. Should be set if feedAttributeId refers to a feed attribute of type FLOAT. Leave
		/// empty to clear an existing FLOAT attribute value.
		/// </summary>
		public double? DoubleValue { get; set; }
		/// <summary>
		/// Boolean value. Should be set if feedAttributeId refers to a feed attribute of type BOOLEAN.
		/// Leave empty to clear an existing BOOLEAN attribute value.
		/// </summary>
		public bool? BooleanValue { get; set; }
		/// <summary>
		/// String value. Should be set if feedAttributeId refers to a feed attribute of type STRING,
		/// URL, or DATE_TIME.
		/// The format of DATE_TIME is 'YYYYMMDD hhmmss' (e.g., 20130101 163031 to represent
		/// Jan 1, 2013 4:30:31pm). All date times are interpreted in the account's time zone.
		/// A time zone id may be appended to the date time, but it must match the account's time zone.
		/// For example '20130101 163031 America/Los_Angeles' may be specified in the above example as long
		/// as the account's time zone is America/Los_Angeles.
		/// Leave empty to clear an existing STRING, URL, or DATE_TIME attribute value.
		/// </summary>
		public string StringValue { get; set; }
		/// <summary>
		/// List of integer values. Should be set if feedAttributeId refers to a feed attribute of type
		/// INT64_LIST. Leave empty to clear an existing INT64_LIST attribute value.
		/// </summary>
		public List<long> IntegerValues { get; set; }
		/// <summary>
		/// List of double values. Should be set if feedAttributeId refers to a feed attribute of type
		/// FLOAT_LIST. Leave empty to clear an existing FLOAT_LIST attribute value.
		/// </summary>
		public List<double> DoubleValues { get; set; }
		/// <summary>
		/// List of boolean values. Should be set if feedAttributeId refers to a feed attribute of type
		/// BOOLEAN_LIST. Leave empty to clear an existing BOOLEAN_LIST attribute value.
		/// </summary>
		public List<bool> BooleanValues { get; set; }
		/// <summary>
		/// List of string values. Should be set if feedAttributeId refers to a feed attribute of type
		/// STRING_LIST, URL_LIST, or DATE_TIME_LIST. All strings in this list must be of the same type
		/// and format. For example, if the type is DATE_TIME_LIST, all strings in the list must be
		/// DATE_TIME formatted strings. See {@link #stringValue} for specific formatting requirements.
		/// </summary>
		public List<string> StringValues { get; set; }
		/// <summary>
		/// MoneyWithCurrency value. Should be set if feedAttributeId refers to a feed attribute of type
		/// PRICE. Leave empty to clear an existing PRICE attribute value.
		/// </summary>
		public MoneyWithCurrency MoneyWithCurrencyValue { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedAttributeId = null;
			IntegerValue = null;
			DoubleValue = null;
			BooleanValue = null;
			StringValue = null;
			IntegerValues = null;
			DoubleValues = null;
			BooleanValues = null;
			StringValues = null;
			MoneyWithCurrencyValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedAttributeId")
				{
					FeedAttributeId = long.Parse(xItem.Value);
				}
				else if (localName == "integerValue")
				{
					IntegerValue = long.Parse(xItem.Value);
				}
				else if (localName == "doubleValue")
				{
					DoubleValue = double.Parse(xItem.Value);
				}
				else if (localName == "booleanValue")
				{
					BooleanValue = bool.Parse(xItem.Value);
				}
				else if (localName == "stringValue")
				{
					StringValue = xItem.Value;
				}
				else if (localName == "integerValues")
				{
					if (IntegerValues == null) IntegerValues = new List<long>();
					IntegerValues.Add(long.Parse(xItem.Value));
				}
				else if (localName == "doubleValues")
				{
					if (DoubleValues == null) DoubleValues = new List<double>();
					DoubleValues.Add(double.Parse(xItem.Value));
				}
				else if (localName == "booleanValues")
				{
					if (BooleanValues == null) BooleanValues = new List<bool>();
					BooleanValues.Add(bool.Parse(xItem.Value));
				}
				else if (localName == "stringValues")
				{
					if (StringValues == null) StringValues = new List<string>();
					StringValues.Add(xItem.Value);
				}
				else if (localName == "moneyWithCurrencyValue")
				{
					MoneyWithCurrencyValue = new MoneyWithCurrency();
					MoneyWithCurrencyValue.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedAttributeId != null)
			{
				xItem = new XElement(XName.Get("feedAttributeId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedAttributeId.Value.ToString());
				xE.Add(xItem);
			}
			if (IntegerValue != null)
			{
				xItem = new XElement(XName.Get("integerValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IntegerValue.Value.ToString());
				xE.Add(xItem);
			}
			if (DoubleValue != null)
			{
				xItem = new XElement(XName.Get("doubleValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DoubleValue.Value.ToString());
				xE.Add(xItem);
			}
			if (BooleanValue != null)
			{
				xItem = new XElement(XName.Get("booleanValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BooleanValue.Value.ToString());
				xE.Add(xItem);
			}
			if (StringValue != null)
			{
				xItem = new XElement(XName.Get("stringValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StringValue);
				xE.Add(xItem);
			}
			if (IntegerValues != null)
			{
				foreach (var integerValuesItem in IntegerValues)
				{
					xItem = new XElement(XName.Get("integerValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(integerValuesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (DoubleValues != null)
			{
				foreach (var doubleValuesItem in DoubleValues)
				{
					xItem = new XElement(XName.Get("doubleValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(doubleValuesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (BooleanValues != null)
			{
				foreach (var booleanValuesItem in BooleanValues)
				{
					xItem = new XElement(XName.Get("booleanValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(booleanValuesItem.ToString());
					xE.Add(xItem);
				}
			}
			if (StringValues != null)
			{
				foreach (var stringValuesItem in StringValues)
				{
					xItem = new XElement(XName.Get("stringValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(stringValuesItem);
					xE.Add(xItem);
				}
			}
			if (MoneyWithCurrencyValue != null)
			{
				xItem = new XElement(XName.Get("moneyWithCurrencyValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				MoneyWithCurrencyValue.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Specifies the campaign the request context must match in order for
	/// the feed item to be considered eligible for serving (aka the targeted campaign).
	/// E.g., if the below campaign targeting is set to campaignId = X, then the feed
	/// item can only serve under campaign X.
	/// </summary>
	public class FeedItemCampaignTargeting : ISoapable
	{
		/// <summary>
		/// The ID of the campaign to target.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetingCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public long? TargetingCampaignId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TargetingCampaignId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "TargetingCampaignId")
				{
					TargetingCampaignId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TargetingCampaignId != null)
			{
				xItem = new XElement(XName.Get("TargetingCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetingCampaignId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a FeedItem device preference.
	/// </summary>
	public class FeedItemDevicePreference : ISoapable
	{
		/// <summary>
		/// CriterionId of the type of device the feed item is preferred to serve on.
		/// Only CriterionId 30001 (mobile devices) is currently supported.
		/// If unspecified, the device preference will be cleared indicating that the feed item
		/// is not preferred for any device type.
		/// </summary>
		public long? DevicePreference { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DevicePreference = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "devicePreference")
				{
					DevicePreference = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DevicePreference != null)
			{
				xItem = new XElement(XName.Get("devicePreference", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DevicePreference.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// FeedItemService related errors.
	/// </summary>
	public class FeedItemError : ApiError, ISoapable
	{
		public FeedItemErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FeedItemErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedItemError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the error.
	/// </summary>
	public enum FeedItemErrorReason
	{
		/// <summary>
		/// Targeted adgroup's campaign does not match the targeted campaign.
		/// </summary>
		CampaignTargetingMismatch,
		/// <summary>
		/// Cannot convert the feed attribute value from string to its real type.
		/// </summary>
		CannotConvertAttributeValueFromString,
		/// <summary>
		/// Cannot have a geo targeting restriction without having geo targeting.
		/// </summary>
		CannotHaveRestrictionOnEmptyGeoTargeting,
		/// <summary>
		/// Cannot operate on removed feed item.
		/// </summary>
		CannotOperateOnRemovedFeedItem,
		/// <summary>
		/// Date time zone does not match the account's time zone.
		/// </summary>
		DateTimeMustBeInAccountTimeZone,
		/// <summary>
		/// Feed item with the key attributes could not be found.
		/// </summary>
		KeyAttributesNotFound,
		/// <summary>
		/// Unknown or unsupported device preference.
		/// </summary>
		InvalidDevicePreference,
		/// <summary>
		/// Invalid feed item schedule end time (i.e., endHour = 24 and endMinute != 0).
		/// </summary>
		InvalidScheduleEnd,
		/// <summary>
		/// Url feed attribute value is not valid.
		/// </summary>
		InvalidUrl,
		/// <summary>
		/// Some key attributes are missing.
		/// </summary>
		MissingKeyAttributes,
		/// <summary>
		/// Feed item has same key attributes as another feed item.
		/// </summary>
		KeyAttributesNotUnique,
		/// <summary>
		/// Cannot modify key attributes on an existing feed item.
		/// </summary>
		CannotModifyKeyAttributeValue,
		/// <summary>
		/// Overlapping feed item schedule times (e.g., 7-10AM and 8-11AM) are not allowed.
		/// </summary>
		OverlappingSchedules,
		/// <summary>
		/// Feed item schedule end time must be after start time.
		/// </summary>
		ScheduleEndNotAfterStart,
		/// <summary>
		/// There are too many feed item schedules per day.
		/// </summary>
		TooManySchedulesPerDay,
		/// <summary>
		/// The feed attribute value is too large.
		/// </summary>
		SizeTooLargeForMultiValueAttribute,
		/// <summary>
		/// Unknown error.
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents a FeedItem geo restriction.
	/// </summary>
	public class FeedItemGeoRestriction : ISoapable
	{
		/// <summary>
		/// The geo targeting restriction of a feed item.  If null then the geo restriction is cleared.
		/// <span class="constraint Selectable">This field can be selected using the value "GeoTargetingRestriction".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public GeoRestriction? GeoRestriction { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			GeoRestriction = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "geoRestriction")
				{
					GeoRestriction = GeoRestrictionExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (GeoRestriction != null)
			{
				xItem = new XElement(XName.Get("geoRestriction", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(GeoRestriction.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// FeedItem service mutate operation.
	/// </summary>
	public class FeedItemOperation : Operation, ISoapable
	{
		/// <summary>
		/// FeedItem operand
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FeedItem Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new FeedItem();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedItemOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of feed items resulting from a {@link FeedItemService#get} call.
	/// </summary>
	public class FeedItemPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<FeedItem> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<FeedItem>();
					var entriesItem = new FeedItem();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedItemPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Contains offline-validation and approval results for a given FeedItem and FeedMapping. Each
	/// validation data indicates any issues found on the feed item when used in the context of the
	/// feed mapping.
	/// </summary>
	public class FeedItemPolicyData : PolicyData, ISoapable
	{
		/// <summary>
		/// Mapped placeholder type used in validation/approvals checks.
		/// </summary>
		public int? PlaceholderType { get; set; }
		/// <summary>
		/// Id of FeedMapping used in validation/approvals checks.
		/// </summary>
		public long? FeedMappingId { get; set; }
		/// <summary>
		/// Validation status of feed item for a particular feed mapping.
		/// </summary>
		public FeedItemValidationStatus? ValidationStatus { get; set; }
		/// <summary>
		/// Feed item approval status.
		/// </summary>
		public FeedItemApprovalStatus? ApprovalStatus { get; set; }
		/// <summary>
		/// List of error codes specifying what errors were found during validation.
		/// </summary>
		public List<FeedItemAttributeError> ValidationErrors { get; set; }
		/// <summary>
		/// Feed item quality evaluation approval status for a particular feed mapping.
		/// </summary>
		public FeedItemQualityApprovalStatus? QualityApprovalStatus { get; set; }
		/// <summary>
		/// Feed item quality evaluation disapproval reasons.
		/// </summary>
		public List<FeedItemQualityDisapprovalReasons> QualityDisapprovalReasons { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PlaceholderType = null;
			FeedMappingId = null;
			ValidationStatus = null;
			ApprovalStatus = null;
			ValidationErrors = null;
			QualityApprovalStatus = null;
			QualityDisapprovalReasons = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "placeholderType")
				{
					PlaceholderType = int.Parse(xItem.Value);
				}
				else if (localName == "feedMappingId")
				{
					FeedMappingId = long.Parse(xItem.Value);
				}
				else if (localName == "validationStatus")
				{
					ValidationStatus = FeedItemValidationStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "approvalStatus")
				{
					ApprovalStatus = FeedItemApprovalStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "validationErrors")
				{
					if (ValidationErrors == null) ValidationErrors = new List<FeedItemAttributeError>();
					var validationErrorsItem = new FeedItemAttributeError();
					validationErrorsItem.ReadFrom(xItem);
					ValidationErrors.Add(validationErrorsItem);
				}
				else if (localName == "qualityApprovalStatus")
				{
					QualityApprovalStatus = FeedItemQualityApprovalStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "qualityDisapprovalReasons")
				{
					if (QualityDisapprovalReasons == null) QualityDisapprovalReasons = new List<FeedItemQualityDisapprovalReasons>();
					QualityDisapprovalReasons.Add(FeedItemQualityDisapprovalReasonsExtensions.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedItemPolicyData");
			XElement xItem = null;
			if (PlaceholderType != null)
			{
				xItem = new XElement(XName.Get("placeholderType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PlaceholderType.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedMappingId != null)
			{
				xItem = new XElement(XName.Get("feedMappingId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedMappingId.Value.ToString());
				xE.Add(xItem);
			}
			if (ValidationStatus != null)
			{
				xItem = new XElement(XName.Get("validationStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidationStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ApprovalStatus != null)
			{
				xItem = new XElement(XName.Get("approvalStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ApprovalStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ValidationErrors != null)
			{
				foreach (var validationErrorsItem in ValidationErrors)
				{
					xItem = new XElement(XName.Get("validationErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					validationErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (QualityApprovalStatus != null)
			{
				xItem = new XElement(XName.Get("qualityApprovalStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(QualityApprovalStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (QualityDisapprovalReasons != null)
			{
				foreach (var qualityDisapprovalReasonsItem in QualityDisapprovalReasons)
				{
					xItem = new XElement(XName.Get("qualityDisapprovalReasons", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(qualityDisapprovalReasonsItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Feed item quality evaluation approval status.
	/// </summary>
	public enum FeedItemQualityApprovalStatus
	{
		/// <summary>
		/// Quality evaluation pending
		/// </summary>
		Unknown,
		/// <summary>
		/// Approved for quality
		/// </summary>
		Approved,
		/// <summary>
		/// Disapproved for quality
		/// </summary>
		Disapproved
	}
	/// <summary>
	/// Feed item quality evaluation disapproval reasons.
	/// </summary>
	public enum FeedItemQualityDisapprovalReasons
	{
		Unknown,
		/// <summary>
		/// Price contains repetitive headers
		/// </summary>
		TableRepetitiveHeaders,
		/// <summary>
		/// Price contains repetitive description
		/// </summary>
		TableRepetitiveDescription,
		/// <summary>
		/// Price contains inconsistent items
		/// </summary>
		TableInconsistentRows,
		/// <summary>
		/// Price qualifiers in description
		/// </summary>
		DescriptionHasPriceQualifiers,
		/// <summary>
		/// Unsupported language
		/// </summary>
		UnsupportedLanguage,
		/// <summary>
		/// Price item header is not relevant to the price type
		/// </summary>
		TableRowHeaderTableTypeMismatch,
		/// <summary>
		/// Price item header has promotional text
		/// </summary>
		TableRowHeaderHasPromotionalText,
		/// <summary>
		/// Price item description is not relevant to the item header
		/// </summary>
		TableRowDescriptionNotRelevant,
		/// <summary>
		/// Price item description contains promotional text
		/// </summary>
		TableRowDescriptionHasPromotionalText,
		/// <summary>
		/// Price item header and description are repetitive
		/// </summary>
		TableRowHeaderDescriptionRepetitive,
		/// <summary>
		/// Price item is in a foreign language, nonsense, or can't be rated
		/// </summary>
		TableRowUnrateable,
		/// <summary>
		/// Price item price is invalid or inaccurate
		/// </summary>
		TableRowPriceInvalid,
		/// <summary>
		/// Price item url is invalid or irrelevant
		/// </summary>
		TableRowUrlInvalid,
		/// <summary>
		/// Header or description has price
		/// </summary>
		HeaderOrDescriptionHasPrice,
		/// <summary>
		/// Snippet values do not match the header
		/// </summary>
		StructuredSnippetsHeaderPolicyViolated,
		/// <summary>
		/// Snippet values are repeated
		/// </summary>
		StructuredSnippetsRepeatedValues,
		/// <summary>
		/// Snippet values violate editorial guidelines like punctuation
		/// </summary>
		StructuredSnippetsEditorialGuidelines,
		/// <summary>
		/// Snippets contain promotional text
		/// </summary>
		StructuredSnippetsHasPromotionalText
	}
	/// <summary>
	/// A container for return values from FeedItemService.mutate().
	/// </summary>
	public class FeedItemReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// List of feed items returned from mutate.
		/// </summary>
		public List<FeedItem> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<FeedItem>();
					var valueItem = new FeedItem();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedItemReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a FeedItem schedule, which specifies a time interval on a given day
	/// when the feed item may serve. The FeedItemSchedule times are in the account's time zone.
	/// </summary>
	public class FeedItemSchedule : ISoapable
	{
		/// <summary>
		/// Day of the week the schedule applies to.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public DayOfWeek? DayOfWeek { get; set; }
		/// <summary>
		/// Starting hour in 24 hour time.
		/// <span class="constraint InRange">This field must be between 0 and 23, inclusive.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? StartHour { get; set; }
		/// <summary>
		/// Interval starts these minutes after the starting hour.
		/// The value can be 0, 15, 30, and 45.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public MinuteOfHour? StartMinute { get; set; }
		/// <summary>
		/// Ending hour in 24 hour time; <code>24</code> signifies
		/// end of the day and subsequently endMinute must be 0.
		/// <span class="constraint InRange">This field must be between 0 and 24, inclusive.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? EndHour { get; set; }
		/// <summary>
		/// Interval ends these minutes after the ending hour.
		/// The value can be 0, 15, 30, and 45.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public MinuteOfHour? EndMinute { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DayOfWeek = null;
			StartHour = null;
			StartMinute = null;
			EndHour = null;
			EndMinute = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "dayOfWeek")
				{
					DayOfWeek = DayOfWeekExtensions.Parse(xItem.Value);
				}
				else if (localName == "startHour")
				{
					StartHour = int.Parse(xItem.Value);
				}
				else if (localName == "startMinute")
				{
					StartMinute = MinuteOfHourExtensions.Parse(xItem.Value);
				}
				else if (localName == "endHour")
				{
					EndHour = int.Parse(xItem.Value);
				}
				else if (localName == "endMinute")
				{
					EndMinute = MinuteOfHourExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DayOfWeek != null)
			{
				xItem = new XElement(XName.Get("dayOfWeek", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DayOfWeek.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (StartHour != null)
			{
				xItem = new XElement(XName.Get("startHour", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartHour.Value.ToString());
				xE.Add(xItem);
			}
			if (StartMinute != null)
			{
				xItem = new XElement(XName.Get("startMinute", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartMinute.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (EndHour != null)
			{
				xItem = new XElement(XName.Get("endHour", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndHour.Value.ToString());
				xE.Add(xItem);
			}
			if (EndMinute != null)
			{
				xItem = new XElement(XName.Get("endMinute", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndMinute.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a collection of FeedItem schedules specifying all time intervals for which
	/// the feed item may serve. Any time range not covered by the specified FeedItemSchedules will
	/// prevent the feed item from serving during those times.
	/// </summary>
	public class FeedItemScheduling : ISoapable
	{
		/// <summary>
		/// List of non-overlapping feed item schedules indicating when the feed item may serve.
		/// There can be a maximum of 6 FeedItemSchedules per day.
		/// If empty, the scheduling will be cleared of all FeedItemSchedules indicating the feed item
		/// has no scheduling restrictions.
		/// </summary>
		public List<FeedItemSchedule> FeedItemSchedules { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedItemSchedules = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedItemSchedules")
				{
					if (FeedItemSchedules == null) FeedItemSchedules = new List<FeedItemSchedule>();
					var feedItemSchedulesItem = new FeedItemSchedule();
					feedItemSchedulesItem.ReadFrom(xItem);
					FeedItemSchedules.Add(feedItemSchedulesItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedItemSchedules != null)
			{
				foreach (var feedItemSchedulesItem in FeedItemSchedules)
				{
					xItem = new XElement(XName.Get("feedItemSchedules", "https://adwords.google.com/api/adwords/cm/v201609"));
					feedItemSchedulesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	public enum FeedItemStatus
	{
		/// <summary>
		/// Feed item is active
		/// </summary>
		Enabled,
		/// <summary>
		/// Feed item is removed
		/// </summary>
		Removed,
		/// <summary>
		/// Unknown status
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Validation status of a FeedItem.
	/// </summary>
	public enum FeedItemValidationStatus
	{
		/// <summary>
		/// Validation pending.
		/// </summary>
		Unchecked,
		/// <summary>
		/// An error was found.
		/// </summary>
		Error,
		/// <summary>
		/// FeedItem is semantically well-formed.
		/// </summary>
		Valid
	}
	/// <summary>
	/// A FeedMapping represents a mapping between feed attributes in a specific feed
	/// and placeholder fields for a specific placeholder type. This will tell the
	/// ads serving system which parts of the feed item should be used when
	/// populating a placeholder. Without this mapping the placeholder cannot be
	/// populated and the extension can not be displayed.
	///
	/// <p>For a list of feed placeholders, see
	/// <a href="/adwords/api/docs/appendix/placeholders">
	/// https://developers.google.com/adwords/api/docs/appendix/placeholders
	/// </a></p>
	/// </summary>
	public class FeedMapping : ISoapable
	{
		/// <summary>
		/// ID of this FeedMapping.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedMappingId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : REMOVE.</span>
		/// </summary>
		public long? FeedMappingId { get; set; }
		/// <summary>
		/// ID of the Feed that is mapped by this mapping.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// The placeholder type for this mapping.
		/// <span class="constraint Selectable">This field can be selected using the value "PlaceholderType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public int? PlaceholderType { get; set; }
		/// <summary>
		/// Status of the mapping.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public FeedMappingStatus? Status { get; set; }
		/// <summary>
		/// The list of feed attributes to placeholder fields mappings.
		/// <span class="constraint Selectable">This field can be selected using the value "AttributeFieldMappings".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<AttributeFieldMapping> AttributeFieldMappings { get; set; }
		/// <summary>
		/// The criterion type for this mapping. This field is mutually exclusive with placeholderType.
		/// <span class="constraint Selectable">This field can be selected using the value "CriterionType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public int? CriterionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FeedMappingId = null;
			FeedId = null;
			PlaceholderType = null;
			Status = null;
			AttributeFieldMappings = null;
			CriterionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedMappingId")
				{
					FeedMappingId = long.Parse(xItem.Value);
				}
				else if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "placeholderType")
				{
					PlaceholderType = int.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = FeedMappingStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "attributeFieldMappings")
				{
					if (AttributeFieldMappings == null) AttributeFieldMappings = new List<AttributeFieldMapping>();
					var attributeFieldMappingsItem = new AttributeFieldMapping();
					attributeFieldMappingsItem.ReadFrom(xItem);
					AttributeFieldMappings.Add(attributeFieldMappingsItem);
				}
				else if (localName == "criterionType")
				{
					CriterionType = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FeedMappingId != null)
			{
				xItem = new XElement(XName.Get("feedMappingId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedMappingId.Value.ToString());
				xE.Add(xItem);
			}
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (PlaceholderType != null)
			{
				xItem = new XElement(XName.Get("placeholderType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PlaceholderType.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AttributeFieldMappings != null)
			{
				foreach (var attributeFieldMappingsItem in AttributeFieldMappings)
				{
					xItem = new XElement(XName.Get("attributeFieldMappings", "https://adwords.google.com/api/adwords/cm/v201609"));
					attributeFieldMappingsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (CriterionType != null)
			{
				xItem = new XElement(XName.Get("criterionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionType.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors caused by invalid usage of FeedMappingService
	/// </summary>
	public class FeedMappingError : ApiError, ISoapable
	{
		/// <summary>
		/// The cause of the error.
		/// </summary>
		public FeedMappingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FeedMappingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedMappingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum FeedMappingErrorReason
	{
		/// <summary>
		/// The given placeholder field does not exist.
		/// </summary>
		InvalidPlaceholderField,
		/// <summary>
		/// The given criterion field does not exist.
		/// </summary>
		InvalidCriterionField,
		/// <summary>
		/// The given placeholder type does not exist.
		/// </summary>
		InvalidPlaceholderType,
		/// <summary>
		/// The given criterion type does not exist.
		/// </summary>
		InvalidCriterionType,
		/// <summary>
		/// Cannot specify both placeholder type and criterion type.
		/// </summary>
		CannotSetPlaceholderTypeAndCriterionType,
		/// <summary>
		/// A feed mapping must contain at least one attribute field mapping.
		/// </summary>
		NoAttributeFieldMappings,
		/// <summary>
		/// The type of the feed attribute referenced in the attribute field mapping must match
		/// the type of the placeholder field.
		/// </summary>
		FeedAttributeTypeMismatch,
		/// <summary>
		/// A feed mapping for a system generated feed cannot be operated on.
		/// </summary>
		CannotOperateOnMappingsForSystemGeneratedFeed,
		/// <summary>
		/// Only one feed mapping for a placeholder type is allowed per feed or customer
		/// (depending on the placeholder type).
		/// </summary>
		MultipleMappingsForPlaceholderType,
		/// <summary>
		/// Only one feed mapping for a criterion type is allowed per customer.
		/// </summary>
		MultipleMappingsForCriterionType,
		/// <summary>
		/// Only one feed attribute mapping for a placeholder field is allowed
		/// (depending on the placeholder type).
		/// </summary>
		MultipleMappingsForPlaceholderField,
		/// <summary>
		/// Only one feed attribute mapping for a criterion field is allowed
		/// (depending on the criterion type).
		/// </summary>
		MultipleMappingsForCriterionField,
		/// <summary>
		/// This feed mapping may not contain any explicit attribute field mappings.
		/// </summary>
		UnexpectedAttributeFieldMappings,
		/// <summary>
		/// Location placeholder feedmappings can only be created for Places feeds.
		/// </summary>
		LocationPlaceholderOnlyForPlacesFeeds,
		/// <summary>
		/// Mappings for typed feeds cannot be modified.
		/// </summary>
		CannotModifyMappingsForTypedFeed,
		Unknown
	}
	/// <summary>
	/// Operation used to create a FeedMapping.
	///
	/// <p>The following {@link Operator}s are supported: ADD, REMOVE.
	/// </summary>
	public class FeedMappingOperation : Operation, ISoapable
	{
		/// <summary>
		/// The FeedMapping to create
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FeedMapping Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new FeedMapping();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedMappingOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link FeedMappingService#get}.
	/// </summary>
	public class FeedMappingPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The resulting FeedMappings
		/// </summary>
		public List<FeedMapping> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<FeedMapping>();
					var entriesItem = new FeedMapping();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedMappingPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to {@link FeedMappingService#mutate}.
	/// </summary>
	public class FeedMappingReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting FeedMappings.
		/// </summary>
		public List<FeedMapping> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<FeedMapping>();
					var valueItem = new FeedMapping();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedMappingReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	public enum FeedMappingStatus
	{
		/// <summary>
		/// This mapping is used in feeds.
		/// </summary>
		Enabled,
		/// <summary>
		/// This mapping is not used anymore.
		/// </summary>
		Removed,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Operation used to create or mutate a Feed.
	/// </summary>
	public class FeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// The Feed to create or mutate.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Feed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Feed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Used to Specify who manages the {@link FeedAttribute}s for the {@link Feed}.
	/// </summary>
	public enum FeedOrigin
	{
		/// <summary>
		/// The {@link FeedAttribute}s for this {@link Feed} are managed by the user.
		/// Users can add {@link FeedAttribute}s to this {@link Feed}.
		/// </summary>
		User,
		/// <summary>
		/// The {@link FeedAttribute}s for an ADWORDS {@link Feed} are created
		/// by ADWORDS. Occasionally the attributes defined for a particular type
		/// of {@link Feed} is expanded. In this case, older {@link Feed}s of this
		/// type can be mutated to add the expanded attributes.
		/// </summary>
		Adwords,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The result of a call to FeedService#get.
	/// </summary>
	public class FeedPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The resulting Feeds.
		/// </summary>
		public List<Feed> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Feed>();
					var entriesItem = new Feed();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The result of a call to FeedService#mutate.
	/// </summary>
	public class FeedReturnValue : ListReturnValue, ISoapable
	{
		/// <summary>
		/// The resulting Feeds.
		/// </summary>
		public List<Feed> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Feed>();
					var valueItem = new Feed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status of the Feed.
	/// </summary>
	public enum FeedStatus
	{
		/// <summary>
		/// This Feed's data can be used in placeholders.
		/// </summary>
		Enabled,
		/// <summary>
		/// This Feed's data is not used anymore.
		/// </summary>
		Removed,
		/// <summary>
		/// Unknown status.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Feed hard type. Values coincide with placeholder type id.
	/// </summary>
	public enum FeedType
	{
		None,
		/// <summary>
		/// Sitelink placeholder typed
		/// </summary>
		Sitelink,
		/// <summary>
		/// Call placeholder typed
		/// </summary>
		Call,
		/// <summary>
		/// App placeholder typed
		/// </summary>
		App,
		/// <summary>
		/// Review placeholder typed
		/// </summary>
		Review,
		/// <summary>
		/// AdCustomizer placeholder typed
		/// </summary>
		AdCustomizer,
		/// <summary>
		/// Callout placeholder typed
		/// </summary>
		Callout,
		/// <summary>
		/// Structured snippets placeholder typed
		/// </summary>
		StructuredSnippet,
		/// <summary>
		/// Price placeholder typed
		/// </summary>
		Price
	}
	/// <summary>
	/// A ForwardComptibilityError represents possible errors when using the forwardCompatibilityMap
	/// in some of the common services.
	/// </summary>
	public class ForwardCompatibilityError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public ForwardCompatibilityErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ForwardCompatibilityErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ForwardCompatibilityError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the error.
	/// </summary>
	public enum ForwardCompatibilityErrorReason
	{
		/// <summary>
		/// Invalid value specified for a key in the forward compatibility map.
		/// </summary>
		InvalidForwardCompatibilityMapValue,
		Unknown
	}
	/// <summary>
	/// A frequency cap is the maximum number of times an ad (or some set of ads) can
	/// be shown to a user over a particular time period.
	/// </summary>
	public class FrequencyCap : ISoapable
	{
		/// <summary>
		/// Maximum number of impressions allowed during the time range by this cap.
		/// To remove the frequency cap on a campaign, set this field to {@code 0}.
		/// <span class="constraint Selectable">This field can be selected using the value "FrequencyCapMaxImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? Impressions { get; set; }
		/// <summary>
		/// Unit of time the cap is defined at.
		/// Only the Day, Week and Month time units are supported.
		/// <span class="constraint Selectable">This field can be selected using the value "TimeUnit".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public TimeUnit? TimeUnit { get; set; }
		/// <summary>
		/// The level on which the cap is to be applied (creative/adgroup).
		/// Cap is applied to all the entities of this level in the campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "Level".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public Level? Level { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Impressions = null;
			TimeUnit = null;
			Level = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "impressions")
				{
					Impressions = long.Parse(xItem.Value);
				}
				else if (localName == "timeUnit")
				{
					TimeUnit = TimeUnitExtensions.Parse(xItem.Value);
				}
				else if (localName == "level")
				{
					Level = LevelExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Impressions != null)
			{
				xItem = new XElement(XName.Get("impressions", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Impressions.Value.ToString());
				xE.Add(xItem);
			}
			if (TimeUnit != null)
			{
				xItem = new XElement(XName.Get("timeUnit", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TimeUnit.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Level != null)
			{
				xItem = new XElement(XName.Get("level", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Level.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a function where its operator is applied to its argument operands
	/// resulting in a return value. It has the form
	/// (Operand... Operator Operand...). The type of the return value depends on
	/// the operator being applied and the type of the operands.
	///
	/// <p class="special">Operands per function is limited to <b>20</b>.</p>
	///
	/// <p>Here is a code example:</p>
	///
	/// <pre><code>
	///
	/// // For example "feed_attribute == 30" can be represented as:
	/// FeedId feedId = (FeedId of Feed associated with feed_attribute)
	/// FeedAttributeId feedAttributeId = (FeedAttributeId of feed_attribute)
	/// Function function = new Function();
	/// function.setLhsOperand(
	/// Arrays.asList((Operand) new FeedAttributeOperand(feedId, feedAttributeId)));
	/// function.setOperator(Operator.IN);
	/// function.setRhsOperand(
	/// Arrays.asList((Operand) new ConstantOperand(30L)));
	///
	/// // Another example matching on multiple values:
	/// "feed_item_id IN (10, 20, 30)" can be represented as:
	///
	/// Function function = new Function();
	/// function.setLhsOperand(
	/// Arrays.asList((Operand) new RequestContextOperand(ContextType.FEED_ITEM_ID)));
	/// function.setOperator(Operator.IN);
	/// function.setRhsOperand(Arrays.asList(
	/// (Operand) new ConstantOperand(10L), new ConstantOperand(20L), new ConstantOperand(30L)));
	/// </code></pre>
	/// </summary>
	public class Function : ISoapable
	{
		/// <summary>
		/// Operator for a function.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public FunctionOperator? Operator { get; set; }
		/// <summary>
		/// Operand on the LHS in the equation. This is also the operand to be used for
		/// single operand expressions such as NOT.
		/// <span class="constraint CollectionSize">The minimum size of this collection is 1.</span>
		/// </summary>
		public List<FunctionArgumentOperand> LhsOperand { get; set; }
		/// <summary>
		/// Operand on the RHS of the equation.
		/// </summary>
		public List<FunctionArgumentOperand> RhsOperand { get; set; }
		/// <summary>
		/// String representation of the {@code Function}.
		///
		/// <p>For mutate actions, this field can be set instead of the {@code operator},
		/// {@code lhsOperand}, and {@code rhsOperand} fields. This field will be parsed and used to
		/// populate the other fields.
		///
		/// <p>When {@code Function} objects are returned from get or mutate calls, this field contains the
		/// string representation of the {@code Function}. Note that because multiple strings may map to
		/// the same {@code Function} (whitespace and single versus double quotation marks, for example),
		/// the value returned may not be identical to the string sent in the request.
		/// </summary>
		public string FunctionString { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operator = null;
			LhsOperand = null;
			RhsOperand = null;
			FunctionString = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operator")
				{
					Operator = FunctionOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "lhsOperand")
				{
					if (LhsOperand == null) LhsOperand = new List<FunctionArgumentOperand>();
					var lhsOperandItem = InstanceCreator.CreateFunctionArgumentOperand(xItem);
					lhsOperandItem.ReadFrom(xItem);
					LhsOperand.Add(lhsOperandItem);
				}
				else if (localName == "rhsOperand")
				{
					if (RhsOperand == null) RhsOperand = new List<FunctionArgumentOperand>();
					var rhsOperandItem = InstanceCreator.CreateFunctionArgumentOperand(xItem);
					rhsOperandItem.ReadFrom(xItem);
					RhsOperand.Add(rhsOperandItem);
				}
				else if (localName == "functionString")
				{
					FunctionString = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operator != null)
			{
				xItem = new XElement(XName.Get("operator", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operator.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (LhsOperand != null)
			{
				foreach (var lhsOperandItem in LhsOperand)
				{
					xItem = new XElement(XName.Get("lhsOperand", "https://adwords.google.com/api/adwords/cm/v201609"));
					lhsOperandItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (RhsOperand != null)
			{
				foreach (var rhsOperandItem in RhsOperand)
				{
					xItem = new XElement(XName.Get("rhsOperand", "https://adwords.google.com/api/adwords/cm/v201609"));
					rhsOperandItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (FunctionString != null)
			{
				xItem = new XElement(XName.Get("functionString", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FunctionString);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An operand that can be used in a function expression.
	/// </summary>
	public abstract class FunctionArgumentOperand : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of FunctionArgumentOperand.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string FunctionArgumentOperandType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FunctionArgumentOperandType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "FunctionArgumentOperand.Type")
				{
					FunctionArgumentOperandType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FunctionArgumentOperandType != null)
			{
				xItem = new XElement(XName.Get("FunctionArgumentOperand.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FunctionArgumentOperandType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors that indicate issues with the function.
	/// </summary>
	public class FunctionError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum
		/// </summary>
		public FunctionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FunctionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FunctionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum FunctionErrorReason
	{
		/// <summary>
		/// The format of the function is not recognized as a supported function format.
		/// </summary>
		InvalidFunctionFormat,
		/// <summary>
		/// Operand data types do not match.
		/// </summary>
		DataTypeMismatch,
		/// <summary>
		/// The operands cannot be used together in a conjunction.
		/// </summary>
		InvalidConjunctionOperands,
		/// <summary>
		/// Invalid numer of Operands.
		/// </summary>
		InvalidNumberOfOperands,
		/// <summary>
		/// Operand Type not supported.
		/// </summary>
		InvalidOperandType,
		/// <summary>
		/// Operator not supported.
		/// </summary>
		InvalidOperator,
		/// <summary>
		/// Request context type not supported.
		/// </summary>
		InvalidRequestContextType,
		/// <summary>
		/// The matching function is not allowed for call placeholders
		/// </summary>
		InvalidFunctionForCallPlaceholder,
		/// <summary>
		/// The matching function is not allowed for the specified placeholder
		/// </summary>
		InvalidFunctionForPlaceholder,
		/// <summary>
		/// Invalid operand.
		/// </summary>
		InvalidOperand,
		/// <summary>
		/// Missing value for the constant operand.
		/// </summary>
		MissingConstantOperandValue,
		/// <summary>
		/// The value of the constant operand is invalid.
		/// </summary>
		InvalidConstantOperandValue,
		/// <summary>
		/// Invalid function nesting.
		/// </summary>
		InvalidNesting,
		/// <summary>
		/// The Feed ID was different from another Feed ID in the same function.
		/// </summary>
		MultipleFeedIdsNotSupported,
		/// <summary>
		/// The matching function is invalid for use with a feed with a fixed schema.
		/// </summary>
		InvalidFunctionForFeedWithFixedSchema,
		/// <summary>
		/// Invalid attribute name.
		/// </summary>
		InvalidAttributeName,
		Unknown
	}
	/// <summary>
	/// A function operand in a matching function.
	/// Used to represent nested functions.
	/// </summary>
	public class FunctionOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// The function held in this operand.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Function Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new Function();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FunctionOperand");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operators that can be used in functions.
	/// </summary>
	public enum FunctionOperator
	{
		/// <summary>
		/// The IN operator.
		/// </summary>
		In,
		/// <summary>
		/// The IDENTITY operator.
		/// </summary>
		Identity,
		/// <summary>
		/// The EQUALS operator
		/// </summary>
		Equals,
		/// <summary>
		/// Operator that takes two or more operands that are of type FunctionOperand
		/// and checks that all the operands evaluate to true.
		/// For functions related to ad formats, all the operands must be in lhsOperand.
		/// Return ConstantOperand with Bool type.
		/// </summary>
		And,
		/// <summary>
		/// Operator that returns true if the elements in lhsOperand contains any of the elements
		/// in rhsOperands. Otherwise, return false.
		/// </summary>
		ContainsAny,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An error resulting from a failure to parse the textual representation of a function.
	/// </summary>
	public class FunctionParsingError : ApiError, ISoapable
	{
		public FunctionParsingErrorReason? Reason { get; set; }
		public string OffendingText { get; set; }
		public int? OffendingTextIndex { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			OffendingText = null;
			OffendingTextIndex = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = FunctionParsingErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "offendingText")
				{
					OffendingText = xItem.Value;
				}
				else if (localName == "offendingTextIndex")
				{
					OffendingTextIndex = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "FunctionParsingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (OffendingText != null)
			{
				xItem = new XElement(XName.Get("offendingText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OffendingText);
				xE.Add(xItem);
			}
			if (OffendingTextIndex != null)
			{
				xItem = new XElement(XName.Get("offendingTextIndex", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OffendingTextIndex.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Function parsing error reason.
	/// </summary>
	public enum FunctionParsingErrorReason
	{
		/// <summary>
		/// Unexpected end of function string.
		/// </summary>
		NoMoreInput,
		/// <summary>
		/// Could not find an expected character.
		/// </summary>
		ExpectedCharacter,
		/// <summary>
		/// Unexpected separator character.
		/// </summary>
		UnexpectedSeparator,
		/// <summary>
		/// Unmatched left bracket or parenthesis.
		/// </summary>
		UnmatchedLeftBracket,
		/// <summary>
		/// Unmatched right bracket or parenthesis.
		/// </summary>
		UnmatchedRightBracket,
		/// <summary>
		/// Functions are nested too deeply.
		/// </summary>
		TooManyNestedFunctions,
		/// <summary>
		/// Missing right-hand-side operand.
		/// </summary>
		MissingRightHandOperand,
		/// <summary>
		/// Invalid operator/function name.
		/// </summary>
		InvalidOperatorName,
		/// <summary>
		/// Feed attribute operand's argument is not an integer.
		/// </summary>
		FeedAttributeOperandArgumentNotInteger,
		/// <summary>
		/// Missing function operands.
		/// </summary>
		NoOperands,
		/// <summary>
		/// Function had too many operands.
		/// </summary>
		TooManyOperands,
		Unknown
	}
	/// <summary>
	/// Represents a Gender criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class Gender : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public GenderGenderType? GenderType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			GenderType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "genderType")
				{
					GenderType = GenderGenderTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Gender");
			XElement xItem = null;
			if (GenderType != null)
			{
				xItem = new XElement(XName.Get("genderType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(GenderType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum GenderGenderType
	{
		GenderMale,
		GenderFemale,
		GenderUndetermined
	}
	/// <summary>
	/// Specifies a geo location with the supplied latitude/longitude.
	/// </summary>
	public class GeoPoint : ISoapable
	{
		/// <summary>
		/// Micro degrees for the latitude.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? LatitudeInMicroDegrees { get; set; }
		/// <summary>
		/// Micro degrees for the longitude.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public int? LongitudeInMicroDegrees { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			LatitudeInMicroDegrees = null;
			LongitudeInMicroDegrees = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "latitudeInMicroDegrees")
				{
					LatitudeInMicroDegrees = int.Parse(xItem.Value);
				}
				else if (localName == "longitudeInMicroDegrees")
				{
					LongitudeInMicroDegrees = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (LatitudeInMicroDegrees != null)
			{
				xItem = new XElement(XName.Get("latitudeInMicroDegrees", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LatitudeInMicroDegrees.Value.ToString());
				xE.Add(xItem);
			}
			if (LongitudeInMicroDegrees != null)
			{
				xItem = new XElement(XName.Get("longitudeInMicroDegrees", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LongitudeInMicroDegrees.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A restriction used to determine if the request context's geo should be matched.
	/// </summary>
	public enum GeoRestriction
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Indicates that request context should match the physical location of the user.
		/// </summary>
		LocationOfPresence
	}
	/// <summary>
	/// Represents an operand containing geo information, specifying the scope of the
	/// geographical area. Currently, geo targets are restricted to a single
	/// criterion id per operand.
	/// </summary>
	public class GeoTargetOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// CriterionId of locations deciding the geographical scope.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<long> Locations { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Locations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "locations")
				{
					if (Locations == null) Locations = new List<long>();
					Locations.Add(long.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "GeoTargetOperand");
			XElement xItem = null;
			if (Locations != null)
			{
				foreach (var locationsItem in Locations)
				{
					xItem = new XElement(XName.Get("locations", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(locationsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a collection of settings related to ads geotargeting.
	///
	/// <p>AdWords ads can be geotargeted using <b>Location of Presence</b> (<b>LOP</b>),
	/// <b>Area of Interest</b> (<b>AOI</b>), or both. LOP is the physical location
	/// of the user performing the search; AOI is the geographical region
	/// in which the searcher is interested. For example, if a user in
	/// New York City performs a search "hotels california", their LOP
	/// is New York City and their AOI is California.
	///
	/// <p>Additionally, ads can be <b>positively</b> or <b>negatively</b> geotargeted.
	/// An ad that is positively geotargeted to New York City only appears
	/// to users whose location is related (via AOI or LOP) to New York City. An ad
	/// that is negatively geotargeted to New York City appears for <i>all</i>
	/// users <i>except</i> those whose location is related to New York City. Ads can
	/// only be negatively geotargeted if a positive geotargeting is also supplied, and
	/// the negatively geotargeted region must be contained within the positive
	/// region.
	///
	/// <p>Geotargeting settings allow ads to be targeted in the following way:
	/// <ul>
	/// <li> Positively geotargeted using solely AOI, solely LOP, or either.
	/// <li> Negatively geotargeted using solely LOP, or both.
	/// </ul>
	///
	/// <p>This setting applies only to ads shown on the search network, and does
	/// not affect ads shown on the Google Display Network.
	/// </summary>
	public class GeoTargetTypeSetting : Setting, ISoapable
	{
		/// <summary>
		/// The setting used for positive geotargeting in this particular campaign.
		///
		/// <p>Again, the campaign can be positively targeted using solely LOP, solely
		/// AOI, or either. Positive targeting triggers ads <i>only</i> for users
		/// whose location is related to the given locations.
		///
		/// <p>The default value is DONT_CARE.
		/// </summary>
		public GeoTargetTypeSettingPositiveGeoTargetType? PositiveGeoTargetType { get; set; }
		/// <summary>
		/// The setting used for negative geotargeting in this particular campaign.
		///
		/// <p>Again, the campaign can be negatively targeted using solely LOP or
		/// both AOI and LOP. Negative targeting triggers ads for <i>all</i> users
		/// <i>except</i> those whose location is related to the given locations.
		///
		/// <p>The default value is DONT_CARE.
		/// </summary>
		public GeoTargetTypeSettingNegativeGeoTargetType? NegativeGeoTargetType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PositiveGeoTargetType = null;
			NegativeGeoTargetType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "positiveGeoTargetType")
				{
					PositiveGeoTargetType = GeoTargetTypeSettingPositiveGeoTargetTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "negativeGeoTargetType")
				{
					NegativeGeoTargetType = GeoTargetTypeSettingNegativeGeoTargetTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "GeoTargetTypeSetting");
			XElement xItem = null;
			if (PositiveGeoTargetType != null)
			{
				xItem = new XElement(XName.Get("positiveGeoTargetType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PositiveGeoTargetType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (NegativeGeoTargetType != null)
			{
				xItem = new XElement(XName.Get("negativeGeoTargetType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(NegativeGeoTargetType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The various signals a negative location target may use.
	/// </summary>
	public enum GeoTargetTypeSettingNegativeGeoTargetType
	{
		/// <summary>
		/// Specifies that a user is excluded from seeing the ad
		/// if either their AOI or their LOP matches the geo target.
		/// </summary>
		DontCare,
		/// <summary>
		/// Specifies that a user is excluded from seeing the ad
		/// only if their LOP matches the geo target.
		/// </summary>
		LocationOfPresence
	}
	/// <summary>
	/// The various signals a positive location target may use.
	/// </summary>
	public enum GeoTargetTypeSettingPositiveGeoTargetType
	{
		/// <summary>
		/// Specifies that either AOI or LOP may trigger the ad.
		/// </summary>
		DontCare,
		/// <summary>
		/// Specifies that the ad is triggered only if the user's AOI matches.
		/// </summary>
		AreaOfInterest,
		/// <summary>
		/// Specifies that the ad is triggered only if the user's LOP matches.
		/// </summary>
		LocationOfPresence
	}
	/// <summary>
	/// A {@link SearchParameter} for {@code KEYWORD} {@link IdeaType}s that
	/// specifies a collection of strings by which the results should be
	/// constrained. This guarantees that each idea in the result will match
	/// at least one of the {@code included} values.
	///
	/// For this {@link SearchParameter}, excluded items will always take
	/// priority over included ones.
	///
	/// This can handle a maximum of 200 (included + excluded) elements.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class IdeaTextFilterSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A set of strings specifying which ideas should be included in the results.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint ContentsStringLength">Strings in this field must be non-empty (trimmed).</span>
		/// </summary>
		public List<string> Included { get; set; }
		/// <summary>
		/// A set of strings specifying which ideas should be excluded from the results.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint ContentsStringLength">Strings in this field must be non-empty (trimmed).</span>
		/// </summary>
		public List<string> Excluded { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Included = null;
			Excluded = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "included")
				{
					if (Included == null) Included = new List<string>();
					Included.Add(xItem.Value);
				}
				else if (localName == "excluded")
				{
					if (Excluded == null) Excluded = new List<string>();
					Excluded.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "IdeaTextFilterSearchParameter");
			XElement xItem = null;
			if (Included != null)
			{
				foreach (var includedItem in Included)
				{
					xItem = new XElement(XName.Get("included", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(includedItem);
					xE.Add(xItem);
				}
			}
			if (Excluded != null)
			{
				foreach (var excludedItem in Excluded)
				{
					xItem = new XElement(XName.Get("excluded", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(excludedItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents the type of idea.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public enum IdeaType
	{
		/// <summary>
		/// Keyword idea.
		/// </summary>
		Keyword
	}
	/// <summary>
	/// {@link Attribute} type that contains an {@link IdeaType} value. For example, if a
	/// {@link TargetingIdea} represents a keyword idea, its {@link IdeaTypeAttribute} would contain a
	/// {@code KEYWORD} {@link IdeaType}.
	/// </summary>
	public class IdeaTypeAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// {@link IdeaType} value contained by this {@link Attribute}.
		/// </summary>
		public IdeaType? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = IdeaTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "IdeaTypeAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors associated with the ids.
	/// </summary>
	public class IdError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public IdErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = IdErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "IdError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum IdErrorReason
	{
		/// <summary>
		/// Id not found
		/// </summary>
		NotFound
	}
	/// <summary>
	/// Encapsulates an Image media. For {@code SET},{@code REMOVE} operations in
	/// MediaService, use {@code mediaId}.
	/// </summary>
	public class Image : Media, ISoapable
	{
		/// <summary>
		/// Raw image data.
		/// </summary>
		public byte[] Data { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Data = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "data")
				{
					Data = Convert.FromBase64String(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Image");
			XElement xItem = null;
			if (Data != null)
			{
				xItem = new XElement(XName.Get("data", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Convert.ToBase64String(Data));
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an ImageAd.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ImageAd : Ad, ISoapable
	{
		/// <summary>
		/// The image data for the ad.
		/// </summary>
		public Image Image { get; set; }
		/// <summary>
		/// The name label for this ad.
		/// <span class="constraint Required">
		/// This field is required and should not be {@code null}.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "ImageCreativeName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// For ADD operations only: use this field to specify an existing
		/// image ad to copy the image from, in which case the "image" field
		/// can be left empty. This is the preferred way of copying images
		/// over re-uploading the same image.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public long? AdToCopyImageFrom { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Image = null;
			Name = null;
			AdToCopyImageFrom = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "image")
				{
					Image = new Image();
					Image.ReadFrom(xItem);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "adToCopyImageFrom")
				{
					AdToCopyImageFrom = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ImageAd");
			XElement xItem = null;
			if (Image != null)
			{
				xItem = new XElement(XName.Get("image", "https://adwords.google.com/api/adwords/cm/v201609"));
				Image.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (AdToCopyImageFrom != null)
			{
				xItem = new XElement(XName.Get("adToCopyImageFrom", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdToCopyImageFrom.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error class for errors associated with parsing image data.
	/// </summary>
	public class ImageError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public ImageErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ImageErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ImageError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum ImageErrorReason
	{
		/// <summary>
		/// The image is not valid.
		/// </summary>
		InvalidImage,
		/// <summary>
		/// The image could not be stored.
		/// </summary>
		StorageError,
		/// <summary>
		/// There was a problem with the request.
		/// </summary>
		BadRequest,
		/// <summary>
		/// The image is not of legal dimensions.
		/// </summary>
		UnexpectedSize,
		/// <summary>
		/// Animated image are not permitted.
		/// </summary>
		AnimatedNotAllowed,
		/// <summary>
		/// Animation is too long.
		/// </summary>
		AnimationTooLong,
		/// <summary>
		/// There was an error on the server.
		/// </summary>
		ServerError,
		/// <summary>
		/// Image cannot be in CMYK color format.
		/// </summary>
		CmykJpegNotAllowed,
		/// <summary>
		/// Flash images are not permitted.
		/// </summary>
		FlashNotAllowed,
		/// <summary>
		/// Flash images must support clickTag.
		/// </summary>
		FlashWithoutClicktag,
		/// <summary>
		/// A flash error has occurred after fixing the click tag.
		/// </summary>
		FlashErrorAfterFixingClickTag,
		/// <summary>
		/// Unacceptable visual effects.
		/// </summary>
		AnimatedVisualEffect,
		/// <summary>
		/// There was a problem with the flash image.
		/// </summary>
		FlashError,
		/// <summary>
		/// Incorrect image layout.
		/// </summary>
		LayoutProblem,
		/// <summary>
		/// There was a problem reading the image file.
		/// </summary>
		ProblemReadingImageFile,
		/// <summary>
		/// There was an error storing the image.
		/// </summary>
		ErrorStoringImage,
		/// <summary>
		/// The aspect ratio of the image is not allowed.
		/// </summary>
		AspectRatioNotAllowed,
		/// <summary>
		/// Flash cannot have network objects.
		/// </summary>
		FlashHasNetworkObjects,
		/// <summary>
		/// Flash cannot have network methods.
		/// </summary>
		FlashHasNetworkMethods,
		/// <summary>
		/// Flash cannot have a Url.
		/// </summary>
		FlashHasUrl,
		/// <summary>
		/// Flash cannot use mouse tracking.
		/// </summary>
		FlashHasMouseTracking,
		/// <summary>
		/// Flash cannot have a random number.
		/// </summary>
		FlashHasRandomNum,
		/// <summary>
		/// Ad click target cannot be '_self'.
		/// </summary>
		FlashSelfTargets,
		/// <summary>
		/// GetUrl method should only use '_blank'.
		/// </summary>
		FlashBadGeturlTarget,
		/// <summary>
		/// Flash version is not supported.
		/// </summary>
		FlashVersionNotSupported,
		/// <summary>
		/// Flash movies need to have hard coded click URL or clickTAG
		/// </summary>
		FlashWithoutHardCodedClickUrl,
		/// <summary>
		/// Uploaded flash file is corrupted.
		/// </summary>
		InvalidFlashFile,
		/// <summary>
		/// Uploaded flash file can be parsed, but the click tag can not be fixed properly.
		/// </summary>
		FailedToFixClickTagInFlash,
		/// <summary>
		/// Flash movie accesses network resources
		/// </summary>
		FlashAccessesNetworkResources,
		/// <summary>
		/// Flash movie attempts to call external javascript code
		/// </summary>
		FlashExternalJsCall,
		/// <summary>
		/// Flash movie attempts to call flash system commands
		/// </summary>
		FlashExternalFsCall,
		/// <summary>
		/// Image file is too large.
		/// </summary>
		FileTooLarge,
		/// <summary>
		/// Image data is too large.
		/// </summary>
		ImageDataTooLarge,
		/// <summary>
		/// Error while processing the image.
		/// </summary>
		ImageProcessingError,
		/// <summary>
		/// Image is too small.
		/// </summary>
		ImageTooSmall,
		/// <summary>
		/// Input was invalid.
		/// </summary>
		InvalidInput,
		/// <summary>
		/// There was a problem reading the image file.
		/// </summary>
		ProblemReadingFile
	}
	/// <summary>
	/// {@link SearchParameter} that specifies whether adult content should be
	/// returned.<p>
	///
	/// Presence of this {@link SearchParameter} will allow adult keywords
	/// to be included in the results.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class IncludeAdultContentSearchParameter : SearchParameter, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "IncludeAdultContentSearchParameter");
		}
	}
	/// <summary>
	/// This operand specifies the income bracket a household falls under.
	/// </summary>
	public class IncomeOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// Income tier specifying an income bracket that a household falls under. Tier 1 belongs to the
		/// highest income bracket.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public IncomeTier? Tier { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Tier = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "tier")
				{
					Tier = IncomeTierExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "IncomeOperand");
			XElement xItem = null;
			if (Tier != null)
			{
				xItem = new XElement(XName.Get("tier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Tier.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Income tiers that specify the income bracket a household falls under. TIER_1
	/// belongs to the highest income bracket. The income bracket range associated with
	/// each tier is defined per country and computed based on income percentiles.
	/// </summary>
	public enum IncomeTier
	{
		Unknown,
		Tier1,
		Tier2,
		Tier3,
		Tier4,
		Tier5,
		/// <summary>
		/// Bucket consisting of the bottom 5 tiers, specifying the bottom 50% of household
		/// income zip codes.
		/// </summary>
		Tier6To10
	}
	/// <summary>
	/// {@link Attribute} type that contains an integer value.
	/// </summary>
	public class IntegerAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Integer value contained by this {@link Attribute}.
		/// </summary>
		public int? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "IntegerAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a Set of integer values.
	/// </summary>
	public class IntegerSetAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Set of integer values contained by this {@link Attribute}.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<int> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<int>();
					Value.Add(int.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "IntegerSetAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(valueItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Indicates that a server-side error has occured. {@code InternalApiError}s
	/// are generally not the result of an invalid request or message sent by the
	/// client.
	/// </summary>
	public class InternalApiError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public InternalApiErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = InternalApiErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "InternalApiError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The single reason for the internal API error.
	/// </summary>
	public enum InternalApiErrorReason
	{
		/// <summary>
		/// API encountered an unexpected internal error.
		/// </summary>
		UnexpectedInternalApiError,
		/// <summary>
		/// A temporary error occurred during the request. Please retry.
		/// </summary>
		TransientError,
		/// <summary>
		/// The cause of the error is not known or only defined in newer versions.
		/// </summary>
		Unknown,
		/// <summary>
		/// The API is currently unavailable for a planned downtime.
		/// </summary>
		Downtime
	}
	/// <summary>
	/// Criterion used for IP exclusions. We allow:
	///
	/// <ul>
	/// <li>IPv4 and IPv6 addresses</li>
	/// <li>individual addresses (192.168.0.1)</li>
	/// <li>CIDR IP address blocks (e.g., 1.2.3.0/24, 2001:db8::/32).
	/// </ul>
	///
	/// <p> Note that for a CIDR IP address block, the specified IP address portion must be properly
	/// truncated (i.e. all the host bits must be zero) or the input is considered malformed.
	/// For example, "1.2.3.0/24" is accepted but "1.2.3.4/24" is not.
	/// Similarly, for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32" is not.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class IpBlock : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "IpAddress".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string IpAddress { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			IpAddress = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ipAddress")
				{
					IpAddress = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "IpBlock");
			XElement xItem = null;
			if (IpAddress != null)
			{
				xItem = new XElement(XName.Get("ipAddress", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IpAddress);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a keyword.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class Keyword : Criterion, ISoapable
	{
		/// <summary>
		/// Text of this keyword (at most 80 characters and ten words).
		/// <span class="constraint Selectable">This field can be selected using the value "KeywordText".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint MatchesRegex">Keyword text must not contain NUL (code point 0x0) characters. This is checked by the regular expression '[^\x00]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Text { get; set; }
		/// <summary>
		/// Match type of this keyword.
		/// <span class="constraint Selectable">This field can be selected using the value "KeywordMatchType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public KeywordMatchType? MatchType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Text = null;
			MatchType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "text")
				{
					Text = xItem.Value;
				}
				else if (localName == "matchType")
				{
					MatchType = KeywordMatchTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Keyword");
			XElement xItem = null;
			if (Text != null)
			{
				xItem = new XElement(XName.Get("text", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Text);
				xE.Add(xItem);
			}
			if (MatchType != null)
			{
				xItem = new XElement(XName.Get("matchType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MatchType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a {@link Keyword} value.
	/// </summary>
	public class KeywordAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// {@link Keyword} value contained by this {@link Attribute}.
		/// </summary>
		public Keyword Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new Keyword();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "KeywordAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents the traffic estimate result for a single keyword.
	/// </summary>
	public class KeywordEstimate : Estimate, ISoapable
	{
		/// <summary>
		/// The existing criterionId for this keyword, if any.
		///
		/// This will not be returned if this is a new keyword.
		/// </summary>
		public long? CriterionId { get; set; }
		/// <summary>
		/// The lower bound on the estimated stats.
		///
		/// <p>This is not a guarantee that actual performance will never be lower than
		/// these stats.
		/// </summary>
		public StatsEstimate Min { get; set; }
		/// <summary>
		/// The upper bound on the estimated stats.
		///
		/// <p>This is not a guarantee that actual performance will never be higher than
		/// these stats.
		/// </summary>
		public StatsEstimate Max { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CriterionId = null;
			Min = null;
			Max = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "criterionId")
				{
					CriterionId = long.Parse(xItem.Value);
				}
				else if (localName == "min")
				{
					Min = new StatsEstimate();
					Min.ReadFrom(xItem);
				}
				else if (localName == "max")
				{
					Max = new StatsEstimate();
					Max.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "KeywordEstimate");
			XElement xItem = null;
			if (CriterionId != null)
			{
				xItem = new XElement(XName.Get("criterionId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(CriterionId.Value.ToString());
				xE.Add(xItem);
			}
			if (Min != null)
			{
				xItem = new XElement(XName.Get("min", "https://adwords.google.com/api/adwords/o/v201609"));
				Min.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Max != null)
			{
				xItem = new XElement(XName.Get("max", "https://adwords.google.com/api/adwords/o/v201609"));
				Max.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a keyword to be estimated.
	/// </summary>
	public class KeywordEstimateRequest : EstimateRequest, ISoapable
	{
		/// <summary>
		/// The {@link Keyword} to estimate. The keyword text is required regardless
		/// of whether the keyword ID is included. The keyword ID is optional and has
		/// the following characteristics:
		/// <ul>
		/// <li>When omitted, the ID indicates a new keyword to be estimated.</li>
		/// <li>When present with a campaign and ad group also specified, the ID should
		/// be for an existing keyword in the ad group. This can improve the estimates
		/// since historical performance is known.</li>
		/// <li>When present without a campaign and ad group specified, the ID is
		/// ignored.</li>
		/// </ul>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Keyword Keyword { get; set; }
		/// <summary>
		/// The max CPC bid for this keyword.
		///
		/// In general, the {@code maxCpc} of a {@link KeywordEstimateRequest} is
		/// optional, since there is usually another {@code maxCpc} that can be used,
		/// such as the {@code maxCpc} on an existing keyword, an existing or
		/// overriding {@code maxCpc} of containing {@link AdGroupEstimateRequest}.
		/// However, if there is no backup value of {@code maxCpc} anywhere along the
		/// line, you must provide a value for {@code maxCpc} in
		/// {@link KeywordEstimateRequest}. This would happen, for example, if the
		/// {@link KeywordEstimateRequest} is for a new keyword.
		/// </summary>
		public Money MaxCpc { get; set; }
		/// <summary>
		/// Whether the keyword is negative or not. The default value is false.
		/// If negative, no current ad group ads will appear for searches containing
		/// this keyword.<p>
		///
		/// The estimate for negative keywords should reflect no traffic and zero CPC,
		/// but including a negative keyword will affect the other estimates in the
		/// request.
		/// </summary>
		public bool? IsNegative { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Keyword = null;
			MaxCpc = null;
			IsNegative = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "keyword")
				{
					Keyword = new Keyword();
					Keyword.ReadFrom(xItem);
				}
				else if (localName == "maxCpc")
				{
					MaxCpc = new Money();
					MaxCpc.ReadFrom(xItem);
				}
				else if (localName == "isNegative")
				{
					IsNegative = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "KeywordEstimateRequest");
			XElement xItem = null;
			if (Keyword != null)
			{
				xItem = new XElement(XName.Get("keyword", "https://adwords.google.com/api/adwords/o/v201609"));
				Keyword.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (MaxCpc != null)
			{
				xItem = new XElement(XName.Get("maxCpc", "https://adwords.google.com/api/adwords/o/v201609"));
				MaxCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (IsNegative != null)
			{
				xItem = new XElement(XName.Get("isNegative", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(IsNegative.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Match type of a keyword. i.e. the way we match a keyword string with
	/// search queries.
	/// </summary>
	public enum KeywordMatchType
	{
		/// <summary>
		/// Exact match
		/// </summary>
		Exact,
		/// <summary>
		/// Phrase match
		/// </summary>
		Phrase,
		/// <summary>
		/// Broad match
		/// </summary>
		Broad
	}
	/// <summary>
	/// Represents a label that can be attached to entities such as campaign, ad group, ads,
	/// criterion etc.
	/// </summary>
	public class Label : ISoapable
	{
		/// <summary>
		/// Id of label.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of label.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 80, inclusive.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Status of the label.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public LabelStatus? Status { get; set; }
		/// <summary>
		/// Attributes of the label.
		/// <span class="constraint Selectable">This field can be selected using the value "LabelAttribute".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// </summary>
		public LabelAttribute Attribute { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Label.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string LabelType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Status = null;
			Attribute = null;
			LabelType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = LabelStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "attribute")
				{
					Attribute = new LabelAttribute();
					Attribute.ReadFrom(xItem);
				}
				else if (localName == "Label.Type")
				{
					LabelType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Attribute != null)
			{
				xItem = new XElement(XName.Get("attribute", "https://adwords.google.com/api/adwords/cm/v201609"));
				Attribute.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (LabelType != null)
			{
				xItem = new XElement(XName.Get("Label.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Base type for AdWords label attributes.
	/// </summary>
	public class LabelAttribute : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of LabelAttribute.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string LabelAttributeType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			LabelAttributeType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "LabelAttribute.Type")
				{
					LabelAttributeType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (LabelAttributeType != null)
			{
				xItem = new XElement(XName.Get("LabelAttribute.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LabelAttributeType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Base error class for LabelService.
	/// </summary>
	public class LabelError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public LabelErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = LabelErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LabelError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the label error.
	/// </summary>
	public enum LabelErrorReason
	{
		/// <summary>
		/// Label name must be unique.
		/// </summary>
		DuplicateName,
		/// <summary>
		/// Label names cannot be empty
		/// </summary>
		InvalidLabelName,
		/// <summary>
		/// Invalid Label type. A specific type of Label is required.
		/// </summary>
		InvalidLabelType,
		/// <summary>
		/// Default error.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An operation for adding, editing, removing {@link Label}.
	/// </summary>
	public class LabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Label Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Label();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of labels resulting from the filtering and paging of the
	/// {@link LabelService#get} call.
	/// </summary>
	public class LabelPage : NoStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<Label> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Label>();
					var entriesItem = new Label();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LabelPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from LabelService.
	/// </summary>
	public class LabelReturnValue : ListReturnValue, ISoapable
	{
		public List<Label> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Label>();
					var valueItem = new Label();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LabelReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Errors for {@link LabelService}.
	/// </summary>
	public class LabelServiceError : ApiError, ISoapable
	{
		public LabelServiceErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = LabelServiceErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "LabelServiceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum LabelServiceErrorReason
	{
		/// <summary>
		/// The label name is empty.
		/// </summary>
		EmptyLabelName,
		/// <summary>
		/// The label name is longer than max allowed size.
		/// </summary>
		LabelNameTooLong,
		/// <summary>
		/// The customer already has an active label with the same name.
		/// </summary>
		DuplicateLabelName,
		/// <summary>
		/// The label name is reserved by the system.
		/// </summary>
		ReservedLabelName,
		/// <summary>
		/// The label cannot be deleted
		/// </summary>
		CannotBeDeleted,
		/// <summary>
		/// A customer cannot own more than 200 labels.
		/// </summary>
		TooManyLabels,
		/// <summary>
		/// Label id was not found.
		/// </summary>
		InvalidLabelId,
		/// <summary>
		/// This customer cannot create labels.  Only manager customers may create labels.
		/// </summary>
		CustomerCannotCreateLabels,
		/// <summary>
		/// An unknown enum value has been given for this error reason.
		/// </summary>
		ServerClientVersionMismatch
	}
	public enum LabelStatus
	{
		/// <summary>
		/// The label is enabled.
		/// </summary>
		Enabled,
		/// <summary>
		/// The label has been removed.
		/// </summary>
		Removed,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents a Language criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Language : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Code { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Code = null;
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "code")
				{
					Code = xItem.Value;
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Language");
			XElement xItem = null;
			if (Code != null)
			{
				xItem = new XElement(XName.Get("code", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Code);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} used to indicate multiple language being targeted.
	/// This can be used, for example, to search for {@code KEYWORD}
	/// {@link IdeaType}s that are best for Japanese language.
	///
	/// <p>The service allows at most one language to be targeted for
	/// {@code KEYWORD} requests.
	/// <p>In the {@code KEYWORD} {@link IdeaType} {@code STATS} {@link RequestType}
	/// requests, those keywords that are from different language than specified in
	/// {@code LanguageSearchParameter} or have unknown language will be filtered
	/// out in the response. To avoid filtering, do not include
	/// {@code LanguageSearchParameter} in the request.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class LanguageSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A list of {@link Language}s indicating the desired languages being targeted in the results.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<Language> Languages { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Languages = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "languages")
				{
					if (Languages == null) Languages = new List<Language>();
					var languagesItem = new Language();
					languagesItem.ReadFrom(xItem);
					Languages.Add(languagesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "LanguageSearchParameter");
			XElement xItem = null;
			if (Languages != null)
			{
				foreach (var languagesItem in Languages)
				{
					xItem = new XElement(XName.Get("languages", "https://adwords.google.com/api/adwords/o/v201609"));
					languagesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The level on which the cap is to be applied.
	/// </summary>
	public enum Level
	{
		/// <summary>
		/// The cap is applied at the creative level.
		/// </summary>
		Creative,
		/// <summary>
		/// The cap is applied at the ad group level.
		/// </summary>
		Adgroup,
		/// <summary>
		/// The cap is applied at the campaign level.
		/// </summary>
		Campaign,
		/// <summary>
		/// This value cannot be set by the user and sent to the AdWords API servers,
		/// as it would generate a RejectedError.
		/// It can only be received by the user from the AdWords API servers and it
		/// means that a new value available in a newer API release version is not
		/// known in the current API release version.
		/// If the user encounters this value, it means an upgrade is required
		/// in order to take advantage of the latest AdWords API functionality.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Properties of the level of detail of the report being viewed.
	/// </summary>
	public class LevelOfDetail : ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "CampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? CampaignId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignId")
				{
					CampaignId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignId != null)
			{
				xItem = new XElement(XName.Get("campaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation for modifying ManagedCustomer links. See {@link ManagedCustomerService#mutateLink}.
	/// </summary>
	public class LinkOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ManagedCustomerLink Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new ManagedCustomerLink();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "LinkOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// These status values match the values in the ServicedAccounts.Status column.
	/// </summary>
	public enum LinkStatus
	{
		/// <summary>
		/// An active relationship.
		/// </summary>
		Active,
		/// <summary>
		/// A former active relationship.
		/// </summary>
		Inactive,
		/// <summary>
		/// An invitation that is active or has expired.
		/// </summary>
		Pending,
		/// <summary>
		/// An invitation that was refused by the invitee.
		/// </summary>
		Refused,
		/// <summary>
		/// An invitation that was cancelled by the invitor.
		/// </summary>
		Cancelled,
		Unknown
	}
	/// <summary>
	/// Errors that can occur when making changes to a list using {@link ListOperations}.
	/// </summary>
	public class ListError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public ListErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ListErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ListError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the error.
	/// </summary>
	public enum ListErrorReason
	{
		/// <summary>
		/// A request attempted to clear a list that does not support being cleared.
		/// </summary>
		ClearUnsupported,
		/// <summary>
		/// The operator is invalid for the list or list element the operator was applied to.
		/// </summary>
		InvalidOperator,
		/// <summary>
		/// An UPDATE or REMOVE was requested for a list element that does not exist.
		/// </summary>
		InvalidElement,
		/// <summary>
		/// The operator list has different a size compared to the element list.
		/// </summary>
		ListLengthMismatch,
		/// <summary>
		/// Duplicate elements inside list.
		/// </summary>
		DuplicateElement,
		/// <summary>
		/// The API operator of the mutate being performed on the entity containing this list is not
		/// supported.
		/// </summary>
		MutateUnsupported,
		Unknown
	}
	/// <summary>
	/// Describes the behavior of elements in a list. Instances of ListOperations will always be defined
	/// alongside some list in an API POJO. The number of operators in the ListOperations must be
	/// equal to the number of elements in the POJO list. Each operator, together with its corresponding
	/// list element, describe an intended change.
	///
	/// <p>For example, if in a request Campaign.selectiveOptimization contains 2 conversionTypeIds,
	/// and the conversionTypeIdsOps is non-null, it must contain 2 operators. If those operators are
	/// {PUT, REMOVE} then the API will add the first conversionTypeId (if it doesn't
	/// already exist) and remove the second conversionTypeId (if it exists).
	/// </summary>
	public class ListOperations : ISoapable
	{
		/// <summary>
		/// Indicates that all contents of the list should be deleted. If this is true, then operators
		/// should be empty, or contain only PUTs.
		///
		/// <p>REMOVE/UPDATE is invalid with clear, as once the clear is applied no elements would exist to
		/// remove or update.
		/// </summary>
		public bool? Clear { get; set; }
		/// <summary>
		/// The desired behavior of each element in the POJO list that this ListOperation corresponds to.
		/// This will contain the same number of elements as the corresponding List<>.
		/// </summary>
		public List<ListOperationsListOperator> Operators { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Clear = null;
			Operators = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clear")
				{
					Clear = bool.Parse(xItem.Value);
				}
				else if (localName == "operators")
				{
					if (Operators == null) Operators = new List<ListOperationsListOperator>();
					Operators.Add(ListOperationsListOperatorExtensions.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Clear != null)
			{
				xItem = new XElement(XName.Get("clear", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Clear.Value.ToString());
				xE.Add(xItem);
			}
			if (Operators != null)
			{
				foreach (var operatorsItem in Operators)
				{
					xItem = new XElement(XName.Get("operators", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(operatorsItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Specifies the intended behavior for a list element.
	/// </summary>
	public enum ListOperationsListOperator
	{
		/// <summary>
		/// Adds to a list, or overrides an existing element if it exists.
		/// </summary>
		Put,
		/// <summary>
		/// Removes this element from the list.
		/// </summary>
		Remove,
		/// <summary>
		/// Updates this element with the existing behavior of null fields inside the list element being
		/// a no-op. If the element doesn't exist it is added.
		/// </summary>
		Update,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Base list return value type.
	/// </summary>
	public abstract class ListReturnValue : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of ListReturnValue.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ListReturnValueType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ListReturnValueType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ListReturnValue.Type")
				{
					ListReturnValueType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ListReturnValueType != null)
			{
				xItem = new XElement(XName.Get("ListReturnValue.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ListReturnValueType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents Location criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Location : Criterion, ISoapable
	{
		/// <summary>
		/// Name of the location criterion. <b> Note:</b> This field is filterable only in
		/// LocationCriterionService.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string LocationName { get; set; }
		/// <summary>
		/// Display type of the location criterion.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DisplayType { get; set; }
		/// <summary>
		/// The targeting status of the location criterion.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public LocationTargetingStatus? TargetingStatus { get; set; }
		/// <summary>
		/// Ordered list of parents of the location criterion.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<Location> ParentLocations { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			LocationName = null;
			DisplayType = null;
			TargetingStatus = null;
			ParentLocations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "locationName")
				{
					LocationName = xItem.Value;
				}
				else if (localName == "displayType")
				{
					DisplayType = xItem.Value;
				}
				else if (localName == "targetingStatus")
				{
					TargetingStatus = LocationTargetingStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "parentLocations")
				{
					if (ParentLocations == null) ParentLocations = new List<Location>();
					var parentLocationsItem = new Location();
					parentLocationsItem.ReadFrom(xItem);
					ParentLocations.Add(parentLocationsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Location");
			XElement xItem = null;
			if (LocationName != null)
			{
				xItem = new XElement(XName.Get("locationName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LocationName);
				xE.Add(xItem);
			}
			if (DisplayType != null)
			{
				xItem = new XElement(XName.Get("displayType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisplayType);
				xE.Add(xItem);
			}
			if (TargetingStatus != null)
			{
				xItem = new XElement(XName.Get("targetingStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetingStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ParentLocations != null)
			{
				foreach (var parentLocationsItem in ParentLocations)
				{
					xItem = new XElement(XName.Get("parentLocations", "https://adwords.google.com/api/adwords/cm/v201609"));
					parentLocationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents data that encapsulates a location criterion.
	/// </summary>
	public class LocationCriterion : ISoapable
	{
		/// <summary>
		/// Location criterion.
		/// </summary>
		public Location Location { get; set; }
		/// <summary>
		/// Canonical name of the location criterion.
		/// <span class="constraint Selectable">This field can be selected using the value "CanonicalName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string CanonicalName { get; set; }
		/// <summary>
		/// Approximate user population that will be targeted, rounded to the nearest 100.
		/// <span class="constraint Selectable">This field can be selected using the value "Reach".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? Reach { get; set; }
		/// <summary>
		/// Preferred locale to be used as a hint for determining the list of locations to return.
		/// This is also used for language translation. <b>Note:</b> If the specified locale filter
		/// is invalid, or not supported, en_US will be used by default.
		/// <span class="constraint Filterable">This field can be filtered on using the value "Locale".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Locale { get; set; }
		/// <summary>
		/// Original search term, as specified in the input request for search by name. <b>Note:</b>
		/// This field is useful in the case that the original search name does not match the official
		/// name of the location, for example, Florence -> Firenze.
		///
		/// <p>The number of search terms is limited to 25 per request.</p>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string SearchTerm { get; set; }
		/// <summary>
		/// This is used as a hint and suggestions are restricted to this country when applicable.
		///
		/// <p>See the <a href="/adwords/api/docs/appendix/geotargeting">list of countries</a>.</p>
		/// <span class="constraint Filterable">This field can be filtered on using the value "CountryCode".</span>
		/// </summary>
		public string CountryCode { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Location = null;
			CanonicalName = null;
			Reach = null;
			Locale = null;
			SearchTerm = null;
			CountryCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "location")
				{
					Location = new Location();
					Location.ReadFrom(xItem);
				}
				else if (localName == "canonicalName")
				{
					CanonicalName = xItem.Value;
				}
				else if (localName == "reach")
				{
					Reach = long.Parse(xItem.Value);
				}
				else if (localName == "locale")
				{
					Locale = xItem.Value;
				}
				else if (localName == "searchTerm")
				{
					SearchTerm = xItem.Value;
				}
				else if (localName == "countryCode")
				{
					CountryCode = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Location != null)
			{
				xItem = new XElement(XName.Get("location", "https://adwords.google.com/api/adwords/cm/v201609"));
				Location.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CanonicalName != null)
			{
				xItem = new XElement(XName.Get("canonicalName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CanonicalName);
				xE.Add(xItem);
			}
			if (Reach != null)
			{
				xItem = new XElement(XName.Get("reach", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reach.Value.ToString());
				xE.Add(xItem);
			}
			if (Locale != null)
			{
				xItem = new XElement(XName.Get("locale", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Locale);
				xE.Add(xItem);
			}
			if (SearchTerm != null)
			{
				xItem = new XElement(XName.Get("searchTerm", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SearchTerm);
				xE.Add(xItem);
			}
			if (CountryCode != null)
			{
				xItem = new XElement(XName.Get("countryCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CountryCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents errors thrown by the {@link LocationCriterionService#get} operation.
	/// </summary>
	public class LocationCriterionServiceError : ApiError, ISoapable
	{
		public LocationCriterionServiceErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = LocationCriterionServiceErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LocationCriterionServiceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Reasons for error.
	/// </summary>
	public enum LocationCriterionServiceErrorReason
	{
		RequiredLocationCriterionPredicateMissing,
		TooManyLocationCriterionPredicatesSpecified,
		InvalidCountryCode,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		LocationCriterionServiceError
	}
	/// <summary>
	/// This operand specifies information required for location extension targeting.
	/// </summary>
	public class LocationExtensionOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// Distance in units specifying the radius around targeted locations.
		/// Only long and double are supported constant types.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ConstantOperand Radius { get; set; }
		/// <summary>
		/// Used to filter locations present in the location feed by location criterion id.
		/// </summary>
		public long? LocationId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Radius = null;
			LocationId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "radius")
				{
					Radius = new ConstantOperand();
					Radius.ReadFrom(xItem);
				}
				else if (localName == "locationId")
				{
					LocationId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LocationExtensionOperand");
			XElement xItem = null;
			if (Radius != null)
			{
				xItem = new XElement(XName.Get("radius", "https://adwords.google.com/api/adwords/cm/v201609"));
				Radius.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (LocationId != null)
			{
				xItem = new XElement(XName.Get("locationId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LocationId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a criterion containing a function that when evaluated specifies how to target
	/// based on the type of the location. These "location groups" are custom, dynamic bundles of
	/// locations (for instance "High income areas in California" or "Airports in France").
	///
	/// <p>Examples:</p>
	///
	/// For income demographic targeting, we need to specify the income tier and the geo
	/// which it targets. Areas in California that are in the top national income tier can be
	/// represented by:
	/// <pre><code>
	/// Function function = new Function();
	/// function.setLhsOperand(Arrays.asList(
	/// (Operand) new IncomeOperand(IncomeTier.TIER_1));
	/// function.setOperator(Operator.AND);
	/// function.setRhsOperand(Arrays.asList(
	/// (Operand) new GeoTargetOperand(Lists.newArrayList(new CriterionId(21137L))));
	/// </code></pre>
	///
	/// For place of interest targeting, we need to specify the place of interest category and the geo
	/// which it targets. Airports in France can be represented by:
	/// <pre><code>
	/// Function function = new Function();
	/// function.setLhsOperand(Arrays.asList(
	/// (Operand) new PlacesOfInterestOperand(PlacesOfInterestOperand.Category.AIRPORT));
	/// function.setOperator(Operator.AND);
	/// function.setRhsOperand(Arrays.asList(
	/// (Operand) new GeoTargetOperand(Lists.newArrayList(new CriterionId(2250L))));
	/// </code></pre>
	///
	/// <p>NOTE: Starting v201607 places of interest targeting is read only.</p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class LocationGroups : Criterion, ISoapable
	{
		/// <summary>
		/// Feed to be used for targeting around locations. This is required for distance targets.
		/// <span class="constraint Selectable">This field can be selected using the value "FeedId".</span>
		/// </summary>
		public long? FeedId { get; set; }
		/// <summary>
		/// Matching function to filter out locations targeted by the criteria.
		///
		/// This allows advertisers to target based on the semantics of the location.
		/// <span class="constraint Selectable">This field can be selected using the value "MatchingFunction".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Function MatchingFunction { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			FeedId = null;
			MatchingFunction = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "feedId")
				{
					FeedId = long.Parse(xItem.Value);
				}
				else if (localName == "matchingFunction")
				{
					MatchingFunction = new Function();
					MatchingFunction.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LocationGroups");
			XElement xItem = null;
			if (FeedId != null)
			{
				xItem = new XElement(XName.Get("feedId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FeedId.Value.ToString());
				xE.Add(xItem);
			}
			if (MatchingFunction != null)
			{
				xItem = new XElement(XName.Get("matchingFunction", "https://adwords.google.com/api/adwords/cm/v201609"));
				MatchingFunction.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} used to indicate the locations being targeted.
	/// This can be used, for example, to search for {@code KEYWORD}
	/// {@link IdeaType}s that are best for Japan and Los Angeles.
	///
	/// <p>This parameter replaces the {@code CountryTargetSearchParameter}.</p>
	///
	/// <p>See the
	/// <a href="https://developers.google.com/adwords/api/docs/appendix/geotargeting">Geographical
	/// Targeting</a> page for the complete list of supported geo target types for this service.</p>
	///
	/// <p>The service allows up to 10 locations to be targeted for KEYWORD requests and 50 locations
	/// for PLACEMENT requests.</p>
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class LocationSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A list of {@link Location}s indicating the desired countries being targeted in the results.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<Location> Locations { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Locations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "locations")
				{
					if (Locations == null) Locations = new List<Location>();
					var locationsItem = new Location();
					locationsItem.ReadFrom(xItem);
					Locations.Add(locationsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "LocationSearchParameter");
			XElement xItem = null;
			if (Locations != null)
			{
				foreach (var locationsItem in Locations)
				{
					xItem = new XElement(XName.Get("locations", "https://adwords.google.com/api/adwords/o/v201609"));
					locationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Enum that represents the different Targeting Status values for a Location criterion.
	/// </summary>
	public enum LocationTargetingStatus
	{
		/// <summary>
		/// The location is active.
		/// </summary>
		Active,
		/// <summary>
		/// The location is not available for targeting.
		/// </summary>
		Obsolete,
		/// <summary>
		/// The location is phasing out, it will marked obsolete soon.
		/// </summary>
		PhasingOut
	}
	/// <summary>
	/// Represents a user list that is a custom combination of user lists and user
	/// interests.
	/// </summary>
	public class LogicalUserList : UserList, ISoapable
	{
		/// <summary>
		/// Logical list rules that define this user list.  The rules are defined as
		/// logical operator (ALL/ANY/NONE) and a list of user lists. All the rules are
		/// anded for the evaluation.
		/// <span class="constraint Selectable">This field can be selected using the value "Rules".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<UserListLogicalRule> Rules { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Rules = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rules")
				{
					if (Rules == null) Rules = new List<UserListLogicalRule>();
					var rulesItem = new UserListLogicalRule();
					rulesItem.ReadFrom(xItem);
					Rules.Add(rulesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "LogicalUserList");
			XElement xItem = null;
			if (Rules != null)
			{
				foreach (var rulesItem in Rules)
				{
					xItem = new XElement(XName.Get("rules", "https://adwords.google.com/api/adwords/rm/v201609"));
					rulesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An interface for a logical user list operand. A logical user list is a
	/// combination of logical rules. Each rule is defined as a logical operator and
	/// a list of operands. Those operands can be of type UserList.
	/// </summary>
	public class LogicalUserListOperand : ISoapable
	{
		public UserList UserList { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "UserList")
				{
					UserList = new UserList();
					UserList.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			xItem = new XElement(XName.Get("UserList", "https://adwords.google.com/api/adwords/rm/v201609"));
			UserList.WriteTo(xItem);
			xE.Add(xItem);
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a long value.
	/// </summary>
	public class LongAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// Long value contained by this {@link Attribute}.
		/// </summary>
		public long? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "LongAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Object representing integer comparison operations. This is usually used within
	/// a particular {@link SearchParameter} to specify the valid values requested for the specific
	/// {@link Attribute}.
	/// </summary>
	public class LongComparisonOperation : ISoapable
	{
		/// <summary>
		/// The minimum value of elements returned by this operation (inclusive).
		/// </summary>
		public long? Minimum { get; set; }
		/// <summary>
		/// The maximum value of elements returned by this operation (inclusive).
		/// </summary>
		public long? Maximum { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Minimum = null;
			Maximum = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "minimum")
				{
					Minimum = long.Parse(xItem.Value);
				}
				else if (localName == "maximum")
				{
					Maximum = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Minimum != null)
			{
				xItem = new XElement(XName.Get("minimum", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Minimum.Value.ToString());
				xE.Add(xItem);
			}
			if (Maximum != null)
			{
				xItem = new XElement(XName.Get("maximum", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Maximum.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a {@link Range} of {@link LongValue}
	/// values.
	/// </summary>
	public class LongRangeAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// {@link Range} of {@link LongValue} values contained by this
		/// {@link Attribute}.
		/// </summary>
		public Range Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new Range();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "LongRangeAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Number value type for constructing long valued ranges.
	/// </summary>
	public class LongValue : NumberValue, ISoapable
	{
		/// <summary>
		/// the underlying long value.
		/// </summary>
		public long? Number { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Number = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "number")
				{
					Number = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "LongValue");
			XElement xItem = null;
			if (Number != null)
			{
				xItem = new XElement(XName.Get("number", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Number.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Data object that represents a managed customer.  Member of {@link ManagedCustomerPage}.
	/// </summary>
	public class ManagedCustomer : ISoapable
	{
		/// <summary>
		/// The name used by the manager to refer to the client.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The 10-digit ID that uniquely identifies the AdWords account.
		/// <span class="constraint Selectable">This field can be selected using the value "CustomerId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public long? CustomerId { get; set; }
		/// <summary>
		/// Whether this account can manage clients.
		/// <span class="constraint ReadOnly">This field is read only
		/// and will be ignored when sent to the API.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "CanManageClients".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? CanManageClients { get; set; }
		/// <summary>
		/// The currency in which this account operates.
		/// We support a subset of the currency codes derived from the ISO 4217 standard.
		/// See <a href="https://developers.google.com/adwords/api/docs/appendix/currencycodes"
		/// >Currency Codes</a> for the currently supported currencies.
		/// <span class="constraint Selectable">This field can be selected using the value "CurrencyCode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 3 and 3, inclusive.</span>
		/// </summary>
		public string CurrencyCode { get; set; }
		/// <summary>
		/// The local timezone ID for this customer.
		/// See <a href="https://developers.google.com/adwords/api/docs/appendix/timezones"
		/// >Time Zone Codes</a> for the currently supported list.
		/// <span class="constraint Selectable">This field can be selected using the value "DateTimeZone".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string DateTimeZone { get; set; }
		/// <summary>
		/// Whether this managed customer's account is a test account.
		/// <span class="constraint Selectable">This field can be selected using the value "TestAccount".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? TestAccount { get; set; }
		/// <summary>
		/// The list of account labels associated with this customer. Only labels owned by the requesting
		/// manager will be returned. To change the list of labels applied to this customer, see
		/// {@link ManagedCustomerService#mutateLabels}.
		/// <span class="constraint Selectable">This field can be selected using the value "AccountLabels".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<AccountLabel> AccountLabels { get; set; }
		/// <summary>
		/// Specify ExcludeHiddenAccounts=true to exclude hidden accounts during traversal.
		/// <span class="constraint Filterable">This field can be filtered on using the value "ExcludeHiddenAccounts".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? ExcludeHiddenAccounts { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Name = null;
			CustomerId = null;
			CanManageClients = null;
			CurrencyCode = null;
			DateTimeZone = null;
			TestAccount = null;
			AccountLabels = null;
			ExcludeHiddenAccounts = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "customerId")
				{
					CustomerId = long.Parse(xItem.Value);
				}
				else if (localName == "canManageClients")
				{
					CanManageClients = bool.Parse(xItem.Value);
				}
				else if (localName == "currencyCode")
				{
					CurrencyCode = xItem.Value;
				}
				else if (localName == "dateTimeZone")
				{
					DateTimeZone = xItem.Value;
				}
				else if (localName == "testAccount")
				{
					TestAccount = bool.Parse(xItem.Value);
				}
				else if (localName == "accountLabels")
				{
					if (AccountLabels == null) AccountLabels = new List<AccountLabel>();
					var accountLabelsItem = new AccountLabel();
					accountLabelsItem.ReadFrom(xItem);
					AccountLabels.Add(accountLabelsItem);
				}
				else if (localName == "excludeHiddenAccounts")
				{
					ExcludeHiddenAccounts = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (CustomerId != null)
			{
				xItem = new XElement(XName.Get("customerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CustomerId.Value.ToString());
				xE.Add(xItem);
			}
			if (CanManageClients != null)
			{
				xItem = new XElement(XName.Get("canManageClients", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CanManageClients.Value.ToString());
				xE.Add(xItem);
			}
			if (CurrencyCode != null)
			{
				xItem = new XElement(XName.Get("currencyCode", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CurrencyCode);
				xE.Add(xItem);
			}
			if (DateTimeZone != null)
			{
				xItem = new XElement(XName.Get("dateTimeZone", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(DateTimeZone);
				xE.Add(xItem);
			}
			if (TestAccount != null)
			{
				xItem = new XElement(XName.Get("testAccount", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(TestAccount.Value.ToString());
				xE.Add(xItem);
			}
			if (AccountLabels != null)
			{
				foreach (var accountLabelsItem in AccountLabels)
				{
					xItem = new XElement(XName.Get("accountLabels", "https://adwords.google.com/api/adwords/mcm/v201609"));
					accountLabelsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ExcludeHiddenAccounts != null)
			{
				xItem = new XElement(XName.Get("excludeHiddenAccounts", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ExcludeHiddenAccounts.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A label ID and customer ID the label applies to.
	/// </summary>
	public class ManagedCustomerLabel : ISoapable
	{
		/// <summary>
		/// The ID of an existing label to be applied to the account.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? LabelId { get; set; }
		/// <summary>
		/// The 10-digit customer ID that identifies this account. Note that this is a {@code long} (do not
		/// include hyphens in the middle), just like {@link ManagedCustomer#customerId}.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CustomerId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			LabelId = null;
			CustomerId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "labelId")
				{
					LabelId = long.Parse(xItem.Value);
				}
				else if (localName == "customerId")
				{
					CustomerId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (LabelId != null)
			{
				xItem = new XElement(XName.Get("labelId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(LabelId.Value.ToString());
				xE.Add(xItem);
			}
			if (CustomerId != null)
			{
				xItem = new XElement(XName.Get("customerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CustomerId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An operation to apply or remove an account label from a managed customer.
	///
	/// <p class="note"><b>Note:</b> The {@code SET} operator is not supported.</p>
	/// </summary>
	public class ManagedCustomerLabelOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ManagedCustomerLabel Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new ManagedCustomerLabel();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ManagedCustomerLabelOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from {@link ManagedCustomerService#mutateLabel}.
	/// <p>For successful {@linkplain ADD} operations, the input {@linkplain ManagedCustomerLabel}
	/// is returned.
	/// <p>For successful {@linkplain REMOVE} operations, the returned {@linkplain ManagedCustomerLabel}
	/// will contain the customer ID and a null label ID.
	/// </summary>
	public class ManagedCustomerLabelReturnValue : ISoapable
	{
		/// <summary>
		/// List of managed customer labels.
		/// </summary>
		public List<ManagedCustomerLabel> Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<ManagedCustomerLabel>();
					var valueItem = new ManagedCustomerLabel();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/mcm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents an AdWords manager-client link.
	/// </summary>
	public class ManagedCustomerLink : ISoapable
	{
		/// <summary>
		/// The manager customer id in this link.
		/// </summary>
		public long? ManagerCustomerId { get; set; }
		/// <summary>
		/// The client customer id in this link.
		/// </summary>
		public long? ClientCustomerId { get; set; }
		/// <summary>
		/// The status of the link.  For get operations, this will always be ACTIVE.  For mutates,
		/// this is the field used to modify links (PENDING, ACTIVE, INACTIVE, CANCELLED, REFUSED).
		/// </summary>
		public LinkStatus? LinkStatus { get; set; }
		/// <summary>
		/// The pending descriptive name of the client for link invitations.
		/// </summary>
		public string PendingDescriptiveName { get; set; }
		/// <summary>
		/// Whether the link is hidden.
		///
		/// <p> Hiding accounts removes them from your manager account views without unlinking them
		/// in the Adwords UI. Ads in those accounts will continue running normally.
		/// </summary>
		public bool? IsHidden { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ManagerCustomerId = null;
			ClientCustomerId = null;
			LinkStatus = null;
			PendingDescriptiveName = null;
			IsHidden = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "managerCustomerId")
				{
					ManagerCustomerId = long.Parse(xItem.Value);
				}
				else if (localName == "clientCustomerId")
				{
					ClientCustomerId = long.Parse(xItem.Value);
				}
				else if (localName == "linkStatus")
				{
					LinkStatus = LinkStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "pendingDescriptiveName")
				{
					PendingDescriptiveName = xItem.Value;
				}
				else if (localName == "isHidden")
				{
					IsHidden = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ManagerCustomerId != null)
			{
				xItem = new XElement(XName.Get("managerCustomerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ManagerCustomerId.Value.ToString());
				xE.Add(xItem);
			}
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ClientCustomerId.Value.ToString());
				xE.Add(xItem);
			}
			if (LinkStatus != null)
			{
				xItem = new XElement(XName.Get("linkStatus", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(LinkStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (PendingDescriptiveName != null)
			{
				xItem = new XElement(XName.Get("pendingDescriptiveName", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(PendingDescriptiveName);
				xE.Add(xItem);
			}
			if (IsHidden != null)
			{
				xItem = new XElement(XName.Get("isHidden", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(IsHidden.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An operation to create or modify a managed customer.
	/// <p class="note"><b>Note:</b>
	/// <li><code>ADD</code> operator is supported in all API versions.</li>
	/// <li><code>SET</code> operator is supported beginning with v201601.</li>
	/// <li><code>REMOVE</code> operator is not supported.</li>
	/// </p>
	/// </summary>
	public class ManagedCustomerOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ManagedCustomer Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new ManagedCustomer();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ManagedCustomerOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Return result of {@link ManagedCustomerService}
	/// </summary>
	public class ManagedCustomerPage : Page, ISoapable
	{
		/// <summary>
		/// Subset of the managed customers' information that are being retrieved.
		/// </summary>
		public List<ManagedCustomer> Entries { get; set; }
		/// <summary>
		/// Links between manager and client customers.
		/// </summary>
		public List<ManagedCustomerLink> Links { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			Links = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<ManagedCustomer>();
					var entriesItem = new ManagedCustomer();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
				else if (localName == "links")
				{
					if (Links == null) Links = new List<ManagedCustomerLink>();
					var linksItem = new ManagedCustomerLink();
					linksItem.ReadFrom(xItem);
					Links.Add(linksItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ManagedCustomerPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/mcm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Links != null)
			{
				foreach (var linksItem in Links)
				{
					xItem = new XElement(XName.Get("links", "https://adwords.google.com/api/adwords/mcm/v201609"));
					linksItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the ManagedCustomerService.
	/// </summary>
	public class ManagedCustomerReturnValue : ISoapable
	{
		/// <summary>
		/// List of managed customers.
		/// </summary>
		public List<ManagedCustomer> Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<ManagedCustomer>();
					var valueItem = new ManagedCustomer();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/mcm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Error for {@link ManagedCustomerService}
	/// </summary>
	public class ManagedCustomerServiceError : ApiError, ISoapable
	{
		public ManagedCustomerServiceErrorReason? Reason { get; set; }
		/// <summary>
		/// The list of customer ids associated with the error.
		/// </summary>
		public List<long> CustomerIds { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			CustomerIds = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ManagedCustomerServiceErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "customerIds")
				{
					if (CustomerIds == null) CustomerIds = new List<long>();
					CustomerIds.Add(long.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ManagedCustomerServiceError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (CustomerIds != null)
			{
				foreach (var customerIdsItem in CustomerIds)
				{
					xItem = new XElement(XName.Get("customerIds", "https://adwords.google.com/api/adwords/mcm/v201609"));
					xItem.Add(customerIdsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	public enum ManagedCustomerServiceErrorReason
	{
		/// <summary>
		/// Unknown.
		/// </summary>
		Unknown,
		/// <summary>
		/// The user is not authorized to perform the action.
		/// </summary>
		NotAuthorized,
		/// <summary>
		/// Invalid selector
		/// </summary>
		InvalidSelector,
		/// <summary>
		/// Can't process the passed in timezone.
		/// </summary>
		InvalidTimezone,
		/// <summary>
		/// Can't process the passed in currency code.
		/// </summary>
		InvalidCurrency,
		/// <summary>
		/// Can't process the passed in descriptive name.
		/// </summary>
		InvalidDescriptiveName,
		/// <summary>
		/// Generic error during add customer process.
		/// </summary>
		AddCustomerFailure,
		/// <summary>
		/// There was a problem saving the modified customers, and some of the customers may not
		/// have been saved successfully.
		/// </summary>
		SaveCustomersFailure,
		/// <summary>
		/// Attempt to establish a link with a client that is already managed by the manager.
		/// </summary>
		AlreadyManagedByThisManager,
		/// <summary>
		/// Attempt to invite a client that has already been invited by the manager.
		/// </summary>
		AlreadyInvitedByThisManager,
		/// <summary>
		/// Already managed by some other manager in the hierarchy.
		/// </summary>
		AlreadyManagedInHierarchy,
		/// <summary>
		/// Client is managed by another manager for UI access already.
		/// </summary>
		AlreadyManagedForUiAccess,
		/// <summary>
		/// Attempt to exceed the maximum hierarchy depth.
		/// </summary>
		MaxLinkDepthExceeded,
		/// <summary>
		/// Attempt to accept an invitation that doesn't exist.
		/// </summary>
		NoPendingInvitation,
		/// <summary>
		/// Manager account has the maximum number of linked accounts.
		/// </summary>
		TooManyAccounts,
		/// <summary>
		/// Your manager's account has the maximum number of linked accounts.
		/// </summary>
		TooManyAccountsAtManager,
		/// <summary>
		/// The invitee has already linked with max allowed number of UI and API managers.
		/// </summary>
		TooManyUiApiManagers,
		/// <summary>
		/// Error involving test accounts (mixed types) or too many child accounts.
		/// </summary>
		TestAccountLinkError,
		/// <summary>
		/// Label id was not found, or is not owned by the requesting customer.
		/// </summary>
		InvalidLabelId,
		/// <summary>
		/// Deleted labels cannot be applied to customers.
		/// </summary>
		CannotApplyInactiveLabel,
		/// <summary>
		/// A label cannot be applied to more than 1000 customers.
		/// </summary>
		AppliedLabelToTooManyAccounts
	}
	/// <summary>
	/// Manual click based bidding where user pays per click.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class ManualCpcBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// The enhanced CPC bidding option for the campaign, which enables
		/// bids to be enhanced based on conversion optimizer data. For more
		/// information about enhanced CPC, see the
		/// <a href="//support.google.com/adwords/answer/2464964"
		/// >AdWords Help Center</a>.
		/// <span class="constraint Selectable">This field can be selected using the value "EnhancedCpcEnabled".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? EnhancedCpcEnabled { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			EnhancedCpcEnabled = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "enhancedCpcEnabled")
				{
					EnhancedCpcEnabled = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ManualCpcBiddingScheme");
			XElement xItem = null;
			if (EnhancedCpcEnabled != null)
			{
				xItem = new XElement(XName.Get("enhancedCpcEnabled", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnhancedCpcEnabled.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Manual impression based bidding where user pays per thousand impressions.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ManualCpmBiddingScheme : BiddingScheme, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ManualCpmBiddingScheme");
		}
	}
	/// <summary>
	/// Represents some kind of media.
	/// </summary>
	public class Media : ISoapable
	{
		/// <summary>
		/// ID of this media object.
		/// <span class="constraint Selectable">This field can be selected using the value "MediaId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? MediaId { get; set; }
		/// <summary>
		/// Type of media object. Required when using {@link MediaService#upload} to upload a new media
		/// file.
		/// <span class="constraint Selectable">This field can be selected using the value "Type".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public MediaMediaType? Type { get; set; }
		/// <summary>
		/// Media reference ID key.
		/// <span class="constraint Selectable">This field can be selected using the value "ReferenceId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public long? ReferenceId { get; set; }
		/// <summary>
		/// Various dimension sizes for the media. Only applies to image media (and video media for
		/// video thumbnails).
		/// <span class="constraint Selectable">This field can be selected using the value "Dimensions".</span>
		/// </summary>
		public List<Media_Size_DimensionsMapEntry> Dimensions { get; set; }
		/// <summary>
		/// URLs pointing to the resized media for the given sizes. Only applies to image media.
		/// <span class="constraint Selectable">This field can be selected using the value "Urls".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<Media_Size_StringMapEntry> Urls { get; set; }
		/// <summary>
		/// The mime type of the media.
		/// <span class="constraint Selectable">This field can be selected using the value "MimeType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public MediaMimeType? MimeType { get; set; }
		/// <summary>
		/// The URL of where the original media was downloaded from (or a file name).
		/// <span class="constraint Selectable">This field can be selected using the value "SourceUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public string SourceUrl { get; set; }
		/// <summary>
		/// The name of the media. The name can be used by clients to
		/// help identify previously uploaded media.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The size of the media file in bytes.
		/// <span class="constraint Selectable">This field can be selected using the value "FileSize".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public long? FileSize { get; set; }
		/// <summary>
		/// Media creation date in the format YYYY-MM-DD HH:MM:SS+TZ.
		/// This is not updatable and not specifiable.
		/// <span class="constraint Selectable">This field can be selected using the value "CreationTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// </summary>
		public string CreationTime { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Media.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string MediaType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			MediaId = null;
			Type = null;
			ReferenceId = null;
			Dimensions = null;
			Urls = null;
			MimeType = null;
			SourceUrl = null;
			Name = null;
			FileSize = null;
			CreationTime = null;
			MediaType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "mediaId")
				{
					MediaId = long.Parse(xItem.Value);
				}
				else if (localName == "type")
				{
					Type = MediaMediaTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "referenceId")
				{
					ReferenceId = long.Parse(xItem.Value);
				}
				else if (localName == "dimensions")
				{
					if (Dimensions == null) Dimensions = new List<Media_Size_DimensionsMapEntry>();
					var dimensionsItem = new Media_Size_DimensionsMapEntry();
					dimensionsItem.ReadFrom(xItem);
					Dimensions.Add(dimensionsItem);
				}
				else if (localName == "urls")
				{
					if (Urls == null) Urls = new List<Media_Size_StringMapEntry>();
					var urlsItem = new Media_Size_StringMapEntry();
					urlsItem.ReadFrom(xItem);
					Urls.Add(urlsItem);
				}
				else if (localName == "mimeType")
				{
					MimeType = MediaMimeTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "sourceUrl")
				{
					SourceUrl = xItem.Value;
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "fileSize")
				{
					FileSize = long.Parse(xItem.Value);
				}
				else if (localName == "creationTime")
				{
					CreationTime = xItem.Value;
				}
				else if (localName == "Media.Type")
				{
					MediaType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (MediaId != null)
			{
				xItem = new XElement(XName.Get("mediaId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MediaId.Value.ToString());
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ReferenceId != null)
			{
				xItem = new XElement(XName.Get("referenceId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReferenceId.Value.ToString());
				xE.Add(xItem);
			}
			if (Dimensions != null)
			{
				foreach (var dimensionsItem in Dimensions)
				{
					xItem = new XElement(XName.Get("dimensions", "https://adwords.google.com/api/adwords/cm/v201609"));
					dimensionsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Urls != null)
			{
				foreach (var urlsItem in Urls)
				{
					xItem = new XElement(XName.Get("urls", "https://adwords.google.com/api/adwords/cm/v201609"));
					urlsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (MimeType != null)
			{
				xItem = new XElement(XName.Get("mimeType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MimeType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SourceUrl != null)
			{
				xItem = new XElement(XName.Get("sourceUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SourceUrl);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (FileSize != null)
			{
				xItem = new XElement(XName.Get("fileSize", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FileSize.Value.ToString());
				xE.Add(xItem);
			}
			if (CreationTime != null)
			{
				xItem = new XElement(XName.Get("creationTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CreationTime);
				xE.Add(xItem);
			}
			if (MediaType != null)
			{
				xItem = new XElement(XName.Get("Media.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MediaType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// This represents an entry in a map with a key of type Size
	/// and value of type Dimensions.
	/// </summary>
	public class Media_Size_DimensionsMapEntry : ISoapable
	{
		public MediaSize? Key { get; set; }
		public Dimensions Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = MediaSizeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = new Dimensions();
					Value.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Key.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// This represents an entry in a map with a key of type Size
	/// and value of type String.
	/// </summary>
	public class Media_Size_StringMapEntry : ISoapable
	{
		public MediaSize? Key { get; set; }
		public string Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = MediaSizeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Key.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a ZIP archive media the content of which contains HTML5 assets.
	/// </summary>
	public class MediaBundle : Media, ISoapable
	{
		/// <summary>
		/// Raw zipped data.
		/// </summary>
		public byte[] Data { get; set; }
		/// <summary>
		/// URL pointing to the data for the MediaBundle data.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string MediaBundleUrl { get; set; }
		/// <summary>
		/// Entry in the ZIP archive used to display the <code>MediaBundle</code> in an
		/// <code>Ad</code>. This field can only be set and returned when the <code>MediaBundle</code> is
		/// used with the <code>AdGroupAdService</code>. If this field is set when calling
		/// <code>MediaService</code>, an error will be returned.
		///
		/// <p>To use a <code>MediaBundle</code> that was created with the <code>MediaService</code> in
		/// an <code>Ad</code>, create a bundle and set the <code>mediaId</code> and
		/// <code>entryPoint</code> fields.
		/// </summary>
		public string EntryPoint { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Data = null;
			MediaBundleUrl = null;
			EntryPoint = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "data")
				{
					Data = Convert.FromBase64String(xItem.Value);
				}
				else if (localName == "mediaBundleUrl")
				{
					MediaBundleUrl = xItem.Value;
				}
				else if (localName == "entryPoint")
				{
					EntryPoint = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MediaBundle");
			XElement xItem = null;
			if (Data != null)
			{
				xItem = new XElement(XName.Get("data", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Convert.ToBase64String(Data));
				xE.Add(xItem);
			}
			if (MediaBundleUrl != null)
			{
				xItem = new XElement(XName.Get("mediaBundleUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MediaBundleUrl);
				xE.Add(xItem);
			}
			if (EntryPoint != null)
			{
				xItem = new XElement(XName.Get("entryPoint", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EntryPoint);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error class for errors associated with parsing media bundle data.
	/// </summary>
	public class MediaBundleError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public MediaBundleErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = MediaBundleErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MediaBundleError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enumeration of the reasons for the {@link MediaBundleError}
	/// </summary>
	public enum MediaBundleErrorReason
	{
		/// <summary>
		/// The entryPoint field cannot be set using the <code>MediaService</code>.
		/// </summary>
		EntryPointCannotBeSetUsingMediaService,
		/// <summary>
		/// There was a problem with the request.
		/// </summary>
		BadRequest,
		/// <summary>
		/// HTML5 ads using DoubleClick Studio created ZIP files are not supported.
		/// </summary>
		DoubleclickBundleNotAllowed,
		/// <summary>
		/// Cannot reference URL external to the media bundle.
		/// </summary>
		ExternalUrlNotAllowed,
		/// <summary>
		/// Media bundle file is too large.
		/// </summary>
		FileTooLarge,
		/// <summary>
		/// ZIP file from Google Web Designer is not published.
		/// </summary>
		GoogleWebDesignerZipFileNotPublished,
		/// <summary>
		/// Input was invalid.
		/// </summary>
		InvalidInput,
		/// <summary>
		/// There was a problem with the media bundle.
		/// </summary>
		InvalidMediaBundle,
		/// <summary>
		/// There was a problem with one or more of the media bundle entries.
		/// </summary>
		InvalidMediaBundleEntry,
		/// <summary>
		/// The media bundle contains a file with an unknown mime type
		/// </summary>
		InvalidMimeType,
		/// <summary>
		/// The media bundle contain an invalid asset path.
		/// </summary>
		InvalidPath,
		/// <summary>
		/// HTML5 ad is trying to reference an asset not in .ZIP file
		/// </summary>
		InvalidUrlReference,
		/// <summary>
		/// Media data is too large.
		/// </summary>
		MediaDataTooLarge,
		/// <summary>
		/// The media bundle contains no primary entry.
		/// </summary>
		MissingPrimaryMediaBundleEntry,
		/// <summary>
		/// There was an error on the server.
		/// </summary>
		ServerError,
		/// <summary>
		/// The image could not be stored.
		/// </summary>
		StorageError,
		/// <summary>
		/// Media bundle created with the Swiffy tool is not allowed.
		/// </summary>
		SwiffyBundleNotAllowed,
		/// <summary>
		/// The media bundle contains too many files.
		/// </summary>
		TooManyFiles,
		/// <summary>
		/// The media bundle is not of legal dimensions.
		/// </summary>
		UnexpectedSize,
		/// <summary>
		/// Google Web Designer not created for "AdWords" environment.
		/// </summary>
		UnsupportedGoogleWebDesignerEnvironment,
		/// <summary>
		/// Unsupported HTML5 feature in HTML5 asset.
		/// </summary>
		UnsupportedHtml5Feature,
		/// <summary>
		/// URL in HTML5 entry is not ssl compliant.
		/// </summary>
		UrlInMediaBundleNotSslCompliant
	}
	/// <summary>
	/// Error class for media related errors.
	/// </summary>
	public class MediaError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public MediaErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = MediaErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MediaError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum MediaErrorReason
	{
		/// <summary>
		/// Cannot add a standard icon type
		/// </summary>
		CannotAddStandardIcon,
		/// <summary>
		/// May only select Standard Icons alone
		/// </summary>
		CannotSelectStandardIconWithOtherTypes,
		/// <summary>
		/// Image contains both a media ID and media data.
		/// </summary>
		CannotSpecifyMediaIdAndData,
		/// <summary>
		/// A media with given type and reference id already exists
		/// </summary>
		DuplicateMedia,
		/// <summary>
		/// A required field was not specified or is an empty string.
		/// </summary>
		EmptyField,
		/// <summary>
		/// A media may only be modified once per call
		/// </summary>
		EntityReferencedInMultipleOps,
		/// <summary>
		/// Field is not supported for the media sub type.
		/// </summary>
		FieldNotSupportedForMediaSubType,
		/// <summary>
		/// The media id is invalid
		/// </summary>
		InvalidMediaId,
		/// <summary>
		/// The media subtype is invalid
		/// </summary>
		InvalidMediaSubType,
		/// <summary>
		/// The media type is invalid
		/// </summary>
		InvalidMediaType,
		/// <summary>
		/// The mimetype is invalid
		/// </summary>
		InvalidMimeType,
		/// <summary>
		/// The media reference id is invalid
		/// </summary>
		InvalidReferenceId,
		/// <summary>
		/// The YouTube video id is invalid
		/// </summary>
		InvalidYouTubeId,
		/// <summary>
		/// Media has failed transcoding
		/// </summary>
		MediaFailedTranscoding,
		/// <summary>
		/// Media has not been transcoded
		/// </summary>
		MediaNotTranscoded,
		/// <summary>
		/// The MediaType does not match the actual media object's type
		/// </summary>
		MediaTypeDoesNotMatchObjectType,
		/// <summary>
		/// None of the fields have been specified.
		/// </summary>
		NoFieldsSpecified,
		/// <summary>
		/// One of reference Id or media Id must be specified
		/// </summary>
		NullReferenceIdAndMediaId,
		/// <summary>
		/// The string has too many characters.
		/// </summary>
		TooLong,
		/// <summary>
		/// The specified operation is not supported.  Only ADD, SET, and REMOVE
		/// are supported
		/// </summary>
		UnsupportedOperation,
		/// <summary>
		/// The specified type is not supported.
		/// </summary>
		UnsupportedType,
		/// <summary>
		/// YouTube is unavailable for requesting video data.
		/// </summary>
		YouTubeServiceUnavailable,
		/// <summary>
		/// The YouTube video has a non positive duration.
		/// </summary>
		YouTubeVideoHasNonPositiveDuration,
		/// <summary>
		/// The YouTube video id is syntactically valid but the video was not found.
		/// </summary>
		YouTubeVideoNotFound
	}
	/// <summary>
	/// Media types
	/// </summary>
	public enum MediaMediaType
	{
		/// <summary>
		/// Audio file.
		/// </summary>
		Audio,
		/// <summary>
		/// Animated image, such as animated GIF.
		/// </summary>
		DynamicImage,
		/// <summary>
		/// Small image; used for map ad.
		/// </summary>
		Icon,
		/// <summary>
		/// Static image; for image ad.
		/// </summary>
		Image,
		/// <summary>
		/// Predefined standard icon; used for map ads.
		/// </summary>
		StandardIcon,
		/// <summary>
		/// Video file.
		/// </summary>
		Video,
		/// <summary>
		/// ZIP file; used in fields of template ads.
		/// </summary>
		MediaBundle
	}
	/// <summary>
	/// Mime types
	/// </summary>
	public enum MediaMimeType
	{
		/// <summary>
		/// MIME type of image/jpeg
		/// </summary>
		ImageJpeg,
		/// <summary>
		/// MIME type of image/gif
		/// </summary>
		ImageGif,
		/// <summary>
		/// MIME type of image/png
		/// </summary>
		ImagePng,
		/// <summary>
		/// MIME type of application/x-shockwave-flash
		/// </summary>
		Flash,
		/// <summary>
		/// MIME type of text/html
		/// </summary>
		TextHtml,
		/// <summary>
		/// MIME type of application/pdf
		/// </summary>
		Pdf,
		/// <summary>
		/// MIME type of application/msword
		/// </summary>
		Msword,
		/// <summary>
		/// MIME type of application/vnd.ms-excel
		/// </summary>
		Msexcel,
		/// <summary>
		/// MIME type of application/rtf
		/// </summary>
		Rtf,
		/// <summary>
		/// MIME type of audio/wav
		/// </summary>
		AudioWav,
		/// <summary>
		/// MIME type of audio/mp3
		/// </summary>
		AudioMp3,
		/// <summary>
		/// MIME type of application/x-html5-ad-zip
		/// </summary>
		Html5AdZip
	}
	/// <summary>
	/// Page of media returned by the {@link MediaService} which includes
	/// the media.
	/// </summary>
	public class MediaPage : ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<Media> Entries { get; set; }
		/// <summary>
		/// Total number of entries in the result that this page is a part of.
		/// </summary>
		public int? TotalNumEntries { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Entries = null;
			TotalNumEntries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Media>();
					var entriesItem = new Media();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
				else if (localName == "totalNumEntries")
				{
					TotalNumEntries = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (TotalNumEntries != null)
			{
				xItem = new XElement(XName.Get("totalNumEntries", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalNumEntries.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Sizes for retrieving the original media
	/// </summary>
	public enum MediaSize
	{
		/// <summary>
		/// Full size of Media.
		/// </summary>
		Full,
		/// <summary>
		/// Shunken size of media.
		/// </summary>
		Shrunken,
		/// <summary>
		/// Preview size of media.
		/// </summary>
		Preview,
		/// <summary>
		/// Video thumbnail size of Media.
		/// </summary>
		VideoThumbnail
	}
	/// <summary>
	/// Minutes in an hour.  Currently only 0, 15, 30, and 45 are supported
	/// </summary>
	public enum MinuteOfHour
	{
		/// <summary>
		/// Zero minutes past hour.
		/// </summary>
		Zero,
		/// <summary>
		/// Fifteen minutes past hour.
		/// </summary>
		Fifteen,
		/// <summary>
		/// Thirty minutes past hour.
		/// </summary>
		Thirty,
		/// <summary>
		/// Forty-five minutes past hour.
		/// </summary>
		FortyFive
	}
	/// <summary>
	/// Represents the mobile app category to be targeted.
	/// <a href="/adwords/api/docs/appendix/mobileappcategories">View the complete list of
	/// available mobile app categories</a>.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class MobileAppCategory : Criterion, ISoapable
	{
		/// <summary>
		/// ID of this mobile app category. A complete list of the available mobile app categories is
		/// available <a href="/adwords/api/docs/appendix/mobileappcategories">here</a>.
		/// <span class="constraint Selectable">This field can be selected using the value "MobileAppCategoryId".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public int? MobileAppCategoryId { get; set; }
		/// <summary>
		/// Name of this mobile app category.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DisplayName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			MobileAppCategoryId = null;
			DisplayName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "mobileAppCategoryId")
				{
					MobileAppCategoryId = int.Parse(xItem.Value);
				}
				else if (localName == "displayName")
				{
					DisplayName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MobileAppCategory");
			XElement xItem = null;
			if (MobileAppCategoryId != null)
			{
				xItem = new XElement(XName.Get("mobileAppCategoryId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MobileAppCategoryId.Value.ToString());
				xE.Add(xItem);
			}
			if (DisplayName != null)
			{
				xItem = new XElement(XName.Get("displayName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisplayName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents the mobile application to be targeted.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class MobileApplication : Criterion, ISoapable
	{
		/// <summary>
		/// A string that uniquely identifies a mobile application to AdWords API. The format of this
		/// string is "<code>{platform}-{platform_native_id}</code>", where <code>platform</code> is "1"
		/// for iOS apps and "2" for Android apps, and where <code>platform_native_id</code> is the mobile
		/// application identifier native to the corresponding platform.
		/// For iOS, this native identifier is the 9 digit string that appears at the end of an App Store
		/// URL (e.g., "476943146" for "Flood-It! 2" whose App Store link is
		/// http://itunes.apple.com/us/app/flood-it!-2/id476943146).
		/// For Android, this native identifier is the application's package name (e.g.,
		/// "com.labpixies.colordrips" for "Color Drips" given Google Play link
		/// https://play.google.com/store/apps/details?id=com.labpixies.colordrips).
		/// A well formed app id for AdWords API would thus be "1-476943146" for iOS and
		/// "2-com.labpixies.colordrips" for Android.
		/// <span class="constraint Selectable">This field can be selected using the value "AppId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string AppId { get; set; }
		/// <summary>
		/// Title of this mobile application.
		/// <span class="constraint Selectable">This field can be selected using the value "DisplayName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DisplayName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AppId = null;
			DisplayName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appId")
				{
					AppId = xItem.Value;
				}
				else if (localName == "displayName")
				{
					DisplayName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MobileApplication");
			XElement xItem = null;
			if (AppId != null)
			{
				xItem = new XElement(XName.Get("appId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppId);
				xE.Add(xItem);
			}
			if (DisplayName != null)
			{
				xItem = new XElement(XName.Get("displayName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisplayName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a Mobile Device Criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class MobileDevice : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DeviceName { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string ManufacturerName { get; set; }
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public MobileDeviceDeviceType? DeviceType { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "OperatingSystemName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string OperatingSystemName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DeviceName = null;
			ManufacturerName = null;
			DeviceType = null;
			OperatingSystemName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "deviceName")
				{
					DeviceName = xItem.Value;
				}
				else if (localName == "manufacturerName")
				{
					ManufacturerName = xItem.Value;
				}
				else if (localName == "deviceType")
				{
					DeviceType = MobileDeviceDeviceTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "operatingSystemName")
				{
					OperatingSystemName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MobileDevice");
			XElement xItem = null;
			if (DeviceName != null)
			{
				xItem = new XElement(XName.Get("deviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeviceName);
				xE.Add(xItem);
			}
			if (ManufacturerName != null)
			{
				xItem = new XElement(XName.Get("manufacturerName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ManufacturerName);
				xE.Add(xItem);
			}
			if (DeviceType != null)
			{
				xItem = new XElement(XName.Get("deviceType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeviceType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (OperatingSystemName != null)
			{
				xItem = new XElement(XName.Get("operatingSystemName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperatingSystemName);
				xE.Add(xItem);
			}
		}
	}
	public enum MobileDeviceDeviceType
	{
		DeviceTypeMobile,
		DeviceTypeTablet
	}
	/// <summary>
	/// Represents a money amount.
	/// </summary>
	public class Money : ComparableValue, ISoapable
	{
		/// <summary>
		/// Amount in micros. One million is equivalent to one unit.
		/// </summary>
		public long? MicroAmount { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			MicroAmount = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "microAmount")
				{
					MicroAmount = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Money");
			XElement xItem = null;
			if (MicroAmount != null)
			{
				xItem = new XElement(XName.Get("microAmount", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MicroAmount.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a {@link Money} value.
	/// </summary>
	public class MoneyAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// {@link Money} value contained by this {@link Attribute}.
		/// </summary>
		public Money Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new Money();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "MoneyAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a money amount with currency.
	/// </summary>
	public class MoneyWithCurrency : ComparableValue, ISoapable
	{
		/// <summary>
		/// The amount of money.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money Money { get; set; }
		/// <summary>
		/// Currency code.
		/// <span class="constraint StringLength">The length of this string should be between 3 and 3, inclusive, (trimmed).</span>
		/// </summary>
		public string CurrencyCode { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Money = null;
			CurrencyCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "money")
				{
					Money = new Money();
					Money.ReadFrom(xItem);
				}
				else if (localName == "currencyCode")
				{
					CurrencyCode = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MoneyWithCurrency");
			XElement xItem = null;
			if (Money != null)
			{
				xItem = new XElement(XName.Get("money", "https://adwords.google.com/api/adwords/cm/v201609"));
				Money.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CurrencyCode != null)
			{
				xItem = new XElement(XName.Get("currencyCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CurrencyCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A keyword response value representing search volume for a single month. An
	/// instance with a {@code null} count is valid, indicating that the information
	/// is unavailable.
	/// </summary>
	public class MonthlySearchVolume : ISoapable
	{
		/// <summary>
		/// The year this search volume occurred in. (i.e. 2009)
		/// </summary>
		public int? Year { get; set; }
		/// <summary>
		/// The month this search volume occurred in. Month is 1 indexed,
		/// such that 1=January and 12=December.
		/// </summary>
		public int? Month { get; set; }
		/// <summary>
		/// The approximate number of searches in this year/month. A {@code null} count
		/// means that data is unavailable or unknown.
		/// </summary>
		public long? Count { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Year = null;
			Month = null;
			Count = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "year")
				{
					Year = int.Parse(xItem.Value);
				}
				else if (localName == "month")
				{
					Month = int.Parse(xItem.Value);
				}
				else if (localName == "count")
				{
					Count = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Year != null)
			{
				xItem = new XElement(XName.Get("year", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Year.Value.ToString());
				xE.Add(xItem);
			}
			if (Month != null)
			{
				xItem = new XElement(XName.Get("month", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Month.Value.ToString());
				xE.Add(xItem);
			}
			if (Count != null)
			{
				xItem = new XElement(XName.Get("count", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Count.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a list of {@link MonthlySearchVolume}
	/// values. The list contains the past 12 {@link MonthlySearchVolume}s
	/// (excluding the current month). The first item is the data for the most
	/// recent month and the last item is the data for the oldest month.
	/// </summary>
	public class MonthlySearchVolumeAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// List of {@link MonthlySearchVolume} values contained by this
		/// {@link Attribute}. The list contains the data for the past 12 months
		/// (excluding the current month) in sorted order started with the most recent
		/// month.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<MonthlySearchVolume> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<MonthlySearchVolume>();
					var valueItem = new MonthlySearchVolume();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "MonthlySearchVolumeAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Operation for moving ManagedCustomer links. See {@link ManagedCustomerService#mutateManager}.
	/// </summary>
	public class MoveOperation : Operation, ISoapable
	{
		public ManagedCustomerLink Operand { get; set; }
		/// <summary>
		/// The ID of the old Manager.
		/// </summary>
		public long? OldManagerCustomerId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			OldManagerCustomerId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new ManagedCustomerLink();
					Operand.ReadFrom(xItem);
				}
				else if (localName == "oldManagerCustomerId")
				{
					OldManagerCustomerId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "MoveOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (OldManagerCustomerId != null)
			{
				xItem = new XElement(XName.Get("oldManagerCustomerId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(OldManagerCustomerId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents errors in bid multipliers.
	/// </summary>
	public class MultiplierError : ApiError, ISoapable
	{
		public MultiplierErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = MultiplierErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "MultiplierError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Reason for bidding error.
	/// </summary>
	public enum MultiplierErrorReason
	{
		/// <summary>
		/// Multiplier value is too high
		/// </summary>
		MultiplierTooHigh,
		/// <summary>
		/// Multiplier value is too low
		/// </summary>
		MultiplierTooLow,
		/// <summary>
		/// Too many fractional digits
		/// </summary>
		TooManyFractionalDigits,
		/// <summary>
		/// A multiplier cannot be set for this bidding strategy
		/// </summary>
		MultiplierNotAllowedForBiddingStrategy,
		/// <summary>
		/// A multiplier cannot be set when there is no base bid (e.g., content max cpc)
		/// </summary>
		MultiplierNotAllowedWhenBaseBidIsMissing,
		/// <summary>
		/// A bid multiplier must be specified
		/// </summary>
		NoMultiplierSpecified,
		/// <summary>
		/// Multiplier causes bid to exceed daily budget
		/// </summary>
		MultiplierCausesBidToExceedDailyBudget,
		/// <summary>
		/// Multiplier causes bid to exceed monthly budget
		/// </summary>
		MultiplierCausesBidToExceedMonthlyBudget,
		/// <summary>
		/// Multiplier causes bid to exceed custom budget
		/// </summary>
		MultiplierCausesBidToExceedCustomBudget,
		/// <summary>
		/// Multiplier causes bid to exceed maximum allowed bid
		/// </summary>
		MultiplierCausesBidToExceedMaxAllowedBid,
		/// <summary>
		/// Multiplier causes bid to become less than the minimum bid allowed
		/// </summary>
		BidLessThanMinAllowedBidWithMultiplier,
		/// <summary>
		/// Multiplier type (cpc vs. cpm) needs to match campaign's bidding strategy
		/// </summary>
		MultiplierAndBiddingStrategyTypeMismatch,
		MultiplierError
	}
	/// <summary>
	/// Results of a {@link ManagedCustomerService#mutateLink} call which changes
	/// manager/client links.
	/// </summary>
	public class MutateLinkResults : ISoapable
	{
		/// <summary>
		/// Links that were changed as a result of this call.
		/// </summary>
		public List<ManagedCustomerLink> Links { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Links = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "links")
				{
					if (Links == null) Links = new List<ManagedCustomerLink>();
					var linksItem = new ManagedCustomerLink();
					linksItem.ReadFrom(xItem);
					Links.Add(linksItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Links != null)
			{
				foreach (var linksItem in Links)
				{
					xItem = new XElement(XName.Get("links", "https://adwords.google.com/api/adwords/mcm/v201609"));
					linksItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Results of a {@link ManagedCustomerService#mutateManager} call, which moves client customers to
	/// new managers.
	/// </summary>
	public class MutateManagerResults : ISoapable
	{
		/// <summary>
		/// The links that were changed as a result of this call.
		/// </summary>
		public List<ManagedCustomerLink> Links { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Links = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "links")
				{
					if (Links == null) Links = new List<ManagedCustomerLink>();
					var linksItem = new ManagedCustomerLink();
					linksItem.ReadFrom(xItem);
					Links.Add(linksItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Links != null)
			{
				foreach (var linksItem in Links)
				{
					xItem = new XElement(XName.Get("links", "https://adwords.google.com/api/adwords/mcm/v201609"));
					linksItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents possible error codes from {@code UserListService#mutateMembers}.
	/// </summary>
	public class MutateMembersError : ApiError, ISoapable
	{
		public MutateMembersErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = MutateMembersErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "MutateMembersError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Reasons
	/// </summary>
	public enum MutateMembersErrorReason
	{
		Unknown,
		UnsupportedMethod,
		InvalidUserListId,
		InvalidUserListType,
		InvalidDataType,
		InvalidSha256Format,
		OperatorConflictForSameUserListId,
		InvalidRemoveallOperation,
		InvalidOperationOrder
	}
	/// <summary>
	/// Operand containing user list id and members to be added or removed.
	/// </summary>
	public class MutateMembersOperand : ISoapable
	{
		/// <summary>
		/// The id of the user list.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? UserListId { get; set; }
		/// <summary>
		/// The data type indicating the type of member data entity in
		/// {@code members} list. If it's not specified, it'll default to
		/// {@link DataType#EMAIL_SHA256}.
		/// </summary>
		public MutateMembersOperandDataType? DataType { get; set; }
		/// <summary>
		/// Set to indicate a purge operation which will remove all members from the user list.
		/// Can only be set with {@code Operator#REMOVE} and
		/// when set to true {@link #members} must be null or empty.
		/// </summary>
		public bool? RemoveAll { get; set; }
		/// <summary>
		/// A list of members to be added or removed.
		///
		/// <p>If {@link #removeAll} is {@code true}, this list must be {@code null} or empty. Otherwise,
		/// this field is required and there must be at least one member.
		///
		/// <p>Each element in members list should be in format according to the specified
		/// {@code dataType}.
		/// <span class="constraint CollectionSize">The maximum size of this collection is 1000000.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<string> Members { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			UserListId = null;
			DataType = null;
			RemoveAll = null;
			Members = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userListId")
				{
					UserListId = long.Parse(xItem.Value);
				}
				else if (localName == "dataType")
				{
					DataType = MutateMembersOperandDataTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "removeAll")
				{
					RemoveAll = bool.Parse(xItem.Value);
				}
				else if (localName == "members")
				{
					if (Members == null) Members = new List<string>();
					Members.Add(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (UserListId != null)
			{
				xItem = new XElement(XName.Get("userListId", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(UserListId.Value.ToString());
				xE.Add(xItem);
			}
			if (DataType != null)
			{
				xItem = new XElement(XName.Get("dataType", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(DataType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RemoveAll != null)
			{
				xItem = new XElement(XName.Get("removeAll", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(RemoveAll.Value.ToString());
				xE.Add(xItem);
			}
			if (Members != null)
			{
				foreach (var membersItem in Members)
				{
					xItem = new XElement(XName.Get("members", "https://adwords.google.com/api/adwords/rm/v201609"));
					xItem.Add(membersItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents the different type of the member data entity.
	/// </summary>
	public enum MutateMembersOperandDataType
	{
		/// <summary>
		/// Indicates each member is a hashed email address using SHA-256
		/// hash function.
		/// </summary>
		EmailSha256
	}
	/// <summary>
	/// Operation representing a request to add or remove members from a user list.
	/// </summary>
	public class MutateMembersOperation : Operation, ISoapable
	{
		/// <summary>
		/// The mutate members operand to operate on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public MutateMembersOperand Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new MutateMembersOperand();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "MutateMembersOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/rm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return value from {@code UserListService#mutateMembers}
	/// method.
	/// </summary>
	public class MutateMembersReturnValue : ISoapable
	{
		/// <summary>
		/// The user lists associated in mutate members operations.
		/// </summary>
		public List<UserList> UserLists { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			UserLists = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userLists")
				{
					if (UserLists == null) UserLists = new List<UserList>();
					var userListsItem = new UserList();
					userListsItem.ReadFrom(xItem);
					UserLists.Add(userListsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (UserLists != null)
			{
				foreach (var userListsItem in UserLists)
				{
					xItem = new XElement(XName.Get("userLists", "https://adwords.google.com/api/adwords/rm/v201609"));
					userListsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A negative criterion in an adgroup.
	/// </summary>
	public class NegativeAdGroupCriterion : AdGroupCriterion, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NegativeAdGroupCriterion");
		}
	}
	/// <summary>
	/// A negative campaign criterion.
	/// </summary>
	public class NegativeCampaignCriterion : CampaignCriterion, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NegativeCampaignCriterion");
		}
	}
	/// <summary>
	/// <p>A {@link SearchParameter} for setting the search network. Currently we
	/// support two network setting options:
	/// <ul>
	/// <li>Google search network</li>
	/// <li>Google search network and AFS</li>
	/// </ul>
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class NetworkSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// The network targeted for this search.
		///
		/// <p>Currently we can support two options:
		/// <ul>
		/// <li>number of google search impressions</li>
		/// <li>number of search impressions on the google search network(AFS)</li>
		/// </ul>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public NetworkSetting NetworkSetting { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			NetworkSetting = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "networkSetting")
				{
					NetworkSetting = new NetworkSetting();
					NetworkSetting.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "NetworkSearchParameter");
			XElement xItem = null;
			if (NetworkSetting != null)
			{
				xItem = new XElement(XName.Get("networkSetting", "https://adwords.google.com/api/adwords/o/v201609"));
				NetworkSetting.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Network settings for a Campaign.
	/// </summary>
	public class NetworkSetting : ISoapable
	{
		/// <summary>
		/// Ads will be served with Google.com search results.
		/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
		/// <span class="constraint CampaignType">This field may only be set to true for campaign channel type SEARCH.</span>
		/// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint CampaignType">This field may only be set to false for campaign channel type DISPLAY.</span>
		/// </summary>
		public bool? TargetGoogleSearch { get; set; }
		/// <summary>
		/// Ads will be served on partner sites in the Google Search Network
		/// (requires {@code GOOGLE_SEARCH}).
		/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
		/// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public bool? TargetSearchNetwork { get; set; }
		/// <summary>
		/// Ads will be served on specified placements in the Google Display Network.
		/// Placements are specified using {@code Placement} criteria.
		/// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// <span class="constraint CampaignType">This field may only be set to false for campaign channel subtype SEARCH_MOBILE_APP.</span>
		/// </summary>
		public bool? TargetContentNetwork { get; set; }
		/// <summary>
		/// Ads will be served on the Google Partner Network. This is available to
		/// only some specific Google partner accounts.
		/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
		/// <span class="constraint CampaignType">This field may only be set to false for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
		/// </summary>
		public bool? TargetPartnerSearchNetwork { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TargetGoogleSearch = null;
			TargetSearchNetwork = null;
			TargetContentNetwork = null;
			TargetPartnerSearchNetwork = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "targetGoogleSearch")
				{
					TargetGoogleSearch = bool.Parse(xItem.Value);
				}
				else if (localName == "targetSearchNetwork")
				{
					TargetSearchNetwork = bool.Parse(xItem.Value);
				}
				else if (localName == "targetContentNetwork")
				{
					TargetContentNetwork = bool.Parse(xItem.Value);
				}
				else if (localName == "targetPartnerSearchNetwork")
				{
					TargetPartnerSearchNetwork = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TargetGoogleSearch != null)
			{
				xItem = new XElement(XName.Get("targetGoogleSearch", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetGoogleSearch.Value.ToString());
				xE.Add(xItem);
			}
			if (TargetSearchNetwork != null)
			{
				xItem = new XElement(XName.Get("targetSearchNetwork", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetSearchNetwork.Value.ToString());
				xE.Add(xItem);
			}
			if (TargetContentNetwork != null)
			{
				xItem = new XElement(XName.Get("targetContentNetwork", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetContentNetwork.Value.ToString());
				xE.Add(xItem);
			}
			if (TargetPartnerSearchNetwork != null)
			{
				xItem = new XElement(XName.Get("targetPartnerSearchNetwork", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetPartnerSearchNetwork.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error associated with creation of new entities.
	/// </summary>
	public class NewEntityCreationError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public NewEntityCreationErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = NewEntityCreationErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NewEntityCreationError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum NewEntityCreationErrorReason
	{
		/// <summary>
		/// Do not set the id field while creating new entities.
		/// </summary>
		CannotSetIdForAdd,
		/// <summary>
		/// Creating more than one entity with the same temp ID is not allowed.
		/// </summary>
		DuplicateTempIds,
		/// <summary>
		/// Parent object with specified temp id failed validation, so no deep
		/// validation will be done for this child entity.
		/// </summary>
		TempIdEntityHadErrors
	}
	public abstract class NoStatsPage : Page, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NoStatsPage");
		}
	}
	/// <summary>
	/// Errors corresponding with violation of a NOT EMPTY check.
	/// </summary>
	public class NotEmptyError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public NotEmptyErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = NotEmptyErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NotEmptyError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the validation error.
	/// </summary>
	public enum NotEmptyErrorReason
	{
		EmptyList
	}
	/// <summary>
	/// Indicates that the customer is not whitelisted for accessing the API.
	/// </summary>
	public class NotWhitelistedError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public NotWhitelistedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = NotWhitelistedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NotWhitelistedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The single reason for the whitelist error.
	/// </summary>
	public enum NotWhitelistedErrorReason
	{
		/// <summary>
		/// Customer is not whitelisted for accessing the API.
		/// </summary>
		CustomerNotWhitelistedForApi
	}
	/// <summary>
	/// Errors associated with violation of a NOT NULL check.
	/// </summary>
	public class NullError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public NullErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = NullErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NullError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the validation error.
	/// </summary>
	public enum NullErrorReason
	{
		/// <summary>
		/// Specified list/container must not contain any null elements
		/// </summary>
		NullContent
	}
	public abstract class NullStatsPage : Page, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NullStatsPage");
		}
	}
	/// <summary>
	/// A custom parameter of type number.
	/// </summary>
	public class NumberKey : ISoapable
	{
		/// <summary>
		/// <span class="constraint MatchesRegex">A name must begin with US-ascii letters or underscore or UTF8 code that is greater than 127 and consist of US-ascii letters or digits or underscore or UTF8 code that is greater than 127. This is checked by the regular expression '^[a-zA-Z_?-?][a-zA-Z0-9_?-?]*$'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An atomic rule fragment composing of number operation.
	/// </summary>
	public class NumberRuleItem : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public NumberKey Key { get; set; }
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public NumberRuleItemNumberOperator? Op { get; set; }
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public double? Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Op = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = new NumberKey();
					Key.ReadFrom(xItem);
				}
				else if (localName == "op")
				{
					Op = NumberRuleItemNumberOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = double.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/rm/v201609"));
				Key.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Op != null)
			{
				xItem = new XElement(XName.Get("op", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Op.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Supported operator for numbers.
	/// </summary>
	public enum NumberRuleItemNumberOperator
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		GreaterThan,
		GreaterThanOrEqual,
		Equals,
		NotEqual,
		LessThan,
		LessThanOrEqual
	}
	/// <summary>
	/// Number value types for constructing number valued ranges.
	/// </summary>
	public abstract class NumberValue : ComparableValue, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "NumberValue");
		}
	}
	/// <summary>
	/// Data used for authorization using OAuth.
	/// For more information about OAuth, see:
	/// {@link "https://developers.google.com/accounts/docs/OAuth2"}
	/// </summary>
	public class OAuthInfo : ISoapable
	{
		/// <summary>
		/// The HTTP method used to obtain authorization.
		/// </summary>
		public string HttpMethod { get; set; }
		/// <summary>
		/// The HTTP request URL used to obtain authorization.
		/// </summary>
		public string HttpRequestUrl { get; set; }
		/// <summary>
		/// The HTTP authorization header used to obtain authorization.
		/// </summary>
		public string HttpAuthorizationHeader { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			HttpMethod = null;
			HttpRequestUrl = null;
			HttpAuthorizationHeader = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "httpMethod")
				{
					HttpMethod = xItem.Value;
				}
				else if (localName == "httpRequestUrl")
				{
					HttpRequestUrl = xItem.Value;
				}
				else if (localName == "httpAuthorizationHeader")
				{
					HttpAuthorizationHeader = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (HttpMethod != null)
			{
				xItem = new XElement(XName.Get("httpMethod", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HttpMethod);
				xE.Add(xItem);
			}
			if (HttpRequestUrl != null)
			{
				xItem = new XElement(XName.Get("httpRequestUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HttpRequestUrl);
				xE.Add(xItem);
			}
			if (HttpAuthorizationHeader != null)
			{
				xItem = new XElement(XName.Get("httpAuthorizationHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(HttpAuthorizationHeader);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors that the {@link OfflineCallConversionFeedService} can throw.
	/// </summary>
	public class OfflineCallConversionError : ApiError, ISoapable
	{
		public OfflineCallConversionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = OfflineCallConversionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineCallConversionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for an OfflineCallConversionError.
	/// </summary>
	public enum OfflineCallConversionErrorReason
	{
		/// <summary>
		/// The conversion time cannot precede the call time.
		/// </summary>
		ConversionPrecedesCall,
		/// <summary>
		/// You cannot set a future call start time.
		/// </summary>
		FutureCallStartTime,
		/// <summary>
		/// You cannot set a future conversion time.
		/// </summary>
		FutureConversionTime,
		/// <summary>
		/// The click that initiated the call is too old for this conversion to be imported.
		/// </summary>
		ExpiredCall,
		/// <summary>
		/// We are still processing this call's information, please re-upload this conversion in 4-6
		/// hours.
		/// </summary>
		TooRecentCall,
		/// <summary>
		/// The caller?s phone number cannot be parsed. Please re-upload in one of the supported formats.
		/// It should be formatted either as E.164 "+16502531234", International "+64 3-331 6005" or as
		/// a US national number ?6502531234?.
		/// </summary>
		UnparseableCallersPhoneNumber,
		/// <summary>
		/// We are unable to import a conversion for this call, since either this call or the click
		/// leading to the call was not found in our system.
		/// </summary>
		InvalidCall,
		/// <summary>
		/// This call belongs to an account that you are not authorized to access.
		/// </summary>
		UnauthorizedUser,
		/// <summary>
		/// We cannot find an import conversion type with this name in the target account.
		/// </summary>
		InvalidConversionType,
		/// <summary>
		/// This conversion action was created too recently. Please wait for 4 hours and try uploading
		/// again.
		/// </summary>
		TooRecentConversionType,
		/// <summary>
		/// Unable to upload. No AdWords call import conversion types were defined when this call
		/// occurred. Please make sure you create at least one such conversion type before uploading.
		/// </summary>
		ConversionTrackingNotEnabledAtCallTime,
		/// <summary>
		/// We can't count calls from ads made by computer or tablet users as conversions.
		/// </summary>
		DesktopCallNotSupported,
		/// <summary>
		/// An internal server error occurred, please try again.
		/// </summary>
		InternalError,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents an entire record in the offline call conversions feed that the advertiser uploads.
	/// </summary>
	public class OfflineCallConversionFeed : ISoapable
	{
		/// <summary>
		/// The caller id from which this call was placed.
		///
		/// <p>Caller ids in E.164 format with preceding '+' sign. (e.g., "+16502531234", +443308182000),
		/// National numbers which are treated as US numbers in formats like "6502531234",
		/// and International Numbers with accompanying country code and preceding '+' like +64 3-331 6005
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 30, inclusive, (trimmed).</span>
		/// </summary>
		public string CallerId { get; set; }
		/// <summary>
		/// The time at which this call started.
		/// <p> A time in the future is not allowed. A timezone is always required.
		///
		/// <p> When a conversion for the same caller id, conversion name
		/// and conversion time is uploaded multiple times, the first one
		/// results in a conversion being recorded. The duplicates are
		/// ignored and reported as successes, to indicate that a conversion
		/// for this combination has been recorded.
		///
		/// <p>String Format: yyyyMMdd HHmmss <Timezone ID> (for example, 20100609 150223
		/// America/New_York). See the <a
		/// href="https://developers.google.com/adwords/api/docs/appendix/timezones">Timezones</a> page for
		/// the complete list of Timezone IDs.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string CallStartTime { get; set; }
		/// <summary>
		/// The type associated with this conversion.
		/// <p>It is valid to report multiple conversions for the same call
		/// since visitors may trigger multiple conversions for a
		/// call. These conversions names are generated in the front end by
		/// advertisers.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 100, inclusive, (trimmed).</span>
		/// </summary>
		public string ConversionName { get; set; }
		/// <summary>
		/// The time that this conversion occurred at.
		/// <p>This has to be after the call time. A time in the future is not allowed.
		/// A timezone is always required.
		///
		/// <p>When a conversion for the same caller id, conversion name
		/// and conversion time is uploaded multiple times, the first one
		/// results in a conversion being recorded. The duplicates are
		/// ignored and reported as successes, to indicate that a conversion
		/// for this combination has been recorded.
		///
		/// <p>String Format: yyyyMMdd HHmmss <Timezone ID> (for example, 20100609 150223
		/// America/New_York). See the <a
		/// href="https://developers.google.com/adwords/api/docs/appendix/timezones">Timezones</a> page for
		/// the complete list of Timezone IDs.
		/// </summary>
		public string ConversionTime { get; set; }
		/// <summary>
		/// This conversions value for the advertiser.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public double? ConversionValue { get; set; }
		/// <summary>
		/// The currency that the advertiser associates with the conversion value. This is the ISO 4217
		/// 3-character currency code. For example: USD, EUR.
		/// <span class="constraint StringLength">The length of this string should be between 3 and 3, inclusive, (trimmed).</span>
		/// </summary>
		public string ConversionCurrencyCode { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CallerId = null;
			CallStartTime = null;
			ConversionName = null;
			ConversionTime = null;
			ConversionValue = null;
			ConversionCurrencyCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "callerId")
				{
					CallerId = xItem.Value;
				}
				else if (localName == "callStartTime")
				{
					CallStartTime = xItem.Value;
				}
				else if (localName == "conversionName")
				{
					ConversionName = xItem.Value;
				}
				else if (localName == "conversionTime")
				{
					ConversionTime = xItem.Value;
				}
				else if (localName == "conversionValue")
				{
					ConversionValue = double.Parse(xItem.Value);
				}
				else if (localName == "conversionCurrencyCode")
				{
					ConversionCurrencyCode = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CallerId != null)
			{
				xItem = new XElement(XName.Get("callerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallerId);
				xE.Add(xItem);
			}
			if (CallStartTime != null)
			{
				xItem = new XElement(XName.Get("callStartTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CallStartTime);
				xE.Add(xItem);
			}
			if (ConversionName != null)
			{
				xItem = new XElement(XName.Get("conversionName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionName);
				xE.Add(xItem);
			}
			if (ConversionTime != null)
			{
				xItem = new XElement(XName.Get("conversionTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTime);
				xE.Add(xItem);
			}
			if (ConversionValue != null)
			{
				xItem = new XElement(XName.Get("conversionValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionValue.Value.ToString());
				xE.Add(xItem);
			}
			if (ConversionCurrencyCode != null)
			{
				xItem = new XElement(XName.Get("conversionCurrencyCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionCurrencyCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation for uploading {@link OfflineCallConversionFeed}.
	/// </summary>
	public class OfflineCallConversionFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public OfflineCallConversionFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new OfflineCallConversionFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineCallConversionFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the OfflineCallConversionFeedService.
	/// </summary>
	public class OfflineCallConversionFeedReturnValue : ListReturnValue, ISoapable
	{
		public List<OfflineCallConversionFeed> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<OfflineCallConversionFeed>();
					var valueItem = new OfflineCallConversionFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineCallConversionFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Errors that the {@link OfflineConversionFeedService} can throw.
	/// </summary>
	public class OfflineConversionError : ApiError, ISoapable
	{
		public OfflineConversionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = OfflineConversionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineConversionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for an OfflineConversionError.
	/// </summary>
	public enum OfflineConversionErrorReason
	{
		/// <summary>
		/// This google click ID could not be decoded.
		/// </summary>
		UnparseableGclid,
		/// <summary>
		/// This conversion is reported to have happened before the click.
		/// </summary>
		ConversionPrecedesClick,
		/// <summary>
		/// You cannot set a future conversion time.
		/// </summary>
		FutureConversionTime,
		/// <summary>
		/// This click is either too old to be imported or occurred before the conversion window for the
		/// specified combination of conversion date and conversion name (default is 90 days).
		/// </summary>
		ExpiredClick,
		/// <summary>
		/// This click occurred less than 24 hours ago, please try again after a day or so.
		/// </summary>
		TooRecentClick,
		/// <summary>
		/// This click does not exist in the system. This can occur if google click ids are collected
		/// for non AdWords clicks (e.g. dart search).
		/// </summary>
		InvalidClick,
		/// <summary>
		/// This customer is trying to upload conversions for a different customer that it does not
		/// manage.
		/// </summary>
		UnauthorizedUser,
		/// <summary>
		/// This customer does not have an import conversion with a name that matches the label
		/// of this conversion.
		/// </summary>
		InvalidConversionType,
		/// <summary>
		/// This conversion action was created too recently. Please wait for 4 hours and try uploading
		/// again.
		/// </summary>
		TooRecentConversionType,
		/// <summary>
		/// Cannot process clicks that occurred when none of the effective conversion types in the
		/// account were enabled, to generate conversions.
		/// </summary>
		ClickMissingConversionLabel,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents an entire record in the offline conversions feed that the advertiser uploads.
	/// </summary>
	public class OfflineConversionFeed : ISoapable
	{
		/// <summary>
		/// The google click ID associated with this conversion, as captured from the landing page.
		/// <p>
		/// If your account has auto-tagging turned on, the google click ID can be obtained from a query
		/// parameter called 'gclid'.
		/// <span class="constraint Selectable">This field can be selected using the value "GoogleClickId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 512, inclusive, (trimmed).</span>
		/// </summary>
		public string GoogleClickId { get; set; }
		/// <summary>
		/// The type associated with this conversion.
		/// <p>
		/// It is valid to report multiple conversions for the same google
		/// click ID, since visitors may trigger multiple conversions for a
		/// click. These conversions names are generated in the front end by
		/// advertisers.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 100, inclusive, (trimmed).</span>
		/// </summary>
		public string ConversionName { get; set; }
		/// <summary>
		/// The time that this conversion occurred at.
		/// <p>
		/// This has to be after the click time. A time in the future is not allowed.
		/// A timezone is always required.
		/// <p>
		/// When a conversion for the same google click ID, conversion name
		/// and conversion time is uploaded multiple times, the first one
		/// results in a conversion being recorded. The duplicates are
		/// ignored and reported as successes, to indicate that a conversion
		/// for this combination has been recorded.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionTime".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string ConversionTime { get; set; }
		/// <summary>
		/// This conversions value for the advertiser.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionValue".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public double? ConversionValue { get; set; }
		/// <summary>
		/// The currency that the advertiser associates with the conversion value. This is the ISO 4217
		/// 3-character currency code. For example: USD, EUR.
		/// <span class="constraint Selectable">This field can be selected using the value "ConversionCurrencyCode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint StringLength">The length of this string should be between 3 and 3, inclusive, (trimmed).</span>
		/// </summary>
		public string ConversionCurrencyCode { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			GoogleClickId = null;
			ConversionName = null;
			ConversionTime = null;
			ConversionValue = null;
			ConversionCurrencyCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "googleClickId")
				{
					GoogleClickId = xItem.Value;
				}
				else if (localName == "conversionName")
				{
					ConversionName = xItem.Value;
				}
				else if (localName == "conversionTime")
				{
					ConversionTime = xItem.Value;
				}
				else if (localName == "conversionValue")
				{
					ConversionValue = double.Parse(xItem.Value);
				}
				else if (localName == "conversionCurrencyCode")
				{
					ConversionCurrencyCode = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (GoogleClickId != null)
			{
				xItem = new XElement(XName.Get("googleClickId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(GoogleClickId);
				xE.Add(xItem);
			}
			if (ConversionName != null)
			{
				xItem = new XElement(XName.Get("conversionName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionName);
				xE.Add(xItem);
			}
			if (ConversionTime != null)
			{
				xItem = new XElement(XName.Get("conversionTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionTime);
				xE.Add(xItem);
			}
			if (ConversionValue != null)
			{
				xItem = new XElement(XName.Get("conversionValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionValue.Value.ToString());
				xE.Add(xItem);
			}
			if (ConversionCurrencyCode != null)
			{
				xItem = new XElement(XName.Get("conversionCurrencyCode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ConversionCurrencyCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation for uploading {@link OfflineConversionFeed}.
	/// See {@link OfflineConversionFeedService#mutate}
	/// </summary>
	public class OfflineConversionFeedOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public OfflineConversionFeed Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new OfflineConversionFeed();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineConversionFeedOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A container for return values from the OfflineConversionFeedService.
	/// </summary>
	public class OfflineConversionFeedReturnValue : ListReturnValue, ISoapable
	{
		public List<OfflineConversionFeed> Value { get; set; }
		/// <summary>
		/// List of partial failure errors.
		/// </summary>
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<OfflineConversionFeed>();
					var valueItem = new OfflineConversionFeed();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OfflineConversionFeedReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents an Operating System Version Criterion.
	/// <a href="/adwords/api/docs/appendix/mobileplatforms">View the complete
	/// list of available mobile platforms</a>. You can also get the list from
	/// {@link ConstantDataService#getOperatingSystemVersionCriterion ConstantDataService}.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class OperatingSystemVersion : Criterion, ISoapable
	{
		/// <summary>
		/// The name of the operating system.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The OS Major Version number.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? OsMajorVersion { get; set; }
		/// <summary>
		/// The OS Minor Version number.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? OsMinorVersion { get; set; }
		/// <summary>
		/// The operator type.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public OperatingSystemVersionOperatorType? OperatorType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Name = null;
			OsMajorVersion = null;
			OsMinorVersion = null;
			OperatorType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "osMajorVersion")
				{
					OsMajorVersion = int.Parse(xItem.Value);
				}
				else if (localName == "osMinorVersion")
				{
					OsMinorVersion = int.Parse(xItem.Value);
				}
				else if (localName == "operatorType")
				{
					OperatorType = OperatingSystemVersionOperatorTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OperatingSystemVersion");
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (OsMajorVersion != null)
			{
				xItem = new XElement(XName.Get("osMajorVersion", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OsMajorVersion.Value.ToString());
				xE.Add(xItem);
			}
			if (OsMinorVersion != null)
			{
				xItem = new XElement(XName.Get("osMinorVersion", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OsMinorVersion.Value.ToString());
				xE.Add(xItem);
			}
			if (OperatorType != null)
			{
				xItem = new XElement(XName.Get("operatorType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperatorType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The operator type.
	/// </summary>
	public enum OperatingSystemVersionOperatorType
	{
		GreaterThanEqualTo,
		EqualTo,
		Unknown
	}
	/// <summary>
	/// This represents an operation that includes an operator and an operand
	/// specified type.
	/// </summary>
	public abstract class Operation : ISoapable
	{
		/// <summary>
		/// Operator.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Operator? Operator { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Operation.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string OperationType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operator = null;
			OperationType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operator")
				{
					Operator = OperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "Operation.Type")
				{
					OperationType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operator != null)
			{
				xItem = new XElement(XName.Get("operator", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operator.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (OperationType != null)
			{
				xItem = new XElement(XName.Get("Operation.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OperationType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operation not permitted due to the invoked service's access policy.
	/// </summary>
	public class OperationAccessDenied : ApiError, ISoapable
	{
		public OperationAccessDeniedReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = OperationAccessDeniedReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OperationAccessDenied");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the operation access error.
	/// </summary>
	public enum OperationAccessDeniedReason
	{
		/// <summary>
		/// Unauthorized invocation of a service's method (get, mutate, etc.)
		/// </summary>
		ActionNotPermitted,
		/// <summary>
		/// Unauthorized ADD operation in invoking a service's mutate method.
		/// </summary>
		AddOperationNotPermitted,
		/// <summary>
		/// Unauthorized REMOVE operation in invoking a service's mutate method.
		/// </summary>
		RemoveOperationNotPermitted,
		/// <summary>
		/// Unauthorized SET operation in invoking a service's mutate method.
		/// </summary>
		SetOperationNotPermitted,
		/// <summary>
		/// A mutate action is not allowed on this campaign, from this client.
		/// </summary>
		MutateActionNotPermittedForClient,
		/// <summary>
		/// This operation is not permitted on this campaign type
		/// </summary>
		OperationNotPermittedForCampaignType,
		/// <summary>
		/// An ADD operation may not set status to REMOVED.
		/// </summary>
		AddAsRemovedNotPermitted,
		/// <summary>
		/// This operation is not allowed because the campaign or adgroup is removed.
		/// </summary>
		OperationNotPermittedForRemovedEntity,
		/// <summary>
		/// The reason the invoked method or operation is prohibited is not known
		/// (the client may be of an older version than the server).
		/// </summary>
		Unknown
	}
	/// <summary>
	/// This represents an operator that may be presented to an adsapi service.
	/// </summary>
	public enum Operator
	{
		/// <summary>
		/// The ADD operator.
		/// </summary>
		Add,
		/// <summary>
		/// The REMOVE operator.
		/// </summary>
		Remove,
		/// <summary>
		/// The SET operator (used for updates).
		/// </summary>
		Set
	}
	/// <summary>
	/// Errors due to the use of unsupported operations.
	/// </summary>
	public class OperatorError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public OperatorErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = OperatorErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "OperatorError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the validation error.
	/// </summary>
	public enum OperatorErrorReason
	{
		OperatorNotSupported
	}
	/// <summary>
	/// Specifies how the resulting information should be sorted.
	/// </summary>
	public class OrderBy : ISoapable
	{
		/// <summary>
		/// The field to sort the results on.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Field { get; set; }
		/// <summary>
		/// The order to sort the results on. The default sort order is {@link SortOrder#ASCENDING}.
		/// </summary>
		public SortOrder? SortOrder { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Field = null;
			SortOrder = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "field")
				{
					Field = xItem.Value;
				}
				else if (localName == "sortOrder")
				{
					SortOrder = SortOrderExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Field != null)
			{
				xItem = new XElement(XName.Get("field", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Field);
				xE.Add(xItem);
			}
			if (SortOrder != null)
			{
				xItem = new XElement(XName.Get("sortOrder", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SortOrder.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains the results from a get call.
	/// </summary>
	public abstract class Page : ISoapable
	{
		/// <summary>
		/// Total number of entries in the result that this page is a part of.
		/// </summary>
		public int? TotalNumEntries { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of Page.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string PageType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TotalNumEntries = null;
			PageType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "totalNumEntries")
				{
					TotalNumEntries = int.Parse(xItem.Value);
				}
				else if (localName == "Page.Type")
				{
					PageType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TotalNumEntries != null)
			{
				xItem = new XElement(XName.Get("totalNumEntries", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TotalNumEntries.Value.ToString());
				xE.Add(xItem);
			}
			if (PageType != null)
			{
				xItem = new XElement(XName.Get("Page.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PageType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Page-One Promoted bidding scheme, which sets max cpc bids to
	/// target impressions on page one or page one promoted slots on google.com.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class PageOnePromotedBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// Specifies the strategy goal: where impressions are desired to be shown on
		/// search result pages.
		/// </summary>
		public PageOnePromotedBiddingSchemeStrategyGoal? StrategyGoal { get; set; }
		/// <summary>
		/// Strategy maximum bid limit in advertiser local currency micro units.
		/// This upper limit applies to all keywords managed by the strategy.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money BidCeiling { get; set; }
		/// <summary>
		/// Bid Multiplier to be applied to the relevant bid estimate (depending on the strategyGoal)
		/// in determining a keyword's new max cpc bid.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public double? BidModifier { get; set; }
		/// <summary>
		/// Controls whether the strategy always follows bid estimate changes, or only
		/// increases. If false, always set a keyword's new bid to the current bid estimate.
		/// If true, only updates a keyword's bid if the current bid estimate is
		/// greater than the current bid.
		/// </summary>
		public bool? BidChangesForRaisesOnly { get; set; }
		/// <summary>
		/// Controls whether the strategy is allowed to raise bids when the throttling rate
		/// of the budget it is serving out of rises above a threshold.
		/// </summary>
		public bool? RaiseBidWhenBudgetConstrained { get; set; }
		/// <summary>
		/// Controls whether the strategy is allowed to raise bids on keywords with lower-range
		/// quality scores.
		/// </summary>
		public bool? RaiseBidWhenLowQualityScore { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			StrategyGoal = null;
			BidCeiling = null;
			BidModifier = null;
			BidChangesForRaisesOnly = null;
			RaiseBidWhenBudgetConstrained = null;
			RaiseBidWhenLowQualityScore = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "strategyGoal")
				{
					StrategyGoal = PageOnePromotedBiddingSchemeStrategyGoalExtensions.Parse(xItem.Value);
				}
				else if (localName == "bidCeiling")
				{
					BidCeiling = new Money();
					BidCeiling.ReadFrom(xItem);
				}
				else if (localName == "bidModifier")
				{
					BidModifier = double.Parse(xItem.Value);
				}
				else if (localName == "bidChangesForRaisesOnly")
				{
					BidChangesForRaisesOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "raiseBidWhenBudgetConstrained")
				{
					RaiseBidWhenBudgetConstrained = bool.Parse(xItem.Value);
				}
				else if (localName == "raiseBidWhenLowQualityScore")
				{
					RaiseBidWhenLowQualityScore = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PageOnePromotedBiddingScheme");
			XElement xItem = null;
			if (StrategyGoal != null)
			{
				xItem = new XElement(XName.Get("strategyGoal", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StrategyGoal.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (BidCeiling != null)
			{
				xItem = new XElement(XName.Get("bidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				BidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidModifier != null)
			{
				xItem = new XElement(XName.Get("bidModifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidModifier.Value.ToString());
				xE.Add(xItem);
			}
			if (BidChangesForRaisesOnly != null)
			{
				xItem = new XElement(XName.Get("bidChangesForRaisesOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidChangesForRaisesOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (RaiseBidWhenBudgetConstrained != null)
			{
				xItem = new XElement(XName.Get("raiseBidWhenBudgetConstrained", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RaiseBidWhenBudgetConstrained.Value.ToString());
				xE.Add(xItem);
			}
			if (RaiseBidWhenLowQualityScore != null)
			{
				xItem = new XElement(XName.Get("raiseBidWhenLowQualityScore", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RaiseBidWhenLowQualityScore.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	public enum PageOnePromotedBiddingSchemeStrategyGoal
	{
		/// <summary>
		/// First page on google.com.
		/// </summary>
		PageOne,
		/// <summary>
		/// Top slots of the first page on google.com.
		/// </summary>
		PageOnePromoted
	}
	/// <summary>
	/// Specifies the page of results to return in the response. A page is specified
	/// by the result position to start at and the maximum number of results to
	/// return.
	/// </summary>
	public class Paging : ISoapable
	{
		/// <summary>
		/// Index of the first result to return in this page.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public int? StartIndex { get; set; }
		/// <summary>
		/// Maximum number of results to return in this page. Set this to a reasonable value to limit
		/// the number of results returned per page.
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public int? NumberResults { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			StartIndex = null;
			NumberResults = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "startIndex")
				{
					StartIndex = int.Parse(xItem.Value);
				}
				else if (localName == "numberResults")
				{
					NumberResults = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (StartIndex != null)
			{
				xItem = new XElement(XName.Get("startIndex", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartIndex.Value.ToString());
				xE.Add(xItem);
			}
			if (NumberResults != null)
			{
				xItem = new XElement(XName.Get("numberResults", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(NumberResults.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error codes for pagination.
	/// </summary>
	public class PagingError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public PagingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = PagingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PagingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for errors when using pagination.
	/// </summary>
	public enum PagingErrorReason
	{
		/// <summary>
		/// The start index value cannot be a negative number.
		/// </summary>
		StartIndexCannotBeNegative,
		/// <summary>
		/// The number of results cannot be a negative number.
		/// </summary>
		NumberOfResultsCannotBeNegative,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Parent criterion.
	/// <p>A criterion of this type can only be created using an ID. A criterion of this type is only excludable.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class Parent : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "ParentType".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ParentParentType? ParentType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ParentType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "parentType")
				{
					ParentType = ParentParentTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Parent");
			XElement xItem = null;
			if (ParentType != null)
			{
				xItem = new XElement(XName.Get("parentType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ParentType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The possible types of parents.
	/// </summary>
	public enum ParentParentType
	{
		ParentParent,
		ParentNotAParent,
		ParentUndetermined,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Pending invitation result for the getPendingInvitations method.
	/// </summary>
	public class PendingInvitation : ISoapable
	{
		public ManagedCustomer Manager { get; set; }
		public ManagedCustomer Client { get; set; }
		public string CreationDate { get; set; }
		public string ExpirationDate { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Manager = null;
			Client = null;
			CreationDate = null;
			ExpirationDate = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "manager")
				{
					Manager = new ManagedCustomer();
					Manager.ReadFrom(xItem);
				}
				else if (localName == "client")
				{
					Client = new ManagedCustomer();
					Client.ReadFrom(xItem);
				}
				else if (localName == "creationDate")
				{
					CreationDate = xItem.Value;
				}
				else if (localName == "expirationDate")
				{
					ExpirationDate = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Manager != null)
			{
				xItem = new XElement(XName.Get("manager", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Manager.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Client != null)
			{
				xItem = new XElement(XName.Get("client", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Client.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CreationDate != null)
			{
				xItem = new XElement(XName.Get("creationDate", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(CreationDate);
				xE.Add(xItem);
			}
			if (ExpirationDate != null)
			{
				xItem = new XElement(XName.Get("expirationDate", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ExpirationDate);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Selector for getPendingInvitations method.
	/// </summary>
	public class PendingInvitationSelector : ISoapable
	{
		/// <summary>
		/// Manager customer IDs to check for sent invitations.
		/// </summary>
		public List<long> ManagerCustomerIds { get; set; }
		/// <summary>
		/// Client customer IDs to check for received invitations.
		/// </summary>
		public List<long> ClientCustomerIds { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ManagerCustomerIds = null;
			ClientCustomerIds = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "managerCustomerIds")
				{
					if (ManagerCustomerIds == null) ManagerCustomerIds = new List<long>();
					ManagerCustomerIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "clientCustomerIds")
				{
					if (ClientCustomerIds == null) ClientCustomerIds = new List<long>();
					ClientCustomerIds.Add(long.Parse(xItem.Value));
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ManagerCustomerIds != null)
			{
				foreach (var managerCustomerIdsItem in ManagerCustomerIds)
				{
					xItem = new XElement(XName.Get("managerCustomerIds", "https://adwords.google.com/api/adwords/mcm/v201609"));
					xItem.Add(managerCustomerIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ClientCustomerIds != null)
			{
				foreach (var clientCustomerIdsItem in ClientCustomerIds)
				{
					xItem = new XElement(XName.Get("clientCustomerIds", "https://adwords.google.com/api/adwords/mcm/v201609"));
					xItem.Add(clientCustomerIdsItem.ToString());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A placement used for modifying bids for sites when targeting the content
	/// network.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Placement : Criterion, ISoapable
	{
		/// <summary>
		/// Url of the placement.
		///
		/// <p>For example, "http://www.domain.com".
		/// <span class="constraint Selectable">This field can be selected using the value "PlacementUrl".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Url { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Url = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "url")
				{
					Url = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Placement");
			XElement xItem = null;
			if (Url != null)
			{
				xItem = new XElement(XName.Get("url", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Url);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Data used to configure a location feed populated from
	/// Google My Business Locations.
	/// </summary>
	public class PlacesLocationFeedData : SystemFeedGenerationData, ISoapable
	{
		/// <summary>
		/// Required authentication token (from OAuth API) for the email.</br>
		/// Use the following values when populating the oAuthInfo:
		/// <ul>
		/// <li>httpMethod: {@code GET}</li>
		/// <li>httpRequestUrl: {@code https://www.googleapis.com/auth/adwords}</li>
		/// <li>
		/// httpAuthorizationHeader: {@code Bearer *ACCESS_TOKEN*}
		/// (where *ACCESS_TOKEN* is generated from OAuth credentials for the
		/// emailAddress and a scope matching httpRequestUrl)
		/// </li>
		/// </ul>
		/// </summary>
		public OAuthInfo OAuthInfo { get; set; }
		/// <summary>
		/// Email address of a Google My Business account or email address of a manager of the
		/// Google My Business account.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string EmailAddress { get; set; }
		/// <summary>
		/// Plus page ID of the managed business whose locations should be used. If this field is not set,
		/// then all businesses accessible by the user (specified by the emailAddress) are used.
		/// </summary>
		public string BusinessAccountIdentifier { get; set; }
		/// <summary>
		/// Used to filter Google My Business listings by business name. If businessNameFilter is set,
		/// only listings with a matching business name are candidates to be sync'd into FeedItems.
		/// </summary>
		public string BusinessNameFilter { get; set; }
		/// <summary>
		/// Used to filter Google My Business listings by categories. If entries exist in categoryFilters,
		/// only listings that belong to any of the categories are candidates to be sync'd into FeedItems.
		/// If no entries exist in categoryFilters, then all listings are candidates for syncing.
		/// </summary>
		public List<string> CategoryFilters { get; set; }
		/// <summary>
		/// Used to filter <a href="http://www.google.com/mybusiness">Google My Business</a> listings by
		/// labels. If entries exist in labelFilters, only listings that has any of the labels set are
		/// candidates to be synchronized into FeedItems. If no entries exist in labelFilters, then all
		/// listings are candidates for syncing.
		/// </summary>
		public List<string> LabelFilters { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			OAuthInfo = null;
			EmailAddress = null;
			BusinessAccountIdentifier = null;
			BusinessNameFilter = null;
			CategoryFilters = null;
			LabelFilters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "oAuthInfo")
				{
					OAuthInfo = new OAuthInfo();
					OAuthInfo.ReadFrom(xItem);
				}
				else if (localName == "emailAddress")
				{
					EmailAddress = xItem.Value;
				}
				else if (localName == "businessAccountIdentifier")
				{
					BusinessAccountIdentifier = xItem.Value;
				}
				else if (localName == "businessNameFilter")
				{
					BusinessNameFilter = xItem.Value;
				}
				else if (localName == "categoryFilters")
				{
					if (CategoryFilters == null) CategoryFilters = new List<string>();
					CategoryFilters.Add(xItem.Value);
				}
				else if (localName == "labelFilters")
				{
					if (LabelFilters == null) LabelFilters = new List<string>();
					LabelFilters.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PlacesLocationFeedData");
			XElement xItem = null;
			if (OAuthInfo != null)
			{
				xItem = new XElement(XName.Get("oAuthInfo", "https://adwords.google.com/api/adwords/cm/v201609"));
				OAuthInfo.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (EmailAddress != null)
			{
				xItem = new XElement(XName.Get("emailAddress", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EmailAddress);
				xE.Add(xItem);
			}
			if (BusinessAccountIdentifier != null)
			{
				xItem = new XElement(XName.Get("businessAccountIdentifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BusinessAccountIdentifier);
				xE.Add(xItem);
			}
			if (BusinessNameFilter != null)
			{
				xItem = new XElement(XName.Get("businessNameFilter", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BusinessNameFilter);
				xE.Add(xItem);
			}
			if (CategoryFilters != null)
			{
				foreach (var categoryFiltersItem in CategoryFilters)
				{
					xItem = new XElement(XName.Get("categoryFilters", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(categoryFiltersItem);
					xE.Add(xItem);
				}
			}
			if (LabelFilters != null)
			{
				foreach (var labelFiltersItem in LabelFilters)
				{
					xItem = new XElement(XName.Get("labelFilters", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(labelFiltersItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// This operand specifies a place of interest category for semantic targeting.
	/// </summary>
	public class PlacesOfInterestOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public PlacesOfInterestOperandCategory? Category { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Category = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "category")
				{
					Category = PlacesOfInterestOperandCategoryExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PlacesOfInterestOperand");
			XElement xItem = null;
			if (Category != null)
			{
				xItem = new XElement(XName.Get("category", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Category.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Categories to identify places of interest.
	/// </summary>
	public enum PlacesOfInterestOperandCategory
	{
		Airport,
		Downtown,
		University,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents Platform criterion.
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Platform : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string PlatformName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PlatformName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "platformName")
				{
					PlatformName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Platform");
			XElement xItem = null;
			if (PlatformName != null)
			{
				xItem = new XElement(XName.Get("platformName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PlatformName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a campaign level estimate for a specified {@link Platform}.
	/// </summary>
	public class PlatformCampaignEstimate : ISoapable
	{
		/// <summary>
		/// The {@link Platform} associated with this estimate.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Platform Platform { get; set; }
		/// <summary>
		/// Minimum estimate for the specified {@link Platform}.
		/// </summary>
		public StatsEstimate MinEstimate { get; set; }
		/// <summary>
		/// Maximum estimate for the specified {@link Platform}.
		/// </summary>
		public StatsEstimate MaxEstimate { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Platform = null;
			MinEstimate = null;
			MaxEstimate = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "platform")
				{
					Platform = new Platform();
					Platform.ReadFrom(xItem);
				}
				else if (localName == "minEstimate")
				{
					MinEstimate = new StatsEstimate();
					MinEstimate.ReadFrom(xItem);
				}
				else if (localName == "maxEstimate")
				{
					MaxEstimate = new StatsEstimate();
					MaxEstimate.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Platform != null)
			{
				xItem = new XElement(XName.Get("platform", "https://adwords.google.com/api/adwords/o/v201609"));
				Platform.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (MinEstimate != null)
			{
				xItem = new XElement(XName.Get("minEstimate", "https://adwords.google.com/api/adwords/o/v201609"));
				MinEstimate.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (MaxEstimate != null)
			{
				xItem = new XElement(XName.Get("maxEstimate", "https://adwords.google.com/api/adwords/o/v201609"));
				MaxEstimate.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Approval and policy information attached to an entity.
	/// </summary>
	public class PolicyData : ISoapable
	{
		/// <summary>
		/// List of disapproval reasons attached to the entity.
		/// </summary>
		public List<DisapprovalReason> DisapprovalReasons { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of PolicyData.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string PolicyDataType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			DisapprovalReasons = null;
			PolicyDataType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "disapprovalReasons")
				{
					if (DisapprovalReasons == null) DisapprovalReasons = new List<DisapprovalReason>();
					var disapprovalReasonsItem = new DisapprovalReason();
					disapprovalReasonsItem.ReadFrom(xItem);
					DisapprovalReasons.Add(disapprovalReasonsItem);
				}
				else if (localName == "PolicyData.Type")
				{
					PolicyDataType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (DisapprovalReasons != null)
			{
				foreach (var disapprovalReasonsItem in DisapprovalReasons)
				{
					xItem = new XElement(XName.Get("disapprovalReasons", "https://adwords.google.com/api/adwords/cm/v201609"));
					disapprovalReasonsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PolicyDataType != null)
			{
				xItem = new XElement(XName.Get("PolicyData.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyDataType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains Ads Policy decisions.
	/// </summary>
	public class PolicyTopicEntry : ISoapable
	{
		/// <summary>
		/// The type of the policy topic entry.
		/// </summary>
		public PolicyTopicEntryType? PolicyTopicEntryType { get; set; }
		/// <summary>
		/// The policy topic evidences associated with this policy topic entry.
		/// </summary>
		public List<PolicyTopicEvidence> PolicyTopicEvidences { get; set; }
		/// <summary>
		/// The policy topic id.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string PolicyTopicId { get; set; }
		/// <summary>
		/// The policy topic name (in English).
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string PolicyTopicName { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			PolicyTopicEntryType = null;
			PolicyTopicEvidences = null;
			PolicyTopicId = null;
			PolicyTopicName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "policyTopicEntryType")
				{
					PolicyTopicEntryType = PolicyTopicEntryTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "policyTopicEvidences")
				{
					if (PolicyTopicEvidences == null) PolicyTopicEvidences = new List<PolicyTopicEvidence>();
					var policyTopicEvidencesItem = new PolicyTopicEvidence();
					policyTopicEvidencesItem.ReadFrom(xItem);
					PolicyTopicEvidences.Add(policyTopicEvidencesItem);
				}
				else if (localName == "policyTopicId")
				{
					PolicyTopicId = xItem.Value;
				}
				else if (localName == "policyTopicName")
				{
					PolicyTopicName = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (PolicyTopicEntryType != null)
			{
				xItem = new XElement(XName.Get("policyTopicEntryType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyTopicEntryType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (PolicyTopicEvidences != null)
			{
				foreach (var policyTopicEvidencesItem in PolicyTopicEvidences)
				{
					xItem = new XElement(XName.Get("policyTopicEvidences", "https://adwords.google.com/api/adwords/cm/v201609"));
					policyTopicEvidencesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PolicyTopicId != null)
			{
				xItem = new XElement(XName.Get("policyTopicId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyTopicId);
				xE.Add(xItem);
			}
			if (PolicyTopicName != null)
			{
				xItem = new XElement(XName.Get("policyTopicName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyTopicName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The summarized nature of a policy entry.
	/// </summary>
	public enum PolicyTopicEntryType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Will never serve.
		/// </summary>
		Prohibited,
		/// <summary>
		/// Constrained for at least one value.
		/// </summary>
		Limited
	}
	/// <summary>
	/// Evidence that caused this policy topic to be reported.
	/// </summary>
	public class PolicyTopicEvidence : ISoapable
	{
		/// <summary>
		/// The type of evidence for the policy topic.
		/// </summary>
		public PolicyTopicEvidenceType? PolicyTopicEvidenceType { get; set; }
		/// <summary>
		/// The actual evidence that triggered this policy topic to be reported. This field is associated
		/// with the policyTopicEvidenceType. So for example, when policyTopicEvidenceType is AD_TEXT the
		/// evidence is the text associated with the Ad.
		/// </summary>
		public string EvidenceText { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			PolicyTopicEvidenceType = null;
			EvidenceText = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "policyTopicEvidenceType")
				{
					PolicyTopicEvidenceType = PolicyTopicEvidenceTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "evidenceText")
				{
					EvidenceText = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (PolicyTopicEvidenceType != null)
			{
				xItem = new XElement(XName.Get("policyTopicEvidenceType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyTopicEvidenceType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (EvidenceText != null)
			{
				xItem = new XElement(XName.Get("evidenceText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EvidenceText);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Describes the type of evidence inside the policy topic evidence.
	/// </summary>
	public enum PolicyTopicEvidenceType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		AdText,
		HttpCode
	}
	/// <summary>
	/// Represents violations of a single policy by some text in a field.
	///
	/// Violations of a single policy by the same string in multiple places
	/// within a field is reported in one instance of this class and only one
	/// exemption needs to be filed.
	/// Violations of a single policy by two different strings is reported
	/// as two separate instances of this class.
	///
	/// e.g. If 'ACME' violates 'capitalization' and occurs twice in a text ad it
	/// would be represented by one instance. If the ad also contains 'INC' which
	/// also violates 'capitalization' it would be represented in a separate
	/// instance.
	/// </summary>
	public class PolicyViolationError : ApiError, ISoapable
	{
		/// <summary>
		/// Unique identifier for the violation.
		/// </summary>
		public PolicyViolationKey Key { get; set; }
		/// <summary>
		/// Name of policy suitable for display to users. In the user's preferred
		/// language.
		/// </summary>
		public string ExternalPolicyName { get; set; }
		/// <summary>
		/// Url with writeup about the policy.
		/// </summary>
		public string ExternalPolicyUrl { get; set; }
		/// <summary>
		/// Localized description of the violation.
		/// </summary>
		public string ExternalPolicyDescription { get; set; }
		/// <summary>
		/// Whether user can file an exemption request for this violation.
		/// </summary>
		public bool? IsExemptable { get; set; }
		/// <summary>
		/// Lists the parts that violate the policy.
		/// </summary>
		public List<PolicyViolationErrorPart> ViolatingParts { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Key = null;
			ExternalPolicyName = null;
			ExternalPolicyUrl = null;
			ExternalPolicyDescription = null;
			IsExemptable = null;
			ViolatingParts = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = new PolicyViolationKey();
					Key.ReadFrom(xItem);
				}
				else if (localName == "externalPolicyName")
				{
					ExternalPolicyName = xItem.Value;
				}
				else if (localName == "externalPolicyUrl")
				{
					ExternalPolicyUrl = xItem.Value;
				}
				else if (localName == "externalPolicyDescription")
				{
					ExternalPolicyDescription = xItem.Value;
				}
				else if (localName == "isExemptable")
				{
					IsExemptable = bool.Parse(xItem.Value);
				}
				else if (localName == "violatingParts")
				{
					if (ViolatingParts == null) ViolatingParts = new List<PolicyViolationErrorPart>();
					var violatingPartsItem = new PolicyViolationErrorPart();
					violatingPartsItem.ReadFrom(xItem);
					ViolatingParts.Add(violatingPartsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PolicyViolationError");
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				Key.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ExternalPolicyName != null)
			{
				xItem = new XElement(XName.Get("externalPolicyName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExternalPolicyName);
				xE.Add(xItem);
			}
			if (ExternalPolicyUrl != null)
			{
				xItem = new XElement(XName.Get("externalPolicyUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExternalPolicyUrl);
				xE.Add(xItem);
			}
			if (ExternalPolicyDescription != null)
			{
				xItem = new XElement(XName.Get("externalPolicyDescription", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ExternalPolicyDescription);
				xE.Add(xItem);
			}
			if (IsExemptable != null)
			{
				xItem = new XElement(XName.Get("isExemptable", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsExemptable.Value.ToString());
				xE.Add(xItem);
			}
			if (ViolatingParts != null)
			{
				foreach (var violatingPartsItem in ViolatingParts)
				{
					xItem = new XElement(XName.Get("violatingParts", "https://adwords.google.com/api/adwords/cm/v201609"));
					violatingPartsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Points to a substring within an ad field or criterion.
	/// </summary>
	public class PolicyViolationErrorPart : ISoapable
	{
		/// <summary>
		/// Index of the starting position of the violating text within the line.
		/// </summary>
		public int? Index { get; set; }
		/// <summary>
		/// The length of the violating text.
		/// </summary>
		public int? Length { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Index = null;
			Length = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "index")
				{
					Index = int.Parse(xItem.Value);
				}
				else if (localName == "length")
				{
					Length = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Index != null)
			{
				xItem = new XElement(XName.Get("index", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Index.Value.ToString());
				xE.Add(xItem);
			}
			if (Length != null)
			{
				xItem = new XElement(XName.Get("length", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Length.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Key of the violation. The key is used for referring to a violation when
	/// filing an exemption request.
	/// </summary>
	public class PolicyViolationKey : ISoapable
	{
		/// <summary>
		/// Unique id of the violated policy.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string PolicyName { get; set; }
		/// <summary>
		/// The text that violates the policy if specified. Otherwise, refers to the
		/// policy in general (e.g. when requesting to be exempt from the whole
		/// policy).
		///
		/// May be null for criterion exemptions, in which case this refers to the
		/// whole policy. Must be specified for ad exemptions.
		/// </summary>
		public string ViolatingText { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			PolicyName = null;
			ViolatingText = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "policyName")
				{
					PolicyName = xItem.Value;
				}
				else if (localName == "violatingText")
				{
					ViolatingText = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (PolicyName != null)
			{
				xItem = new XElement(XName.Get("policyName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PolicyName);
				xE.Add(xItem);
			}
			if (ViolatingText != null)
			{
				xItem = new XElement(XName.Get("violatingText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ViolatingText);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Specifies how an entity (eg. adgroup, campaign, criterion, ad) should be filtered.
	/// </summary>
	public class Predicate : ISoapable
	{
		/// <summary>
		/// The field by which to filter the returned data. Possible values are marked Filterable on
		/// the entity's reference page. For example, for predicates for the
		/// CampaignService {@link Selector selector}, refer to the filterable fields from the
		/// {@link Campaign} reference page.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Field { get; set; }
		/// <summary>
		/// The operator to use for filtering the data returned.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public PredicateOperator? Operator { get; set; }
		/// <summary>
		/// The values by which to filter the field. The {@link Operator#CONTAINS_ALL},
		/// {@link Operator#CONTAINS_ANY}, {@link Operator#CONTAINS_NONE}, {@link Operator#IN}
		/// and {@link Operator#NOT_IN} take multiple values. All others take a single value.
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<string> Values { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Field = null;
			Operator = null;
			Values = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "field")
				{
					Field = xItem.Value;
				}
				else if (localName == "operator")
				{
					Operator = PredicateOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "values")
				{
					if (Values == null) Values = new List<string>();
					Values.Add(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Field != null)
			{
				xItem = new XElement(XName.Get("field", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Field);
				xE.Add(xItem);
			}
			if (Operator != null)
			{
				xItem = new XElement(XName.Get("operator", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operator.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Values != null)
			{
				foreach (var valuesItem in Values)
				{
					xItem = new XElement(XName.Get("values", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(valuesItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Defines the valid set of operators.
	/// </summary>
	public enum PredicateOperator
	{
		/// <summary>
		/// Checks if the field is equal to the given value.
		///
		/// <p>This operator is used with integers, dates, booleans, strings,
		/// enums, and sets.
		/// </summary>
		Equals,
		/// <summary>
		/// Checks if the field does not equal the given value.
		///
		/// <p>This operator is used with integers, booleans, strings, enums,
		/// and sets.
		/// </summary>
		NotEquals,
		/// <summary>
		/// Checks if the field is equal to one of the given values.
		///
		/// <p>This operator accepts multiple operands and is used with
		/// integers, booleans, strings, and enums.
		/// </summary>
		In,
		/// <summary>
		/// Checks if the field does not equal any of the given values.
		///
		/// <p>This operator accepts multiple operands and is used with
		/// integers, booleans, strings, and enums.
		/// </summary>
		NotIn,
		/// <summary>
		/// Checks if the field is greater than the given value.
		///
		/// <p>This operator is used with numbers and dates.
		/// </summary>
		GreaterThan,
		/// <summary>
		/// Checks if the field is greater or equal to the given value.
		///
		/// <p>This operator is used with numbers and dates.
		/// </summary>
		GreaterThanEquals,
		/// <summary>
		/// Checks if the field is less than the given value.
		///
		/// <p>This operator is used with numbers and dates.
		/// </summary>
		LessThan,
		/// <summary>
		/// Checks if the field is less or equal to than the given value.
		///
		/// <p>This operator is used with numbers and dates.
		/// </summary>
		LessThanEquals,
		/// <summary>
		/// Checks if the field starts with the given value.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		StartsWith,
		/// <summary>
		/// Checks if the field starts with the given value, ignoring case.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		StartsWithIgnoreCase,
		/// <summary>
		/// Checks if the field contains the given value as a substring.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		Contains,
		/// <summary>
		/// Checks if the field contains the given value as a substring, ignoring
		/// case.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		ContainsIgnoreCase,
		/// <summary>
		/// Checks if the field does not contain the given value as a substring.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		DoesNotContain,
		/// <summary>
		/// Checks if the field does not contain the given value as a substring,
		/// ignoring case.
		///
		/// <p>This operator is used with strings.
		/// </summary>
		DoesNotContainIgnoreCase,
		/// <summary>
		/// Checks if the field contains <em>any</em> of the given values.
		///
		/// <p>This operator accepts multiple values and is used on sets of numbers
		/// or strings.
		/// </summary>
		ContainsAny,
		/// <summary>
		/// Checks if the field contains <em>all</em> of the given values.
		///
		/// <p>This operator accepts multiple values and is used on sets of numbers
		/// or strings.
		/// </summary>
		ContainsAll,
		/// <summary>
		/// Checks if the field contains <em>none</em> of the given values.
		///
		/// <p>This operator accepts multiple values and is used on sets of numbers
		/// or strings.
		/// </summary>
		ContainsNone,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Represents a PreferredContent criterion.
	///
	/// <p>Possible IDs: {@code 400} ({@code YOUTUBE_TOP_CONTENT}).</p>
	/// <p>A criterion of this type can only be created using an ID.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class PreferredContent : Criterion, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PreferredContent");
		}
	}
	/// <summary>
	/// The qualifier on the price for all Price items.
	/// </summary>
	public enum PriceExtensionPriceQualifier
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// 'From' qualifier for the price.
		/// </summary>
		From,
		/// <summary>
		/// 'Up to' qualifier for the price.
		/// </summary>
		UpTo,
		/// <summary>
		/// None is used for clearing the qualifier.
		/// </summary>
		None
	}
	/// <summary>
	/// The price unit for a Price table item.
	/// </summary>
	public enum PriceExtensionPriceUnit
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Per hour.
		/// </summary>
		PerHour,
		/// <summary>
		/// Per day.
		/// </summary>
		PerDay,
		/// <summary>
		/// Per week.
		/// </summary>
		PerWeek,
		/// <summary>
		/// Per month.
		/// </summary>
		PerMonth,
		/// <summary>
		/// Per year.
		/// </summary>
		PerYear,
		/// <summary>
		/// None is used for clearing the unit.
		/// </summary>
		None
	}
	/// <summary>
	/// The type of a price extension represents.
	/// </summary>
	public enum PriceExtensionType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The type for showing a list of brands.
		/// </summary>
		Brands,
		/// <summary>
		/// The type for showing a list of events.
		/// </summary>
		Events,
		/// <summary>
		/// The type for showing locations relevant to your business.
		/// </summary>
		Locations,
		/// <summary>
		/// The type for showing sub-regions or districts within a city or region.
		/// </summary>
		Neighborhoods,
		/// <summary>
		/// The type for showing a collection of product categories.
		/// </summary>
		ProductCategories,
		/// <summary>
		/// The type for showing a collection of related product tiers.
		/// </summary>
		ProductTiers,
		/// <summary>
		/// The type for showing a collection of services offered by your business.
		/// </summary>
		Services,
		/// <summary>
		/// The type for showing a collection of service categories.
		/// </summary>
		ServiceCategories,
		/// <summary>
		/// The type for showing a collection of related service tiers.
		/// </summary>
		ServiceTiers
	}
	/// <summary>
	/// Represents a price extension.
	/// </summary>
	public class PriceFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// Price extension type of this extension. Required.
		/// </summary>
		public PriceExtensionType? PriceExtensionType { get; set; }
		/// <summary>
		/// Price qualifier for all rows of this price extension.
		/// </summary>
		public PriceExtensionPriceQualifier? PriceQualifier { get; set; }
		/// <summary>
		/// Tracking URL template for all rows of this price extension. To clear this field, set its value
		/// to the empty string/
		/// </summary>
		public string TrackingUrlTemplate { get; set; }
		/// <summary>
		/// The language the advertiser is using for this price extension. Required.
		/// Supported language codes:
		/// <ul>
		/// <li>en</li>
		/// </ul>
		/// </summary>
		public string Language { get; set; }
		/// <summary>
		/// The rows in this price extension. Minimum number of items allowed is 3 and the maximum number
		/// is 8.
		/// </summary>
		public List<PriceTableRow> TableRows { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PriceExtensionType = null;
			PriceQualifier = null;
			TrackingUrlTemplate = null;
			Language = null;
			TableRows = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "priceExtensionType")
				{
					PriceExtensionType = PriceExtensionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "priceQualifier")
				{
					PriceQualifier = PriceExtensionPriceQualifierExtensions.Parse(xItem.Value);
				}
				else if (localName == "trackingUrlTemplate")
				{
					TrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "language")
				{
					Language = xItem.Value;
				}
				else if (localName == "tableRows")
				{
					if (TableRows == null) TableRows = new List<PriceTableRow>();
					var tableRowsItem = new PriceTableRow();
					tableRowsItem.ReadFrom(xItem);
					TableRows.Add(tableRowsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "PriceFeedItem");
			XElement xItem = null;
			if (PriceExtensionType != null)
			{
				xItem = new XElement(XName.Get("priceExtensionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PriceExtensionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (PriceQualifier != null)
			{
				xItem = new XElement(XName.Get("priceQualifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PriceQualifier.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (TrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("trackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (Language != null)
			{
				xItem = new XElement(XName.Get("language", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Language);
				xE.Add(xItem);
			}
			if (TableRows != null)
			{
				foreach (var tableRowsItem in TableRows)
				{
					xItem = new XElement(XName.Get("tableRows", "https://adwords.google.com/api/adwords/cm/v201609"));
					tableRowsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents one row in a price extension.
	/// </summary>
	public class PriceTableRow : ISoapable
	{
		/// <summary>
		/// Header text of this row. Required.
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Header { get; set; }
		/// <summary>
		/// Description text of this row. Required.
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// A list of possible final URLs after all cross domain redirects. Required.
		/// </summary>
		public UrlList FinalUrls { get; set; }
		/// <summary>
		/// Price value of this row. Required.
		/// </summary>
		public MoneyWithCurrency Price { get; set; }
		/// <summary>
		/// Price unit for this row.
		/// </summary>
		public PriceExtensionPriceUnit? PriceUnit { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Header = null;
			Description = null;
			FinalUrls = null;
			Price = null;
			PriceUnit = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "header")
				{
					Header = xItem.Value;
				}
				else if (localName == "description")
				{
					Description = xItem.Value;
				}
				else if (localName == "finalUrls")
				{
					FinalUrls = new UrlList();
					FinalUrls.ReadFrom(xItem);
				}
				else if (localName == "price")
				{
					Price = new MoneyWithCurrency();
					Price.ReadFrom(xItem);
				}
				else if (localName == "priceUnit")
				{
					PriceUnit = PriceExtensionPriceUnitExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Header != null)
			{
				xItem = new XElement(XName.Get("header", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Header);
				xE.Add(xItem);
			}
			if (Description != null)
			{
				xItem = new XElement(XName.Get("description", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description);
				xE.Add(xItem);
			}
			if (FinalUrls != null)
			{
				xItem = new XElement(XName.Get("finalUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				FinalUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Price != null)
			{
				xItem = new XElement(XName.Get("price", "https://adwords.google.com/api/adwords/cm/v201609"));
				Price.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (PriceUnit != null)
			{
				xItem = new XElement(XName.Get("priceUnit", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PriceUnit.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a product ad (known as a <a href=
	/// "//support.google.com/adwords/answer/2456103">product
	/// listing ad</a> in the AdWords user interface). A product ad displays
	/// product data (managed using the Google Merchant Center) that is
	/// pulled from the Google base product feed specified in the parent campaign's
	/// {@linkplain ShoppingSetting shopping setting}.
	///
	/// <p class="caution"><b>Caution:</b> Product ads do not use {@link #url url},
	/// {@link #finalUrls finalUrls}, {@link #finalMobileUrls finalMobileUrls},
	/// {@link #finalAppUrls finalAppUrls}, or {@link #displayUrl displayUrl};
	/// setting these fields on a product ad will cause an error.
	/// {@link #urlCustomParameters urlCustomParameters} and
	/// {@link #trackingUrlTemplate trackingUrlTemplate} can be set, but it is not
	/// recommended, as they will not be used; they should be set at the ad group or
	/// campaign level instead.</p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class ProductAd : Ad, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductAd");
		}
	}
	/// <summary>
	/// An {@code adwords grouping} string. Not supported by campaigns of
	/// {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductAdwordsGrouping : ProductDimension, ISoapable
	{
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductAdwordsGrouping");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An {@code adwords labels} string. Not supported by campaigns of
	/// {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductAdwordsLabels : ProductDimension, ISoapable
	{
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductAdwordsLabels");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// One element of a bidding category at a certain level. Top-level categories are at level 1,
	/// their children at level 2, and so on. We currently support up to 5 levels. The user must specify
	/// a dimension type that indicates the level of the category. All cases of the same subdivision
	/// must have the same dimension type (category level).
	/// </summary>
	public class ProductBiddingCategory : ProductDimension, ISoapable
	{
		/// <summary>
		/// Dimension type of the category. Indicates the level of the category in the taxonomy.
		/// <span class="constraint Filterable">This field can be filtered on using the value "ParentDimensionType".</span>
		/// <span class="constraint OneOf">The value must be one of {BIDDING_CATEGORY_L1, BIDDING_CATEGORY_L2, BIDDING_CATEGORY_L3, BIDDING_CATEGORY_L4, BIDDING_CATEGORY_L5}.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ProductDimensionType? Type { get; set; }
		/// <summary>
		/// ID of the product category.
		/// <span class="constraint Filterable">This field can be filtered on using the value "ParentDimensionId".</span>
		/// </summary>
		public long? Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Type = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "type")
				{
					Type = ProductDimensionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductBiddingCategory");
			XElement xItem = null;
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The taxonomy of ProductBiddingCategory dimension values.
	///
	/// <p>Clients use this to convert between human-readable category names / display strings and
	/// ProductBiddingCategory instances.
	/// </summary>
	public class ProductBiddingCategoryData : ConstantData, ISoapable
	{
		/// <summary>
		/// The dimension value that corresponds to this category.
		/// </summary>
		public ProductBiddingCategory DimensionValue { get; set; }
		/// <summary>
		/// The dimension value that corresponds to parent category.
		/// </summary>
		public ProductBiddingCategory ParentDimensionValue { get; set; }
		/// <summary>
		/// The country of the taxonomy. It applies to all categories from the taxonomy.
		/// <span class="constraint Selectable">This field can be selected using the value "Country".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Country { get; set; }
		/// <summary>
		/// The status of the taxonomy. It applies to all categories from the taxonomy.
		/// <span class="constraint Selectable">This field can be selected using the value "BiddingCategoryStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public ShoppingBiddingDimensionStatus? Status { get; set; }
		/// <summary>
		/// A map of displayValues by their language code. The language code is a 2-letter string
		/// conforming with ISO 639-1 standard.
		/// </summary>
		public List<String_StringMapEntry> DisplayValue { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DimensionValue = null;
			ParentDimensionValue = null;
			Country = null;
			Status = null;
			DisplayValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "dimensionValue")
				{
					DimensionValue = new ProductBiddingCategory();
					DimensionValue.ReadFrom(xItem);
				}
				else if (localName == "parentDimensionValue")
				{
					ParentDimensionValue = new ProductBiddingCategory();
					ParentDimensionValue.ReadFrom(xItem);
				}
				else if (localName == "country")
				{
					Country = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = ShoppingBiddingDimensionStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "displayValue")
				{
					if (DisplayValue == null) DisplayValue = new List<String_StringMapEntry>();
					var displayValueItem = new String_StringMapEntry();
					displayValueItem.ReadFrom(xItem);
					DisplayValue.Add(displayValueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductBiddingCategoryData");
			XElement xItem = null;
			if (DimensionValue != null)
			{
				xItem = new XElement(XName.Get("dimensionValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				DimensionValue.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ParentDimensionValue != null)
			{
				xItem = new XElement(XName.Get("parentDimensionValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				ParentDimensionValue.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Country != null)
			{
				xItem = new XElement(XName.Get("country", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Country);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (DisplayValue != null)
			{
				foreach (var displayValueItem in DisplayValue)
				{
					xItem = new XElement(XName.Get("displayValue", "https://adwords.google.com/api/adwords/cm/v201609"));
					displayValueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A brand string.
	/// </summary>
	public class ProductBrand : ProductDimension, ISoapable
	{
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductBrand");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A canonical condition. Only supported by campaigns of
	/// {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductCanonicalCondition : ProductDimension, ISoapable
	{
		public ProductCanonicalConditionCondition? Condition { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Condition = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "condition")
				{
					Condition = ProductCanonicalConditionConditionExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductCanonicalCondition");
			XElement xItem = null;
			if (Condition != null)
			{
				xItem = new XElement(XName.Get("condition", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Condition.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A canonical product condition.
	/// </summary>
	public enum ProductCanonicalConditionCondition
	{
		New,
		Used,
		Refurbished,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// The product channel dimension, which specifies the locality of an offer. Only supported by
	/// campaigns of {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductChannel : ProductDimension, ISoapable
	{
		public ShoppingProductChannel? Channel { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Channel = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "channel")
				{
					Channel = ShoppingProductChannelExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductChannel");
			XElement xItem = null;
			if (Channel != null)
			{
				xItem = new XElement(XName.Get("channel", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Channel.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The product channel exclusivity dimension, which limits the availability of an offer between only
	/// local, only online, or both. Only supported by campaigns of
	/// {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductChannelExclusivity : ProductDimension, ISoapable
	{
		public ShoppingProductChannelExclusivity? ChannelExclusivity { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ChannelExclusivity = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "channelExclusivity")
				{
					ChannelExclusivity = ShoppingProductChannelExclusivityExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductChannelExclusivity");
			XElement xItem = null;
			if (ChannelExclusivity != null)
			{
				xItem = new XElement(XName.Get("channelExclusivity", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ChannelExclusivity.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A custom attribute value. As a product can have multiple custom attributes, the user must specify
	/// a dimension type that indicates the index of the attribute by which to subdivide. All cases of
	/// the same subdivision must have the same dimension type (attribute index).
	/// </summary>
	public class ProductCustomAttribute : ProductDimension, ISoapable
	{
		/// <summary>
		/// Dimension type of the custom attribute. Indicates the index of the custom attribute.
		/// <span class="constraint OneOf">The value must be one of {CUSTOM_ATTRIBUTE_0, CUSTOM_ATTRIBUTE_1, CUSTOM_ATTRIBUTE_2, CUSTOM_ATTRIBUTE_3, CUSTOM_ATTRIBUTE_4}.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ProductDimensionType? Type { get; set; }
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Type = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "type")
				{
					Type = ProductDimensionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductCustomAttribute");
			XElement xItem = null;
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Dimension by which to subdivide or filter products.
	/// </summary>
	public abstract class ProductDimension : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of ProductDimension.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string ProductDimensionType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ProductDimensionType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "ProductDimension.Type")
				{
					ProductDimensionType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ProductDimensionType != null)
			{
				xItem = new XElement(XName.Get("ProductDimension.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ProductDimensionType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Type of product dimension.
	/// </summary>
	public enum ProductDimensionType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		BiddingCategoryL1,
		BiddingCategoryL2,
		BiddingCategoryL3,
		BiddingCategoryL4,
		BiddingCategoryL5,
		Brand,
		CanonicalCondition,
		CustomAttribute0,
		CustomAttribute1,
		CustomAttribute2,
		CustomAttribute3,
		CustomAttribute4,
		OfferId,
		ProductTypeL1,
		ProductTypeL2,
		ProductTypeL3,
		ProductTypeL4,
		ProductTypeL5,
		Channel,
		ChannelExclusivity
	}
	/// <summary>
	/// A plain condition string. Not supported by campaigns of
	/// {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductLegacyCondition : ProductDimension, ISoapable
	{
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductLegacyCondition");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An offer ID as specified by the merchant.
	/// </summary>
	public class ProductOfferId : ProductDimension, ISoapable
	{
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductOfferId");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Product partition (product group) in a shopping campaign. Depending on its type, a product
	/// partition subdivides products along some product dimension, specifies a bid for products, or
	/// excludes products from bidding.
	///
	/// <p>Inner nodes of a product partition hierarchy are always subdivisions. Each child is linked to
	/// the subdivision via the {@code parentCriterionId} and defines a {@code caseValue}. For all
	/// children of the same subdivision, the {@code caseValue}s must be mutually different but
	/// instances of the same class.
	///
	/// To create a subdivision and child node in the same API request, they should refer to each other
	/// using temporary criterion IDs in the {@code parentCriterionId} of the child, and ID field of the
	/// subdivision. Temporary IDs are specified by using any negative integer. Temporary IDs only exist
	/// within the scope of a single API request. The API will assign real criterion IDs, and replace
	/// the temporary values, and the API response will reflect this.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class ProductPartition : Criterion, ISoapable
	{
		/// <summary>
		/// Type of the product partition.
		/// <span class="constraint Selectable">This field can be selected using the value "PartitionType".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ProductPartitionType? PartitionType { get; set; }
		/// <summary>
		/// ID of the parent product partition subdivision. Undefined for the root partition.
		/// <span class="constraint Selectable">This field can be selected using the value "ParentCriterionId".</span>
		/// </summary>
		public long? ParentCriterionId { get; set; }
		/// <summary>
		/// Dimension value with which this product partition is refining its parent. Undefined for the
		/// root partition.
		/// <span class="constraint Selectable">This field can be selected using the value "CaseValue".</span>
		/// </summary>
		public ProductDimension CaseValue { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PartitionType = null;
			ParentCriterionId = null;
			CaseValue = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "partitionType")
				{
					PartitionType = ProductPartitionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "parentCriterionId")
				{
					ParentCriterionId = long.Parse(xItem.Value);
				}
				else if (localName == "caseValue")
				{
					CaseValue = InstanceCreator.CreateProductDimension(xItem);
					CaseValue.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductPartition");
			XElement xItem = null;
			if (PartitionType != null)
			{
				xItem = new XElement(XName.Get("partitionType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartitionType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ParentCriterionId != null)
			{
				xItem = new XElement(XName.Get("parentCriterionId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ParentCriterionId.Value.ToString());
				xE.Add(xItem);
			}
			if (CaseValue != null)
			{
				xItem = new XElement(XName.Get("caseValue", "https://adwords.google.com/api/adwords/cm/v201609"));
				CaseValue.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Type of a product partition in a shopping campaign.
	/// </summary>
	public enum ProductPartitionType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Subdivision of products along some product dimension.
		/// </summary>
		Subdivision,
		/// <summary>
		/// Unit which either defines a bid or delegates bidding to other campaigns.
		/// </summary>
		Unit
	}
	/// <summary>
	/// Scope of products. Contains a set of product dimensions, all of which a product has to match to
	/// be included in the campaign. These product dimensions must have a value; the "everything else"
	/// case without a value is not allowed.
	///
	/// <p>If there is no {@code ProductScope}, all products are included in the campaign. If a campaign
	/// has more than one {@code ProductScope}, products are included as long as they match any.
	/// Campaigns of {@link AdvertisingChannelType#SHOPPING} can have at most one {@code ProductScope}.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class ProductScope : Criterion, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Dimensions".</span>
		/// <span class="constraint NotEmptyForOperators">This field must contain at least one element when it is contained within {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public List<ProductDimension> Dimensions { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Dimensions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "dimensions")
				{
					if (Dimensions == null) Dimensions = new List<ProductDimension>();
					var dimensionsItem = InstanceCreator.CreateProductDimension(xItem);
					dimensionsItem.ReadFrom(xItem);
					Dimensions.Add(dimensionsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductScope");
			XElement xItem = null;
			if (Dimensions != null)
			{
				foreach (var dimensionsItem in Dimensions)
				{
					xItem = new XElement(XName.Get("dimensions", "https://adwords.google.com/api/adwords/cm/v201609"));
					dimensionsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// One element of a product type string at a certain level. Top-level product types are at level 1,
	/// their children at level 2, and so on. We currently support up to 5 levels. The user must specify
	/// a dimension type that indicates the level of the product type. All cases of the same
	/// subdivision must have the same dimension type (product type level).
	/// </summary>
	public class ProductType : ProductDimension, ISoapable
	{
		/// <summary>
		/// Dimension type of the product type. Indicates the level of the product type.
		/// <span class="constraint OneOf">The value must be one of {PRODUCT_TYPE_L1, PRODUCT_TYPE_L2, PRODUCT_TYPE_L3, PRODUCT_TYPE_L4, PRODUCT_TYPE_L5}.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ProductDimensionType? Type { get; set; }
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Type = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "type")
				{
					Type = ProductDimensionTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductType");
			XElement xItem = null;
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A full product type string. Category of the product according to the merchant's own
	/// classification. Example:
	///
	/// <pre>{@code "Home & Garden > Kitchen & Dining > Kitchen Appliances > Refrigerators"}</pre>
	///
	/// <p>Not supported by campaigns of {@link AdvertisingChannelType#SHOPPING}.
	/// </summary>
	public class ProductTypeFull : ProductDimension, ISoapable
	{
		/// <summary>
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ProductTypeFull");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Statistics on the progress of a {@code BatchJob}.
	/// </summary>
	public class ProgressStats : ISoapable
	{
		/// <summary>
		/// The number of operations executed.
		/// </summary>
		public long? NumOperationsExecuted { get; set; }
		/// <summary>
		/// The number of operations succeeded.
		/// </summary>
		public long? NumOperationsSucceeded { get; set; }
		/// <summary>
		/// An estimate of the percent of this job that has been executed.
		/// </summary>
		public int? EstimatedPercentExecuted { get; set; }
		/// <summary>
		/// The number of results written.
		/// </summary>
		public long? NumResultsWritten { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			NumOperationsExecuted = null;
			NumOperationsSucceeded = null;
			EstimatedPercentExecuted = null;
			NumResultsWritten = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "numOperationsExecuted")
				{
					NumOperationsExecuted = long.Parse(xItem.Value);
				}
				else if (localName == "numOperationsSucceeded")
				{
					NumOperationsSucceeded = long.Parse(xItem.Value);
				}
				else if (localName == "estimatedPercentExecuted")
				{
					EstimatedPercentExecuted = int.Parse(xItem.Value);
				}
				else if (localName == "numResultsWritten")
				{
					NumResultsWritten = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (NumOperationsExecuted != null)
			{
				xItem = new XElement(XName.Get("numOperationsExecuted", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(NumOperationsExecuted.Value.ToString());
				xE.Add(xItem);
			}
			if (NumOperationsSucceeded != null)
			{
				xItem = new XElement(XName.Get("numOperationsSucceeded", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(NumOperationsSucceeded.Value.ToString());
				xE.Add(xItem);
			}
			if (EstimatedPercentExecuted != null)
			{
				xItem = new XElement(XName.Get("estimatedPercentExecuted", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EstimatedPercentExecuted.Value.ToString());
				xE.Add(xItem);
			}
			if (NumResultsWritten != null)
			{
				xItem = new XElement(XName.Get("numResultsWritten", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(NumResultsWritten.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a Proximity Criterion.
	///
	/// A proximity is an area within a certain radius of a point with the center point being described
	/// by a lat/long pair. The caller may also alternatively provide address fields which will be
	/// geocoded into a lat/long pair. Note: If a geoPoint value is provided, the address is not
	/// used for calculating the lat/long to target.
	/// <p> A criterion of this type is only targetable.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Proximity : Criterion, ISoapable
	{
		/// <summary>
		/// Latitude and longitude.
		/// <span class="constraint Selectable">This field can be selected using the value "GeoPoint".</span>
		/// </summary>
		public GeoPoint GeoPoint { get; set; }
		/// <summary>
		/// Radius distance units.
		/// <span class="constraint Selectable">This field can be selected using the value "RadiusDistanceUnits".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public ProximityDistanceUnits? RadiusDistanceUnits { get; set; }
		/// <summary>
		/// Radius expressed in distance units.
		/// <span class="constraint Selectable">This field can be selected using the value "RadiusInUnits".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public double? RadiusInUnits { get; set; }
		/// <summary>
		/// Full address; <code>null</code> if unknonwn.
		/// <span class="constraint Selectable">This field can be selected using the value "Address".</span>
		/// </summary>
		public Address Address { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			GeoPoint = null;
			RadiusDistanceUnits = null;
			RadiusInUnits = null;
			Address = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "geoPoint")
				{
					GeoPoint = new GeoPoint();
					GeoPoint.ReadFrom(xItem);
				}
				else if (localName == "radiusDistanceUnits")
				{
					RadiusDistanceUnits = ProximityDistanceUnitsExtensions.Parse(xItem.Value);
				}
				else if (localName == "radiusInUnits")
				{
					RadiusInUnits = double.Parse(xItem.Value);
				}
				else if (localName == "address")
				{
					Address = new Address();
					Address.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Proximity");
			XElement xItem = null;
			if (GeoPoint != null)
			{
				xItem = new XElement(XName.Get("geoPoint", "https://adwords.google.com/api/adwords/cm/v201609"));
				GeoPoint.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (RadiusDistanceUnits != null)
			{
				xItem = new XElement(XName.Get("radiusDistanceUnits", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RadiusDistanceUnits.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RadiusInUnits != null)
			{
				xItem = new XElement(XName.Get("radiusInUnits", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RadiusInUnits.Value.ToString());
				xE.Add(xItem);
			}
			if (Address != null)
			{
				xItem = new XElement(XName.Get("address", "https://adwords.google.com/api/adwords/cm/v201609"));
				Address.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The radius distance is expressed in either kilometers or miles.
	/// </summary>
	public enum ProximityDistanceUnits
	{
		/// <summary>
		/// The unit of distance is kilometer.
		/// </summary>
		Kilometers,
		/// <summary>
		/// The unit of distance is mile.
		/// </summary>
		Miles
	}
	/// <summary>
	/// Container for criterion quality information.
	/// </summary>
	public class QualityInfo : ISoapable
	{
		/// <summary>
		/// The keyword quality score ranges from 1 (lowest) to 10 (highest).
		/// For v201509 and later, this field may be returned as NULL if AdWords
		/// does not have enough information to determine an appropriate quality
		/// score value.
		/// <span class="constraint Selectable">This field can be selected using the value "QualityScore".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public int? QualityScore { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			QualityScore = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "qualityScore")
				{
					QualityScore = int.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (QualityScore != null)
			{
				xItem = new XElement(XName.Get("qualityScore", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(QualityScore.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A QueryError represents possible errors for query parsing and execution.
	/// </summary>
	public class QueryError : ApiError, ISoapable
	{
		public QueryErrorReason? Reason { get; set; }
		public string QueryErrorMessage { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			QueryErrorMessage = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = QueryErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "message")
				{
					QueryErrorMessage = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "QueryError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (QueryErrorMessage != null)
			{
				xItem = new XElement(XName.Get("message", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(QueryErrorMessage);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the query error.
	/// </summary>
	public enum QueryErrorReason
	{
		/// <summary>
		/// Exception that happens when trying to parse a query that doesn't match the AWQL grammar.
		/// </summary>
		ParsingFailed,
		/// <summary>
		/// The provided query is an empty string.
		/// </summary>
		MissingQuery,
		/// <summary>
		/// The query does not contain the required SELECT clause or it is not in the
		/// correct location.
		/// </summary>
		MissingSelectClause,
		/// <summary>
		/// The query does not contain the required FROM clause or it is not in the correct location.
		/// </summary>
		MissingFromClause,
		/// <summary>
		/// The SELECT clause could not be parsed.
		/// </summary>
		InvalidSelectClause,
		/// <summary>
		/// The FROM clause could not be parsed.
		/// </summary>
		InvalidFromClause,
		/// <summary>
		/// The WHERE clause could not be parsed.
		/// </summary>
		InvalidWhereClause,
		/// <summary>
		/// The ORDER BY clause could not be parsed.
		/// </summary>
		InvalidOrderByClause,
		/// <summary>
		/// The LIMIT clause could not be parsed.
		/// </summary>
		InvalidLimitClause,
		/// <summary>
		/// The startIndex in the LIMIT clause does not contain a valid integer.
		/// </summary>
		InvalidStartIndexInLimitClause,
		/// <summary>
		/// The pageSize in the LIMIT clause does not contain a valid integer.
		/// </summary>
		InvalidPageSizeInLimitClause,
		/// <summary>
		/// The DURING clause could not be parsed.
		/// </summary>
		InvalidDuringClause,
		/// <summary>
		/// The minimum date in the DURING clause is not a valid date in YYYYMMDD format.
		/// </summary>
		InvalidMinDateInDuringClause,
		/// <summary>
		/// The maximum date in the DURING clause is not a valid date in YYYYMMDD format.
		/// </summary>
		InvalidMaxDateInDuringClause,
		/// <summary>
		/// The minimum date in the DURING is after the maximum date.
		/// </summary>
		MaxLessThanMinInDuringClause,
		/// <summary>
		/// The query matched the grammar, but is invalid in some way such as using a service that
		/// isn't supported.
		/// </summary>
		ValidationFailed
	}
	/// <summary>
	/// Encapsulates the errors thrown during developer quota checks.
	/// </summary>
	public class QuotaCheckError : ApiError, ISoapable
	{
		public QuotaCheckErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = QuotaCheckErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "QuotaCheckError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enums for all the reasons an error can be thrown to the user during
	/// billing quota checks.
	/// </summary>
	public enum QuotaCheckErrorReason
	{
		/// <summary>
		/// Customer passed in an invalid token in the header.
		/// </summary>
		InvalidTokenHeader,
		/// <summary>
		/// Customer is marked delinquent.
		/// </summary>
		AccountDelinquent,
		/// <summary>
		/// Customer is a fraudulent.
		/// </summary>
		AccountInaccessible,
		/// <summary>
		/// Inactive Account.
		/// </summary>
		AccountInactive,
		/// <summary>
		/// Signup not complete
		/// </summary>
		IncompleteSignup,
		/// <summary>
		/// Developer token is not approved for production access, and the customer
		/// is attempting to access a production account.
		/// </summary>
		DeveloperTokenNotApproved,
		/// <summary>
		/// Terms and conditions are not signed.
		/// </summary>
		TermsAndConditionsNotSigned,
		/// <summary>
		/// Monthly budget quota reached.
		/// </summary>
		MonthlyBudgetReached,
		/// <summary>
		/// Monthly budget quota exceeded.
		/// </summary>
		QuotaExceeded
	}
	/// <summary>
	/// Represents a range of values that has either an upper or a lower bound.
	/// </summary>
	public class Range : ISoapable
	{
		public ComparableValue Min { get; set; }
		public ComparableValue Max { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Min = null;
			Max = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "min")
				{
					Min = InstanceCreator.CreateComparableValue(xItem);
					Min.ReadFrom(xItem);
				}
				else if (localName == "max")
				{
					Max = InstanceCreator.CreateComparableValue(xItem);
					Max.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Min != null)
			{
				xItem = new XElement(XName.Get("min", "https://adwords.google.com/api/adwords/o/v201609"));
				Min.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Max != null)
			{
				xItem = new XElement(XName.Get("max", "https://adwords.google.com/api/adwords/o/v201609"));
				Max.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A list of all errors associated with the Range constraint.
	/// </summary>
	public class RangeError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public RangeErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RangeErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RangeError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum RangeErrorReason
	{
		TooLow,
		TooHigh
	}
	/// <summary>
	/// Signals that a call failed because a measured rate exceeded.
	/// </summary>
	public class RateExceededError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public RateExceededErrorReason? Reason { get; set; }
		/// <summary>
		/// Cause of the rate exceeded error.
		/// </summary>
		public string RateName { get; set; }
		/// <summary>
		/// The scope of the rate (ACCOUNT/DEVELOPER).
		/// </summary>
		public string RateScope { get; set; }
		/// <summary>
		/// The amount of time (in seconds) the client should wait before retrying the request.
		/// </summary>
		public int? RetryAfterSeconds { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			RateName = null;
			RateScope = null;
			RetryAfterSeconds = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RateExceededErrorReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "rateName")
				{
					RateName = xItem.Value;
				}
				else if (localName == "rateScope")
				{
					RateScope = xItem.Value;
				}
				else if (localName == "retryAfterSeconds")
				{
					RetryAfterSeconds = int.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RateExceededError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RateName != null)
			{
				xItem = new XElement(XName.Get("rateName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RateName);
				xE.Add(xItem);
			}
			if (RateScope != null)
			{
				xItem = new XElement(XName.Get("rateScope", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RateScope);
				xE.Add(xItem);
			}
			if (RetryAfterSeconds != null)
			{
				xItem = new XElement(XName.Get("retryAfterSeconds", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RetryAfterSeconds.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reason for the rate exceeded error.
	/// </summary>
	public enum RateExceededErrorReason
	{
		/// <summary>
		/// Rate exceeded.
		/// </summary>
		RateExceeded
	}
	/// <summary>
	/// Errors from attempting to write to read-only fields.
	/// </summary>
	public class ReadOnlyError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public ReadOnlyErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ReadOnlyErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ReadOnlyError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum ReadOnlyErrorReason
	{
		ReadOnly
	}
	/// <summary>
	/// Settings for Real-Time Bidding, a feature only available for campaigns
	/// targeting the Ad Exchange network.
	/// </summary>
	public class RealTimeBiddingSetting : Setting, ISoapable
	{
		/// <summary>
		/// Whether the campaign is opted in to real-time bidding.
		/// </summary>
		public bool? OptIn { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			OptIn = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "optIn")
				{
					OptIn = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RealTimeBiddingSetting");
			XElement xItem = null;
			if (OptIn != null)
			{
				xItem = new XElement(XName.Get("optIn", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OptIn.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A list of all errors associated with the @RegionCode constraints.
	/// </summary>
	public class RegionCodeError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public RegionCodeErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RegionCodeErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RegionCodeError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the validation error.
	/// </summary>
	public enum RegionCodeErrorReason
	{
		InvalidRegionCode
	}
	/// <summary>
	/// Indicates that a field was rejected due to compatibility issues.
	/// </summary>
	public class RejectedError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public RejectedErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RejectedErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RejectedError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum RejectedErrorReason
	{
		/// <summary>
		/// Unknown value encountered
		/// </summary>
		UnknownValue
	}
	/// <summary>
	/// A {@link SearchParameter} for a query of {@code String}s.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class RelatedToQuerySearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A list of exact keyword match query {@link String}s that the search result
		/// should be related to.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<string> Queries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Queries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "queries")
				{
					if (Queries == null) Queries = new List<string>();
					Queries.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "RelatedToQuerySearchParameter");
			XElement xItem = null;
			if (Queries != null)
			{
				foreach (var queriesItem in Queries)
				{
					xItem = new XElement(XName.Get("queries", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(queriesItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} that specifies a set of URLs that results should
	/// in some way be related to. For example, keyword results would be
	/// similar to content keywords found on the related URLs.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS.
	/// </summary>
	public class RelatedToUrlSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// A set of URL strings to which search results should be related.
		/// For {@code KEYWORD} queries, only one URL may be submitted.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<string> Urls { get; set; }
		/// <summary>
		/// Whether to crawl links off of the {@code urls} for the same domain.
		/// Default is {@code false}.
		/// </summary>
		public bool? IncludeSubUrls { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Urls = null;
			IncludeSubUrls = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "urls")
				{
					if (Urls == null) Urls = new List<string>();
					Urls.Add(xItem.Value);
				}
				else if (localName == "includeSubUrls")
				{
					IncludeSubUrls = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "RelatedToUrlSearchParameter");
			XElement xItem = null;
			if (Urls != null)
			{
				foreach (var urlsItem in Urls)
				{
					xItem = new XElement(XName.Get("urls", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(urlsItem);
					xE.Add(xItem);
				}
			}
			if (IncludeSubUrls != null)
			{
				xItem = new XElement(XName.Get("includeSubUrls", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(IncludeSubUrls.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Customer-wide settings related to AdWords remarketing.
	/// </summary>
	public class RemarketingSettings : ISoapable
	{
		/// <summary>
		/// The Adwords remarketing tag snippet for the customer.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Snippet { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Snippet = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
		}
	}
	public enum ReportDefinitionDateRangeType
	{
		Today,
		Yesterday,
		Last7Days,
		LastWeek,
		LastBusinessWeek,
		ThisMonth,
		LastMonth,
		AllTime,
		CustomDate,
		Last14Days,
		Last30Days,
		ThisWeekSunToday,
		ThisWeekMonToday,
		LastWeekSunSat
	}
	/// <summary>
	/// Encapsulates the errors that can be thrown during {@link ReportDefinition}
	/// mutate operation.
	/// </summary>
	public class ReportDefinitionError : ApiError, ISoapable
	{
		public ReportDefinitionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = ReportDefinitionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ReportDefinitionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Enums for all the reasons an error can be thrown to the user during
	/// a {@link ReportDefinitionService#mutate(java.util.List)} operation.
	/// </summary>
	public enum ReportDefinitionErrorReason
	{
		/// <summary>
		/// Customer passed in invalid date range for a report type.
		/// </summary>
		InvalidDateRangeForReport,
		/// <summary>
		/// Customer passed in invalid field name for a report type
		/// </summary>
		InvalidFieldNameForReport,
		/// <summary>
		/// Unable to locate a field mapping for this report type.
		/// </summary>
		UnableToFindMappingForThisReport,
		/// <summary>
		/// Customer passed in invalid column name for a report type
		/// </summary>
		InvalidColumnNameForReport,
		/// <summary>
		/// Customer passed in invalid report definition id.
		/// </summary>
		InvalidReportDefinitionId,
		/// <summary>
		/// Report selector cannot be null.
		/// </summary>
		ReportSelectorCannotBeNull,
		/// <summary>
		/// No Enums exist for this column name.
		/// </summary>
		NoEnumsForThisColumnName,
		/// <summary>
		/// Invalid view name.
		/// </summary>
		InvalidView,
		/// <summary>
		/// Sorting is not supported for reports.
		/// </summary>
		SortingNotSupported,
		/// <summary>
		/// Paging is not supported for reports.
		/// </summary>
		PagingNotSupported,
		/// <summary>
		/// Customer can not create report of a selected type.
		/// </summary>
		CustomerServingTypeReportMismatch,
		/// <summary>
		/// Cross client report has an client selector without any valid identifier
		/// for a customer.
		/// </summary>
		ClientSelectorNoCustomerIdentifier,
		/// <summary>
		/// Cross client report has an invalid external customer ID in the client
		/// selector.
		/// </summary>
		ClientSelectorInvalidCustomerId,
		ReportDefinitionError
	}
	/// <summary>
	/// Represents the fields that can be used to create a ReportDefinition.
	/// This class allows the user to query the list of fields applicable to a
	/// given report type. Consumers of reports will be able use the retrieved
	/// fields through the {@link ReportDefinitionService#getReportFields}
	/// api and run the corresponding reports.
	/// </summary>
	public class ReportDefinitionField : ISoapable
	{
		/// <summary>
		/// The field name.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string FieldName { get; set; }
		/// <summary>
		/// The name that is displayed in the downloaded report.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string DisplayFieldName { get; set; }
		/// <summary>
		/// The XML attribute in the downloaded report.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string XmlAttributeName { get; set; }
		/// <summary>
		/// The type of field. Useful for knowing what operation type to pass in for
		/// a given field in a predicate.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string FieldType { get; set; }
		/// <summary>
		/// The behavior of this field. Possible values are: "ATTRIBUTE", "METRIC"
		/// and "SEGMENT".
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string FieldBehavior { get; set; }
		/// <summary>
		/// List of enum values for the corresponding field if and only if the
		/// field is an enum type.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> EnumValues { get; set; }
		/// <summary>
		/// Indicates if the user can select this field.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? CanSelect { get; set; }
		/// <summary>
		/// Indicates if the user can filter on this field.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? CanFilter { get; set; }
		/// <summary>
		/// Indicates that the field is an enum type.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsEnumType { get; set; }
		/// <summary>
		/// Indicates that the field is only available with beta access.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsBeta { get; set; }
		/// <summary>
		/// Indicates if the field can be selected in queries that explicitly request zero rows.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsZeroRowCompatible { get; set; }
		/// <summary>
		/// List of enum values in api to their corresponding display values in the
		/// downloaded reports.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<EnumValuePair> EnumValuePairs { get; set; }
		/// <summary>
		/// List of mutually exclusive fields of this field. This field cannot be selected or used in
		/// a predicate together with any of the mutually exclusive fields in this list.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> ExclusiveFields { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			FieldName = null;
			DisplayFieldName = null;
			XmlAttributeName = null;
			FieldType = null;
			FieldBehavior = null;
			EnumValues = null;
			CanSelect = null;
			CanFilter = null;
			IsEnumType = null;
			IsBeta = null;
			IsZeroRowCompatible = null;
			EnumValuePairs = null;
			ExclusiveFields = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "fieldName")
				{
					FieldName = xItem.Value;
				}
				else if (localName == "displayFieldName")
				{
					DisplayFieldName = xItem.Value;
				}
				else if (localName == "xmlAttributeName")
				{
					XmlAttributeName = xItem.Value;
				}
				else if (localName == "fieldType")
				{
					FieldType = xItem.Value;
				}
				else if (localName == "fieldBehavior")
				{
					FieldBehavior = xItem.Value;
				}
				else if (localName == "enumValues")
				{
					if (EnumValues == null) EnumValues = new List<string>();
					EnumValues.Add(xItem.Value);
				}
				else if (localName == "canSelect")
				{
					CanSelect = bool.Parse(xItem.Value);
				}
				else if (localName == "canFilter")
				{
					CanFilter = bool.Parse(xItem.Value);
				}
				else if (localName == "isEnumType")
				{
					IsEnumType = bool.Parse(xItem.Value);
				}
				else if (localName == "isBeta")
				{
					IsBeta = bool.Parse(xItem.Value);
				}
				else if (localName == "isZeroRowCompatible")
				{
					IsZeroRowCompatible = bool.Parse(xItem.Value);
				}
				else if (localName == "enumValuePairs")
				{
					if (EnumValuePairs == null) EnumValuePairs = new List<EnumValuePair>();
					var enumValuePairsItem = new EnumValuePair();
					enumValuePairsItem.ReadFrom(xItem);
					EnumValuePairs.Add(enumValuePairsItem);
				}
				else if (localName == "exclusiveFields")
				{
					if (ExclusiveFields == null) ExclusiveFields = new List<string>();
					ExclusiveFields.Add(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (FieldName != null)
			{
				xItem = new XElement(XName.Get("fieldName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldName);
				xE.Add(xItem);
			}
			if (DisplayFieldName != null)
			{
				xItem = new XElement(XName.Get("displayFieldName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DisplayFieldName);
				xE.Add(xItem);
			}
			if (XmlAttributeName != null)
			{
				xItem = new XElement(XName.Get("xmlAttributeName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(XmlAttributeName);
				xE.Add(xItem);
			}
			if (FieldType != null)
			{
				xItem = new XElement(XName.Get("fieldType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldType);
				xE.Add(xItem);
			}
			if (FieldBehavior != null)
			{
				xItem = new XElement(XName.Get("fieldBehavior", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldBehavior);
				xE.Add(xItem);
			}
			if (EnumValues != null)
			{
				foreach (var enumValuesItem in EnumValues)
				{
					xItem = new XElement(XName.Get("enumValues", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(enumValuesItem);
					xE.Add(xItem);
				}
			}
			if (CanSelect != null)
			{
				xItem = new XElement(XName.Get("canSelect", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CanSelect.Value.ToString());
				xE.Add(xItem);
			}
			if (CanFilter != null)
			{
				xItem = new XElement(XName.Get("canFilter", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CanFilter.Value.ToString());
				xE.Add(xItem);
			}
			if (IsEnumType != null)
			{
				xItem = new XElement(XName.Get("isEnumType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsEnumType.Value.ToString());
				xE.Add(xItem);
			}
			if (IsBeta != null)
			{
				xItem = new XElement(XName.Get("isBeta", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsBeta.Value.ToString());
				xE.Add(xItem);
			}
			if (IsZeroRowCompatible != null)
			{
				xItem = new XElement(XName.Get("isZeroRowCompatible", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsZeroRowCompatible.Value.ToString());
				xE.Add(xItem);
			}
			if (EnumValuePairs != null)
			{
				foreach (var enumValuePairsItem in EnumValuePairs)
				{
					xItem = new XElement(XName.Get("enumValuePairs", "https://adwords.google.com/api/adwords/cm/v201609"));
					enumValuePairsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (ExclusiveFields != null)
			{
				foreach (var exclusiveFieldsItem in ExclusiveFields)
				{
					xItem = new XElement(XName.Get("exclusiveFields", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(exclusiveFieldsItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Enums for report types.
	/// </summary>
	public enum ReportDefinitionReportType
	{
		/// <summary>
		/// Reports performance data for your keywords.
		/// </summary>
		KeywordsPerformanceReport,
		/// <summary>
		/// Reports performance data for your ads.
		/// </summary>
		AdPerformanceReport,
		/// <summary>
		/// Reports performance data for URLs which triggered your ad and
		/// received clicks.
		/// </summary>
		UrlPerformanceReport,
		/// <summary>
		/// Reports ad group performance data for one or more of your campaigns.
		/// </summary>
		AdgroupPerformanceReport,
		/// <summary>
		/// Reports performance data for your campaigns.
		/// </summary>
		CampaignPerformanceReport,
		/// <summary>
		/// Reports performance data for your entire account.
		/// </summary>
		AccountPerformanceReport,
		/// <summary>
		/// Reports performance data by geographic origin.
		/// </summary>
		GeoPerformanceReport,
		/// <summary>
		/// Reports performance data for search queries which triggered your ad and
		/// received clicks.
		/// </summary>
		SearchQueryPerformanceReport,
		/// <summary>
		/// Reports performance data for automatic placements on the content network.
		/// </summary>
		AutomaticPlacementsPerformanceReport,
		/// <summary>
		/// Reports performance data for negative keywords at the campaign level.
		/// </summary>
		CampaignNegativeKeywordsPerformanceReport,
		/// <summary>
		/// Reports performance data for the negative placements at the campaign
		/// level.
		/// </summary>
		CampaignNegativePlacementsPerformanceReport,
		/// <summary>
		/// Reports performance data for destination urls.
		/// </summary>
		DestinationUrlReport,
		/// <summary>
		/// Reports data for shared sets.
		/// </summary>
		SharedSetReport,
		/// <summary>
		/// Reports data for campaign shared sets.
		/// </summary>
		CampaignSharedSetReport,
		/// <summary>
		/// Provides a downloadable snapshot of shared set criteria.
		/// </summary>
		SharedSetCriteriaReport,
		/// <summary>
		/// Reports performance data for creative conversions (e.g. free clicks).
		/// </summary>
		CreativeConversionReport,
		/// <summary>
		/// Reports per-phone-call details for calls tracked using call metrics.
		/// </summary>
		CallMetricsCallDetailsReport,
		/// <summary>
		/// Reports performance data for keywordless ads.
		/// </summary>
		KeywordlessQueryReport,
		/// <summary>
		/// Reports performance data for keywordless ads.
		/// </summary>
		KeywordlessCategoryReport,
		/// <summary>
		/// Reports performance data for all published criteria types including keywords,
		/// placements, topics, user-lists in a single report.
		/// </summary>
		CriteriaPerformanceReport,
		/// <summary>
		/// Reports performance data for clicks.
		/// </summary>
		ClickPerformanceReport,
		/// <summary>
		/// Reports performance data for budgets.
		/// </summary>
		BudgetPerformanceReport,
		/// <summary>
		/// Reports performance data for your (shared) bid strategies.
		/// </summary>
		BidGoalPerformanceReport,
		/// <summary>
		/// Reports performance data for your display keywords.
		/// </summary>
		DisplayKeywordPerformanceReport,
		/// <summary>
		/// Reports performance data for your placeholder feed items
		/// </summary>
		PlaceholderFeedItemReport,
		/// <summary>
		/// Reports performance data for your placements.
		/// </summary>
		PlacementPerformanceReport,
		/// <summary>
		/// Reports performance data for negative location targets at campaign level.
		/// </summary>
		CampaignNegativeLocationsReport,
		/// <summary>
		/// Reports performance data for managed and automatic genders in a combined report.
		/// </summary>
		GenderPerformanceReport,
		/// <summary>
		/// Reports performance data for managed and automatic age ranges in a combined report.
		/// </summary>
		AgeRangePerformanceReport,
		/// <summary>
		/// Reports performance data for campaign level location targets.
		/// </summary>
		CampaignLocationTargetReport,
		/// <summary>
		/// Reports performance data for campaign level ad schedule targets.
		/// </summary>
		CampaignAdScheduleTargetReport,
		/// <summary>
		/// Paid & organic report
		/// </summary>
		PaidOrganicQueryReport,
		/// <summary>
		/// Reports performance data for your audience criteria.
		/// </summary>
		AudiencePerformanceReport,
		/// <summary>
		/// Reports performance data for your topic criteria.
		/// </summary>
		DisplayTopicsPerformanceReport,
		/// <summary>
		/// Distance report
		/// </summary>
		UserAdDistanceReport,
		/// <summary>
		/// Performance data for shopping campaigns.
		/// </summary>
		ShoppingPerformanceReport,
		/// <summary>
		/// Performance data for product partitions in shopping campaigns.
		/// </summary>
		ProductPartitionReport,
		/// <summary>
		/// Reports performance data for managed and automatic parental statuses in a combined report.
		/// </summary>
		ParentalStatusPerformanceReport,
		/// <summary>
		/// Performance data for Extension placeholders
		/// </summary>
		PlaceholderReport,
		/// <summary>
		/// Reports performance of ad placeholders when instantiated with specific FeedItems.
		/// </summary>
		AdCustomizersFeedItemReport,
		/// <summary>
		/// Reports stats and settings details for labels.
		/// </summary>
		LabelReport,
		/// <summary>
		/// Reports performance data for final urls.
		/// </summary>
		FinalUrlReport,
		/// <summary>
		/// Video performance report.
		/// </summary>
		VideoPerformanceReport,
		/// <summary>
		/// Reports performance data for top content bid modifier criteria.
		/// </summary>
		TopContentPerformanceReport,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An operand in a function referring to a value in the request context.
	/// </summary>
	public class RequestContextOperand : FunctionArgumentOperand, ISoapable
	{
		/// <summary>
		/// Type of value to be referred in the request context.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public RequestContextOperandContextType? ContextType { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ContextType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "contextType")
				{
					ContextType = RequestContextOperandContextTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RequestContextOperand");
			XElement xItem = null;
			if (ContextType != null)
			{
				xItem = new XElement(XName.Get("contextType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ContextType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum RequestContextOperandContextType
	{
		/// <summary>
		/// Feed item id in the request context.
		/// </summary>
		FeedItemId,
		/// <summary>
		/// The device's platform (possible values are 'Desktop' or 'Mobile').
		/// </summary>
		DevicePlatform,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Encapsulates the generic errors thrown when there's an error with user
	/// request.
	/// </summary>
	public class RequestError : ApiError, ISoapable
	{
		public RequestErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RequestErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RequestError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum RequestErrorReason
	{
		/// <summary>
		/// Error reason is unknown.
		/// </summary>
		Unknown,
		/// <summary>
		/// Invalid input.
		/// </summary>
		InvalidInput,
		/// <summary>
		/// The api version in the request has been discontinued. Please update
		/// to the new AdWords API version.
		/// </summary>
		UnsupportedVersion
	}
	/// <summary>
	/// Represents the type of the request.
	/// </summary>
	public enum RequestType
	{
		/// <summary>
		/// Request for new ideas based on other entries in selector.
		/// This {@link RequestType} can be used to request other ideas
		/// using keyword/placements that the user already has.
		/// </summary>
		Ideas,
		/// <summary>
		/// Request for stats for entries in selector.
		/// This {@link RequestType} can be used to request
		/// the stats for keywords/placements that the user already has.
		///
		/// <p>Stats are generated once a month (typically on the last week of the
		/// month) from the historical data of previous months.</p>
		/// </summary>
		Stats
	}
	/// <summary>
	/// Errors due to missing required field.
	/// </summary>
	public class RequiredError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public RequiredErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = RequiredErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RequiredError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum RequiredErrorReason
	{
		/// <summary>
		/// Missing required field.
		/// </summary>
		Required
	}
	/// <summary>
	/// Enhanced display ad format.
	///
	/// <p class="caution"><b>Caution:</b> Responsive display ads do not use {@link #url url},
	/// {@link #displayUrl displayUrl}, {@link #finalAppUrls finalAppUrls}, or
	/// {@link #devicePreference devicePreference};
	/// setting these fields on a responsive display ad will cause an error.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ResponsiveDisplayAd : Ad, ISoapable
	{
		/// <summary>
		/// Marketing image to be used in the ad.
		/// This ad format does not allow the creation of an image using the Image.data field. An image
		/// must first be created using the MediaService, and Image.mediaId must be populated when creating
		/// a {@link "ResponsiveDisplayAd"}.
		/// <span class="constraint Selectable">This field can be selected using the value "MarketingImage".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public Image MarketingImage { get; set; }
		/// <summary>
		/// Logo image to be used in the ad.
		/// This ad format does not allow the creation of an image using the Image.data field. An image
		/// must first be created using the MediaService, and Image.mediaId must be populated when creating
		/// a {@link "ResponsiveDisplayAd"}.
		/// <span class="constraint Selectable">This field can be selected using the value "LogoImage".</span>
		/// </summary>
		public Image LogoImage { get; set; }
		/// <summary>
		/// Short format of the headline of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "ShortHeadline".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string ShortHeadline { get; set; }
		/// <summary>
		/// Long format of the headline of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "LongHeadline".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string LongHeadline { get; set; }
		/// <summary>
		/// The descriptive text of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "Description".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// The business name.
		/// <span class="constraint Required">This field is required and should not be {@code null}
		/// when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "BusinessName".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string BusinessName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			MarketingImage = null;
			LogoImage = null;
			ShortHeadline = null;
			LongHeadline = null;
			Description = null;
			BusinessName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "marketingImage")
				{
					MarketingImage = new Image();
					MarketingImage.ReadFrom(xItem);
				}
				else if (localName == "logoImage")
				{
					LogoImage = new Image();
					LogoImage.ReadFrom(xItem);
				}
				else if (localName == "shortHeadline")
				{
					ShortHeadline = xItem.Value;
				}
				else if (localName == "longHeadline")
				{
					LongHeadline = xItem.Value;
				}
				else if (localName == "description")
				{
					Description = xItem.Value;
				}
				else if (localName == "businessName")
				{
					BusinessName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ResponsiveDisplayAd");
			XElement xItem = null;
			if (MarketingImage != null)
			{
				xItem = new XElement(XName.Get("marketingImage", "https://adwords.google.com/api/adwords/cm/v201609"));
				MarketingImage.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (LogoImage != null)
			{
				xItem = new XElement(XName.Get("logoImage", "https://adwords.google.com/api/adwords/cm/v201609"));
				LogoImage.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ShortHeadline != null)
			{
				xItem = new XElement(XName.Get("shortHeadline", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ShortHeadline);
				xE.Add(xItem);
			}
			if (LongHeadline != null)
			{
				xItem = new XElement(XName.Get("longHeadline", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(LongHeadline);
				xE.Add(xItem);
			}
			if (Description != null)
			{
				xItem = new XElement(XName.Get("description", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description);
				xE.Add(xItem);
			}
			if (BusinessName != null)
			{
				xItem = new XElement(XName.Get("businessName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BusinessName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a Review extension.
	/// </summary>
	public class ReviewFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// An exact quote or paraphrase from a third-party source.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string ReviewText { get; set; }
		/// <summary>
		/// Name of the third-party publisher of the review.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string ReviewSourceName { get; set; }
		/// <summary>
		/// Landing page of the third-party website of the review.
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string ReviewSourceUrl { get; set; }
		/// <summary>
		/// Indicates if your review is formatted as an exact quote. Use a value of false to indicate that
		/// the review is paraphrased. If not set, the value is treated as false.
		/// </summary>
		public bool? ReviewTextExactlyQuoted { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ReviewText = null;
			ReviewSourceName = null;
			ReviewSourceUrl = null;
			ReviewTextExactlyQuoted = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reviewText")
				{
					ReviewText = xItem.Value;
				}
				else if (localName == "reviewSourceName")
				{
					ReviewSourceName = xItem.Value;
				}
				else if (localName == "reviewSourceUrl")
				{
					ReviewSourceUrl = xItem.Value;
				}
				else if (localName == "reviewTextExactlyQuoted")
				{
					ReviewTextExactlyQuoted = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ReviewFeedItem");
			XElement xItem = null;
			if (ReviewText != null)
			{
				xItem = new XElement(XName.Get("reviewText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReviewText);
				xE.Add(xItem);
			}
			if (ReviewSourceName != null)
			{
				xItem = new XElement(XName.Get("reviewSourceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReviewSourceName);
				xE.Add(xItem);
			}
			if (ReviewSourceUrl != null)
			{
				xItem = new XElement(XName.Get("reviewSourceUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReviewSourceUrl);
				xE.Add(xItem);
			}
			if (ReviewTextExactlyQuoted != null)
			{
				xItem = new XElement(XName.Get("reviewTextExactlyQuoted", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReviewTextExactlyQuoted.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Data associated with a rich media ad.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public abstract class RichMediaAd : Ad, ISoapable
	{
		/// <summary>
		/// Name of the rich media ad.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdName".</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Dimensions (height and width) of the ad.
		///
		/// This field is optional for ThirdPartyRedirectAd.  Ad Exchange traditional
		/// yield management creatives do not specify the dimension on the
		/// ThirdPartyRedirectAd; instead, the size is specified in the publisher
		/// front end when creating a mediation chain.
		/// </summary>
		public Dimensions Dimensions { get; set; }
		/// <summary>
		/// Snippet for this ad. Required for standard third-party ads.
		/// <p>The length of the string should be between 1 and 3072, inclusive.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdSnippet".</span>
		/// </summary>
		public string Snippet { get; set; }
		/// <summary>
		/// Impression beacon URL for the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdImpressionBeaconUrl".</span>
		/// </summary>
		public string ImpressionBeaconUrl { get; set; }
		/// <summary>
		/// Duration for the ad (in milliseconds). Default is 0.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdDuration".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public int? AdDuration { get; set; }
		/// <summary>
		/// <a href="/adwords/api/docs/appendix/richmediacodes">
		/// Certified Vendor Format ID</a>.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdCertifiedVendorFormatId".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? CertifiedVendorFormatId { get; set; }
		/// <summary>
		/// SourceUrl pointing to the third party snippet.
		/// For third party in-stream video ads, this stores the VAST URL. For DFA ads,
		/// it stores the InRed URL.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdSourceUrl".</span>
		/// </summary>
		public string SourceUrl { get; set; }
		/// <summary>
		/// Type of this rich media ad, the default is Standard.
		/// <span class="constraint Selectable">This field can be selected using the value "RichMediaAdType".</span>
		/// </summary>
		public RichMediaAdRichMediaAdType? RichMediaAdType { get; set; }
		/// <summary>
		/// A list of attributes that describe the rich media ad capabilities.
		/// </summary>
		public List<RichMediaAdAdAttribute> AdAttributes { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Name = null;
			Dimensions = null;
			Snippet = null;
			ImpressionBeaconUrl = null;
			AdDuration = null;
			CertifiedVendorFormatId = null;
			SourceUrl = null;
			RichMediaAdType = null;
			AdAttributes = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "dimensions")
				{
					Dimensions = new Dimensions();
					Dimensions.ReadFrom(xItem);
				}
				else if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
				else if (localName == "impressionBeaconUrl")
				{
					ImpressionBeaconUrl = xItem.Value;
				}
				else if (localName == "adDuration")
				{
					AdDuration = int.Parse(xItem.Value);
				}
				else if (localName == "certifiedVendorFormatId")
				{
					CertifiedVendorFormatId = long.Parse(xItem.Value);
				}
				else if (localName == "sourceUrl")
				{
					SourceUrl = xItem.Value;
				}
				else if (localName == "richMediaAdType")
				{
					RichMediaAdType = RichMediaAdRichMediaAdTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "adAttributes")
				{
					if (AdAttributes == null) AdAttributes = new List<RichMediaAdAdAttribute>();
					AdAttributes.Add(RichMediaAdAdAttributeExtensions.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "RichMediaAd");
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Dimensions != null)
			{
				xItem = new XElement(XName.Get("dimensions", "https://adwords.google.com/api/adwords/cm/v201609"));
				Dimensions.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
			if (ImpressionBeaconUrl != null)
			{
				xItem = new XElement(XName.Get("impressionBeaconUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ImpressionBeaconUrl);
				xE.Add(xItem);
			}
			if (AdDuration != null)
			{
				xItem = new XElement(XName.Get("adDuration", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdDuration.Value.ToString());
				xE.Add(xItem);
			}
			if (CertifiedVendorFormatId != null)
			{
				xItem = new XElement(XName.Get("certifiedVendorFormatId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CertifiedVendorFormatId.Value.ToString());
				xE.Add(xItem);
			}
			if (SourceUrl != null)
			{
				xItem = new XElement(XName.Get("sourceUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SourceUrl);
				xE.Add(xItem);
			}
			if (RichMediaAdType != null)
			{
				xItem = new XElement(XName.Get("richMediaAdType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RichMediaAdType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AdAttributes != null)
			{
				foreach (var adAttributesItem in AdAttributes)
				{
					xItem = new XElement(XName.Get("adAttributes", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(adAttributesItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A set of attributes that describe the rich media ad capabilities.
	/// </summary>
	public enum RichMediaAdAdAttribute
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Indicates that the ad supports mouse roll over to expand.
		/// </summary>
		RollOverToExpand,
		/// <summary>
		/// Indicates that the ad supports SSL.
		/// </summary>
		Ssl
	}
	/// <summary>
	/// Different types of rich media ad that are available to customers.
	/// </summary>
	public enum RichMediaAdRichMediaAdType
	{
		/// <summary>
		/// Standard.
		/// </summary>
		Standard,
		/// <summary>
		/// In stream video ad.
		/// </summary>
		InStreamVideo
	}
	/// <summary>
	/// A client defined rule based on custom parameters sent by web sites.
	/// It consists of rule item groups that are connected by OR.
	/// </summary>
	public class Rule : ISoapable
	{
		/// <summary>
		/// Lists of rule item groups that defines this rule. The rule item groups
		/// are ORed together for evaluation.
		/// <span class="constraint CollectionSize">The minimum size of this collection is 1.</span>
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<RuleItemGroup> Groups { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Groups = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "groups")
				{
					if (Groups == null) Groups = new List<RuleItemGroup>();
					var groupsItem = new RuleItemGroup();
					groupsItem.ReadFrom(xItem);
					Groups.Add(groupsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Groups != null)
			{
				foreach (var groupsItem in Groups)
				{
					xItem = new XElement(XName.Get("groups", "https://adwords.google.com/api/adwords/rm/v201609"));
					groupsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Representation of a userlist that is generated by a rule.
	/// </summary>
	public class RuleBasedUserList : UserList, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "RuleBasedUserList");
		}
	}
	/// <summary>
	/// An atomic rule fragment.
	/// </summary>
	public class RuleItem : ISoapable
	{
		public DateRuleItem DateRuleItem { get; set; }
		public NumberRuleItem NumberRuleItem { get; set; }
		public StringRuleItem StringRuleItem { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "DateRuleItem")
				{
					DateRuleItem = new DateRuleItem();
					DateRuleItem.ReadFrom(xItem);
				}
				else if (localName == "NumberRuleItem")
				{
					NumberRuleItem = new NumberRuleItem();
					NumberRuleItem.ReadFrom(xItem);
				}
				else if (localName == "StringRuleItem")
				{
					StringRuleItem = new StringRuleItem();
					StringRuleItem.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			xItem = new XElement(XName.Get("DateRuleItem", "https://adwords.google.com/api/adwords/rm/v201609"));
			DateRuleItem.WriteTo(xItem);
			xE.Add(xItem);
			xItem = new XElement(XName.Get("NumberRuleItem", "https://adwords.google.com/api/adwords/rm/v201609"));
			NumberRuleItem.WriteTo(xItem);
			xE.Add(xItem);
			xItem = new XElement(XName.Get("StringRuleItem", "https://adwords.google.com/api/adwords/rm/v201609"));
			StringRuleItem.WriteTo(xItem);
			xE.Add(xItem);
		}
	}
	/// <summary>
	/// A group of rule items that are ANDed together.
	/// </summary>
	public class RuleItemGroup : ISoapable
	{
		/// <summary>
		/// <span class="constraint CollectionSize">The minimum size of this collection is 1.</span>
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<RuleItem> Items { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Items = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "items")
				{
					if (Items == null) Items = new List<RuleItem>();
					var itemsItem = new RuleItem();
					itemsItem.ReadFrom(xItem);
					Items.Add(itemsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Items != null)
			{
				foreach (var itemsItem in Items)
				{
					xItem = new XElement(XName.Get("items", "https://adwords.google.com/api/adwords/rm/v201609"));
					itemsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A set of {@link SearchParameter}s is supplied to the {@link TargetingIdeaSelector} to specify how
	/// the user wants to filter the set of all possible {@link TargetingIdea}s.
	///
	/// <p>There is a {@link SearchParameter} for each type of input.
	/// {@link SearchParameter}s can conceptually be broken down into two types.</p>
	///
	/// <ul>
	/// <li>Input {@link SearchParameter}s provide the seed information from which
	/// ideas or stats are to be generated (e.g., {@link RelatedToQuerySearchParameter},
	/// {@link RelatedToUrlSearchParameter}, etc.). This type of {@link SearchParameters}
	/// is required in requests.
	/// <li>Filter {@link SearchParameter}s (e.g., {@link CompetitionSearchParameter}, etc.)
	/// are used to trim down the results based on {@link Attribute}-related information.
	/// </ul>
	///
	/// <p>A request should only contain one instance of each {@link SearchParameter}.
	/// Requests containing multiple instances of the same search parameter will be
	/// rejected.</p>
	/// <p>One or more of the following {@link SearchParameter}s are required:<br/>
	/// <ul><li>{@link CategoryProductsAndServicesSearchParameter}</li>
	/// <li>{@link LocationSearchParameter}</li>
	/// <li>{@link RelatedToQuerySearchParameter}</li>
	/// <li>{@link RelatedToUrlSearchParameter}</li>
	/// <li>{@link SeedAdGroupIdSearchParameter}</li>
	/// </ul><p>
	/// <p><b>{@link IdeaType} KEYWORD supports following {@link SearchParameter}s:</b><br/>
	/// <ul>
	/// <li>{@link CategoryProductsAndServicesSearchParameter}</li>
	/// <li>{@link CompetitionSearchParameter}</li>
	/// <li>{@link IdeaTextFilterSearchParameter}</li>
	/// <li>{@link IncludeAdultContentSearchParameter}</li>
	/// <li>{@link LanguageSearchParameter}</li>
	/// <li>{@link LocationSearchParameter}</li>
	/// <li>{@link NetworkSearchParameter}</li>
	/// <li>{@link RelatedToQuerySearchParameter}</li>
	/// <li>{@link RelatedToUrlSearchParameter}</li>
	/// <li>{@link SearchVolumeSearchParameter}</li>
	/// <li>{@link SeedAdGroupIdSearchParameter}</li>
	/// </ul><p>
	/// </summary>
	public abstract class SearchParameter : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of SearchParameter.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string SearchParameterType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SearchParameterType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "SearchParameter.Type")
				{
					SearchParameterType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SearchParameterType != null)
			{
				xItem = new XElement(XName.Get("SearchParameter.Type", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(SearchParameterType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} that specifies the level of search volume expected in results,
	/// and it has a direct relationship to {@link AttributeType#SEARCH_VOLUME SEARCH_VOLUME}. Absence of
	/// a {@link SearchVolumeSearchParameter} in a {@link TargetingIdeaSelector} is equivalent to having
	/// no constraint on search volume specified.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS, STATS.
	/// </summary>
	public class SearchVolumeSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// Used to specify the range of search volume.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public LongComparisonOperation Operation { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operation = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operation")
				{
					Operation = new LongComparisonOperation();
					Operation.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "SearchVolumeSearchParameter");
			XElement xItem = null;
			if (Operation != null)
			{
				xItem = new XElement(XName.Get("operation", "https://adwords.google.com/api/adwords/o/v201609"));
				Operation.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A {@link SearchParameter} for {@code KEYWORD} {@link IdeaType}s
	/// that specifies that the supplied AdGroup should be used as a seed
	/// for generating new ideas. For example, an AdGroup's keywords
	/// would be used to generate new and related keywords.
	/// <p>This element is supported by following {@link IdeaType}s: KEYWORD.
	/// <p>This element is supported by following {@link RequestType}s: IDEAS.
	/// </summary>
	public class SeedAdGroupIdSearchParameter : SearchParameter, ISoapable
	{
		/// <summary>
		/// The id for the ad group that should be used as a seed for generating new ideas.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? AdGroupId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AdGroupId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "adGroupId")
				{
					AdGroupId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "SeedAdGroupIdSearchParameter");
			XElement xItem = null;
			if (AdGroupId != null)
			{
				xItem = new XElement(XName.Get("adGroupId", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(AdGroupId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Selected set of conversion types for optimizing campaigns. For e.g. For universal app campaigns,
	/// these are the set of in-app actions to optimize the campaign towards.
	/// </summary>
	public class SelectiveOptimization : ISoapable
	{
		/// <summary>
		/// The selected conversion ids for selective optimization.
		/// </summary>
		public List<long> ConversionTypeIds { get; set; }
		/// <summary>
		/// The selected conversion ids ops for selective optimization.
		/// </summary>
		public ListOperations ConversionTypeIdsOps { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ConversionTypeIds = null;
			ConversionTypeIdsOps = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "conversionTypeIds")
				{
					if (ConversionTypeIds == null) ConversionTypeIds = new List<long>();
					ConversionTypeIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "conversionTypeIdsOps")
				{
					ConversionTypeIdsOps = new ListOperations();
					ConversionTypeIdsOps.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ConversionTypeIds != null)
			{
				foreach (var conversionTypeIdsItem in ConversionTypeIds)
				{
					xItem = new XElement(XName.Get("conversionTypeIds", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(conversionTypeIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ConversionTypeIdsOps != null)
			{
				xItem = new XElement(XName.Get("conversionTypeIdsOps", "https://adwords.google.com/api/adwords/cm/v201609"));
				ConversionTypeIdsOps.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A generic selector to specify the type of information to return.
	/// </summary>
	public class Selector : ISoapable
	{
		/// <summary>
		/// List of fields to select.
		/// <a href="/adwords/api/docs/appendix/selectorfields">Possible values</a>
		/// are marked {@code Selectable} on the entity's reference page.
		/// For example, for the {@code CampaignService} selector, refer to the
		/// selectable fields from the {@link Campaign} reference page.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<string> Fields { get; set; }
		/// <summary>
		/// Specifies how an entity (eg. adgroup, campaign, criterion, ad) should be filtered.
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<Predicate> Predicates { get; set; }
		/// <summary>
		/// Range of dates for which you want to include data. If this value is omitted,
		/// results for all dates are returned.
		/// <p class="note"><b>Note:</b> This field is only used by the report download
		/// service. For all other services, it is ignored.</p>
		/// <span class="constraint DateRangeWithinRange">This range must be contained within the range [19700101, 20380101].</span>
		/// </summary>
		public DateRange DateRange { get; set; }
		/// <summary>
		/// The fields on which you want to sort, and the sort order. The order in the list is
		/// significant: The first element in the list indicates the primary sort order, the next
		/// specifies the secondary sort order and so on.
		/// </summary>
		public List<OrderBy> Ordering { get; set; }
		/// <summary>
		/// Pagination information.
		/// </summary>
		public Paging Paging { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Fields = null;
			Predicates = null;
			DateRange = null;
			Ordering = null;
			Paging = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "fields")
				{
					if (Fields == null) Fields = new List<string>();
					Fields.Add(xItem.Value);
				}
				else if (localName == "predicates")
				{
					if (Predicates == null) Predicates = new List<Predicate>();
					var predicatesItem = new Predicate();
					predicatesItem.ReadFrom(xItem);
					Predicates.Add(predicatesItem);
				}
				else if (localName == "dateRange")
				{
					DateRange = new DateRange();
					DateRange.ReadFrom(xItem);
				}
				else if (localName == "ordering")
				{
					if (Ordering == null) Ordering = new List<OrderBy>();
					var orderingItem = new OrderBy();
					orderingItem.ReadFrom(xItem);
					Ordering.Add(orderingItem);
				}
				else if (localName == "paging")
				{
					Paging = new Paging();
					Paging.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Fields != null)
			{
				foreach (var fieldsItem in Fields)
				{
					xItem = new XElement(XName.Get("fields", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(fieldsItem);
					xE.Add(xItem);
				}
			}
			if (Predicates != null)
			{
				foreach (var predicatesItem in Predicates)
				{
					xItem = new XElement(XName.Get("predicates", "https://adwords.google.com/api/adwords/cm/v201609"));
					predicatesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (DateRange != null)
			{
				xItem = new XElement(XName.Get("dateRange", "https://adwords.google.com/api/adwords/cm/v201609"));
				DateRange.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Ordering != null)
			{
				foreach (var orderingItem in Ordering)
				{
					xItem = new XElement(XName.Get("ordering", "https://adwords.google.com/api/adwords/cm/v201609"));
					orderingItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (Paging != null)
			{
				xItem = new XElement(XName.Get("paging", "https://adwords.google.com/api/adwords/cm/v201609"));
				Paging.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents possible error codes for {@link Selector}.
	/// </summary>
	public class SelectorError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by enum.
		/// </summary>
		public SelectorErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = SelectorErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SelectorError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum SelectorErrorReason
	{
		/// <summary>
		/// The field name is not valid.
		/// </summary>
		InvalidFieldName,
		/// <summary>
		/// The list of fields is null or empty.
		/// </summary>
		MissingFields,
		/// <summary>
		/// The list of predicates is null or empty.
		/// </summary>
		MissingPredicates,
		/// <summary>
		/// Predicate operator does not support multiple values. Multiple values are
		/// supported only for {@link Predicate.Operator#IN} and {@link Predicate.Operator#NOT_IN}.
		/// </summary>
		OperatorDoesNotSupportMultipleValues,
		/// <summary>
		/// The predicate enum value is not valid.
		/// </summary>
		InvalidPredicateEnumValue,
		/// <summary>
		/// The predicate operator is empty.
		/// </summary>
		MissingPredicateOperator,
		/// <summary>
		/// The predicate values are empty.
		/// </summary>
		MissingPredicateValues,
		/// <summary>
		/// The predicate field name is not valid.
		/// </summary>
		InvalidPredicateFieldName,
		/// <summary>
		/// The predicate operator is not valid.
		/// </summary>
		InvalidPredicateOperator,
		/// <summary>
		/// Invalid selection of fields.
		/// </summary>
		InvalidFieldSelection,
		/// <summary>
		/// The predicate value is not valid.
		/// </summary>
		InvalidPredicateValue,
		/// <summary>
		/// The sort field name is not valid or the field is not sortable.
		/// </summary>
		InvalidSortFieldName,
		/// <summary>
		/// Standard error.
		/// </summary>
		SelectorError,
		/// <summary>
		/// Filtering by date range is not supported.
		/// </summary>
		FilterByDateRangeNotSupported,
		/// <summary>
		/// Selector paging start index is too high.
		/// </summary>
		StartIndexIsTooHigh,
		/// <summary>
		/// The values list in a predicate was too long.
		/// </summary>
		TooManyPredicateValues,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		UnknownError
	}
	/// <summary>
	/// A data-sharing connection between an AdWords customer and another Google service.
	/// </summary>
	public class ServiceLink : ISoapable
	{
		/// <summary>
		/// The service being linked.
		/// <span class="constraint Filterable">This field can be filtered on using the value "ServiceType".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ServiceType? ServiceType { get; set; }
		/// <summary>
		/// An ID uniquely identifying this link within a given {@link serviceType}.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? ServiceLinkId { get; set; }
		/// <summary>
		/// Status of the link.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public ServiceLinkLinkStatus? LinkStatus { get; set; }
		/// <summary>
		/// An identifier for the service account to which the AdWords account is linked.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Name { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceType = null;
			ServiceLinkId = null;
			LinkStatus = null;
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceType")
				{
					ServiceType = ServiceTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "serviceLinkId")
				{
					ServiceLinkId = long.Parse(xItem.Value);
				}
				else if (localName == "linkStatus")
				{
					LinkStatus = ServiceLinkLinkStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceType != null)
			{
				xItem = new XElement(XName.Get("serviceType", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ServiceType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ServiceLinkId != null)
			{
				xItem = new XElement(XName.Get("serviceLinkId", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(ServiceLinkId.Value.ToString());
				xE.Add(xItem);
			}
			if (LinkStatus != null)
			{
				xItem = new XElement(XName.Get("linkStatus", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(LinkStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/mcm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Status of the link
	/// </summary>
	public enum ServiceLinkLinkStatus
	{
		/// <summary>
		/// Link is enabled and data sharing is allowed.
		/// </summary>
		Active,
		/// <summary>
		/// Link was requested from the other service and is awaiting approval. To approve the link,
		/// change the status to {@code ACTIVE} via a {@code SET} operation.
		/// </summary>
		Pending,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// An operation on an AdWords link.
	/// See {@link ServiceType} for information on the various linking types supported.
	/// </summary>
	public class ServiceLinkOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ServiceLink Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new ServiceLink();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ServiceLinkOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Services whose links to AdWords accounts are visible in {@link CustomerServicee}
	/// </summary>
	public enum ServiceType
	{
		/// <summary>
		/// Data from Google Merchant Center accounts can be linked for use in shopping campaigns.
		/// For more information, visit this <a
		/// href="https://support.google.com/adwords/answer/6159060">Help Center article</a>.
		/// </summary>
		MerchantCenter,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Campaign serving status.
	/// </summary>
	public enum ServingStatus
	{
		/// <summary>
		/// The campaign is currently serving ads.
		/// </summary>
		Serving,
		/// <summary>
		/// This is the catch-all if none of the other statuses make sense.
		/// Such a campaign is not serving, but none of the other statuses
		/// are sensible options.
		/// </summary>
		None,
		/// <summary>
		/// The campaign end date has been past.
		/// </summary>
		Ended,
		/// <summary>
		/// The campaign start date has not yet been reached.
		/// </summary>
		Pending,
		/// <summary>
		/// The campaign has been suspended probably from lack of allocated funds.
		/// </summary>
		Suspended
	}
	/// <summary>
	/// Base type for AdWords campaign settings.
	/// </summary>
	public abstract class Setting : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of Setting.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string SettingType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SettingType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "Setting.Type")
				{
					SettingType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SettingType != null)
			{
				xItem = new XElement(XName.Get("Setting.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SettingType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Indicates a problem with campaign settings.
	/// </summary>
	public class SettingError : ApiError, ISoapable
	{
		/// <summary>
		/// The setting error reason.
		/// </summary>
		public SettingErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = SettingErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SettingError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the setting error.
	/// </summary>
	public enum SettingErrorReason
	{
		/// <summary>
		/// The campaign already has a setting of the type that is being added.
		/// </summary>
		DuplicateSettingType,
		/// <summary>
		/// The campaign setting is not available for this AdWords account.
		/// </summary>
		SettingTypeIsNotAvailable,
		/// <summary>
		/// The setting is not compatible with the campaign.
		/// </summary>
		SettingTypeIsNotCompatibleWithCampaign,
		/// <summary>
		/// The supplied TargetingSetting contains an invalid CriterionTypeGroup. See
		/// {@link CriterionTypeGroup} documentation for CriterionTypeGroups allowed in Campaign or
		/// AdGroup TargetingSettings.
		/// </summary>
		TargetingSettingContainsInvalidCriterionTypeGroup,
		/// <summary>
		/// The supplied DynamicSearchAdsSetting contains an invalid domain name.
		/// </summary>
		DynamicSearchAdsSettingContainsInvalidDomainName,
		/// <summary>
		/// The supplied DynamicSearchAdsSetting contains an invalid language code.
		/// </summary>
		DynamicSearchAdsSettingContainsInvalidLanguageCode,
		/// <summary>
		/// TargetingSettings in search campaigns should not have CriterionTypeGroup.PLACEMENT
		/// set to targetAll.
		/// </summary>
		TargetAllIsNotAllowedForPlacementInSearchCampaign,
		/// <summary>
		/// Duplicate description in universal app setting description field.
		/// </summary>
		UniversalAppCampaignSettingDuplicateDescription,
		/// <summary>
		/// Description line width is too long in universal app setting description field.
		/// </summary>
		UniversalAppCampaignSettingDescriptionLineWidthTooLong,
		/// <summary>
		/// Universal app setting appId field cannot be modified for COMPLETE campaigns.
		/// </summary>
		UniversalAppCampaignSettingAppIdCannotBeModified,
		/// <summary>
		/// YoutubeVideoMediaIds in universal app setting cannot exceed size limit.
		/// </summary>
		TooManyYoutubeMediaIdsInUniversalAppCampaign,
		/// <summary>
		/// ImageMediaIds in universal app setting cannot exceed size limit.
		/// </summary>
		TooManyImageMediaIdsInUniversalAppCampaign,
		/// <summary>
		/// Media is incompatible for universal app campaign.
		/// </summary>
		MediaIncompatibleForUniversalAppCampaign,
		/// <summary>
		/// Unspecified campaign setting error.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Bidding strategies store shared bidding configuration data and are account-level objects.
	/// </summary>
	public class SharedBiddingStrategy : ISoapable
	{
		/// <summary>
		/// Specifies the type of bidding scheme and the metadata associated with it.
		/// <span class="constraint Selectable">This field can be selected using the value "BiddingScheme".</span>
		/// </summary>
		public BiddingScheme BiddingScheme { get; set; }
		/// <summary>
		/// Id of the flexible bidding strategy. The bidding strategy id is used to associate
		/// the bidding strategy with the campaign, ad group or ad group criterion.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of the bidding strategy. Every bidding strategy must have a non-null non-empty name.
		/// In addition, all bidding strategies within an account must be named distinctly.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 255, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SharedBiddingStrategyBiddingStrategyStatus? Status { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Type".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public BiddingStrategyType? Type { get; set; }
		/// <summary>
		/// The status of the bid strategy, with respect to circumstances that could affect
		/// the automation system.
		/// <span class="constraint Selectable">This field can be selected using the value "SystemStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public BiddingStrategySystemStatus? SystemStatus { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			BiddingScheme = null;
			Id = null;
			Name = null;
			Status = null;
			Type = null;
			SystemStatus = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "biddingScheme")
				{
					BiddingScheme = InstanceCreator.CreateBiddingScheme(xItem);
					BiddingScheme.ReadFrom(xItem);
				}
				else if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = SharedBiddingStrategyBiddingStrategyStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "type")
				{
					Type = BiddingStrategyTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "systemStatus")
				{
					SystemStatus = BiddingStrategySystemStatusExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (BiddingScheme != null)
			{
				xItem = new XElement(XName.Get("biddingScheme", "https://adwords.google.com/api/adwords/cm/v201609"));
				BiddingScheme.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SystemStatus != null)
			{
				xItem = new XElement(XName.Get("systemStatus", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SystemStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Status of the bidding strategy.
	/// </summary>
	public enum SharedBiddingStrategyBiddingStrategyStatus
	{
		Enabled,
		Removed,
		Unknown
	}
	/// <summary>
	/// Represents a criterion belonging to a shared set.
	/// </summary>
	public class SharedCriterion : ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "SharedSetId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public long? SharedSetId { get; set; }
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Criterion Criterion { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Negative".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? Negative { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SharedSetId = null;
			Criterion = null;
			Negative = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "sharedSetId")
				{
					SharedSetId = long.Parse(xItem.Value);
				}
				else if (localName == "criterion")
				{
					Criterion = new Criterion();
					Criterion.ReadFrom(xItem);
				}
				else if (localName == "negative")
				{
					Negative = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SharedSetId != null)
			{
				xItem = new XElement(XName.Get("sharedSetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SharedSetId.Value.ToString());
				xE.Add(xItem);
			}
			if (Criterion != null)
			{
				xItem = new XElement(XName.Get("criterion", "https://adwords.google.com/api/adwords/cm/v201609"));
				Criterion.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Negative != null)
			{
				xItem = new XElement(XName.Get("negative", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Negative.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents error codes for the SharedCriterionService.
	/// </summary>
	public class SharedCriterionError : ApiError, ISoapable
	{
		public SharedCriterionErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = SharedCriterionErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedCriterionError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons
	/// </summary>
	public enum SharedCriterionErrorReason
	{
		ExceedsCriteriaLimit,
		IncorrectCriterionType,
		/// <summary>
		/// Cannot add the same crietrion as positive and negative in the same shared set.
		/// </summary>
		CannotTargetAndExclude,
		/// <summary>
		/// Negative shared set type requires a negative shared set criterion.
		/// </summary>
		NegativeCriterionRequired,
		/// <summary>
		/// Concrete type of criterion (e.g., keyword and placement) is required for ADD operations.
		/// </summary>
		ConcreteTypeRequired,
		Unknown
	}
	/// <summary>
	/// Operation for adding/removing a criterion from a shared set.
	/// </summary>
	public class SharedCriterionOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public SharedCriterion Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new SharedCriterion();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedCriterionOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of shared set criteria results filtered and sorted
	/// as specified in the {@link SharedCriterionService#get} call
	/// </summary>
	public class SharedCriterionPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page
		/// </summary>
		public List<SharedCriterion> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<SharedCriterion>();
					var entriesItem = new SharedCriterion();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedCriterionPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Container for the return value from the SharedSetCriterionService.
	/// </summary>
	public class SharedCriterionReturnValue : ListReturnValue, ISoapable
	{
		public List<SharedCriterion> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<SharedCriterion>();
					var valueItem = new SharedCriterion();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedCriterionReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// SharedSets are used for sharing entities across multiple campaigns
	/// under the same account.
	/// </summary>
	public class SharedSet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "SharedSetId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
		/// </summary>
		public long? SharedSetId { get; set; }
		/// <summary>
		/// Shared Sets must have names that are case-insensitive unique across all
		/// other shared sets in the account (active and deleted).
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 255, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "Type".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public SharedSetType? Type { get; set; }
		/// <summary>
		/// The number of entities in the shared set.
		/// <span class="constraint Selectable">This field can be selected using the value "MemberCount".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? MemberCount { get; set; }
		/// <summary>
		/// The number of campaigns that actively use the shared set.
		/// <span class="constraint Selectable">This field can be selected using the value "ReferenceCount".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? ReferenceCount { get; set; }
		/// <summary>
		/// The status of the shared set.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SharedSetStatus? Status { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SharedSetId = null;
			Name = null;
			Type = null;
			MemberCount = null;
			ReferenceCount = null;
			Status = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "sharedSetId")
				{
					SharedSetId = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "type")
				{
					Type = SharedSetTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "memberCount")
				{
					MemberCount = int.Parse(xItem.Value);
				}
				else if (localName == "referenceCount")
				{
					ReferenceCount = int.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = SharedSetStatusExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SharedSetId != null)
			{
				xItem = new XElement(XName.Get("sharedSetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SharedSetId.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (MemberCount != null)
			{
				xItem = new XElement(XName.Get("memberCount", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MemberCount.Value.ToString());
				xE.Add(xItem);
			}
			if (ReferenceCount != null)
			{
				xItem = new XElement(XName.Get("referenceCount", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReferenceCount.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents error codes for the SharedSetService.
	/// </summary>
	public class SharedSetError : ApiError, ISoapable
	{
		public SharedSetErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = SharedSetErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedSetError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error reasons
	/// </summary>
	public enum SharedSetErrorReason
	{
		CustomerCannotCreateSharedSetOfThisType,
		DuplicateName,
		SharedSetRemoved,
		SharedSetInUse,
		Unknown
	}
	/// <summary>
	/// Operations for adding/updating SharedSet entities.
	/// </summary>
	public class SharedSetOperation : Operation, ISoapable
	{
		/// <summary>
		/// CriterionList to operate on
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public SharedSet Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new SharedSet();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedSetOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of criterion lists resulting from the filtering and paging of
	/// {@link SharedSetService#get} call.
	/// </summary>
	public class SharedSetPage : NullStatsPage, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<SharedSet> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<SharedSet>();
					var entriesItem = new SharedSet();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedSetPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the {@link SharedSetService#mutate} call.
	/// </summary>
	public class SharedSetReturnValue : ListReturnValue, ISoapable
	{
		public List<SharedSet> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<SharedSet>();
					var valueItem = new SharedSet();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SharedSetReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	public enum SharedSetStatus
	{
		Enabled,
		Removed,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Enumerates the different types of shared sets.
	/// </summary>
	public enum SharedSetType
	{
		NegativeKeywords,
		NegativePlacements,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Status of a bidding dimension (category) in a bidding taxonomy.
	/// </summary>
	public enum ShoppingBiddingDimensionStatus
	{
		/// <summary>
		/// Default status. Should not be used.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The dimension is active and it can be used for bidding.
		/// </summary>
		Active,
		/// <summary>
		/// The dimension is deprecated and should not be used for bidding.
		/// </summary>
		Obsolete
	}
	/// <summary>
	/// Channel specifies where the item is sold: online or in local stores.
	/// </summary>
	public enum ShoppingProductChannel
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The item is sold online.
		/// </summary>
		Online,
		/// <summary>
		/// The item is sold in local stores.
		/// </summary>
		Local
	}
	/// <summary>
	/// Channel exclusivity specifies whether an item is sold exclusively in one channel
	/// or through multiple channels.
	/// </summary>
	public enum ShoppingProductChannelExclusivity
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The item is sold through one channel only, either local stores or online as
		/// indicated by its ShoppingProductChannel.
		/// </summary>
		SingleChannel,
		/// <summary>
		/// The item is matched to its online or local stores counterpart, indicating it is
		/// available for purchase in both ShoppingProductChannels.
		/// </summary>
		MultiChannel
	}
	/// <summary>
	/// Setting for shopping campaigns. Defines the universe of products covered by the campaign.
	/// Encapsulates a merchant ID, sales country, and campaign priority.
	/// </summary>
	public class ShoppingSetting : Setting, ISoapable
	{
		/// <summary>
		/// ID of the Merchant Center account.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public long? MerchantId { get; set; }
		/// <summary>
		/// Sales country of products to include in the campaign.
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string SalesCountry { get; set; }
		/// <summary>
		/// Priority of the campaign. Campaigns with numerically higher priorities take precedence over
		/// those with lower priorities.
		/// <span class="constraint InRange">This field must be between 0 and 2, inclusive.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public int? CampaignPriority { get; set; }
		/// <summary>
		/// Enable local inventory ads.
		/// </summary>
		public bool? EnableLocal { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			MerchantId = null;
			SalesCountry = null;
			CampaignPriority = null;
			EnableLocal = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "merchantId")
				{
					MerchantId = long.Parse(xItem.Value);
				}
				else if (localName == "salesCountry")
				{
					SalesCountry = xItem.Value;
				}
				else if (localName == "campaignPriority")
				{
					CampaignPriority = int.Parse(xItem.Value);
				}
				else if (localName == "enableLocal")
				{
					EnableLocal = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ShoppingSetting");
			XElement xItem = null;
			if (MerchantId != null)
			{
				xItem = new XElement(XName.Get("merchantId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MerchantId.Value.ToString());
				xE.Add(xItem);
			}
			if (SalesCountry != null)
			{
				xItem = new XElement(XName.Get("salesCountry", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SalesCountry);
				xE.Add(xItem);
			}
			if (CampaignPriority != null)
			{
				xItem = new XElement(XName.Get("campaignPriority", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CampaignPriority.Value.ToString());
				xE.Add(xItem);
			}
			if (EnableLocal != null)
			{
				xItem = new XElement(XName.Get("enableLocal", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EnableLocal.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// SimilarUserList is a list of users which are similar to users from another UserList.
	/// These lists are readonly and automatically created by google.
	/// </summary>
	public class SimilarUserList : UserList, ISoapable
	{
		/// <summary>
		/// Seed UserListId from which this list is derived.
		/// <span class="constraint Selectable">This field can be selected using the value "SeedUserListId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public long? SeedUserListId { get; set; }
		/// <summary>
		/// Name of the seed user list.
		/// <span class="constraint Selectable">This field can be selected using the value "SeedUserListName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string SeedUserListName { get; set; }
		/// <summary>
		/// Description of this seed user list.
		/// <span class="constraint Selectable">This field can be selected using the value "SeedUserListDescription".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string SeedUserListDescription { get; set; }
		/// <summary>
		/// Membership status of this seed user list.
		/// <span class="constraint Selectable">This field can be selected using the value "SeedUserListStatus".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public UserListMembershipStatus? SeedUserListStatus { get; set; }
		/// <summary>
		/// Estimated number of users in this seed user list.
		/// This value is null if the number of users has not yet been determined.
		/// <span class="constraint Selectable">This field can be selected using the value "SeedListSize".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? SeedListSize { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			SeedUserListId = null;
			SeedUserListName = null;
			SeedUserListDescription = null;
			SeedUserListStatus = null;
			SeedListSize = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "seedUserListId")
				{
					SeedUserListId = long.Parse(xItem.Value);
				}
				else if (localName == "seedUserListName")
				{
					SeedUserListName = xItem.Value;
				}
				else if (localName == "seedUserListDescription")
				{
					SeedUserListDescription = xItem.Value;
				}
				else if (localName == "seedUserListStatus")
				{
					SeedUserListStatus = UserListMembershipStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "seedListSize")
				{
					SeedListSize = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "SimilarUserList");
			XElement xItem = null;
			if (SeedUserListId != null)
			{
				xItem = new XElement(XName.Get("seedUserListId", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SeedUserListId.Value.ToString());
				xE.Add(xItem);
			}
			if (SeedUserListName != null)
			{
				xItem = new XElement(XName.Get("seedUserListName", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SeedUserListName);
				xE.Add(xItem);
			}
			if (SeedUserListDescription != null)
			{
				xItem = new XElement(XName.Get("seedUserListDescription", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SeedUserListDescription);
				xE.Add(xItem);
			}
			if (SeedUserListStatus != null)
			{
				xItem = new XElement(XName.Get("seedUserListStatus", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SeedUserListStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SeedListSize != null)
			{
				xItem = new XElement(XName.Get("seedListSize", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SeedListSize.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a sitelink extension.
	/// </summary>
	public class SitelinkFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// URL display text for the sitelink.
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string SitelinkText { get; set; }
		/// <summary>
		/// Destination URL for the sitelink.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 2076, inclusive, (trimmed).</span>
		/// </summary>
		public string SitelinkUrl { get; set; }
		/// <summary>
		/// First line of the description for the sitelink. To clear this field, set its value to the empty
		/// string. If this value is set, sitelinkLine3 must also be set.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 35, inclusive, (trimmed).</span>
		/// </summary>
		public string SitelinkLine2 { get; set; }
		/// <summary>
		/// Second line of the description for the sitelink. To clear this field, set its value to the
		/// empty string. If this value is set, sitelinkLine2 must also be set.
		/// <span class="constraint StringLength">The length of this string should be between 0 and 35, inclusive, (trimmed).</span>
		/// </summary>
		public string SitelinkLine3 { get; set; }
		/// <summary>
		/// A list of possible final URLs after all cross domain redirects.
		/// </summary>
		public UrlList SitelinkFinalUrls { get; set; }
		/// <summary>
		/// A list of possible final mobile URLs after all cross domain redirects.
		/// </summary>
		public UrlList SitelinkFinalMobileUrls { get; set; }
		/// <summary>
		/// URL template for constructing a tracking URL. To clear this field, set its value to the empty
		/// string.
		/// </summary>
		public string SitelinkTrackingUrlTemplate { get; set; }
		/// <summary>
		/// A list of mappings to be used for substituting URL custom parameter tags in the
		/// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
		/// </summary>
		public CustomParameters SitelinkUrlCustomParameters { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			SitelinkText = null;
			SitelinkUrl = null;
			SitelinkLine2 = null;
			SitelinkLine3 = null;
			SitelinkFinalUrls = null;
			SitelinkFinalMobileUrls = null;
			SitelinkTrackingUrlTemplate = null;
			SitelinkUrlCustomParameters = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "sitelinkText")
				{
					SitelinkText = xItem.Value;
				}
				else if (localName == "sitelinkUrl")
				{
					SitelinkUrl = xItem.Value;
				}
				else if (localName == "sitelinkLine2")
				{
					SitelinkLine2 = xItem.Value;
				}
				else if (localName == "sitelinkLine3")
				{
					SitelinkLine3 = xItem.Value;
				}
				else if (localName == "sitelinkFinalUrls")
				{
					SitelinkFinalUrls = new UrlList();
					SitelinkFinalUrls.ReadFrom(xItem);
				}
				else if (localName == "sitelinkFinalMobileUrls")
				{
					SitelinkFinalMobileUrls = new UrlList();
					SitelinkFinalMobileUrls.ReadFrom(xItem);
				}
				else if (localName == "sitelinkTrackingUrlTemplate")
				{
					SitelinkTrackingUrlTemplate = xItem.Value;
				}
				else if (localName == "sitelinkUrlCustomParameters")
				{
					SitelinkUrlCustomParameters = new CustomParameters();
					SitelinkUrlCustomParameters.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SitelinkFeedItem");
			XElement xItem = null;
			if (SitelinkText != null)
			{
				xItem = new XElement(XName.Get("sitelinkText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SitelinkText);
				xE.Add(xItem);
			}
			if (SitelinkUrl != null)
			{
				xItem = new XElement(XName.Get("sitelinkUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SitelinkUrl);
				xE.Add(xItem);
			}
			if (SitelinkLine2 != null)
			{
				xItem = new XElement(XName.Get("sitelinkLine2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SitelinkLine2);
				xE.Add(xItem);
			}
			if (SitelinkLine3 != null)
			{
				xItem = new XElement(XName.Get("sitelinkLine3", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SitelinkLine3);
				xE.Add(xItem);
			}
			if (SitelinkFinalUrls != null)
			{
				xItem = new XElement(XName.Get("sitelinkFinalUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				SitelinkFinalUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (SitelinkFinalMobileUrls != null)
			{
				xItem = new XElement(XName.Get("sitelinkFinalMobileUrls", "https://adwords.google.com/api/adwords/cm/v201609"));
				SitelinkFinalMobileUrls.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (SitelinkTrackingUrlTemplate != null)
			{
				xItem = new XElement(XName.Get("sitelinkTrackingUrlTemplate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SitelinkTrackingUrlTemplate);
				xE.Add(xItem);
			}
			if (SitelinkUrlCustomParameters != null)
			{
				xItem = new XElement(XName.Get("sitelinkUrlCustomParameters", "https://adwords.google.com/api/adwords/cm/v201609"));
				SitelinkUrlCustomParameters.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Indicates that the number of entries in the request or response exceeds the system limit.
	/// </summary>
	public class SizeLimitError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public SizeLimitErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = SizeLimitErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "SizeLimitError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for Ad Scheduling errors.
	/// </summary>
	public enum SizeLimitErrorReason
	{
		/// <summary>
		/// The number of entries in the request exceeds the system limit.
		/// </summary>
		RequestSizeLimitExceeded,
		/// <summary>
		/// The number of entries in the response exceeds the system limit.
		/// </summary>
		ResponseSizeLimitExceeded,
		/// <summary>
		/// The account is too large to load.
		/// </summary>
		InternalStorageError,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Size range in terms of number of users of a UserList/UserInterest.
	/// </summary>
	public enum SizeRange
	{
		LessThanFiveHundred,
		LessThanOneThousand,
		OneThousandToTenThousand,
		TenThousandToFiftyThousand,
		FiftyThousandToOneHundredThousand,
		OneHundredThousandToThreeHundredThousand,
		ThreeHundredThousandToFiveHundredThousand,
		FiveHundredThousandToOneMillion,
		OneMillionToTwoMillion,
		TwoMillionToThreeMillion,
		ThreeMillionToFiveMillion,
		FiveMillionToTenMillion,
		TenMillionToTwentyMillion,
		TwentyMillionToThirtyMillion,
		ThirtyMillionToFiftyMillion,
		OverFiftyMillion
	}
	/// <summary>
	/// Defines the required and optional elements within the header of a SOAP request.
	/// </summary>
	public class SoapHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Defines the elements within the header of a SOAP response.
	/// </summary>
	public class SoapResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Possible orders of sorting.
	/// </summary>
	public enum SortOrder
	{
		Ascending,
		Descending
	}
	/// <summary>
	/// Represents a set of stats for a daily traffic estimate.
	///
	/// <p>{@code averageCpc}, {@code averagePosition} and {@code clickThroughRate} will be
	/// {@code null} when not defined and {@code clicksPerDay} or {@code impressionsPerDay}
	/// is {@code 0}, respectively.</p>
	/// </summary>
	public class StatsEstimate : ISoapable
	{
		/// <summary>
		/// The estimated average CPC.
		/// </summary>
		public Money AverageCpc { get; set; }
		/// <summary>
		/// The estimated average position.
		/// </summary>
		public double? AveragePosition { get; set; }
		/// <summary>
		/// The estimated click through rate.
		/// </summary>
		public double? ClickThroughRate { get; set; }
		/// <summary>
		/// The estimated number of clicks, in floating point representation.
		/// </summary>
		public float? ClicksPerDay { get; set; }
		/// <summary>
		/// The estimated number of impressions, in floating point representation.
		/// </summary>
		public float? ImpressionsPerDay { get; set; }
		/// <summary>
		/// The estimated total cost.
		/// </summary>
		public Money TotalCost { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			AverageCpc = null;
			AveragePosition = null;
			ClickThroughRate = null;
			ClicksPerDay = null;
			ImpressionsPerDay = null;
			TotalCost = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "averageCpc")
				{
					AverageCpc = new Money();
					AverageCpc.ReadFrom(xItem);
				}
				else if (localName == "averagePosition")
				{
					AveragePosition = double.Parse(xItem.Value);
				}
				else if (localName == "clickThroughRate")
				{
					ClickThroughRate = double.Parse(xItem.Value);
				}
				else if (localName == "clicksPerDay")
				{
					ClicksPerDay = float.Parse(xItem.Value);
				}
				else if (localName == "impressionsPerDay")
				{
					ImpressionsPerDay = float.Parse(xItem.Value);
				}
				else if (localName == "totalCost")
				{
					TotalCost = new Money();
					TotalCost.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (AverageCpc != null)
			{
				xItem = new XElement(XName.Get("averageCpc", "https://adwords.google.com/api/adwords/o/v201609"));
				AverageCpc.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AveragePosition != null)
			{
				xItem = new XElement(XName.Get("averagePosition", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(AveragePosition.Value.ToString());
				xE.Add(xItem);
			}
			if (ClickThroughRate != null)
			{
				xItem = new XElement(XName.Get("clickThroughRate", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(ClickThroughRate.Value.ToString());
				xE.Add(xItem);
			}
			if (ClicksPerDay != null)
			{
				xItem = new XElement(XName.Get("clicksPerDay", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(ClicksPerDay.Value.ToString());
				xE.Add(xItem);
			}
			if (ImpressionsPerDay != null)
			{
				xItem = new XElement(XName.Get("impressionsPerDay", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(ImpressionsPerDay.Value.ToString());
				xE.Add(xItem);
			}
			if (TotalCost != null)
			{
				xItem = new XElement(XName.Get("totalCost", "https://adwords.google.com/api/adwords/o/v201609"));
				TotalCost.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents possible error codes when querying for stats.
	/// </summary>
	public class StatsQueryError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public StatsQueryErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = StatsQueryErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "StatsQueryError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for errors when querying for stats.
	/// </summary>
	public enum StatsQueryErrorReason
	{
		/// <summary>
		/// Date is outside of allowed range.
		/// </summary>
		DateNotInValidRange
	}
	/// <summary>
	/// This represents an entry in a map with a key of type String
	/// and value of type String.
	/// </summary>
	public class String_StringMapEntry : ISoapable
	{
		public string Key { get; set; }
		public string Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = xItem.Value;
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Key);
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a string value.
	/// </summary>
	public class StringAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// String value contained by this {@link Attribute}.
		/// </summary>
		public string Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "StringAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A list of error code for reporting invalid content of input strings.
	/// </summary>
	public class StringFormatError : ApiError, ISoapable
	{
		public StringFormatErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = StringFormatErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "StringFormatError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum StringFormatErrorReason
	{
		Unknown,
		/// <summary>
		/// The input string value contains disallowed characters.
		/// </summary>
		IllegalChars,
		/// <summary>
		/// The input string value is invalid for the associated field.
		/// </summary>
		InvalidFormat
	}
	/// <summary>
	/// Custom parameter of type string. For websites, there are two built-in parameters
	/// URL (name = 'url__') and referrer URL (name = 'ref_url__').
	/// </summary>
	public class StringKey : ISoapable
	{
		/// <summary>
		/// <span class="constraint MatchesRegex">A name must begin with US-ascii letters or underscore or UTF8 code that is greater than 127 and consist of US-ascii letters or digits or underscore or UTF8 code that is greater than 127. This is checked by the regular expression '^[a-zA-Z_?-?][a-zA-Z0-9_?-?]*$'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">This string must not be empty, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Name = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Errors associated with the length of the given string being
	/// out of bounds.
	/// </summary>
	public class StringLengthError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public StringLengthErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = StringLengthErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "StringLengthError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the target error.
	/// </summary>
	public enum StringLengthErrorReason
	{
		TooShort,
		TooLong
	}
	/// <summary>
	/// An atomic rule fragment composing of string operation.
	/// </summary>
	public class StringRuleItem : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public StringKey Key { get; set; }
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public StringRuleItemStringOperator? Op { get; set; }
		/// <summary>
		/// The right hand side of the string rule item. For URL/Referrer URL,
		/// <code>value</code> can not contain illegal URL chars such as: <code>"()'\"\t"</code>.
		/// <span class="constraint MatchesRegex">String value can not contain newline (
		/// ) or both single quote and double quote. This is checked by the regular expression '[^
		/// ']*|[^
		/// "]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Op = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = new StringKey();
					Key.ReadFrom(xItem);
				}
				else if (localName == "op")
				{
					Op = StringRuleItemStringOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/rm/v201609"));
				Key.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Op != null)
			{
				xItem = new XElement(XName.Get("op", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Op.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Value);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Supported operators for strings.
	/// </summary>
	public enum StringRuleItemStringOperator
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		Contains,
		Equals,
		StartsWith,
		EndsWith,
		NotEqual,
		NotContain,
		NotStartWith,
		NotEndWith
	}
	/// <summary>
	/// Represents a structured snippet extension.
	/// </summary>
	public class StructuredSnippetFeedItem : ExtensionFeedItem, ISoapable
	{
		/// <summary>
		/// The header of the snippet. See the
		/// <a href="https://developers.google.com/adwords/api/docs/appendix/structured-snippet-headers">
		/// structured snippets header translations</a> page for supported localized headers.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string Header { get; set; }
		/// <summary>
		/// The values in the snippet. A SET operation replaces the values in the list.
		/// <span class="constraint CollectionSize">The maximum size of this collection is 10.</span>
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<string> Values { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Header = null;
			Values = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "header")
				{
					Header = xItem.Value;
				}
				else if (localName == "values")
				{
					if (Values == null) Values = new List<string>();
					Values.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "StructuredSnippetFeedItem");
			XElement xItem = null;
			if (Header != null)
			{
				xItem = new XElement(XName.Get("header", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Header);
				xE.Add(xItem);
			}
			if (Values != null)
			{
				foreach (var valuesItem in Values)
				{
					xItem = new XElement(XName.Get("values", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(valuesItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Configuration data allowing feed items to be populated for a system feed.
	/// </summary>
	public class SystemFeedGenerationData : ISoapable
	{
		/// <summary>
		/// Indicates that this instance is a subtype of SystemFeedGenerationData.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string SystemFeedGenerationDataType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SystemFeedGenerationDataType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "SystemFeedGenerationData.Type")
				{
					SystemFeedGenerationDataType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SystemFeedGenerationDataType != null)
			{
				xItem = new XElement(XName.Get("SystemFeedGenerationData.Type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(SystemFeedGenerationDataType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Reported by system to reflect the criterion's serving status.
	/// </summary>
	public enum SystemServingStatus
	{
		/// <summary>
		/// Criterion is eligible to serve.
		/// </summary>
		Eligible,
		/// <summary>
		/// Indicates low search volume.
		/// <p>For more information, visit
		/// <a href="https://support.google.com/adwords/answer/2616014">Low Search Volume</a>.</p>
		/// </summary>
		RarelyServed
	}
	/// <summary>
	/// <a href="https://support.google.com/adwords/answer/6268632">Target CPA</a> is an automated bid
	/// strategy that sets bids to help get as many conversions as possible at the target cost per
	/// acquisition (CPA) you set.
	///
	/// <p>A {@linkplain #targetCpa target CPA} must be set for the strategy, but can also be optionally
	/// set for individual ad groups in the strategy. Ad group targets, if set, will override strategy
	/// targets.
	///
	/// <p>Note that campaigns must meet
	/// <a href="https://support.google.com/adwords/answer/2471188">specific eligibility requirements</a>
	/// before they can use the Target CPA bid strategy.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class TargetCpaBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// Average cost per acquisition (CPA) target. This target should be greater than or equal to
		/// minimum billable unit based on the currency for the account.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetCpa".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Money TargetCpa { get; set; }
		/// <summary>
		/// Maximum cpc bid limit that applies to all keywords managed by the strategy.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetCpaMaxCpcBidCeiling".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money MaxCpcBidCeiling { get; set; }
		/// <summary>
		/// Minimum cpc bid limit that applies to all keywords managed by the strategy.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetCpaMaxCpcBidFloor".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money MaxCpcBidFloor { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			TargetCpa = null;
			MaxCpcBidCeiling = null;
			MaxCpcBidFloor = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "targetCpa")
				{
					TargetCpa = new Money();
					TargetCpa.ReadFrom(xItem);
				}
				else if (localName == "maxCpcBidCeiling")
				{
					MaxCpcBidCeiling = new Money();
					MaxCpcBidCeiling.ReadFrom(xItem);
				}
				else if (localName == "maxCpcBidFloor")
				{
					MaxCpcBidFloor = new Money();
					MaxCpcBidFloor.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TargetCpaBiddingScheme");
			XElement xItem = null;
			if (TargetCpa != null)
			{
				xItem = new XElement(XName.Get("targetCpa", "https://adwords.google.com/api/adwords/cm/v201609"));
				TargetCpa.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (MaxCpcBidCeiling != null)
			{
				xItem = new XElement(XName.Get("maxCpcBidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				MaxCpcBidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (MaxCpcBidFloor != null)
			{
				xItem = new XElement(XName.Get("maxCpcBidFloor", "https://adwords.google.com/api/adwords/cm/v201609"));
				MaxCpcBidFloor.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a {@link TargetingIdea} returned by search criteria specified in
	/// the {@link TargetingIdeaSelector}. Targeting ideas are keywords or placements
	/// that are similar to those the user inputs.
	/// </summary>
	public class TargetingIdea : ISoapable
	{
		/// <summary>
		/// Map of {@link AttributeType} to {@link Attribute}. Stores all data retrieved for each key
		/// {@code AttributeType}.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<Type_AttributeMapEntry> Data { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Data = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "data")
				{
					if (Data == null) Data = new List<Type_AttributeMapEntry>();
					var dataItem = new Type_AttributeMapEntry();
					dataItem.ReadFrom(xItem);
					Data.Add(dataItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Data != null)
			{
				foreach (var dataItem in Data)
				{
					xItem = new XElement(XName.Get("data", "https://adwords.google.com/api/adwords/o/v201609"));
					dataItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Base error class for the {@link TargetingIdeaService}.
	/// </summary>
	public class TargetingIdeaError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public TargetingIdeaErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = TargetingIdeaErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "TargetingIdeaError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An enumeration of {@link TargetingIdeaService} specific errors.
	/// </summary>
	public enum TargetingIdeaErrorReason
	{
		/// <summary>
		/// Error returned when there are multiple instance of same type of {@link SearchParameter}s.
		/// </summary>
		DuplicateSearchFilterTypesPresent,
		/// <summary>
		/// Error returned when the {@link TargetingIdeaSelector} doesn't have enough
		/// {@link SearchParameter}s to execute request.
		/// </summary>
		InsufficientSearchParameters,
		/// <summary>
		/// Error returned when an {@link AttributeType} doesn't match the {@link IdeaType} specified in
		/// the {@link TargetingIdeaSelector}. For example, if the {@code KEYWORD} {@code IDEAS} selector
		/// contains an {@code STATS} only AttributeType, this error will be returned.
		/// </summary>
		InvalidAttributeType,
		/// <summary>
		/// Error returned when a {@link SearchParameter} doesn't match the {@link IdeaType} specified in
		/// the {@link TargetingIdeaSelector} or is otherwise invalid.  Error trigger usually contains
		/// the parameter name, and error details contain a more detailed explanation.
		/// </summary>
		InvalidSearchParameters,
		/// <summary>
		/// Error returned when the {@link TargetingIdeaSelector} contains a
		/// {@link DomainSuffixSearchParameter}s that contains an invalid domain suffix.
		/// </summary>
		InvalidDomainSuffix,
		/// <summary>
		/// Error returned when a selector contains mutually exclusive parameters.
		/// </summary>
		MutuallyExclusiveSearchParametersInQuery,
		/// <summary>
		/// Error returned when the {@link TargetingIdeaService} is not available.
		/// </summary>
		ServiceUnavailable,
		/// <summary>
		/// Error returned when the URL value specified in the {@link TargetingIdeaSelector}, such as
		/// {@link RelatedToUrlSearchParameter}, is not a valid URL.
		/// </summary>
		InvalidUrlInSearchParameter,
		/// <summary>
		/// Error returned when the requested number of entries in {@link TargetingIdeaSelector}'s
		/// {@link Paging} is greater than the maximum allowed.
		/// </summary>
		TooManyResultsRequested,
		/// <summary>
		/// Error returned when the requested {@link Paging} is missing from the
		/// {@link TargetingIdeaSelector} when required.
		/// </summary>
		NoPagingInSelector,
		/// <summary>
		/// Error returned when included keywords and excluded keywords in
		/// {@link IdeaTextFilterSearchParameter}, {@link IdeaTextMatchesSearchParameter}
		/// or {@link ExcludedKeywordSearchParameter} are overlapped.
		/// </summary>
		InvalidIncludedExcludedKeywords
	}
	/// <summary>
	/// Contains a subset of {@link TargetingIdea}s from the search criteria
	/// specified by a {@link TargetingIdeaSelector}.
	/// </summary>
	public class TargetingIdeaPage : ISoapable
	{
		/// <summary>
		/// Total number of entries that can be retrieved using the get method.
		/// </summary>
		public int? TotalNumEntries { get; set; }
		/// <summary>
		/// The result entries in this page, as list of {@link TargetingIdea}s.
		/// </summary>
		public List<TargetingIdea> Entries { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TotalNumEntries = null;
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "totalNumEntries")
				{
					TotalNumEntries = int.Parse(xItem.Value);
				}
				else if (localName == "entries")
				{
					if (Entries == null) Entries = new List<TargetingIdea>();
					var entriesItem = new TargetingIdea();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TotalNumEntries != null)
			{
				xItem = new XElement(XName.Get("totalNumEntries", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(TotalNumEntries.Value.ToString());
				xE.Add(xItem);
			}
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/o/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A descriptor for finding {@link TargetingIdea}s that match the specified criteria.
	/// </summary>
	public class TargetingIdeaSelector : ISoapable
	{
		/// <summary>
		/// Search for targeting ideas based on these search rules.
		///
		/// <p>An empty set indicates this selector is valid for selecting metadata
		/// with default parameters.
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctTypes">Elements in this field must have distinct types.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<SearchParameter> SearchParameters { get; set; }
		/// <summary>
		/// Limits the request to responses of this {@link IdeaType}, e.g. {@code KEYWORDS}.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public IdeaType? IdeaType { get; set; }
		/// <summary>
		/// Specifies the {@link RequestType}, e.g. {@code IDEAS} or {@code STATS}.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public RequestType? RequestType { get; set; }
		/// <summary>
		/// Request {@link Attribute}s and associated data for this set of {@link Type}s.
		///
		/// <p>An empty set indicates a request for {@link KeywordAttribute}, {@link PlacementAttribute},
		/// and {@link IdeaType}.
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// </summary>
		public List<AttributeType> RequestedAttributeTypes { get; set; }
		/// <summary>
		/// A {@link Paging} object that specifies the desired starting index and
		/// number of results to return.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Paging Paging { get; set; }
		/// <summary>
		/// The locale code (for example "en_US") used for localizing strings,
		/// controlling numeric formatting, and the like.  See RFC 3066 for
		/// information on the format used.
		/// </summary>
		public string LocaleCode { get; set; }
		/// <summary>
		/// The currency code to be used for all monetary values returned in results in
		/// ISO format (see
		/// https://developers.google.com/adwords/api/docs/appendix/currencycodes
		/// for supported currencies). The default is "USD" (US dollars).
		/// </summary>
		public string CurrencyCode { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			SearchParameters = null;
			IdeaType = null;
			RequestType = null;
			RequestedAttributeTypes = null;
			Paging = null;
			LocaleCode = null;
			CurrencyCode = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "searchParameters")
				{
					if (SearchParameters == null) SearchParameters = new List<SearchParameter>();
					var searchParametersItem = InstanceCreator.CreateSearchParameter(xItem);
					searchParametersItem.ReadFrom(xItem);
					SearchParameters.Add(searchParametersItem);
				}
				else if (localName == "ideaType")
				{
					IdeaType = IdeaTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "requestType")
				{
					RequestType = RequestTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "requestedAttributeTypes")
				{
					if (RequestedAttributeTypes == null) RequestedAttributeTypes = new List<AttributeType>();
					RequestedAttributeTypes.Add(AttributeTypeExtensions.Parse(xItem.Value));
				}
				else if (localName == "paging")
				{
					Paging = new Paging();
					Paging.ReadFrom(xItem);
				}
				else if (localName == "localeCode")
				{
					LocaleCode = xItem.Value;
				}
				else if (localName == "currencyCode")
				{
					CurrencyCode = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (SearchParameters != null)
			{
				foreach (var searchParametersItem in SearchParameters)
				{
					xItem = new XElement(XName.Get("searchParameters", "https://adwords.google.com/api/adwords/o/v201609"));
					searchParametersItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (IdeaType != null)
			{
				xItem = new XElement(XName.Get("ideaType", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(IdeaType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RequestType != null)
			{
				xItem = new XElement(XName.Get("requestType", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(RequestType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RequestedAttributeTypes != null)
			{
				foreach (var requestedAttributeTypesItem in RequestedAttributeTypes)
				{
					xItem = new XElement(XName.Get("requestedAttributeTypes", "https://adwords.google.com/api/adwords/o/v201609"));
					xItem.Add(requestedAttributeTypesItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
			if (Paging != null)
			{
				xItem = new XElement(XName.Get("paging", "https://adwords.google.com/api/adwords/o/v201609"));
				Paging.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (LocaleCode != null)
			{
				xItem = new XElement(XName.Get("localeCode", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(LocaleCode);
				xE.Add(xItem);
			}
			if (CurrencyCode != null)
			{
				xItem = new XElement(XName.Get("currencyCode", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(CurrencyCode);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Setting for targeting related features.
	/// This is applicable at Campaign and AdGroup level.
	/// </summary>
	public class TargetingSetting : Setting, ISoapable
	{
		/// <summary>
		/// The list of per-criterion-type-group targeting settings.
		/// </summary>
		public List<TargetingSettingDetail> Details { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Details = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "details")
				{
					if (Details == null) Details = new List<TargetingSettingDetail>();
					var detailsItem = new TargetingSettingDetail();
					detailsItem.ReadFrom(xItem);
					Details.Add(detailsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TargetingSetting");
			XElement xItem = null;
			if (Details != null)
			{
				foreach (var detailsItem in Details)
				{
					xItem = new XElement(XName.Get("details", "https://adwords.google.com/api/adwords/cm/v201609"));
					detailsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Specifies if criteria of this type group should be used to restrict
	/// targeting, or if ads can serve anywhere and criteria are only used in
	/// determining the bid.
	/// <p>For more information, see
	/// <a href="https://support.google.com/adwords/answer/6056342">Targeting Settings</a>.</p>
	/// </summary>
	public class TargetingSettingDetail : ISoapable
	{
		/// <summary>
		/// The criterion type group that these settings apply to.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CriterionTypeGroup? CriterionTypeGroup { get; set; }
		/// <summary>
		/// If true, criteria of this type can be used to modify bidding but will not restrict targeting
		/// of ads. This is equivalent to "Bid only" in the AdWords user interface.
		/// If false, restricts your ads to showing only for the criteria you have selected for this
		/// CriterionTypeGroup. This is equivalent to "Target and Bid" in the AdWords user interface.
		/// The default setting for a CriterionTypeGroup is false ("Target and Bid").
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public bool? TargetAll { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CriterionTypeGroup = null;
			TargetAll = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "criterionTypeGroup")
				{
					CriterionTypeGroup = CriterionTypeGroupExtensions.Parse(xItem.Value);
				}
				else if (localName == "targetAll")
				{
					TargetAll = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CriterionTypeGroup != null)
			{
				xItem = new XElement(XName.Get("criterionTypeGroup", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionTypeGroup.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (TargetAll != null)
			{
				xItem = new XElement(XName.Get("targetAll", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetAll.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Target Outrank Share bidding strategy is an automated bidding strategy which automatically sets
	/// bids so that the customer's ads appear above a specified competitors' ads for a specified target
	/// fraction of the advertiser's eligible impressions on Google.com.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class TargetOutrankShareBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// Specifies the target fraction (in micros) of auctions where the advertiser should outrank the
		/// competitor. The advertiser outranks the competitor in an auction if either the advertiser
		/// appears above the competitor in the search results, or appears in the search results when the
		/// competitor does not.
		/// <span class="constraint InRange">This field must be between 1 and 1000000, inclusive.</span>
		/// </summary>
		public int? TargetOutrankShare { get; set; }
		/// <summary>
		/// Competitor's visible domain URL.
		/// </summary>
		public string CompetitorDomain { get; set; }
		/// <summary>
		/// Ceiling on max CPC bids.
		/// </summary>
		public Money MaxCpcBidCeiling { get; set; }
		/// <summary>
		/// Controls whether the strategy always follows bid estimate changes, or only increases. If false,
		/// always sets a keyword's new bid to the estimate that will meet the target. If true, only
		/// updates a keyword's bid if the current bid estimate is greater than the current bid.
		/// </summary>
		public bool? BidChangesForRaisesOnly { get; set; }
		/// <summary>
		/// Controls whether the strategy is allowed to raise bids on keywords with lower-range quality
		/// scores.
		/// </summary>
		public bool? RaiseBidWhenLowQualityScore { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			TargetOutrankShare = null;
			CompetitorDomain = null;
			MaxCpcBidCeiling = null;
			BidChangesForRaisesOnly = null;
			RaiseBidWhenLowQualityScore = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "targetOutrankShare")
				{
					TargetOutrankShare = int.Parse(xItem.Value);
				}
				else if (localName == "competitorDomain")
				{
					CompetitorDomain = xItem.Value;
				}
				else if (localName == "maxCpcBidCeiling")
				{
					MaxCpcBidCeiling = new Money();
					MaxCpcBidCeiling.ReadFrom(xItem);
				}
				else if (localName == "bidChangesForRaisesOnly")
				{
					BidChangesForRaisesOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "raiseBidWhenLowQualityScore")
				{
					RaiseBidWhenLowQualityScore = bool.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TargetOutrankShareBiddingScheme");
			XElement xItem = null;
			if (TargetOutrankShare != null)
			{
				xItem = new XElement(XName.Get("targetOutrankShare", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetOutrankShare.Value.ToString());
				xE.Add(xItem);
			}
			if (CompetitorDomain != null)
			{
				xItem = new XElement(XName.Get("competitorDomain", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CompetitorDomain);
				xE.Add(xItem);
			}
			if (MaxCpcBidCeiling != null)
			{
				xItem = new XElement(XName.Get("maxCpcBidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				MaxCpcBidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidChangesForRaisesOnly != null)
			{
				xItem = new XElement(XName.Get("bidChangesForRaisesOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BidChangesForRaisesOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (RaiseBidWhenLowQualityScore != null)
			{
				xItem = new XElement(XName.Get("raiseBidWhenLowQualityScore", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RaiseBidWhenLowQualityScore.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Target Roas bidding strategy helps you maximize revenue while averaging a specific target
	/// Return On Average Spend (ROAS).
	///
	/// <p>For example: If TargetRoas is 1.5, the strategy will create as much revenue as possible while
	/// ensuring that every $1.00 of clicks provides $1.50 in conversion value.
	///
	/// <p>Note that campaigns must meet <a
	/// href="//support.google.com/adwords/answer/2471188">specific
	/// eligibility requirements</a> before they can use the <code>TargetRoasBiddingScheme</code>
	/// bidding strategy.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class TargetRoasBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// The desired revenue (based on conversion data) per unit of spend.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetRoas".</span>
		/// <span class="constraint InRange">This field must be between 0.01 and 1000.0, inclusive.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public double? TargetRoas { get; set; }
		/// <summary>
		/// Maximum bid limit that applies to all keywords managed by the strategy.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetRoasBidCeiling".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money BidCeiling { get; set; }
		/// <summary>
		/// Minimum bid limit that applies to all keywords managed by the strategy.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetRoasBidFloor".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money BidFloor { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			TargetRoas = null;
			BidCeiling = null;
			BidFloor = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "targetRoas")
				{
					TargetRoas = double.Parse(xItem.Value);
				}
				else if (localName == "bidCeiling")
				{
					BidCeiling = new Money();
					BidCeiling.ReadFrom(xItem);
				}
				else if (localName == "bidFloor")
				{
					BidFloor = new Money();
					BidFloor.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TargetRoasBiddingScheme");
			XElement xItem = null;
			if (TargetRoas != null)
			{
				xItem = new XElement(XName.Get("targetRoas", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TargetRoas.Value.ToString());
				xE.Add(xItem);
			}
			if (BidCeiling != null)
			{
				xItem = new XElement(XName.Get("bidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				BidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (BidFloor != null)
			{
				xItem = new XElement(XName.Get("bidFloor", "https://adwords.google.com/api/adwords/cm/v201609"));
				BidFloor.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// <a href="https://support.google.com/adwords/answer/6268626">Target Spend</a> is an automated
	/// bid strategy that sets your bids to help get as many clicks as possible within your budget.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public class TargetSpendBiddingScheme : BiddingScheme, ISoapable
	{
		/// <summary>
		/// The largest max CPC bid that can be set by the TargetSpend bidder.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetSpendBidCeiling".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money BidCeiling { get; set; }
		/// <summary>
		/// A spend target under which to maximize clicks. The TargetSpend bidder will
		/// attempt to spend the smaller of this value or the natural throttling spend
		/// amount. If not specified, the budget is used as the spend target.
		/// <span class="constraint Selectable">This field can be selected using the value "TargetSpendSpendTarget".</span>
		/// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
		/// </summary>
		public Money SpendTarget { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			BidCeiling = null;
			SpendTarget = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "bidCeiling")
				{
					BidCeiling = new Money();
					BidCeiling.ReadFrom(xItem);
				}
				else if (localName == "spendTarget")
				{
					SpendTarget = new Money();
					SpendTarget.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TargetSpendBiddingScheme");
			XElement xItem = null;
			if (BidCeiling != null)
			{
				xItem = new XElement(XName.Get("bidCeiling", "https://adwords.google.com/api/adwords/cm/v201609"));
				BidCeiling.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (SpendTarget != null)
			{
				xItem = new XElement(XName.Get("spendTarget", "https://adwords.google.com/api/adwords/cm/v201609"));
				SpendTarget.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents the temporary id for an ad union id, which the user can specify.
	/// The temporary id can be used to group ads together during ad creation.
	/// </summary>
	public class TempAdUnionId : AdUnionId, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TempAdUnionId");
		}
	}
	/// <summary>
	/// Represents a <a href=
	/// "//www.google.com/adwords/displaynetwork/plan-creative-campaigns/display-ad-builder.html"
	/// >Display Ad Builder</a> template ad. A template ad is
	/// composed of a template (specified by its ID) and the data that populates
	/// the template's fields. For a list of available templates and their required
	/// fields, see <a href="/adwords/api/docs/appendix/templateads">Template Ads</a>.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class TemplateAd : Ad, ISoapable
	{
		/// <summary>
		/// ID of the template to use.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? TemplateId { get; set; }
		/// <summary>
		/// Group ID of all template ads, which should be created together.
		/// Template ads in the same union reference the same data but have different
		/// dimensions. Single ads do not have a union ID. If a template ad specifies
		/// an ad union with only one ad, no union will be created.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateAdUnionId".</span>
		/// </summary>
		public AdUnionId AdUnionId { get; set; }
		/// <summary>
		/// List of elements (each containing a set of fields) for the template
		/// referenced by {@code templateId}. See
		/// <a href="/adwords/api/docs/appendix/templateads">Template
		/// Ads</a> for the elements and fields required for each template.
		/// </summary>
		public List<TemplateElement> TemplateElements { get; set; }
		/// <summary>
		/// The template ad rendered as an image.
		/// </summary>
		public Image AdAsImage { get; set; }
		/// <summary>
		/// The dimensions for this ad.
		/// </summary>
		public Dimensions Dimensions { get; set; }
		/// <summary>
		/// Name of this ad.
		/// <span class="constraint Required">
		/// This field is required and should not be {@code null}.</span>
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateAdName".</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Duration of this ad (if it contains playable media).
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateAdDuration".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public int? Duration { get; set; }
		/// <summary>
		/// For copies, the ad id of the ad this was or should be copied from.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateOriginAdId".</span>
		/// </summary>
		public long? OriginAdId { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			TemplateId = null;
			AdUnionId = null;
			TemplateElements = null;
			AdAsImage = null;
			Dimensions = null;
			Name = null;
			Duration = null;
			OriginAdId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "templateId")
				{
					TemplateId = long.Parse(xItem.Value);
				}
				else if (localName == "adUnionId")
				{
					AdUnionId = new AdUnionId();
					AdUnionId.ReadFrom(xItem);
				}
				else if (localName == "templateElements")
				{
					if (TemplateElements == null) TemplateElements = new List<TemplateElement>();
					var templateElementsItem = new TemplateElement();
					templateElementsItem.ReadFrom(xItem);
					TemplateElements.Add(templateElementsItem);
				}
				else if (localName == "adAsImage")
				{
					AdAsImage = new Image();
					AdAsImage.ReadFrom(xItem);
				}
				else if (localName == "dimensions")
				{
					Dimensions = new Dimensions();
					Dimensions.ReadFrom(xItem);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "duration")
				{
					Duration = int.Parse(xItem.Value);
				}
				else if (localName == "originAdId")
				{
					OriginAdId = long.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TemplateAd");
			XElement xItem = null;
			if (TemplateId != null)
			{
				xItem = new XElement(XName.Get("templateId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TemplateId.Value.ToString());
				xE.Add(xItem);
			}
			if (AdUnionId != null)
			{
				xItem = new XElement(XName.Get("adUnionId", "https://adwords.google.com/api/adwords/cm/v201609"));
				AdUnionId.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TemplateElements != null)
			{
				foreach (var templateElementsItem in TemplateElements)
				{
					xItem = new XElement(XName.Get("templateElements", "https://adwords.google.com/api/adwords/cm/v201609"));
					templateElementsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (AdAsImage != null)
			{
				xItem = new XElement(XName.Get("adAsImage", "https://adwords.google.com/api/adwords/cm/v201609"));
				AdAsImage.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Dimensions != null)
			{
				xItem = new XElement(XName.Get("dimensions", "https://adwords.google.com/api/adwords/cm/v201609"));
				Dimensions.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Duration != null)
			{
				xItem = new XElement(XName.Get("duration", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Duration.Value.ToString());
				xE.Add(xItem);
			}
			if (OriginAdId != null)
			{
				xItem = new XElement(XName.Get("originAdId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(OriginAdId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents an element in a template. Each template element is composed
	/// of a list of fields (actual value data).
	/// </summary>
	public class TemplateElement : ISoapable
	{
		/// <summary>
		/// Unique name for this element.
		/// <span class="constraint Selectable">This field can be selected using the value "UniqueName".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string UniqueName { get; set; }
		/// <summary>
		/// List of fields to use for this template element.
		/// These must be the same for all template ads in the same template ad union.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<TemplateElementField> Fields { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			UniqueName = null;
			Fields = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "uniqueName")
				{
					UniqueName = xItem.Value;
				}
				else if (localName == "fields")
				{
					if (Fields == null) Fields = new List<TemplateElementField>();
					var fieldsItem = new TemplateElementField();
					fieldsItem.ReadFrom(xItem);
					Fields.Add(fieldsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (UniqueName != null)
			{
				xItem = new XElement(XName.Get("uniqueName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UniqueName);
				xE.Add(xItem);
			}
			if (Fields != null)
			{
				foreach (var fieldsItem in Fields)
				{
					xItem = new XElement(XName.Get("fields", "https://adwords.google.com/api/adwords/cm/v201609"));
					fieldsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a field in a template element.
	/// </summary>
	public class TemplateElementField : ISoapable
	{
		/// <summary>
		/// The name of this field.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateElementFieldName".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The type of this field.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateElementFieldType".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public TemplateElementFieldType? Type { get; set; }
		/// <summary>
		/// Text value for text field types. Null if not text field.
		/// The field is a text field if type is ADDRESS, ENUM, TEXT, URL,
		/// or VISIBLE_URL.
		/// <span class="constraint Selectable">This field can be selected using the value "TemplateElementFieldText".</span>
		/// </summary>
		public string FieldText { get; set; }
		/// <summary>
		/// Media value for non-text field types. Null if a text field. This
		/// fields must be specified if fieldText is null.
		/// </summary>
		public Media FieldMedia { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Name = null;
			Type = null;
			FieldText = null;
			FieldMedia = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "type")
				{
					Type = TemplateElementFieldTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "fieldText")
				{
					FieldText = xItem.Value;
				}
				else if (localName == "fieldMedia")
				{
					FieldMedia = new Media();
					FieldMedia.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Type != null)
			{
				xItem = new XElement(XName.Get("type", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Type.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (FieldText != null)
			{
				xItem = new XElement(XName.Get("fieldText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(FieldText);
				xE.Add(xItem);
			}
			if (FieldMedia != null)
			{
				xItem = new XElement(XName.Get("fieldMedia", "https://adwords.google.com/api/adwords/cm/v201609"));
				FieldMedia.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Possible field types of template element fields.
	/// </summary>
	public enum TemplateElementFieldType
	{
		/// <summary>
		/// Address field type (text).
		/// </summary>
		Address,
		/// <summary>
		/// Audio field type (Media).
		/// </summary>
		Audio,
		/// <summary>
		/// Enum field type (text).
		/// </summary>
		Enum,
		/// <summary>
		/// Image field type (Media).
		/// </summary>
		Image,
		/// <summary>
		/// Background Image field type (Media).
		/// </summary>
		BackgroundImage,
		/// <summary>
		/// Number field type (text).
		/// </summary>
		Number,
		/// <summary>
		/// Text field type (text).
		/// </summary>
		Text,
		/// <summary>
		/// URL field type (text).
		/// </summary>
		Url,
		/// <summary>
		/// Video field type (Media).
		/// </summary>
		Video,
		/// <summary>
		/// Visible URL field type (text).
		/// </summary>
		VisibleUrl,
		/// <summary>
		/// A ZIP file containing HTML5 assets.
		/// </summary>
		MediaBundle,
		/// <summary>
		/// UNKNOWN type can not be passed as input.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// A URL that expires at a particular time.
	/// </summary>
	public class TemporaryUrl : ISoapable
	{
		/// <summary>
		/// The URL.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Url { get; set; }
		/// <summary>
		/// When the URL expires, in account time.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string Expiration { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Url = null;
			Expiration = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "url")
				{
					Url = xItem.Value;
				}
				else if (localName == "expiration")
				{
					Expiration = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Url != null)
			{
				xItem = new XElement(XName.Get("url", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Url);
				xE.Add(xItem);
			}
			if (Expiration != null)
			{
				xItem = new XElement(XName.Get("expiration", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Expiration);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a TextAd.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class TextAd : Ad, ISoapable
	{
		/// <summary>
		/// The headline of the ad.
		/// <span class="constraint Selectable">This field can be selected using the value "Headline".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Headline { get; set; }
		/// <summary>
		/// The first description line.
		/// <span class="constraint Selectable">This field can be selected using the value "Description1".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description1 { get; set; }
		/// <summary>
		/// The second description line.
		/// <span class="constraint Selectable">This field can be selected using the value "Description2".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Description2 { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Headline = null;
			Description1 = null;
			Description2 = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "headline")
				{
					Headline = xItem.Value;
				}
				else if (localName == "description1")
				{
					Description1 = xItem.Value;
				}
				else if (localName == "description2")
				{
					Description2 = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TextAd");
			XElement xItem = null;
			if (Headline != null)
			{
				xItem = new XElement(XName.Get("headline", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Headline);
				xE.Add(xItem);
			}
			if (Description1 != null)
			{
				xItem = new XElement(XName.Get("description1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description1);
				xE.Add(xItem);
			}
			if (Description2 != null)
			{
				xItem = new XElement(XName.Get("description2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description2);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represent a display label entry.
	/// </summary>
	public class TextLabel : Label, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TextLabel");
		}
	}
	/// <summary>
	/// Data associated with rich media extension attributes.
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class ThirdPartyRedirectAd : RichMediaAd, ISoapable
	{
		/// <summary>
		/// Defines whether or not the ad is cookie targeted.
		/// (i.e. user list targeting, or the network's equivalent).
		/// <span class="constraint Selectable">This field can be selected using the value "IsCookieTargeted".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public bool? IsCookieTargeted { get; set; }
		/// <summary>
		/// Defines whether or not the ad is targeting user interest.
		/// <span class="constraint Selectable">This field can be selected using the value "IsUserInterestTargeted".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public bool? IsUserInterestTargeted { get; set; }
		/// <summary>
		/// Defines whether or not the ad contains a tracking pixel of any kind.
		/// <span class="constraint Selectable">This field can be selected using the value "IsTagged".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public bool? IsTagged { get; set; }
		/// <summary>
		/// Video Types of the ad. (RealMedia, Quick Time etc.)
		/// <span class="constraint Selectable">This field can be selected using the value "VideoTypes".</span>
		/// </summary>
		public List<VideoType> VideoTypes { get; set; }
		/// <summary>
		/// Allowed expanding directions. These directions are used to match
		/// publishers' ad slots. For example, if a slot allows expansion toward the
		/// right, only ads with EXPANDING_RIGHT specified will show up there.
		/// <span class="constraint Selectable">This field can be selected using the value "ExpandingDirections".</span>
		/// </summary>
		public List<ThirdPartyRedirectAdExpandingDirection> ExpandingDirections { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			IsCookieTargeted = null;
			IsUserInterestTargeted = null;
			IsTagged = null;
			VideoTypes = null;
			ExpandingDirections = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "isCookieTargeted")
				{
					IsCookieTargeted = bool.Parse(xItem.Value);
				}
				else if (localName == "isUserInterestTargeted")
				{
					IsUserInterestTargeted = bool.Parse(xItem.Value);
				}
				else if (localName == "isTagged")
				{
					IsTagged = bool.Parse(xItem.Value);
				}
				else if (localName == "videoTypes")
				{
					if (VideoTypes == null) VideoTypes = new List<VideoType>();
					VideoTypes.Add(VideoTypeExtensions.Parse(xItem.Value));
				}
				else if (localName == "expandingDirections")
				{
					if (ExpandingDirections == null) ExpandingDirections = new List<ThirdPartyRedirectAdExpandingDirection>();
					ExpandingDirections.Add(ThirdPartyRedirectAdExpandingDirectionExtensions.Parse(xItem.Value));
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ThirdPartyRedirectAd");
			XElement xItem = null;
			if (IsCookieTargeted != null)
			{
				xItem = new XElement(XName.Get("isCookieTargeted", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsCookieTargeted.Value.ToString());
				xE.Add(xItem);
			}
			if (IsUserInterestTargeted != null)
			{
				xItem = new XElement(XName.Get("isUserInterestTargeted", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsUserInterestTargeted.Value.ToString());
				xE.Add(xItem);
			}
			if (IsTagged != null)
			{
				xItem = new XElement(XName.Get("isTagged", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IsTagged.Value.ToString());
				xE.Add(xItem);
			}
			if (VideoTypes != null)
			{
				foreach (var videoTypesItem in VideoTypes)
				{
					xItem = new XElement(XName.Get("videoTypes", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(videoTypesItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
			if (ExpandingDirections != null)
			{
				foreach (var expandingDirectionsItem in ExpandingDirections)
				{
					xItem = new XElement(XName.Get("expandingDirections", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(expandingDirectionsItem.ToXmlValue());
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Allowed expanding directions for ads that are expandable.
	/// </summary>
	public enum ThirdPartyRedirectAdExpandingDirection
	{
		/// <summary>
		/// Whether the ad can be expanded is unknown.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The ad is allowed to expand upward.
		/// </summary>
		ExpandingUp,
		/// <summary>
		/// The ad is allowed to expand downward.
		/// </summary>
		ExpandingDown,
		/// <summary>
		/// The ad is allowed to expand leftward.
		/// </summary>
		ExpandingLeft,
		/// <summary>
		/// The ad is allowed to expand rightward.
		/// </summary>
		ExpandingRight,
		/// <summary>
		/// The ad is allowed to expand toward the up-left corner.
		/// </summary>
		ExpandingUpleft,
		/// <summary>
		/// The ad is allowed to expand toward the up-right corner.
		/// </summary>
		ExpandingUpright,
		/// <summary>
		/// The ad is allowed to expand toward the down-left corner.
		/// </summary>
		ExpandingDownleft,
		/// <summary>
		/// The ad is allowed to expand toward the down-right corner.
		/// </summary>
		ExpandingDownright
	}
	/// <summary>
	/// Unit of time the cap is defined at.
	/// </summary>
	public enum TimeUnit
	{
		Minute,
		Hour,
		Day,
		Week,
		Month,
		Lifetime
	}
	/// <summary>
	/// Campaign level settings for tracking information.
	/// </summary>
	public class TrackingSetting : Setting, ISoapable
	{
		/// <summary>
		/// The url used for dynamic tracking.  For more information, see the
		/// article <a href="https://support.google.com/adwords/answer/2549100">
		/// Use dynamic tracking URLs</a>.
		/// Specify "NONE" to clear existing url.
		/// <span class="constraint StringLength">This string must not be empty.</span>
		/// </summary>
		public string TrackingUrl { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			TrackingUrl = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "trackingUrl")
				{
					TrackingUrl = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrackingSetting");
			XElement xItem = null;
			if (TrackingUrl != null)
			{
				xItem = new XElement(XName.Get("trackingUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrackingUrl);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Base error class for {@link TrafficEstimatorService}.
	/// </summary>
	public class TrafficEstimatorError : ApiError, ISoapable
	{
		public TrafficEstimatorErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = TrafficEstimatorErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "TrafficEstimatorError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum TrafficEstimatorErrorReason
	{
		/// <summary>
		/// When the request with {@code null} campaign ID in {@link CampaignEstimateRequest} contains an
		/// {@link AdGroupEstimateRequest} with an ID.
		/// </summary>
		NoCampaignForAdGroupEstimateRequest,
		/// <summary>
		/// When the request with {@code null} adgroup ID in {@link AdGroupEstimateRequest} contains a
		/// {@link KeywordEstimateRequest} with an ID.
		/// </summary>
		NoAdGroupForKeywordEstimateRequest,
		/// <summary>
		/// All {@link KeywordEstimateRequest} items should have maxCpc associated with them.
		/// </summary>
		NoMaxCpcForKeywordEstimateRequest,
		/// <summary>
		/// When there are more {@link KeywordEstimateRequest}s in the request than
		/// TrafficEstimatorService allows.
		/// </summary>
		TooManyKeywordEstimateRequests,
		/// <summary>
		/// When there are more {@link CampaignEstimateRequest}s in the request than
		/// TrafficEstimatorService allows.
		/// </summary>
		TooManyCampaignEstimateRequests,
		/// <summary>
		/// When there are more {@link AdGroupEstimateRequest}s in the request than
		/// TrafficEstimatorService allows.
		/// </summary>
		TooManyAdgroupEstimateRequests,
		/// <summary>
		/// When there are more targets in the request than TrafficEstimatorService allows. See
		/// documentation on {@link CampaignEstimateRequest} for more information about this error.
		/// </summary>
		TooManyTargets,
		/// <summary>
		/// Request contains a keyword that is too long for backends to handle.
		/// </summary>
		KeywordTooLong,
		/// <summary>
		/// Request contains a keyword that contains broad match modifiers.
		/// </summary>
		KeywordContainsBroadMatchModifiers,
		/// <summary>
		/// When an unexpected error occurs.
		/// </summary>
		InvalidInput,
		/// <summary>
		/// When backend service calls fail.
		/// </summary>
		ServiceUnavailable
	}
	/// <summary>
	/// Contains results of traffic estimation request.
	/// </summary>
	public class TrafficEstimatorResult : ISoapable
	{
		/// <summary>
		/// The estimates for the campaigns specified in the request.
		///
		/// They are listed in the same order as the campaigns that were sent in the
		/// request.
		/// </summary>
		public List<CampaignEstimate> CampaignEstimates { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignEstimates = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignEstimates")
				{
					if (CampaignEstimates == null) CampaignEstimates = new List<CampaignEstimate>();
					var campaignEstimatesItem = new CampaignEstimate();
					campaignEstimatesItem.ReadFrom(xItem);
					CampaignEstimates.Add(campaignEstimatesItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignEstimates != null)
			{
				foreach (var campaignEstimatesItem in CampaignEstimates)
				{
					xItem = new XElement(XName.Get("campaignEstimates", "https://adwords.google.com/api/adwords/o/v201609"));
					campaignEstimatesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Contains a list of campaigns to perform a traffic estimate on.
	/// </summary>
	public class TrafficEstimatorSelector : ISoapable
	{
		/// <summary>
		/// A list of all campaigns to estimate.<p>
		///
		/// To create a Keyword estimates request, use {@code null} campaign id.
		/// <span class="constraint CollectionSize">The maximum size of this collection is 5.</span>
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<CampaignEstimateRequest> CampaignEstimateRequests { get; set; }
		/// <summary>
		/// To request a list of campaign level estimates segmented by platform.
		/// </summary>
		public bool? PlatformEstimateRequested { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			CampaignEstimateRequests = null;
			PlatformEstimateRequested = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "campaignEstimateRequests")
				{
					if (CampaignEstimateRequests == null) CampaignEstimateRequests = new List<CampaignEstimateRequest>();
					var campaignEstimateRequestsItem = new CampaignEstimateRequest();
					campaignEstimateRequestsItem.ReadFrom(xItem);
					CampaignEstimateRequests.Add(campaignEstimateRequestsItem);
				}
				else if (localName == "platformEstimateRequested")
				{
					PlatformEstimateRequested = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (CampaignEstimateRequests != null)
			{
				foreach (var campaignEstimateRequestsItem in CampaignEstimateRequests)
				{
					xItem = new XElement(XName.Get("campaignEstimateRequests", "https://adwords.google.com/api/adwords/o/v201609"));
					campaignEstimateRequestsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PlatformEstimateRequested != null)
			{
				xItem = new XElement(XName.Get("platformEstimateRequested", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(PlatformEstimateRequested.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Interface for campaign trial entities. A trial is an experiment created by an advertiser from
	/// changes in a draft.
	/// </summary>
	public class Trial : ISoapable
	{
		/// <summary>
		/// The id of this trial.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Id of the base campaign, which will be the control arm of this trial.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// Valid id of the draft this trial is based on.
		/// <span class="constraint Selectable">This field can be selected using the value "DraftId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public long? DraftId { get; set; }
		/// <summary>
		/// Id of the new budget to assign to the trial campaign when graduating a trial.
		///
		/// <p>Required for {@link Operator#SET SET} operations, when changing the {@link #status} to
		/// {@code GRADUATED}, and read-only otherwise.
		///
		/// <p>When graduating a trial, the same constraints apply to this field as for a budget id passed
		/// to {@code CampaignService} when creating a new campaign.
		///
		/// <p>{@code GET} operations always return a {@code null} budget id.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public long? BudgetId { get; set; }
		/// <summary>
		/// The name of this trial. Must not conflict with the name of another trial or campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 1024, inclusive, in UTF-8 bytes, (trimmed).</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Date the trial begins. On add, defaults to the the base campaign's start date or the
		/// current day in the parent account's local timezone (whichever is later).
		/// <span class="constraint Selectable">This field can be selected using the value "StartDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string StartDate { get; set; }
		/// <summary>
		/// Date the campaign ends. On add, defaults to the base campaign's end date.
		/// <span class="constraint Selectable">This field can be selected using the value "EndDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string EndDate { get; set; }
		/// <summary>
		/// Traffic share to be directed to the trial arm of this trial, i.e. the arm containing the
		/// trial changes (in percent). The remainder of the traffic (100 - {@code trafficSplitPercent})
		/// will be directed to the base campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "TrafficSplitPercent".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint InRange">This field must be between 1 and 99, inclusive.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public int? TrafficSplitPercent { get; set; }
		/// <summary>
		/// Status of this trial. Note that a running trial will always be ACTIVE, but not all ACTIVE
		/// trials are currently running: they may have ended or been scheduled for the future.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
		/// </summary>
		public TrialStatus? Status { get; set; }
		/// <summary>
		/// Id of the trial campaign. This will be null if the Trial has
		/// status CREATING.
		/// <span class="constraint Selectable">This field can be selected using the value "TrialCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? TrialCampaignId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			BaseCampaignId = null;
			DraftId = null;
			BudgetId = null;
			Name = null;
			StartDate = null;
			EndDate = null;
			TrafficSplitPercent = null;
			Status = null;
			TrialCampaignId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "draftId")
				{
					DraftId = long.Parse(xItem.Value);
				}
				else if (localName == "budgetId")
				{
					BudgetId = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "startDate")
				{
					StartDate = xItem.Value;
				}
				else if (localName == "endDate")
				{
					EndDate = xItem.Value;
				}
				else if (localName == "trafficSplitPercent")
				{
					TrafficSplitPercent = int.Parse(xItem.Value);
				}
				else if (localName == "status")
				{
					Status = TrialStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "trialCampaignId")
				{
					TrialCampaignId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (DraftId != null)
			{
				xItem = new XElement(XName.Get("draftId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DraftId.Value.ToString());
				xE.Add(xItem);
			}
			if (BudgetId != null)
			{
				xItem = new XElement(XName.Get("budgetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BudgetId.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (StartDate != null)
			{
				xItem = new XElement(XName.Get("startDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StartDate);
				xE.Add(xItem);
			}
			if (EndDate != null)
			{
				xItem = new XElement(XName.Get("endDate", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(EndDate);
				xE.Add(xItem);
			}
			if (TrafficSplitPercent != null)
			{
				xItem = new XElement(XName.Get("trafficSplitPercent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrafficSplitPercent.Value.ToString());
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (TrialCampaignId != null)
			{
				xItem = new XElement(XName.Get("trialCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrialCampaignId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// An error that has occurred while asynchronously processing the creation or promotion of a trial.
	/// </summary>
	public class TrialAsyncError : ISoapable
	{
		/// <summary>
		/// The trial that was attempted to be created or promoted.
		/// <span class="constraint Selectable">This field can be selected using the value "TrialId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? TrialId { get; set; }
		/// <summary>
		/// The error that occurred while processing the trial.
		/// <span class="constraint Selectable">This field can be selected using the value "AsyncError".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public ApiError AsyncError { get; set; }
		/// <summary>
		/// The error occurred during trial creation while updating this Campaign or an entity in this
		/// Campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "TrialCampaignId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? TrialCampaignId { get; set; }
		/// <summary>
		/// The error occurred during trial creation while updating this AdGroup or an entity in this
		/// AdGroup.
		/// <span class="constraint Selectable">This field can be selected using the value "TrialAdGroupId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? TrialAdGroupId { get; set; }
		/// <summary>
		/// The error occurred during trial promotion while updating this Campaign or an entity in this
		/// Campaign.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseCampaignId { get; set; }
		/// <summary>
		/// The error occurred during trial promotion while updating this AdGroup or an entity in this
		/// AdGroup.
		/// <span class="constraint Selectable">This field can be selected using the value "BaseAdGroupId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? BaseAdGroupId { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			TrialId = null;
			AsyncError = null;
			TrialCampaignId = null;
			TrialAdGroupId = null;
			BaseCampaignId = null;
			BaseAdGroupId = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "trialId")
				{
					TrialId = long.Parse(xItem.Value);
				}
				else if (localName == "asyncError")
				{
					AsyncError = InstanceCreator.CreateApiError(xItem);
					AsyncError.ReadFrom(xItem);
				}
				else if (localName == "trialCampaignId")
				{
					TrialCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "trialAdGroupId")
				{
					TrialAdGroupId = long.Parse(xItem.Value);
				}
				else if (localName == "baseCampaignId")
				{
					BaseCampaignId = long.Parse(xItem.Value);
				}
				else if (localName == "baseAdGroupId")
				{
					BaseAdGroupId = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (TrialId != null)
			{
				xItem = new XElement(XName.Get("trialId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrialId.Value.ToString());
				xE.Add(xItem);
			}
			if (AsyncError != null)
			{
				xItem = new XElement(XName.Get("asyncError", "https://adwords.google.com/api/adwords/cm/v201609"));
				AsyncError.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (TrialCampaignId != null)
			{
				xItem = new XElement(XName.Get("trialCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrialCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (TrialAdGroupId != null)
			{
				xItem = new XElement(XName.Get("trialAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(TrialAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseCampaignId != null)
			{
				xItem = new XElement(XName.Get("baseCampaignId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseCampaignId.Value.ToString());
				xE.Add(xItem);
			}
			if (BaseAdGroupId != null)
			{
				xItem = new XElement(XName.Get("baseAdGroupId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(BaseAdGroupId.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a subset of TrialAsyncErrors resulting from the filtering and paging of
	/// {@link TrialAsyncErrorService#get} call.
	/// </summary>
	public class TrialAsyncErrorPage : Page, ISoapable
	{
		public List<TrialAsyncError> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<TrialAsyncError>();
					var entriesItem = new TrialAsyncError();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrialAsyncErrorPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Error class for {@link TrialService}.
	/// </summary>
	public class TrialError : ApiError, ISoapable
	{
		public TrialErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = TrialErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrialError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error codes defined by {@link TrialError}.
	/// </summary>
	public enum TrialErrorReason
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Trial status cannot be updated from the current status to the requested target status.
		/// </summary>
		InvalidStatusTransition,
		/// <summary>
		/// Cannot create a trial from a campaign using an explicitly shared budget.
		/// </summary>
		CannotUseTrialWithSharedBudget,
		/// <summary>
		/// Cannot create a trial as long as the campaign has a running or scheduled Advertiser Campaign
		/// Experiment.
		/// </summary>
		CannotCreateTrialWhenCampaignHasActiveExperiments,
		/// <summary>
		/// Cannot create a trial for a base campaign, which is deleted.
		/// </summary>
		CannotCreateTrialForDeletedBaseCampaign,
		/// <summary>
		/// Cannot create a trial from a draft, which has a status other than proposed.
		/// </summary>
		CannotCreateTrialForNonProposedDraft,
		/// <summary>
		/// This customer is not allowed to create a trial.
		/// </summary>
		CustomerCannotCreateTrial,
		/// <summary>
		/// This campaign is not allowed to create a trial.
		/// </summary>
		CampaignCannotCreateTrial,
		/// <summary>
		/// Trying to use a trial name which is already assigned to another campaign or trial.
		/// </summary>
		NameAlreadyInUse,
		/// <summary>
		/// Trying to set a trial duration which overlaps with another trial.
		/// </summary>
		TrialDurationsMustNotOverlap,
		/// <summary>
		/// All non-archived trials must start end end within their campaign's duration.
		/// </summary>
		TrialDurationMustBeWithinCampaignDuration
	}
	/// <summary>
	/// Operation for creating, modifying and promoting/archiving campaign trials.
	/// </summary>
	public class TrialOperation : Operation, ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Trial Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new Trial();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrialOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a filtered and paged subset of campaign trials as returned by {@link
	/// TrialService#get(com.google.ads.api.services.common.selector.Selector)}.
	/// </summary>
	public class TrialPage : Page, ISoapable
	{
		public List<Trial> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<Trial>();
					var entriesItem = new Trial();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrialPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/cm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Return value for {@link TrialService#mutate(java.util.List)} operations.
	/// </summary>
	public class TrialReturnValue : ListReturnValue, ISoapable
	{
		public List<Trial> Value { get; set; }
		public List<ApiError> PartialFailureErrors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			PartialFailureErrors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<Trial>();
					var valueItem = new Trial();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
				else if (localName == "partialFailureErrors")
				{
					if (PartialFailureErrors == null) PartialFailureErrors = new List<ApiError>();
					var partialFailureErrorsItem = InstanceCreator.CreateApiError(xItem);
					partialFailureErrorsItem.ReadFrom(xItem);
					PartialFailureErrors.Add(partialFailureErrorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "TrialReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/cm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
			if (PartialFailureErrors != null)
			{
				foreach (var partialFailureErrorsItem in PartialFailureErrors)
				{
					xItem = new XElement(XName.Get("partialFailureErrors", "https://adwords.google.com/api/adwords/cm/v201609"));
					partialFailureErrorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Status diagram available at go/adsapi-commander
	/// </summary>
	public enum TrialStatus
	{
		/// <summary>
		/// Invalid status. Should not be used except for detecting values that are
		/// incorrect, or values that are not yet known to the user.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The trial campaign is being created.
		/// </summary>
		Creating,
		/// <summary>
		/// The trial campaign is fully created. The trial is currently running, scheduled
		/// to run in the future or has ended based on its end date.The advertiser cannot
		/// set this status directly. A trial with the status CREATING will be updated to
		/// ACTIVE when it is fully created.
		/// </summary>
		Active,
		/// <summary>
		/// The advertiser requested to merge changes in the trial back into the original
		/// campaigns. The update to the original campaign will be kicked off asynchronously
		/// and the status will be updated to PROMOTED or PROMOTE_FAILED upon completion.
		/// </summary>
		Promoting,
		/// <summary>
		/// The process to merge changes in the trial back to the original campaign has
		/// completedly successfully. The advertiser cannot set this status directly. To
		/// move the trial to this status, set the trial to status PROMOTING and the status
		/// will be updated to PROMOTED when the changes are applied to the original
		/// campaign.
		/// </summary>
		Promoted,
		/// <summary>
		/// The advertiser archived the campaign trial.
		/// </summary>
		Archived,
		/// <summary>
		/// The materializer failed to create the materialized campaign. More details about
		/// the errors are available through getErrors in the TrialService API.The
		/// advertiser cannot set this status directly.
		/// </summary>
		CreationFailed,
		/// <summary>
		/// The promotion failed after it was partially applied. Promote cannot be attempted
		/// again safely, so the issue must be corrected in the original campaign. More
		/// details about the errors are available through getErrors in the TrialService
		/// API.The advertiser cannot set this status directly. To promote the trial, set
		/// the trial in state PROMOTING and the status will be updated to PROMOTE_FAILED if
		/// errors are encountered while applying changes to the original campaign.
		/// </summary>
		PromoteFailed,
		/// <summary>
		/// The advertiser has graduated the trial campaign to a standalone campaign,
		/// existing independently of the trial.
		/// </summary>
		Graduated,
		/// <summary>
		/// The advertiser has halted the trial.
		/// </summary>
		Halted
	}
	/// <summary>
	/// This represents an entry in a map with a key of type Type
	/// and value of type Attribute.
	/// </summary>
	public class Type_AttributeMapEntry : ISoapable
	{
		public AttributeType? Key { get; set; }
		public Attribute Value { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Key = null;
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "key")
				{
					Key = AttributeTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "value")
				{
					Value = InstanceCreator.CreateAttribute(xItem);
					Value.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Key != null)
			{
				xItem = new XElement(XName.Get("key", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Key.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents the goal towards which the bidding strategy, of a universal app
	/// campaign, should optimize for. See go/walnut-pie-apdr for more.
	/// </summary>
	public enum UniversalAppBiddingStrategyGoalType
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// The bidding strategy of the universal app campaign should aim to maximize
		/// installation of the app.
		/// </summary>
		OptimizeForInstallConversionVolume,
		/// <summary>
		/// The bidding strategy of the universal app campaign should aim to maximize the
		/// selected in-app conversions' volume.
		/// </summary>
		OptimizeForInAppConversionVolume,
		/// <summary>
		/// The bidding strategy of the universal app campaign should aim to maximize all
		/// conversions' value, i.e., install + selected in-app conversions.NOTE: This value
		/// cannot be set by external clients.
		/// </summary>
		OptimizeForTotalConversionValue
	}
	/// <summary>
	/// Contains Universal App Campaign Ads Policy decisions with asset identifier information, where
	/// available.
	/// </summary>
	public class UniversalAppCampaignAdsPolicyDecisions : ISoapable
	{
		/// <summary>
		/// Used to identify assets that are associated with the Ads Policy decisions.
		/// </summary>
		public UniversalAppCampaignAsset? UniversalAppCampaignAsset { get; set; }
		/// <summary>
		/// Unique identifier, which when combined with the UniversalAppCampaignAsset, can be used to
		/// uniquely identify the exact asset.
		///
		/// <p>For example, in the case of {@link UniversalAppCampaignAsset}.VIDEO - the id could be used
		/// to identify the individual video.
		/// </summary>
		public string AssetId { get; set; }
		/// <summary>
		/// List of policy decisions associated with the asset(s).
		/// </summary>
		public List<PolicyTopicEntry> PolicyTopicEntries { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			UniversalAppCampaignAsset = null;
			AssetId = null;
			PolicyTopicEntries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "universalAppCampaignAsset")
				{
					UniversalAppCampaignAsset = UniversalAppCampaignAssetExtensions.Parse(xItem.Value);
				}
				else if (localName == "assetId")
				{
					AssetId = xItem.Value;
				}
				else if (localName == "policyTopicEntries")
				{
					if (PolicyTopicEntries == null) PolicyTopicEntries = new List<PolicyTopicEntry>();
					var policyTopicEntriesItem = new PolicyTopicEntry();
					policyTopicEntriesItem.ReadFrom(xItem);
					PolicyTopicEntries.Add(policyTopicEntriesItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (UniversalAppCampaignAsset != null)
			{
				xItem = new XElement(XName.Get("universalAppCampaignAsset", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UniversalAppCampaignAsset.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AssetId != null)
			{
				xItem = new XElement(XName.Get("assetId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AssetId);
				xE.Add(xItem);
			}
			if (PolicyTopicEntries != null)
			{
				foreach (var policyTopicEntriesItem in PolicyTopicEntries)
				{
					xItem = new XElement(XName.Get("policyTopicEntries", "https://adwords.google.com/api/adwords/cm/v201609"));
					policyTopicEntriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents the individual assets that are utilized as part of the campaign.
	/// </summary>
	public enum UniversalAppCampaignAsset
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Identifies a combination of assets.
		/// </summary>
		Combination,
		/// <summary>
		/// Identifies the app destination.
		/// </summary>
		AppDestination,
		/// <summary>
		/// Identifies the app related data, like app name, app icon, developer name
		/// including translations of the content.
		/// </summary>
		AppAssets,
		/// <summary>
		/// Identifies the campaign setting's description1 field.
		/// </summary>
		Description1,
		/// <summary>
		/// Identifies the campaign setting's description2 field.
		/// </summary>
		Description2,
		/// <summary>
		/// Identifies the campaign setting's description3 field.
		/// </summary>
		Description3,
		/// <summary>
		/// Identifies the campaign setting's description4 field.
		/// </summary>
		Description4,
		/// <summary>
		/// Identifies the campaign setting's video fields.
		/// </summary>
		Video,
		/// <summary>
		/// Identifies the campaign setting's image fields.
		/// </summary>
		Image
	}
	/// <summary>
	/// Setting for storing the mobile app to advertise and creative assets for Universal app campaigns.
	/// This setting is required for Campaigns with advertising channel subtype UNIVERSAL_APP_CAMPAIGN
	/// and can only be attached to such Campaigns.
	/// </summary>
	public class UniversalAppCampaignSetting : Setting, ISoapable
	{
		/// <summary>
		/// A string that uniquely identifies a mobile application. The appId should be the same as the
		/// vendor native id for the app. For example the Android Application "Color Drips"
		/// (https://play.google.com/store/apps/details?id=com.labpixies.colordrips) would have the appId -
		/// "com.labpixies.colordrips".
		/// <span class="constraint Filterable">This field can be filtered on using the value "UniversalAppCampaignSettingAppId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public string AppId { get; set; }
		/// <summary>
		/// A description line of your mobile application promotion ad(s).
		/// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Description1 { get; set; }
		/// <summary>
		/// A description line of your mobile application promotion ad(s).
		/// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Description2 { get; set; }
		/// <summary>
		/// A description line of your mobile application promotion ad(s).
		/// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Description3 { get; set; }
		/// <summary>
		/// A description line of your mobile application promotion ad(s).
		/// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
		/// </summary>
		public string Description4 { get; set; }
		/// <summary>
		/// MediaIds for YouTube videos to be shown to users when advertising on video networks.
		/// </summary>
		public List<long> YoutubeVideoMediaIds { get; set; }
		/// <summary>
		/// MediaIds for landscape images to be used in creatives to be shown to users when advertising on
		/// display networks.
		/// </summary>
		public List<long> ImageMediaIds { get; set; }
		/// <summary>
		/// Represents the goal towards which the bidding strategy, of this universal app campaign, should
		/// optimize for.
		/// </summary>
		public UniversalAppBiddingStrategyGoalType? UniversalAppBiddingStrategyGoalType { get; set; }
		/// <summary>
		/// Operations for YouTube Video MediaIds.
		/// </summary>
		public ListOperations YoutubeVideoMediaIdsOps { get; set; }
		/// <summary>
		/// Operations for Image MediaIds.
		/// </summary>
		public ListOperations ImageMediaIdsOps { get; set; }
		/// <summary>
		/// Ads policy decisions associated with asset(s).
		/// </summary>
		public List<UniversalAppCampaignAdsPolicyDecisions> AdsPolicyDecisions { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			AppId = null;
			Description1 = null;
			Description2 = null;
			Description3 = null;
			Description4 = null;
			YoutubeVideoMediaIds = null;
			ImageMediaIds = null;
			UniversalAppBiddingStrategyGoalType = null;
			YoutubeVideoMediaIdsOps = null;
			ImageMediaIdsOps = null;
			AdsPolicyDecisions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "appId")
				{
					AppId = xItem.Value;
				}
				else if (localName == "description1")
				{
					Description1 = xItem.Value;
				}
				else if (localName == "description2")
				{
					Description2 = xItem.Value;
				}
				else if (localName == "description3")
				{
					Description3 = xItem.Value;
				}
				else if (localName == "description4")
				{
					Description4 = xItem.Value;
				}
				else if (localName == "youtubeVideoMediaIds")
				{
					if (YoutubeVideoMediaIds == null) YoutubeVideoMediaIds = new List<long>();
					YoutubeVideoMediaIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "imageMediaIds")
				{
					if (ImageMediaIds == null) ImageMediaIds = new List<long>();
					ImageMediaIds.Add(long.Parse(xItem.Value));
				}
				else if (localName == "universalAppBiddingStrategyGoalType")
				{
					UniversalAppBiddingStrategyGoalType = UniversalAppBiddingStrategyGoalTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "youtubeVideoMediaIdsOps")
				{
					YoutubeVideoMediaIdsOps = new ListOperations();
					YoutubeVideoMediaIdsOps.ReadFrom(xItem);
				}
				else if (localName == "imageMediaIdsOps")
				{
					ImageMediaIdsOps = new ListOperations();
					ImageMediaIdsOps.ReadFrom(xItem);
				}
				else if (localName == "adsPolicyDecisions")
				{
					if (AdsPolicyDecisions == null) AdsPolicyDecisions = new List<UniversalAppCampaignAdsPolicyDecisions>();
					var adsPolicyDecisionsItem = new UniversalAppCampaignAdsPolicyDecisions();
					adsPolicyDecisionsItem.ReadFrom(xItem);
					AdsPolicyDecisions.Add(adsPolicyDecisionsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "UniversalAppCampaignSetting");
			XElement xItem = null;
			if (AppId != null)
			{
				xItem = new XElement(XName.Get("appId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AppId);
				xE.Add(xItem);
			}
			if (Description1 != null)
			{
				xItem = new XElement(XName.Get("description1", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description1);
				xE.Add(xItem);
			}
			if (Description2 != null)
			{
				xItem = new XElement(XName.Get("description2", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description2);
				xE.Add(xItem);
			}
			if (Description3 != null)
			{
				xItem = new XElement(XName.Get("description3", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description3);
				xE.Add(xItem);
			}
			if (Description4 != null)
			{
				xItem = new XElement(XName.Get("description4", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Description4);
				xE.Add(xItem);
			}
			if (YoutubeVideoMediaIds != null)
			{
				foreach (var youtubeVideoMediaIdsItem in YoutubeVideoMediaIds)
				{
					xItem = new XElement(XName.Get("youtubeVideoMediaIds", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(youtubeVideoMediaIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (ImageMediaIds != null)
			{
				foreach (var imageMediaIdsItem in ImageMediaIds)
				{
					xItem = new XElement(XName.Get("imageMediaIds", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(imageMediaIdsItem.ToString());
					xE.Add(xItem);
				}
			}
			if (UniversalAppBiddingStrategyGoalType != null)
			{
				xItem = new XElement(XName.Get("universalAppBiddingStrategyGoalType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UniversalAppBiddingStrategyGoalType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (YoutubeVideoMediaIdsOps != null)
			{
				xItem = new XElement(XName.Get("youtubeVideoMediaIdsOps", "https://adwords.google.com/api/adwords/cm/v201609"));
				YoutubeVideoMediaIdsOps.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (ImageMediaIdsOps != null)
			{
				xItem = new XElement(XName.Get("imageMediaIdsOps", "https://adwords.google.com/api/adwords/cm/v201609"));
				ImageMediaIdsOps.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (AdsPolicyDecisions != null)
			{
				foreach (var adsPolicyDecisionsItem in AdsPolicyDecisions)
				{
					xItem = new XElement(XName.Get("adsPolicyDecisions", "https://adwords.google.com/api/adwords/cm/v201609"));
					adsPolicyDecisionsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// An unknown product dimension type which will be returned in place of any ProductDimension not
	/// supported by the clients current API version.
	/// </summary>
	public class UnknownProductDimension : ProductDimension, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "UnknownProductDimension");
		}
	}
	/// <summary>
	/// A conversion that happens when a user performs one the following sequences of actions:
	/// <ul>
	/// <li>User clicks on an advertiser's ad which takes the user to the advertiser's website, where
	/// special javascript installed on the page produces a dynamically-generated phone number.
	/// Then, user calls that number from their home (or other) phone</li>
	/// </li>User makes a phone call from conversion-tracked call extensions </li>
	/// </ul>
	///
	/// After successfully creating a new UploadCallConversion, send the name of this conversion type
	/// along with your conversion details to the OfflineCallConversionFeedService
	/// to attribute those conversions to this conversion type.
	/// </summary>
	public class UploadCallConversion : ConversionTracker, ISoapable
	{
		public string Snippet { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Snippet = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "UploadCallConversion");
			XElement xItem = null;
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A conversion type that receives conversions by having them uploaded
	/// through the OfflineConversionFeedService.
	///
	/// After successfully creating a new UploadConversion, send the name of this conversion type
	/// along with your conversion details to the OfflineConversionFeedService
	/// to attribute those conversions to this conversion type.
	/// </summary>
	public class UploadConversion : ConversionTracker, ISoapable
	{
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "UploadConversion");
		}
	}
	/// <summary>
	/// Url Validation errors.
	/// </summary>
	public class UrlError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public UrlErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = UrlErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "UrlError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The reasons for the url error.
	/// </summary>
	public enum UrlErrorReason
	{
		/// <summary>
		/// The tracking url template is invalid.
		/// </summary>
		InvalidTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template contains invalid tag.
		/// </summary>
		InvalidTagInTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template must contain at least one tag (e.g. {lpurl}),
		/// This applies only to tracking url template associated with website ads or product ads.
		/// </summary>
		MissingTrackingUrlTemplateTag,
		/// <summary>
		/// The tracking url template must start with a valid protocol (or lpurl tag).
		/// </summary>
		MissingProtocolInTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template starts with an invalid protocol.
		/// </summary>
		InvalidProtocolInTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template  contains illegal characters.
		/// </summary>
		MalformedTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template must contain a host name (or lpurl tag).
		/// </summary>
		MissingHostInTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template has an invalid or missing top level domain extension.
		/// </summary>
		InvalidTldInTrackingUrlTemplate,
		/// <summary>
		/// The tracking url template contains nested occurrences of the same conditional tag
		/// (i.e. {ifmobile:{ifmobile:x}}).
		/// </summary>
		RedundantNestedTrackingUrlTemplateTag,
		/// <summary>
		/// The final url is invalid.
		/// </summary>
		InvalidFinalUrl,
		/// <summary>
		/// The final url contains invalid tag.
		/// </summary>
		InvalidTagInFinalUrl,
		/// <summary>
		/// The final url contains nested occurrences of the same conditional tag
		/// (i.e. {ifmobile:{ifmobile:x}}).
		/// </summary>
		RedundantNestedFinalUrlTag,
		/// <summary>
		/// The final url must start with a valid protocol.
		/// </summary>
		MissingProtocolInFinalUrl,
		/// <summary>
		/// The final url starts with an invalid protocol.
		/// </summary>
		InvalidProtocolInFinalUrl,
		/// <summary>
		/// The final url  contains illegal characters.
		/// </summary>
		MalformedFinalUrl,
		/// <summary>
		/// The final url must contain a host name.
		/// </summary>
		MissingHostInFinalUrl,
		/// <summary>
		/// The tracking url template has an invalid or missing top level domain extension.
		/// </summary>
		InvalidTldInFinalUrl,
		/// <summary>
		/// The final mobile url is invalid.
		/// </summary>
		InvalidFinalMobileUrl,
		/// <summary>
		/// The final mobile url contains invalid tag.
		/// </summary>
		InvalidTagInFinalMobileUrl,
		/// <summary>
		/// The final mobile url contains nested occurrences of the same conditional tag
		/// (i.e. {ifmobile:{ifmobile:x}}).
		/// </summary>
		RedundantNestedFinalMobileUrlTag,
		/// <summary>
		/// The final mobile url must start with a valid protocol.
		/// </summary>
		MissingProtocolInFinalMobileUrl,
		/// <summary>
		/// The final mobile url starts with an invalid protocol.
		/// </summary>
		InvalidProtocolInFinalMobileUrl,
		/// <summary>
		/// The final mobile url  contains illegal characters.
		/// </summary>
		MalformedFinalMobileUrl,
		/// <summary>
		/// The final mobile url must contain a host name.
		/// </summary>
		MissingHostInFinalMobileUrl,
		/// <summary>
		/// The tracking url template has an invalid or missing top level domain extension.
		/// </summary>
		InvalidTldInFinalMobileUrl,
		/// <summary>
		/// The final app url is invalid.
		/// </summary>
		InvalidFinalAppUrl,
		/// <summary>
		/// The final app url contains invalid tag.
		/// </summary>
		InvalidTagInFinalAppUrl,
		/// <summary>
		/// The final app url contains nested occurrences of the same conditional tag
		/// (i.e. {ifmobile:{ifmobile:x}}).
		/// </summary>
		RedundantNestedFinalAppUrlTag,
		/// <summary>
		/// More than one app url found for the same OS type.
		/// </summary>
		MultipleAppUrlsForOstype,
		/// <summary>
		/// The OS type given for an app url is not valid.
		/// </summary>
		InvalidOstype,
		/// <summary>
		/// The protocol given for an app url is not valid. (E.g. "android-app://")
		/// </summary>
		InvalidProtocolForAppUrl,
		/// <summary>
		/// The package id (app id) given for an app url is not valid.
		/// </summary>
		InvalidPackageIdForAppUrl,
		/// <summary>
		/// The number of url custom parameters for an entity exceeds the maximum limit allowed.
		/// </summary>
		UrlCustomParametersCountExceedsLimit,
		/// <summary>
		/// The parameter has isRemove set to true but a value that is non-null.
		/// </summary>
		UrlCustomParameterRemovalWithNonNullValue,
		/// <summary>
		/// For add operations, there will not be any existing parameters to delete.
		/// </summary>
		CannotRemoveUrlCustomParameterInAddOperation,
		/// <summary>
		/// When the doReplace flag is set to true, individual parameters cannot be deleted.
		/// </summary>
		CannotRemoveUrlCustomParameterDuringFullReplacement,
		/// <summary>
		/// For ADD operations and when the doReplace flag is set to true, custom parameter values
		/// cannot be null.
		/// </summary>
		NullCustomParameterValueDuringAddOrFullReplacement,
		/// <summary>
		/// An invalid character appears in the parameter key.
		/// </summary>
		InvalidCharactersInUrlCustomParameterKey,
		/// <summary>
		/// An invalid character appears in the parameter value.
		/// </summary>
		InvalidCharactersInUrlCustomParameterValue,
		/// <summary>
		/// The url custom parameter value fails url tag validation.
		/// </summary>
		InvalidTagInUrlCustomParameterValue,
		/// <summary>
		/// The custom parameter contains nested occurrences of the same conditional tag
		/// (i.e. {ifmobile:{ifmobile:x}}).
		/// </summary>
		RedundantNestedUrlCustomParameterTag,
		/// <summary>
		/// The protocol (http:// or https://) is missing.
		/// </summary>
		MissingProtocol,
		/// <summary>
		/// The url is invalid.
		/// </summary>
		InvalidUrl,
		/// <summary>
		/// Destination Url is deprecated.
		/// </summary>
		DestinationUrlDeprecated,
		/// <summary>
		/// The url contains invalid tag.
		/// </summary>
		InvalidTagInUrl,
		/// <summary>
		/// The url must contain at least one tag (e.g. {lpurl}),
		/// This applies only to urls associated with website ads or product ads.
		/// </summary>
		MissingUrlTag,
		UrlError
	}
	/// <summary>
	/// Wrapper POJO for a list of URLs.  The list can be cleared if a request contains
	/// a UrlList with an empty urls list.
	/// </summary>
	public class UrlList : ISoapable
	{
		/// <summary>
		/// List of URLs.  On SET operation, empty list indicates to clear the list.
		/// <span class="constraint CollectionSize">The maximum size of this collection is 10.</span>
		/// <span class="constraint ContentsStringLength">Strings in this field must be non-empty (trimmed).</span>
		/// </summary>
		public List<string> Urls { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Urls = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "urls")
				{
					if (Urls == null) Urls = new List<string>();
					Urls.Add(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Urls != null)
			{
				foreach (var urlsItem in Urls)
				{
					xItem = new XElement(XName.Get("urls", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(urlsItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Represents a UserList object that is sent over the wire.
	/// This is a list of users an account may target.
	/// </summary>
	public class UserList : ISoapable
	{
		/// <summary>
		/// Id of this user list.
		/// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET.</span>
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// A flag that indicates if a user may edit a list. Depends on the list ownership
		/// and list type. For example, external remarketing user lists are not editable.
		/// <span class="constraint Selectable">This field can be selected using the value "IsReadOnly".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsReadOnly { get; set; }
		/// <summary>
		/// Name of this user list. Depending on its AccessReason, the user list name
		/// may not be unique (e.g. if {@code AccessReason=SHARED}).
		/// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// Description of this user list.
		/// <span class="constraint Selectable">This field can be selected using the value "Description".</span>
		/// </summary>
		public string Description { get; set; }
		/// <summary>
		/// Membership status of this user list. Indicates whether a user list is open
		/// or active. Only open user lists can accumulate more users and can be targeted to.
		/// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public UserListMembershipStatus? Status { get; set; }
		/// <summary>
		/// An Id from external system. It is used by user list sellers to correlate ids on their
		/// systems.
		/// <span class="constraint Selectable">This field can be selected using the value "IntegrationCode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string IntegrationCode { get; set; }
		/// <summary>
		/// Indicates the reason this account has been granted access to the list. The reason can be
		/// Shared, Owned, Licensed or Subscribed.
		/// <span class="constraint Selectable">This field can be selected using the value "AccessReason".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public AccessReason? AccessReason { get; set; }
		/// <summary>
		/// Indicates if this share is still active. When a UserList is shared with the user
		/// this field is set to Active. Later the userList owner can decide to revoke the
		/// share and make it Inactive. The default value of this field is set to Active.
		/// <span class="constraint Selectable">This field can be selected using the value "AccountUserListStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public AccountUserListStatus? AccountUserListStatus { get; set; }
		/// <summary>
		/// Number of days a user's cookie stays on your list since its most recent addition to the list.
		/// This field must be between 0 and 540 inclusive. However, for CRM based userlists, this field
		/// can be set to 10000 which means no expiration.
		///
		/// <p>It'll be ignored for {@link LogicalUserList}.
		/// <span class="constraint Selectable">This field can be selected using the value "MembershipLifeSpan".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? MembershipLifeSpan { get; set; }
		/// <summary>
		/// Estimated number of users in this user list, on the Google Display Network.
		/// This value is null if the number of users has not yet been determined.
		/// <span class="constraint Selectable">This field can be selected using the value "Size".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? Size { get; set; }
		/// <summary>
		/// Size range in terms of number of users of the UserList.
		/// <span class="constraint Selectable">This field can be selected using the value "SizeRange".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SizeRange? SizeRange { get; set; }
		/// <summary>
		/// Estimated number of users in this user list in the google.com domain.
		/// These are the users available for targeting in search campaigns.
		/// This value is null if the number of users has not yet been determined.
		/// <span class="constraint Selectable">This field can be selected using the value "SizeForSearch".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? SizeForSearch { get; set; }
		/// <summary>
		/// Size range in terms of number of users of the UserList, for Search ads.
		/// <span class="constraint Selectable">This field can be selected using the value "SizeRangeForSearch".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public SizeRange? SizeRangeForSearch { get; set; }
		/// <summary>
		/// Type of this list: remarketing/logical/external remarketing.
		/// <span class="constraint Selectable">This field can be selected using the value "ListType".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public UserListType? ListType { get; set; }
		/// <summary>
		/// A flag that indicates this user list is eligible for Google Search Network.
		/// <span class="constraint Selectable">This field can be selected using the value "IsEligibleForSearch".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public bool? IsEligibleForSearch { get; set; }
		/// <summary>
		/// A flag that indicates this user list is eligible for Display Network.
		/// <span class="constraint Selectable">This field can be selected using the value "IsEligibleForDisplay".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public bool? IsEligibleForDisplay { get; set; }
		/// <summary>
		/// Indicates that this instance is a subtype of UserList.
		/// Although this field is returned in the response, it is ignored on input
		/// and cannot be selected. Specify xsi:type instead.
		/// </summary>
		public string UserListType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			IsReadOnly = null;
			Name = null;
			Description = null;
			Status = null;
			IntegrationCode = null;
			AccessReason = null;
			AccountUserListStatus = null;
			MembershipLifeSpan = null;
			Size = null;
			SizeRange = null;
			SizeForSearch = null;
			SizeRangeForSearch = null;
			ListType = null;
			IsEligibleForSearch = null;
			IsEligibleForDisplay = null;
			UserListType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "isReadOnly")
				{
					IsReadOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "description")
				{
					Description = xItem.Value;
				}
				else if (localName == "status")
				{
					Status = UserListMembershipStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "integrationCode")
				{
					IntegrationCode = xItem.Value;
				}
				else if (localName == "accessReason")
				{
					AccessReason = AccessReasonExtensions.Parse(xItem.Value);
				}
				else if (localName == "accountUserListStatus")
				{
					AccountUserListStatus = AccountUserListStatusExtensions.Parse(xItem.Value);
				}
				else if (localName == "membershipLifeSpan")
				{
					MembershipLifeSpan = long.Parse(xItem.Value);
				}
				else if (localName == "size")
				{
					Size = long.Parse(xItem.Value);
				}
				else if (localName == "sizeRange")
				{
					SizeRange = SizeRangeExtensions.Parse(xItem.Value);
				}
				else if (localName == "sizeForSearch")
				{
					SizeForSearch = long.Parse(xItem.Value);
				}
				else if (localName == "sizeRangeForSearch")
				{
					SizeRangeForSearch = SizeRangeExtensions.Parse(xItem.Value);
				}
				else if (localName == "listType")
				{
					ListType = UserListTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "isEligibleForSearch")
				{
					IsEligibleForSearch = bool.Parse(xItem.Value);
				}
				else if (localName == "isEligibleForDisplay")
				{
					IsEligibleForDisplay = bool.Parse(xItem.Value);
				}
				else if (localName == "UserList.Type")
				{
					UserListType = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (IsReadOnly != null)
			{
				xItem = new XElement(XName.Get("isReadOnly", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(IsReadOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Description != null)
			{
				xItem = new XElement(XName.Get("description", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Description);
				xE.Add(xItem);
			}
			if (Status != null)
			{
				xItem = new XElement(XName.Get("status", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Status.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (IntegrationCode != null)
			{
				xItem = new XElement(XName.Get("integrationCode", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(IntegrationCode);
				xE.Add(xItem);
			}
			if (AccessReason != null)
			{
				xItem = new XElement(XName.Get("accessReason", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(AccessReason.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (AccountUserListStatus != null)
			{
				xItem = new XElement(XName.Get("accountUserListStatus", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(AccountUserListStatus.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (MembershipLifeSpan != null)
			{
				xItem = new XElement(XName.Get("membershipLifeSpan", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(MembershipLifeSpan.Value.ToString());
				xE.Add(xItem);
			}
			if (Size != null)
			{
				xItem = new XElement(XName.Get("size", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Size.Value.ToString());
				xE.Add(xItem);
			}
			if (SizeRange != null)
			{
				xItem = new XElement(XName.Get("sizeRange", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SizeRange.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (SizeForSearch != null)
			{
				xItem = new XElement(XName.Get("sizeForSearch", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SizeForSearch.Value.ToString());
				xE.Add(xItem);
			}
			if (SizeRangeForSearch != null)
			{
				xItem = new XElement(XName.Get("sizeRangeForSearch", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(SizeRangeForSearch.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (ListType != null)
			{
				xItem = new XElement(XName.Get("listType", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(ListType.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (IsEligibleForSearch != null)
			{
				xItem = new XElement(XName.Get("isEligibleForSearch", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(IsEligibleForSearch.Value.ToString());
				xE.Add(xItem);
			}
			if (IsEligibleForDisplay != null)
			{
				xItem = new XElement(XName.Get("isEligibleForDisplay", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(IsEligibleForDisplay.Value.ToString());
				xE.Add(xItem);
			}
			if (UserListType != null)
			{
				xItem = new XElement(XName.Get("UserList.Type", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(UserListType);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Represents a conversion type used for building remarketing user lists.
	/// </summary>
	public class UserListConversionType : ISoapable
	{
		/// <summary>
		/// Conversion type id
		/// </summary>
		public long? Id { get; set; }
		/// <summary>
		/// Name of this conversion type
		/// </summary>
		public string Name { get; set; }
		/// <summary>
		/// The category of the ConversionType based on the location where the
		/// conversion event was generated (from a user's perspective).
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public UserListConversionTypeCategory? Category { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			Name = null;
			Category = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "name")
				{
					Name = xItem.Value;
				}
				else if (localName == "category")
				{
					Category = UserListConversionTypeCategoryExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			if (Name != null)
			{
				xItem = new XElement(XName.Get("name", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Name);
				xE.Add(xItem);
			}
			if (Category != null)
			{
				xItem = new XElement(XName.Get("category", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Category.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// User can create only BOOMERANG_EVENT conversion types. For all other types
	/// UserListService service will return OTHER.
	/// </summary>
	public enum UserListConversionTypeCategory
	{
		BoomerangEvent,
		Other
	}
	/// <summary>
	/// Represents possible error codes in UserListService.
	/// </summary>
	public class UserListError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public UserListErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = UserListErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "UserListError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum UserListErrorReason
	{
		/// <summary>
		/// Creating and updating external remarketing user lists is not supported.
		/// </summary>
		ExternalRemarketingUserListMutateNotSupported,
		/// <summary>
		/// Concrete type of user list (logical v.s. remarketing) is required for
		/// ADD and SET operations.
		/// </summary>
		ConcreteTypeRequired,
		/// <summary>
		/// Adding/updating user list conversion types requires specifying the conversion
		/// type id.
		/// </summary>
		ConversionTypeIdRequired,
		/// <summary>
		/// Remarketing user list cannot have duplicate conversion types.
		/// </summary>
		DuplicateConversionTypes,
		/// <summary>
		/// Conversion type is invalid/unknown.
		/// </summary>
		InvalidConversionType,
		/// <summary>
		/// User list description is empty or invalid
		/// </summary>
		InvalidDescription,
		/// <summary>
		/// User list name is empty or invalid.
		/// </summary>
		InvalidName,
		/// <summary>
		/// Type of the UserList does not match.
		/// </summary>
		InvalidType,
		/// <summary>
		/// User list rule operand is invalid.
		/// </summary>
		InvalidUserListLogicalRuleOperand,
		/// <summary>
		/// Name is already being used for another user list for the account.
		/// </summary>
		NameAlreadyUsed,
		/// <summary>
		/// Name is required when creating a new conversion type.
		/// </summary>
		NewConversionTypeNameRequired,
		/// <summary>
		/// Only an owner account may edit a user list.
		/// </summary>
		OwnershipRequiredForSet,
		/// <summary>
		/// Removing user lists is not supported.
		/// </summary>
		RemoveNotSupported,
		/// <summary>
		/// The user list of the type is not mutable
		/// </summary>
		UserListMutateNotSupported,
		/// <summary>
		/// Rule is invalid.
		/// </summary>
		InvalidRule,
		/// <summary>
		/// The specified date range is empty.
		/// </summary>
		InvalidDateRange,
		/// <summary>
		/// A userlist which is privacy sensitive or legal rejected cannot be mutated by external users.
		/// </summary>
		CanNotMutateSensitiveUserlist,
		/// <summary>
		/// Maximum number of rulebased user lists a customer can have.
		/// </summary>
		MaxNumRulebasedUserlists,
		/// <summary>
		/// BasicUserList's billable record field cannot be modified once it is set.
		/// </summary>
		CannotModifyBillableRecordCount,
		/// <summary>
		/// Default generic error.
		/// </summary>
		UserListServiceError
	}
	/// <summary>
	/// A user list logical rule. A rule has a logical operator (and/or/not) and a
	/// list of operands that can be user lists or user interests.
	/// </summary>
	public class UserListLogicalRule : ISoapable
	{
		/// <summary>
		/// The logical operator of the rule.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public UserListLogicalRuleOperator? Operator { get; set; }
		/// <summary>
		/// The list of operands of the rule.
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<LogicalUserListOperand> RuleOperands { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operator = null;
			RuleOperands = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operator")
				{
					Operator = UserListLogicalRuleOperatorExtensions.Parse(xItem.Value);
				}
				else if (localName == "ruleOperands")
				{
					if (RuleOperands == null) RuleOperands = new List<LogicalUserListOperand>();
					var ruleOperandsItem = new LogicalUserListOperand();
					ruleOperandsItem.ReadFrom(xItem);
					RuleOperands.Add(ruleOperandsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operator != null)
			{
				xItem = new XElement(XName.Get("operator", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Operator.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (RuleOperands != null)
			{
				foreach (var ruleOperandsItem in RuleOperands)
				{
					xItem = new XElement(XName.Get("ruleOperands", "https://adwords.google.com/api/adwords/rm/v201609"));
					ruleOperandsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	public enum UserListLogicalRuleOperator
	{
		/// <summary>
		/// And - all of the operands.
		/// </summary>
		All,
		/// <summary>
		/// Or - at least one of the operands.
		/// </summary>
		Any,
		/// <summary>
		/// Not - none of the operands.
		/// </summary>
		None,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Membership status of the user list. This status indicates whether a user list
	/// can accumulate more users and may be targeted to.
	/// </summary>
	public enum UserListMembershipStatus
	{
		/// <summary>
		/// Open status - list is accruing members and can be targeted to.
		/// </summary>
		Open,
		/// <summary>
		/// Closed status - No new members being added. Can not be used for targeting.
		/// </summary>
		Closed
	}
	/// <summary>
	/// UserList operations for adding/updating UserList entities.
	/// The following {@link Operator}s are supported: ADD and SET.
	/// The REMOVE operator is not supported.
	/// </summary>
	public class UserListOperation : Operation, ISoapable
	{
		/// <summary>
		/// UserList to operate on
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public UserList Operand { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Operand = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = new UserList();
					Operand.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "UserListOperation");
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/rm/v201609"));
				Operand.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Contains a list of user lists resulting from the filtering and paging of the
	/// {@link UserListService#get} call.
	/// </summary>
	public class UserListPage : Page, ISoapable
	{
		/// <summary>
		/// The result entries in this page.
		/// </summary>
		public List<UserList> Entries { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Entries = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "entries")
				{
					if (Entries == null) Entries = new List<UserList>();
					var entriesItem = new UserList();
					entriesItem.ReadFrom(xItem);
					Entries.Add(entriesItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "UserListPage");
			XElement xItem = null;
			if (Entries != null)
			{
				foreach (var entriesItem in Entries)
				{
					xItem = new XElement(XName.Get("entries", "https://adwords.google.com/api/adwords/rm/v201609"));
					entriesItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A container for return values from the UserListService.
	/// </summary>
	public class UserListReturnValue : ListReturnValue, ISoapable
	{
		public List<UserList> Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					if (Value == null) Value = new List<UserList>();
					var valueItem = new UserList();
					valueItem.ReadFrom(xItem);
					Value.Add(valueItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "UserListReturnValue");
			XElement xItem = null;
			if (Value != null)
			{
				foreach (var valueItem in Value)
				{
					xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/rm/v201609"));
					valueItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// The user list types
	/// </summary>
	public enum UserListType
	{
		/// <summary>
		/// UNKNOWN value can not be passed as input.
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// UserList represented as a collection of conversion types.
		/// </summary>
		Remarketing,
		/// <summary>
		/// UserList represented as a combination of other user lists/interests.
		/// </summary>
		Logical,
		/// <summary>
		/// UserList created in the DoubleClick platform.
		/// </summary>
		ExternalRemarketing,
		/// <summary>
		/// UserList associated with a rule.
		/// </summary>
		RuleBased,
		/// <summary>
		/// UserList with users similar to users of another UserList.
		/// </summary>
		Similar,
		/// <summary>
		/// UserList of first party CRM data provided by advertiser in the form of emails or
		/// other formats.
		/// </summary>
		CrmBased
	}
	/// <summary>
	/// Specified by user to pause or unpause a criterion.
	/// </summary>
	public enum UserStatus
	{
		/// <summary>
		/// Default state of a criterion (e.g. not paused).
		/// </summary>
		Enabled,
		/// <summary>
		/// Criterion is removed.
		/// </summary>
		Removed,
		/// <summary>
		/// Criterion is paused. Also used to pause a criterion.
		/// </summary>
		Paused
	}
	/// <summary>
	/// Describes how unbranded pharma ads will be displayed.
	/// </summary>
	public class VanityPharma : ISoapable
	{
		/// <summary>
		/// The display mode for vanity pharma URLs.
		/// <span class="constraint Selectable">This field can be selected using the value "VanityPharmaDisplayUrlMode".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public VanityPharmaDisplayUrlMode? VanityPharmaDisplayUrlMode { get; set; }
		/// <summary>
		/// The text that will be displayed in display URL of the text ad when website description
		/// is the selected display mode for vanity pharma URLs.
		/// <span class="constraint Selectable">This field can be selected using the value "VanityPharmaText".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public VanityPharmaText? VanityPharmaText { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			VanityPharmaDisplayUrlMode = null;
			VanityPharmaText = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "vanityPharmaDisplayUrlMode")
				{
					VanityPharmaDisplayUrlMode = VanityPharmaDisplayUrlModeExtensions.Parse(xItem.Value);
				}
				else if (localName == "vanityPharmaText")
				{
					VanityPharmaText = VanityPharmaTextExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (VanityPharmaDisplayUrlMode != null)
			{
				xItem = new XElement(XName.Get("vanityPharmaDisplayUrlMode", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VanityPharmaDisplayUrlMode.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (VanityPharmaText != null)
			{
				xItem = new XElement(XName.Get("vanityPharmaText", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VanityPharmaText.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Mode of display URL for pharma related text ads.
	/// </summary>
	public enum VanityPharmaDisplayUrlMode
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Replace vanity pharma URL with manufacturer website url.
		/// </summary>
		ManufacturerWebsiteUrl,
		/// <summary>
		/// Replace vanity pharma URL with description of the website.
		/// </summary>
		WebsiteDescription
	}
	/// <summary>
	/// Static text for Vanity Pharma URLs. This text with website descriptions will be
	/// shown in the display URL when website description option for vanity pharma URLs
	/// is selected.
	/// </summary>
	public enum VanityPharmaText
	{
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown,
		/// <summary>
		/// Prescription treatment website
		/// </summary>
		PrescriptionTreatmentWebsiteEn,
		/// <summary>
		/// Sitio de tratamientos con receta
		/// </summary>
		PrescriptionTreatmentWebsiteEs,
		/// <summary>
		/// Prescription device website
		/// </summary>
		PrescriptionDeviceWebsiteEn,
		/// <summary>
		/// Sitio de dispositivos con receta
		/// </summary>
		PrescriptionDeviceWebsiteEs,
		/// <summary>
		/// Medical device website
		/// </summary>
		MedicalDeviceWebsiteEn,
		/// <summary>
		/// Sitio de dispositivos m?dicos
		/// </summary>
		MedicalDeviceWebsiteEs,
		/// <summary>
		/// Preventative treatment website
		/// </summary>
		PreventativeTreatmentWebsiteEn,
		/// <summary>
		/// Sitio de tratamientos preventivos
		/// </summary>
		PreventativeTreatmentWebsiteEs,
		/// <summary>
		/// Prescription contraception website
		/// </summary>
		PrescriptionContraceptionWebsiteEn,
		/// <summary>
		/// Sitio de anticonceptivos con receta
		/// </summary>
		PrescriptionContraceptionWebsiteEs,
		/// <summary>
		/// Prescription vaccine website
		/// </summary>
		PrescriptionVaccineWebsiteEn,
		/// <summary>
		/// Sitio de vacunas con receta
		/// </summary>
		PrescriptionVaccineWebsiteEs
	}
	/// <summary>
	/// Use verticals to target or exclude placements in the Google Display Network
	/// based on the category into which the placement falls (for example, "Pets &amp;
	/// Animals/Pets/Dogs").
	/// <a href="/adwords/api/docs/appendix/verticals">View the complete list
	/// of available vertical categories.</a>
	/// <span class="constraint AdxEnabled">This is enabled for AdX.</span>
	/// </summary>
	public class Vertical : Criterion, ISoapable
	{
		/// <summary>
		/// Id of this vertical.
		/// <span class="constraint Selectable">This field can be selected using the value "VerticalId".</span>
		/// </summary>
		public long? VerticalId { get; set; }
		/// <summary>
		/// Id of the parent of this vertical.
		/// <span class="constraint Selectable">This field can be selected using the value "VerticalParentId".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public long? VerticalParentId { get; set; }
		/// <summary>
		/// The category to target or exclude. Each subsequent element in the array
		/// describes a more specific sub-category. For example,
		/// <code>{"Pets &amp; Animals", "Pets", "Dogs"}</code> represents the "Pets &amp;
		/// Animals/Pets/Dogs" category. A complete list of available vertical categories
		/// is available <a href="/adwords/api/docs/appendix/verticals">here</a>
		/// This field is required and must not be empty.
		/// <span class="constraint Selectable">This field can be selected using the value "Path".</span>
		/// </summary>
		public List<string> Path { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			VerticalId = null;
			VerticalParentId = null;
			Path = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "verticalId")
				{
					VerticalId = long.Parse(xItem.Value);
				}
				else if (localName == "verticalParentId")
				{
					VerticalParentId = long.Parse(xItem.Value);
				}
				else if (localName == "path")
				{
					if (Path == null) Path = new List<string>();
					Path.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Vertical");
			XElement xItem = null;
			if (VerticalId != null)
			{
				xItem = new XElement(XName.Get("verticalId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VerticalId.Value.ToString());
				xE.Add(xItem);
			}
			if (VerticalParentId != null)
			{
				xItem = new XElement(XName.Get("verticalParentId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VerticalParentId.Value.ToString());
				xE.Add(xItem);
			}
			if (Path != null)
			{
				foreach (var pathItem in Path)
				{
					xItem = new XElement(XName.Get("path", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(pathItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Encapsulates a Video media identified by a MediaId.
	/// </summary>
	public class Video : Media, ISoapable
	{
		/// <summary>
		/// The duration of the associated video, in milliseconds.
		/// <span class="constraint Selectable">This field can be selected using the value "DurationMillis".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public long? DurationMillis { get; set; }
		/// <summary>
		/// Streaming URL for the video.
		/// <span class="constraint Selectable">This field can be selected using the value "StreamingUrl".</span>
		/// </summary>
		public string StreamingUrl { get; set; }
		/// <summary>
		/// Indicates whether the video is ready to play on the web.
		/// <span class="constraint Selectable">This field can be selected using the value "ReadyToPlayOnTheWeb".</span>
		/// </summary>
		public bool? ReadyToPlayOnTheWeb { get; set; }
		/// <summary>
		/// The Industry Standard Commercial Identifier code for this media, used
		/// mainly for television commercials.
		/// <span class="constraint Selectable">This field can be selected using the value "IndustryStandardCommercialIdentifier".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string IndustryStandardCommercialIdentifier { get; set; }
		/// <summary>
		/// The Advertising Digital Identification code for this media, as defined by
		/// the American Association of Advertising Agencies, used mainly for
		/// television commercials.
		/// <span class="constraint Selectable">This field can be selected using the value "AdvertisingId".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string AdvertisingId { get; set; }
		/// <summary>
		/// For YouTube-hosted videos, the YouTube video ID (as seen in YouTube URLs)
		/// may also be filled in.
		/// <span class="constraint Selectable">This field can be selected using the value "YouTubeVideoIdString".</span><span class="constraint Filterable">This field can be filtered on.</span>
		/// </summary>
		public string YouTubeVideoIdString { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			DurationMillis = null;
			StreamingUrl = null;
			ReadyToPlayOnTheWeb = null;
			IndustryStandardCommercialIdentifier = null;
			AdvertisingId = null;
			YouTubeVideoIdString = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "durationMillis")
				{
					DurationMillis = long.Parse(xItem.Value);
				}
				else if (localName == "streamingUrl")
				{
					StreamingUrl = xItem.Value;
				}
				else if (localName == "readyToPlayOnTheWeb")
				{
					ReadyToPlayOnTheWeb = bool.Parse(xItem.Value);
				}
				else if (localName == "industryStandardCommercialIdentifier")
				{
					IndustryStandardCommercialIdentifier = xItem.Value;
				}
				else if (localName == "advertisingId")
				{
					AdvertisingId = xItem.Value;
				}
				else if (localName == "youTubeVideoIdString")
				{
					YouTubeVideoIdString = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Video");
			XElement xItem = null;
			if (DurationMillis != null)
			{
				xItem = new XElement(XName.Get("durationMillis", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DurationMillis.Value.ToString());
				xE.Add(xItem);
			}
			if (StreamingUrl != null)
			{
				xItem = new XElement(XName.Get("streamingUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(StreamingUrl);
				xE.Add(xItem);
			}
			if (ReadyToPlayOnTheWeb != null)
			{
				xItem = new XElement(XName.Get("readyToPlayOnTheWeb", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReadyToPlayOnTheWeb.Value.ToString());
				xE.Add(xItem);
			}
			if (IndustryStandardCommercialIdentifier != null)
			{
				xItem = new XElement(XName.Get("industryStandardCommercialIdentifier", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(IndustryStandardCommercialIdentifier);
				xE.Add(xItem);
			}
			if (AdvertisingId != null)
			{
				xItem = new XElement(XName.Get("advertisingId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(AdvertisingId);
				xE.Add(xItem);
			}
			if (YouTubeVideoIdString != null)
			{
				xItem = new XElement(XName.Get("youTubeVideoIdString", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(YouTubeVideoIdString);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Error class for errors associated with parsing video data.
	/// </summary>
	public class VideoError : ApiError, ISoapable
	{
		/// <summary>
		/// The error reason represented by an enum.
		/// </summary>
		public VideoErrorReason? Reason { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Reason = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reason")
				{
					Reason = VideoErrorReasonExtensions.Parse(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "VideoError");
			XElement xItem = null;
			if (Reason != null)
			{
				xItem = new XElement(XName.Get("reason", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Reason.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	public enum VideoErrorReason
	{
		/// <summary>
		/// Invalid video.
		/// </summary>
		InvalidVideo,
		/// <summary>
		/// Storage error.
		/// </summary>
		StorageError,
		/// <summary>
		/// Bad request.
		/// </summary>
		BadRequest,
		/// <summary>
		/// Server error.
		/// </summary>
		ErrorGeneratingStreamingUrl,
		/// <summary>
		/// Unexpected size.
		/// </summary>
		UnexpectedSize,
		/// <summary>
		/// Server error.
		/// </summary>
		ServerError,
		/// <summary>
		/// File too large.
		/// </summary>
		FileTooLarge,
		/// <summary>
		/// Video processing error.
		/// </summary>
		VideoProcessingError,
		/// <summary>
		/// Invalid input.
		/// </summary>
		InvalidInput,
		/// <summary>
		/// Problem reading file.
		/// </summary>
		ProblemReadingFile,
		/// <summary>
		/// Invalid ISCI.
		/// </summary>
		InvalidIsci,
		/// <summary>
		/// Invalid AD-ID.
		/// </summary>
		InvalidAdId
	}
	/// <summary>
	/// VideoType enum values that are permitted for video filterable
	/// creative attribute IDs.
	/// </summary>
	public enum VideoType
	{
		/// <summary>
		/// The Adobe Flash video format (.swf).
		/// </summary>
		Adobe,
		/// <summary>
		/// The RealVideo format (.rm or .ram).
		/// </summary>
		Realplayer,
		/// <summary>
		/// The QuickTime format (.mov).
		/// </summary>
		Quicktime,
		/// <summary>
		/// The Windows Media format (.wmv).
		/// </summary>
		Windowsmedia
	}
	/// <summary>
	/// Criterion for targeting webpages of an advertiser's website. The
	/// website domain name is specified at the campaign level.
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class Webpage : Criterion, ISoapable
	{
		/// <summary>
		/// The webpage criterion parameter.
		/// <span class="constraint Selectable">This field can be selected using the value "Parameter".</span>
		/// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
		/// </summary>
		public WebpageParameter Parameter { get; set; }
		/// <summary>
		/// Keywordless criteria coverage - Computed percentage of website coverage based on the
		/// website target, negative website targets and negative keywords in the ad group and campaign.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public double? CriteriaCoverage { get; set; }
		/// <summary>
		/// Keywordless criteria samples - List of sample urls that matches with the website target.
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public List<string> CriteriaSamples { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Parameter = null;
			CriteriaCoverage = null;
			CriteriaSamples = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "parameter")
				{
					Parameter = new WebpageParameter();
					Parameter.ReadFrom(xItem);
				}
				else if (localName == "criteriaCoverage")
				{
					CriteriaCoverage = double.Parse(xItem.Value);
				}
				else if (localName == "criteriaSamples")
				{
					if (CriteriaSamples == null) CriteriaSamples = new List<string>();
					CriteriaSamples.Add(xItem.Value);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "Webpage");
			XElement xItem = null;
			if (Parameter != null)
			{
				xItem = new XElement(XName.Get("parameter", "https://adwords.google.com/api/adwords/cm/v201609"));
				Parameter.WriteTo(xItem);
				xE.Add(xItem);
			}
			if (CriteriaCoverage != null)
			{
				xItem = new XElement(XName.Get("criteriaCoverage", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriteriaCoverage.Value.ToString());
				xE.Add(xItem);
			}
			if (CriteriaSamples != null)
			{
				foreach (var criteriaSamplesItem in CriteriaSamples)
				{
					xItem = new XElement(XName.Get("criteriaSamples", "https://adwords.google.com/api/adwords/cm/v201609"));
					xItem.Add(criteriaSamplesItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Logical expression for targeting webpages of an advertiser's website.
	///
	/// <p>A condition is defined as {@code operand OP argument}
	/// where {@code operand} is one of the values enumerated in
	/// {@link WebpageConditionOperand}, and, based on this value,
	/// {@code OP} is either of {@code EQUALS} or {@code CONTAINS}.</p>
	/// </summary>
	public class WebpageCondition : ISoapable
	{
		/// <summary>
		/// Operand of webpage targeting condition.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public WebpageConditionOperand? Operand { get; set; }
		/// <summary>
		/// Argument of the webpage targeting condition.
		/// <span class="constraint MustNotContain">This string must not contain a substring that matches the regular expression '\*|\>\>|\=\=|\&\+'</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 2048, inclusive.</span>
		/// </summary>
		public string Argument { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operand = null;
			Argument = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operand")
				{
					Operand = WebpageConditionOperandExtensions.Parse(xItem.Value);
				}
				else if (localName == "argument")
				{
					Argument = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operand != null)
			{
				xItem = new XElement(XName.Get("operand", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operand.Value.ToXmlValue());
				xE.Add(xItem);
			}
			if (Argument != null)
			{
				xItem = new XElement(XName.Get("argument", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Argument);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Operand value of {@link WebpageCondition}.
	/// </summary>
	public enum WebpageConditionOperand
	{
		/// <summary>
		/// Operand denoting a webpage URL targeting condition.
		/// The operator {@link StringConditionOperator#CONTAINS} will be used for
		/// such conditions.
		/// </summary>
		Url,
		/// <summary>
		/// Operand denoting a webpage category targeting condition.
		/// The operator {@link StringConditionOperator#EQUALS} will be used for
		/// such conditions.
		/// </summary>
		Category,
		/// <summary>
		/// Operand denoting a webpage title targeting condition.
		/// The operator {@link StringConditionOperator#CONTAINS} will be used for
		/// such conditions.
		/// </summary>
		PageTitle,
		/// <summary>
		/// Operand denoting a webpage content targeting condition.
		/// The operator {@link StringConditionOperator#CONTAINS} will be used for
		/// such conditions.
		/// </summary>
		PageContent,
		/// <summary>
		/// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
		/// </summary>
		Unknown
	}
	/// <summary>
	/// Basic information about a webpage.
	/// </summary>
	public class WebpageDescriptor : ISoapable
	{
		/// <summary>
		/// The URL of the webpage.
		/// </summary>
		public string Url { get; set; }
		/// <summary>
		/// The title of the webpage.
		/// </summary>
		public string Title { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Url = null;
			Title = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "url")
				{
					Url = xItem.Value;
				}
				else if (localName == "title")
				{
					Title = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Url != null)
			{
				xItem = new XElement(XName.Get("url", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Url);
				xE.Add(xItem);
			}
			if (Title != null)
			{
				xItem = new XElement(XName.Get("title", "https://adwords.google.com/api/adwords/o/v201609"));
				xItem.Add(Title);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// {@link Attribute} type that contains a {@link WebpageDescriptor} value.
	/// </summary>
	public class WebpageDescriptorAttribute : Attribute, ISoapable
	{
		/// <summary>
		/// {@link WebpageDescriptor} value contained by this {@link Attribute}.
		/// </summary>
		public WebpageDescriptor Value { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Value = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "value")
				{
					Value = new WebpageDescriptor();
					Value.ReadFrom(xItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "WebpageDescriptorAttribute");
			XElement xItem = null;
			if (Value != null)
			{
				xItem = new XElement(XName.Get("value", "https://adwords.google.com/api/adwords/o/v201609"));
				Value.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Parameter of Webpage criterion, expressed as a list of conditions, or
	/// logical expressions, for targeting webpages of an advertiser's website.
	/// </summary>
	public class WebpageParameter : CriterionParameter, ISoapable
	{
		/// <summary>
		/// The name of the criterion that is defined by this parameter.
		///
		/// <p>This name value will be used for identifying, sorting and filtering
		/// criteria with this type of parameters. For criteria with simpler
		/// parameters, such as keywords and placements, the parameter value itself
		/// is used for identification, sorting and filtering.
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint StringLength">The length of this string should be between 1 and 2048, inclusive.</span>
		/// </summary>
		public string CriterionName { get; set; }
		/// <summary>
		/// Conditions, or logical expressions, for webpage targeting.
		///
		/// <p>The list of webpage targeting conditions are {@code and}-ed together
		/// when evaluated for targeting. A {@code null} list of conditions means that
		/// all webpages of the campaign's website are targeted.</p>
		/// <span class="constraint CollectionSize">The maximum size of this collection is 3.</span>
		/// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
		/// </summary>
		public List<WebpageCondition> Conditions { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			CriterionName = null;
			Conditions = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "criterionName")
				{
					CriterionName = xItem.Value;
				}
				else if (localName == "conditions")
				{
					if (Conditions == null) Conditions = new List<WebpageCondition>();
					var conditionsItem = new WebpageCondition();
					conditionsItem.ReadFrom(xItem);
					Conditions.Add(conditionsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "WebpageParameter");
			XElement xItem = null;
			if (CriterionName != null)
			{
				xItem = new XElement(XName.Get("criterionName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(CriterionName);
				xE.Add(xItem);
			}
			if (Conditions != null)
			{
				foreach (var conditionsItem in Conditions)
				{
					xItem = new XElement(XName.Get("conditions", "https://adwords.google.com/api/adwords/cm/v201609"));
					conditionsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A conversion that happens when a user performs the following sequence of actions:
	/// <ul>
	/// <li>Clicks on an advertiser's ad</li>
	/// <li>
	/// Proceeds to the advertiser's website, where special javascript installed on the page
	/// produces a dynamically-generated phone number,
	/// </li>
	/// <li>Calls that number from their home (or other) phone</li>
	/// </ul>
	/// </summary>
	public class WebsiteCallMetricsConversion : ConversionTracker, ISoapable
	{
		/// <summary>
		/// <span class="constraint Selectable">This field can be selected using the value "WebsitePhoneCallDuration".</span>
		/// <span class="constraint InRange">This field must be between 0 and 10000, inclusive.</span>
		/// </summary>
		public long? PhoneCallDuration { get; set; }
		public string Snippet { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			PhoneCallDuration = null;
			Snippet = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "phoneCallDuration")
				{
					PhoneCallDuration = long.Parse(xItem.Value);
				}
				else if (localName == "snippet")
				{
					Snippet = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "WebsiteCallMetricsConversion");
			XElement xItem = null;
			if (PhoneCallDuration != null)
			{
				xItem = new XElement(XName.Get("phoneCallDuration", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PhoneCallDuration.Value.ToString());
				xE.Add(xItem);
			}
			if (Snippet != null)
			{
				xItem = new XElement(XName.Get("snippet", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Snippet);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// YouTube channel criterion.
	/// <p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class YouTubeChannel : Criterion, ISoapable
	{
		/// <summary>
		/// The YouTube uploader channel id or the channel code of a YouTube content channel.
		/// <p>The uploader channel id can be obtained from the YouTube id-based URL. For example, in
		/// <code>https://www.youtube.com/channel/UCEN58iXQg82TXgsDCjWqIkg</code> the channel id is
		/// <code>UCEN58iXQg82TXgsDCjWqIkg</code>
		/// <p>For more information see: https://support.google.com/youtube/answer/6180214
		/// <span class="constraint Selectable">This field can be selected using the value "ChannelId".</span>
		/// </summary>
		public string ChannelId { get; set; }
		/// <summary>
		/// The public name for a YouTube user channel.
		/// <span class="constraint Selectable">This field can be selected using the value "ChannelName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string ChannelName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			ChannelId = null;
			ChannelName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "channelId")
				{
					ChannelId = xItem.Value;
				}
				else if (localName == "channelName")
				{
					ChannelName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "YouTubeChannel");
			XElement xItem = null;
			if (ChannelId != null)
			{
				xItem = new XElement(XName.Get("channelId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ChannelId);
				xE.Add(xItem);
			}
			if (ChannelName != null)
			{
				xItem = new XElement(XName.Get("channelName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ChannelName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// YouTube video criterion.
	/// <p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX when it is contained within Operators: ADD, SET.</span>
	/// </summary>
	public class YouTubeVideo : Criterion, ISoapable
	{
		/// <summary>
		/// YouTube video id as it appears on the YouTube watch page.
		/// <span class="constraint Selectable">This field can be selected using the value "VideoId".</span>
		/// </summary>
		public string VideoId { get; set; }
		/// <summary>
		/// Name of the video.
		/// <span class="constraint Selectable">This field can be selected using the value "VideoName".</span>
		/// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
		/// </summary>
		public string VideoName { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			VideoId = null;
			VideoName = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "videoId")
				{
					VideoId = xItem.Value;
				}
				else if (localName == "videoName")
				{
					VideoName = xItem.Value;
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "YouTubeVideo");
			XElement xItem = null;
			if (VideoId != null)
			{
				xItem = new XElement(XName.Get("videoId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VideoId);
				xE.Add(xItem);
			}
			if (VideoName != null)
			{
				xItem = new XElement(XName.Get("videoName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(VideoName);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AccountLabelServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of labels specified by the selector for the authenticated user.
	///
	/// @param selector filters the list of labels to return
	/// @return response containing lists of labels that meet all the criteria of the selector
	/// @throws ApiException if a problem occurs fetching the information requested
	/// </summary>
	internal class AccountLabelServiceGet : ISoapable
	{
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AccountLabelServiceGetResponse : ISoapable
	{
		public AccountLabelPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AccountLabelPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Possible actions:
	/// <ul>
	/// <li> Create a new label - create a new {@link Label} and call mutate with ADD operator
	/// <li> Edit the label name - set the appropriate fields in your {@linkplain Label} and call
	/// mutate with the SET operator. Null fields will be interpreted to mean "no change"
	/// <li> Delete the label - call mutate with REMOVE operator
	/// </ul>
	///
	/// @param operations list of unique operations to be executed in a single transaction, in the
	/// order specified.
	/// @return the mutated labels, in the same order that they were in as the parameter
	/// @throws ApiException if problems occurs while modifying label information
	/// </summary>
	internal class AccountLabelServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET, REMOVE.</span>
		/// </summary>
		public List<AccountLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AccountLabelOperation>();
					var operationsItem = new AccountLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AccountLabelServiceMutateResponse : ISoapable
	{
		public AccountLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AccountLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AccountLabelServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AccountLabelServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdCustomizerFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of AdCustomizerFeeds that meet the selector criteria.
	///
	/// @param selector Determines which AdCustomizerFeeds to return. If empty, all AdCustomizerFeeds
	/// are returned.
	/// @return The list of AdCustomizerFeeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdCustomizerFeedServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdCustomizerFeedServiceGetResponse : ISoapable
	{
		public AdCustomizerFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdCustomizerFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, removes, or modifies AdCustomizerFeeds.
	///
	/// @param operations The operations to apply.
	/// @return The resulting AdCustomizerFeeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdCustomizerFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<AdCustomizerFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdCustomizerFeedOperation>();
					var operationsItem = new AdCustomizerFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdCustomizerFeedServiceMutateResponse : ISoapable
	{
		public AdCustomizerFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdCustomizerFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdCustomizerFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdCustomizerFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupAdServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of AdGroupAds.
	/// AdGroupAds that had been removed are not returned by default.
	///
	/// @param serviceSelector The selector specifying the {@link AdGroupAd}s to return.
	/// @return The page containing the AdGroupAds that meet the criteria specified by the selector.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class AdGroupAdServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupAdServiceGetResponse : ISoapable
	{
		public AdGroupAdPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupAdPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations (ie. add, set, remove):
	/// <p>Add - Creates a new {@linkplain AdGroupAd ad group ad}. The
	/// {@code adGroupId} must
	/// reference an existing ad group. The child {@code Ad} must be sufficiently
	/// specified by constructing a concrete ad type (such as {@code TextAd})
	/// and setting its fields accordingly.</p>
	/// <p>Set - Updates an ad group ad. Except for {@code status},
	/// ad group ad fields are not mutable. Status updates are
	/// straightforward - the status of the ad group ad is updated as
	/// specified. If any other field has changed, it will be ignored. If
	/// you want to change any of the fields other than status, you must
	/// make a new ad and then remove the old one.</p>
	/// <p>Remove - Removes the link between the specified AdGroup and
	/// Ad.</p>
	/// @param operations The operations to apply.
	/// @return A list of AdGroupAds where each entry in the list is the result of
	/// applying the operation in the input list with the same index. For an
	/// add/set operation, the return AdGroupAd will be what is saved to the db.
	/// In the case of the remove operation, the return AdGroupAd will simply be
	/// an AdGroupAd containing an Ad with the id set to the Ad being removed from
	/// the AdGroup.
	/// </summary>
	internal class AdGroupAdServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<AdGroupAdOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupAdOperation>();
					var operationsItem = new AdGroupAdOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Adds labels to the AdGroupAd or removes labels from the AdGroupAd.
	/// <p>Add - Apply an existing label to an existing {@linkplain AdGroupAd ad group ad}. The
	/// {@code adGroupId} and {@code adId} must reference an existing
	/// {@linkplain AdGroupAd ad group ad}. The {@code labelId} must reference an existing
	/// {@linkplain Label label}.
	/// <p>Remove - Removes the link between the specified {@linkplain AdGroupAd ad group ad} and
	/// {@linkplain Label label}.
	/// @param operations The operations to apply.
	/// @return A list of AdGroupAdLabel where each entry in the list is the result of
	/// applying the operation in the input list with the same index. For an
	/// add operation, the returned AdGroupAdLabel contains the AdGroupId, AdId and the LabelId.
	/// In the case of a remove operation, the returned AdGroupAdLabel will only have AdGroupId and
	/// AdId.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class AdGroupAdServiceMutateLabel : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<AdGroupAdLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupAdLabelOperation>();
					var operationsItem = new AdGroupAdLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupAdServiceMutateLabelResponse : ISoapable
	{
		public AdGroupAdLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupAdLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupAdServiceMutateResponse : ISoapable
	{
		public AdGroupAdReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupAdReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of AdGroupAds based on the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of AdGroupAds.
	/// @throws ApiException if problems occur while parsing the query or fetching AdGroupAds.
	/// </summary>
	internal class AdGroupAdServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupAdServiceQueryResponse : ISoapable
	{
		public AdGroupAdPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupAdPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupAdServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupAdServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Upgrades the url for a set of ads.
	/// @param operations The list of upgrades to apply.
	/// @return The list of Ads that were upgraded.
	/// </summary>
	internal class AdGroupAdServiceUpgradeUrl : ISoapable
	{
		public List<AdUrlUpgrade> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdUrlUpgrade>();
					var operationsItem = new AdUrlUpgrade();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupAdServiceUpgradeUrlResponse : ISoapable
	{
		public List<Ad> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Ad>();
					var rvalItem = new Ad();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupBidModifierServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Gets ad group level criterion bid modifiers.
	///
	/// @param selector The selector specifying the {@link AdGroupBidModifier}s to return.
	/// @return A list of ad group bid modifiers.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class AdGroupBidModifierServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupBidModifierServiceGetResponse : ISoapable
	{
		public AdGroupBidModifierPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupBidModifierPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, removes or updates ad group bid modifier overrides.
	///
	/// @param operations The operations to apply.
	/// @return The added ad group bid modifier overrides.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class AdGroupBidModifierServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE, SET.</span>
		/// </summary>
		public List<AdGroupBidModifierOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupBidModifierOperation>();
					var operationsItem = new AdGroupBidModifierOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupBidModifierServiceMutateResponse : ISoapable
	{
		public AdGroupBidModifierReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupBidModifierReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link AdGroupBidModifier}s that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class AdGroupBidModifierServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupBidModifierServiceQueryResponse : ISoapable
	{
		public AdGroupBidModifierPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupBidModifierPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupBidModifierServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupBidModifierServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupCriterionServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Gets adgroup criteria.
	///
	/// @param serviceSelector filters the adgroup criteria to be returned.
	/// @return a page (subset) view of the criteria selected
	/// @throws ApiException when there is at least one error with the request
	/// </summary>
	internal class AdGroupCriterionServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupCriterionServiceGetResponse : ISoapable
	{
		public AdGroupCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, removes or updates adgroup criteria.
	///
	/// @param operations operations to do
	/// during checks on keywords to be added.
	/// @return added and updated adgroup criteria (without optional parts)
	/// @throws ApiException when there is at least one error with the request
	/// </summary>
	internal class AdGroupCriterionServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET, REMOVE.</span>
		/// </summary>
		public List<AdGroupCriterionOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupCriterionOperation>();
					var operationsItem = new AdGroupCriterionOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Adds labels to the AdGroupCriterion or removes labels from the AdGroupCriterion
	/// <p>Add - Apply an existing label to an existing
	/// {@linkplain AdGroupCriterion ad group criterion}. The {@code adGroupId} and
	/// {@code criterionId}
	/// must reference an existing {@linkplain AdGroupCriterion ad group criterion}. The
	/// {@code labelId} must reference an existing {@linkplain Label label}.
	/// <p>Remove - Removes the link between the specified
	/// {@linkplain AdGroupCriterion ad group criterion} and {@linkplain Label label}.</p>
	/// @param operations the operations to apply
	/// @return a list of AdGroupCriterionLabel where each entry in the list is the result of
	/// applying the operation in the input list with the same index. For an
	/// add operation, the returned AdGroupCriterionLabel contains the AdGroupId, CriterionId and the
	/// LabelId. In the case of a remove operation, the returned AdGroupCriterionLabel will only have
	/// AdGroupId and CriterionId.
	/// @throws ApiException when there are one or more errors with the request
	/// </summary>
	internal class AdGroupCriterionServiceMutateLabel : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<AdGroupCriterionLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupCriterionLabelOperation>();
					var operationsItem = new AdGroupCriterionLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupCriterionServiceMutateLabelResponse : ISoapable
	{
		public AdGroupCriterionLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupCriterionLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupCriterionServiceMutateResponse : ISoapable
	{
		public AdGroupCriterionReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupCriterionReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of AdGroupCriterion that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of AdGroupCriterion
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class AdGroupCriterionServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupCriterionServiceQueryResponse : ISoapable
	{
		public AdGroupCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupCriterionServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupCriterionServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupExtensionSettingServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of AdGroupExtensionSettings that meet the selector criteria.
	///
	/// @param selector Determines which AdGroupExtensionSettings to return. If empty, all
	/// AdGroupExtensionSettings are returned.
	/// @return The list of AdGroupExtensionSettings specified by the selector.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdGroupExtensionSettingServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupExtensionSettingServiceGetResponse : ISoapable
	{
		public AdGroupExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations (add, remove, and set).
	///
	/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
	/// operation on an ad group with an existing ExtensionSetting will cause the operation to be
	/// treated like a set operation. Performing a set operation on an ad group with no
	/// ExtensionSetting will cause the operation to be treated like an add operation.
	///
	/// @param operations The operations to apply. The same {@link AdGroupExtensionSetting} cannot be
	/// specified in more than one operation.
	/// @return The changed {@link AdGroupExtensionSetting}s.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdGroupExtensionSettingServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<AdGroupExtensionSettingOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupExtensionSettingOperation>();
					var operationsItem = new AdGroupExtensionSettingOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupExtensionSettingServiceMutateResponse : ISoapable
	{
		public AdGroupExtensionSettingReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupExtensionSettingReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of AdGroupExtensionSettings that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return The list of AdGroupExtensionSettings specified by the query.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdGroupExtensionSettingServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupExtensionSettingServiceQueryResponse : ISoapable
	{
		public AdGroupExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupExtensionSettingServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupExtensionSettingServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of AdGroupFeeds that meet the selector criteria.
	///
	/// @param selector Determines which AdGroupFeeds to return. If empty all
	/// adgroup feeds are returned.
	/// @return The list of AdgroupFeeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdGroupFeedServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupFeedServiceGetResponse : ISoapable
	{
		public AdGroupFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, updates or removes AdGroupFeeds.
	///
	/// @param operations The operations to apply.
	/// @return The resulting Feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class AdGroupFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<AdGroupFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupFeedOperation>();
					var operationsItem = new AdGroupFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupFeedServiceMutateResponse : ISoapable
	{
		public AdGroupFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of AdGroupFeeds that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @returns A list of AdGroupFeed.
	/// @throws ApiException if problems occur while parsing the query or fetching AdGroupFeed.
	/// </summary>
	internal class AdGroupFeedServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupFeedServiceQueryResponse : ISoapable
	{
		public AdGroupFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdGroupServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all the ad groups specified by the selector
	/// from the target customer's account.
	///
	/// @param serviceSelector The selector specifying the {@link AdGroup}s to return.
	/// @return List of adgroups identified by the selector.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class AdGroupServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupServiceGetResponse : ISoapable
	{
		public AdGroupPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, updates, or removes ad groups.
	/// <p class="note"><b>Note:</b> {@link AdGroupOperation} does not support the
	/// {@code REMOVE} operator. To remove an ad group, set its
	/// {@link AdGroup#status status} to {@code REMOVED}.</p>
	///
	/// @param operations List of unique operations. The same ad group cannot be
	/// specified in more than one operation.
	/// @return The updated adgroups.
	/// </summary>
	internal class AdGroupServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<AdGroupOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupOperation>();
					var operationsItem = new AdGroupOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Adds labels to the {@linkplain AdGroup ad group} or removes {@linkplain Label label}s from the
	/// {@linkplain AdGroup ad group}.
	/// <p>{@code ADD} -- Apply an existing label to an existing {@linkplain AdGroup ad group}.
	/// The {@code adGroupId} must reference an existing {@linkplain AdGroup ad group}. The
	/// {@code labelId} must reference an existing {@linkplain Label label}.
	/// <p>{@code REMOVE} -- Removes the link between the specified {@linkplain AdGroup ad group}
	/// and a {@linkplain Label label}.</p>
	///
	/// @param operations the operations to apply.
	/// @return a list of {@linkplain AdGroupLabel}s where each entry in the list is the result of
	/// applying the operation in the input list with the same index. For an
	/// add operation, the returned AdGroupLabel contains the AdGroupId and the LabelId.
	/// In the case of a remove operation, the returned AdGroupLabel will only have AdGroupId.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class AdGroupServiceMutateLabel : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<AdGroupLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdGroupLabelOperation>();
					var operationsItem = new AdGroupLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdGroupServiceMutateLabelResponse : ISoapable
	{
		public AdGroupLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupServiceMutateResponse : ISoapable
	{
		public AdGroupReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of ad groups that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @return A list of adgroups
	/// @throws ApiException
	/// </summary>
	internal class AdGroupServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupServiceQueryResponse : ISoapable
	{
		public AdGroupPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdGroupServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdParamServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the ad parameters that match the criteria specified in the
	/// selector.
	///
	/// @param serviceSelector Specifies which ad parameters to return.
	/// @return A list of ad parameters.
	/// </summary>
	internal class AdParamServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdParamServiceGetResponse : ISoapable
	{
		public AdParamPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdParamPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Sets and removes ad parameters.
	/// <p class="note"><b>Note:</b> {@code ADD} is not supported. Use {@code SET}
	/// for new ad parameters.</p>
	///
	/// <ul class="nolist">
	/// <li>{@code SET}: Creates or updates an ad parameter, setting the new
	/// parameterized value for the given ad group / keyword pair.
	/// <li>{@code REMOVE}: Removes an ad parameter. The <code><var>default-value</var>
	/// </code> specified in the ad text will be used.</li>
	/// </ul>
	///
	/// @param operations The operations to perform.
	/// @return A list of ad parameters, where each entry in the list is the
	/// result of applying the operation in the input list with the same index.
	/// For a {@code SET} operation, the returned ad parameter will contain the
	/// updated values. For a {@code REMOVE} operation, the returned ad parameter
	/// will simply be the ad parameter that was removed.
	/// </summary>
	internal class AdParamServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, REMOVE.</span>
		/// </summary>
		public List<AdParamOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<AdParamOperation>();
					var operationsItem = new AdParamOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdParamServiceMutateResponse : ISoapable
	{
		public List<AdParam> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<AdParam>();
					var rvalItem = new AdParam();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdParamServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdParamServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class AdwordsUserListServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/rm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the list of user lists that meet the selector criteria.
	///
	/// @param serviceSelector the selector specifying the {@link UserList}s to return.
	/// @return a list of UserList entities which meet the selector criteria.
	/// @throws ApiException if problems occurred while fetching UserList information.
	/// </summary>
	internal class AdwordsUserListServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/rm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdwordsUserListServiceGetResponse : ISoapable
	{
		public UserListPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new UserListPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies a list of mutate operations (i.e. add, set):
	///
	/// Add - creates a set of user lists
	/// Set - updates a set of user lists
	/// Remove - not supported
	///
	/// @param operations the operations to apply
	/// @return a list of UserList objects
	/// </summary>
	internal class AdwordsUserListServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint CollectionSize">The minimum size of this collection is 1. The maximum size of this collection is 10000.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<UserListOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<UserListOperation>();
					var operationsItem = new UserListOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/rm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Mutate members of user lists by either adding or removing their lists of members.
	/// The following {@link Operator}s are supported: ADD and REMOVE.
	///
	/// <p>Note that operations cannot have same user list id but different operators.
	///
	/// @param operations the mutate members operations to apply
	/// @return a list of UserList objects
	/// @throws ApiException when there are one or more errors with the request
	/// </summary>
	internal class AdwordsUserListServiceMutateMembers : ISoapable
	{
		/// <summary>
		/// <span class="constraint CollectionSize">The minimum size of this collection is 1. The maximum size of this collection is 10000.</span>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<MutateMembersOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<MutateMembersOperation>();
					var operationsItem = new MutateMembersOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/rm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class AdwordsUserListServiceMutateMembersResponse : ISoapable
	{
		public MutateMembersReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new MutateMembersReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdwordsUserListServiceMutateResponse : ISoapable
	{
		public UserListReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new UserListReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of user lists that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @return A list of UserList
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class AdwordsUserListServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/rm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class AdwordsUserListServiceQueryResponse : ISoapable
	{
		public UserListPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new UserListPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/rm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class AdwordsUserListServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class AdwordsUserListServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class BatchJobServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Query the status of existing {@code BatchJob}s.
	///
	/// @param selector The selector specifying the {@code BatchJob}s to return.
	/// @return The list of selected jobs.
	/// @throws ApiException
	/// </summary>
	internal class BatchJobServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BatchJobServiceGetResponse : ISoapable
	{
		public BatchJobPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BatchJobPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Creates or updates a {@code BatchJob}.
	///
	/// <p class="note"><b>Note:</b> {@link BatchJobOperation} does not support the
	/// {@code REMOVE} operator. It is not necessary to remove BatchJobs.
	///
	/// @param operations A list of operations.
	/// @return The list of created or updated jobs.
	/// @throws ApiException
	/// </summary>
	internal class BatchJobServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<BatchJobOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<BatchJobOperation>();
					var operationsItem = new BatchJobOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class BatchJobServiceMutateResponse : ISoapable
	{
		public BatchJobReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BatchJobReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of {@code BatchJob}s that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return The list of selected jobs.
	/// @throws ApiException if problems occur while parsing the query or fetching
	/// batchjob information.
	/// </summary>
	internal class BatchJobServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class BatchJobServiceQueryResponse : ISoapable
	{
		public BatchJobPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BatchJobPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BatchJobServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class BatchJobServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class BiddingStrategyServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of bidding strategies that match the selector.
	///
	/// @return list of bidding strategies specified by the selector.
	/// @throws com.google.ads.api.services.common.error.ApiException if problems
	/// occurred while retrieving results.
	/// </summary>
	internal class BiddingStrategyServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BiddingStrategyServiceGetResponse : ISoapable
	{
		public BiddingStrategyPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BiddingStrategyPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations.
	///
	/// @param operations the operations to apply
	/// @return the modified list of BiddingStrategy
	/// @throws ApiException
	/// </summary>
	internal class BiddingStrategyServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<BiddingStrategyOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<BiddingStrategyOperation>();
					var operationsItem = new BiddingStrategyOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class BiddingStrategyServiceMutateResponse : ISoapable
	{
		public BiddingStrategyReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BiddingStrategyReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of bidding strategies that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class BiddingStrategyServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class BiddingStrategyServiceQueryResponse : ISoapable
	{
		public BiddingStrategyPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BiddingStrategyPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BiddingStrategyServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class BiddingStrategyServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class BudgetOrderServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/billing/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Gets a list of {@link BudgetOrder}s using the generic selector.
	/// @param serviceSelector specifies which BudgetOrder to return.
	/// @return A {@link BudgetOrderPage} of BudgetOrders of the client customer.
	/// All BudgetOrder fields are returned. Stats are not yet supported.
	/// @throws ApiException
	/// </summary>
	internal class BudgetOrderServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/billing/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns all the open/active BillingAccounts associated with the current
	/// manager.
	/// @return A list of {@link BillingAccount}s.
	/// @throws ApiException
	/// </summary>
	internal class BudgetOrderServiceGetBillingAccounts : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class BudgetOrderServiceGetBillingAccountsResponse : ISoapable
	{
		public List<BillingAccount> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<BillingAccount>();
					var rvalItem = new BillingAccount();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/billing/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class BudgetOrderServiceGetResponse : ISoapable
	{
		public BudgetOrderPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BudgetOrderPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/billing/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Mutates BudgetOrders, supported operations are:
	/// <p><code>ADD</code>: Adds a {@link BudgetOrder} to the billing account
	/// specified by the billing account ID.</p>
	/// <p><code>SET</code>: Sets the start/end date and amount of the
	/// {@link BudgetOrder}.</p>
	/// <p><code>REMOVE</code>: Cancels the {@link BudgetOrder} (status change).</p>
	/// <p class="warning"><b>Warning:</b> The <code>BudgetOrderService</code>
	/// is limited to one operation per mutate request. Any attempt to make more
	/// than one operation will result in an <code>ApiException</code>.</p>
	/// @param operations A list of operations, <b>however currently we only
	/// support one operation per mutate call</b>.
	/// @return BudgetOrders affected by the mutate operation.
	/// @throws ApiException
	/// </summary>
	internal class BudgetOrderServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET, REMOVE.</span>
		/// </summary>
		public List<BudgetOrderOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<BudgetOrderOperation>();
					var operationsItem = new BudgetOrderOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/billing/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class BudgetOrderServiceMutateResponse : ISoapable
	{
		public BudgetOrderReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BudgetOrderReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/billing/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetOrderServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetOrderServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class BudgetServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of budgets that match the selector.
	///
	/// @return List of budgets specified by the selector.
	/// @throws com.google.ads.api.services.common.error.ApiException if problems
	/// occurred while retrieving results.
	/// </summary>
	internal class BudgetServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetServiceGetResponse : ISoapable
	{
		public BudgetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BudgetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations.
	///
	/// @param operations The operations to apply.
	/// @return The modified list of Budgets, returned in the same order as <code>operations</code>.
	/// @throws ApiException
	/// </summary>
	internal class BudgetServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<BudgetOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<BudgetOperation>();
					var operationsItem = new BudgetOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class BudgetServiceMutateResponse : ISoapable
	{
		public BudgetReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BudgetReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of budgets that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of Budget
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class BudgetServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetServiceQueryResponse : ISoapable
	{
		public BudgetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new BudgetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class BudgetServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CampaignCriterionServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Gets campaign criteria.
	///
	/// @param serviceSelector The selector specifying the {@link CampaignCriterion}s to return.
	/// @return A list of campaign criteria.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class CampaignCriterionServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignCriterionServiceGetResponse : ISoapable
	{
		public CampaignCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, removes or updates campaign criteria.
	///
	/// @param operations The operations to apply.
	/// @return The added campaign criteria (without any optional parts).
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class CampaignCriterionServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE, SET.</span>
		/// </summary>
		public List<CampaignCriterionOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignCriterionOperation>();
					var operationsItem = new CampaignCriterionOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CampaignCriterionServiceMutateResponse : ISoapable
	{
		public CampaignCriterionReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignCriterionReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of campaign criteria that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of campaign criteria.
	/// @throws ApiException if problems occur while parsing the query or fetching campaign criteria.
	/// </summary>
	internal class CampaignCriterionServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignCriterionServiceQueryResponse : ISoapable
	{
		public CampaignCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignCriterionServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignCriterionServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CampaignExtensionSettingServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of CampaignExtensionSettings that meet the selector criteria.
	///
	/// @param selector Determines which CampaignExtensionSettings to return. If empty, all
	/// CampaignExtensionSettings are returned.
	/// @return The list of CampaignExtensionSettings specified by the selector.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CampaignExtensionSettingServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignExtensionSettingServiceGetResponse : ISoapable
	{
		public CampaignExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations (add, remove, and set).
	///
	/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
	/// operation on a campaign with an existing ExtensionSetting will cause the operation to be
	/// treated like a set operation. Performing a set operation on a campaign with no
	/// ExtensionSetting will cause the operation to be treated like an add operation.
	///
	/// @param operations The operations to apply. The same {@link CampaignExtensionSetting} cannot be
	/// specified in more than one operation.
	/// @return The changed {@link CampaignExtensionSetting}s.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CampaignExtensionSettingServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<CampaignExtensionSettingOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignExtensionSettingOperation>();
					var operationsItem = new CampaignExtensionSettingOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CampaignExtensionSettingServiceMutateResponse : ISoapable
	{
		public CampaignExtensionSettingReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignExtensionSettingReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of CampaignExtensionSettings that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return The list of CampaignExtensionSettings specified by the query.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CampaignExtensionSettingServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignExtensionSettingServiceQueryResponse : ISoapable
	{
		public CampaignExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignExtensionSettingServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignExtensionSettingServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CampaignFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of CampaignFeeds that meet the selector criteria.
	///
	/// @param selector Determines which CampaignFeeds to return. If empty all
	/// Campaign feeds are returned.
	/// @return The list of CampaignFeeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CampaignFeedServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignFeedServiceGetResponse : ISoapable
	{
		public CampaignFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, sets or removes CampaignFeeds.
	///
	/// @param operations The operations to apply.
	/// @return The resulting Feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CampaignFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET, REMOVE.</span>
		/// </summary>
		public List<CampaignFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignFeedOperation>();
					var operationsItem = new CampaignFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CampaignFeedServiceMutateResponse : ISoapable
	{
		public CampaignFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link CampaignFeed}s inside a {@link CampaignFeedPage} that matches
	/// the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class CampaignFeedServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignFeedServiceQueryResponse : ISoapable
	{
		public CampaignFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CampaignServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the list of campaigns that meet the selector criteria.
	///
	/// @param serviceSelector the selector specifying the {@link Campaign}s to return.
	/// @return A list of campaigns.
	/// @throws ApiException if problems occurred while fetching campaign information.
	/// </summary>
	internal class CampaignServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignServiceGetResponse : ISoapable
	{
		public CampaignPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, updates, or removes campaigns.
	/// <p class="note"><b>Note:</b> {@link CampaignOperation} does not support the
	/// <code>REMOVE</code> operator. To remove a campaign, set its
	/// {@link Campaign#status status} to {@code REMOVED}.</p>
	/// @param operations A list of unique operations.
	/// The same campaign cannot be specified in more than one operation.
	/// @return The list of updated campaigns, returned in the same order as the
	/// <code>operations</code> array.
	/// @throws ApiException if problems occurred while updating campaign information.
	/// </summary>
	internal class CampaignServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<CampaignOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignOperation>();
					var operationsItem = new CampaignOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Adds labels to the {@linkplain Campaign campaign} or removes {@linkplain Label label}s from the
	/// {@linkplain Campaign campaign}.
	/// <p>Add - Apply an existing label to an existing {@linkplain Campaign campaign}. The
	/// {@code campaignId} must reference an existing {@linkplain Campaign}. The {@code labelId} must
	/// reference an existing {@linkplain Label label}.
	/// <p>Remove - Removes the link between the specified {@linkplain Campaign campaign} and
	/// {@linkplain Label label}.
	///
	/// @param operations the operations to apply.
	/// @return a list of {@linkplain CampaignLabel}s where each entry in the list is the result of
	/// applying the operation in the input list with the same index. For an
	/// add operation, the returned CampaignLabel contains the CampaignId and the LabelId.
	/// In the case of a remove operation, the returned CampaignLabel will only have CampaignId.
	/// @throws ApiException when there are one or more errors with the request.
	/// </summary>
	internal class CampaignServiceMutateLabel : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<CampaignLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignLabelOperation>();
					var operationsItem = new CampaignLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CampaignServiceMutateLabelResponse : ISoapable
	{
		public CampaignLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignServiceMutateResponse : ISoapable
	{
		public CampaignReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of campaigns that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of campaigns.
	/// @throws ApiException if problems occur while parsing the query or fetching campaign
	/// information.
	/// </summary>
	internal class CampaignServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignServiceQueryResponse : ISoapable
	{
		public CampaignPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CampaignSharedSetServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of CampaignSharedSets based on the given selector.
	/// @param selector the selector specifying the query
	/// @return a list of CampaignSharedSet entities that meet the criterion specified
	/// by the selector
	/// @throws ApiException
	/// </summary>
	internal class CampaignSharedSetServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignSharedSetServiceGetResponse : ISoapable
	{
		public CampaignSharedSetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignSharedSetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations.
	/// @param operations the operations to apply
	/// @return the modified list of CampaignSharedSet associations
	/// @throws ApiException
	/// </summary>
	internal class CampaignSharedSetServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<CampaignSharedSetOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CampaignSharedSetOperation>();
					var operationsItem = new CampaignSharedSetOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CampaignSharedSetServiceMutateResponse : ISoapable
	{
		public CampaignSharedSetReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignSharedSetReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of CampaignSharedSets that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of CampaignSharedSets
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class CampaignSharedSetServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignSharedSetServiceQueryResponse : ISoapable
	{
		public CampaignSharedSetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CampaignSharedSetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignSharedSetServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CampaignSharedSetServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class ConstantDataServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all age range criteria.
	///
	/// @return A list of age ranges.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetAgeRangeCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetAgeRangeCriterionResponse : ISoapable
	{
		public List<AgeRange> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<AgeRange>();
					var rvalItem = new AgeRange();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all carrier criteria.
	///
	/// @return A list of carriers.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetCarrierCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetCarrierCriterionResponse : ISoapable
	{
		public List<Carrier> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Carrier>();
					var rvalItem = new Carrier();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all gender criteria.
	///
	/// @return A list of genders.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetGenderCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetGenderCriterionResponse : ISoapable
	{
		public List<Gender> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Gender>();
					var rvalItem = new Gender();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all language criteria.
	///
	/// @return A list of languages.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetLanguageCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetLanguageCriterionResponse : ISoapable
	{
		public List<Language> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Language>();
					var rvalItem = new Language();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all mobile app category criteria.
	///
	/// @return A list of mobile app categories.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetMobileAppCategoryCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetMobileAppCategoryCriterionResponse : ISoapable
	{
		public List<MobileAppCategory> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<MobileAppCategory>();
					var rvalItem = new MobileAppCategory();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all mobile devices.
	///
	/// @return A list of mobile devices.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetMobileDeviceCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetMobileDeviceCriterionResponse : ISoapable
	{
		public List<MobileDevice> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<MobileDevice>();
					var rvalItem = new MobileDevice();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of all operating system version criteria.
	///
	/// @return A list of operating system versions.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetOperatingSystemVersionCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetOperatingSystemVersionCriterionResponse : ISoapable
	{
		public List<OperatingSystemVersion> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<OperatingSystemVersion>();
					var rvalItem = new OperatingSystemVersion();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of shopping bidding categories.
	///
	/// A country predicate must be included in the selector, only {@link Predicate.Operator#EQUALS}
	/// and {@link Predicate.Operator#IN} with a single value are supported in the country predicate.
	/// An empty parentDimensionType predicate will filter for root categories.
	///
	/// @return A list of shopping bidding categories.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetProductBiddingCategoryData : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ConstantDataServiceGetProductBiddingCategoryDataResponse : ISoapable
	{
		public List<ProductBiddingCategoryData> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<ProductBiddingCategoryData>();
					var rvalItem = new ProductBiddingCategoryData();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of user interests.
	///
	/// @param userInterestTaxonomyType The type of taxonomy to use when requesting user interests.
	/// @return A list of user interests.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetUserInterestCriterion : ISoapable
	{
		public ConstantDataServiceUserInterestTaxonomyType? UserInterestTaxonomyType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			UserInterestTaxonomyType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "userInterestTaxonomyType")
				{
					UserInterestTaxonomyType = ConstantDataServiceUserInterestTaxonomyTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (UserInterestTaxonomyType != null)
			{
				xItem = new XElement(XName.Get("userInterestTaxonomyType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserInterestTaxonomyType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	internal class ConstantDataServiceGetUserInterestCriterionResponse : ISoapable
	{
		public List<CriterionUserInterest> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<CriterionUserInterest>();
					var rvalItem = new CriterionUserInterest();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of content verticals.
	///
	/// @return A list of verticals.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class ConstantDataServiceGetVerticalCriterion : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class ConstantDataServiceGetVerticalCriterionResponse : ISoapable
	{
		public List<Vertical> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Vertical>();
					var rvalItem = new Vertical();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ConstantDataServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class ConstantDataServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class ConversionTrackerServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of the conversion trackers that match the selector. The
	/// actual objects contained in the page's list of entries will be specific
	/// subclasses of the abstract {@link ConversionTracker} class.
	///
	/// @param serviceSelector The selector specifying the
	/// {@link ConversionTracker}s to return.
	/// @return List of conversion trackers specified by the selector.
	/// @throws com.google.ads.api.services.common.error.ApiException if problems
	/// occurred while retrieving results.
	/// </summary>
	internal class ConversionTrackerServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ConversionTrackerServiceGetResponse : ISoapable
	{
		public ConversionTrackerPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ConversionTrackerPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations such as adding or updating conversion trackers.
	/// <p class="note"><b>Note:</b> {@link ConversionTrackerOperation} does not support the
	/// <code>REMOVE</code> operator. In order to 'disable' a conversion type, send a
	/// <code>SET</code> operation for the conversion tracker with the <code>status</code>
	/// property set to <code>DISABLED</code></p>
	///
	/// <p>You can mutate any ConversionTracker that belongs to your account. You may not
	/// mutate a ConversionTracker that belongs to some other account. You may not directly
	/// mutate a system-defined ConversionTracker, but you can create a mutable copy of it
	/// in your account by sending a mutate request with an ADD operation specifying
	/// an originalConversionTypeId matching a system-defined conversion tracker's ID. That new
	/// ADDed ConversionTracker will inherit the statistics and properties
	/// of the system-defined type, but will be editable as usual.</p>
	///
	/// @param operations A list of mutate operations to perform.
	/// @return The list of the conversion trackers as they appear after mutation,
	/// in the same order as they appeared in the list of operations.
	/// @throws com.google.ads.api.services.common.error.ApiException if problems
	/// occurred while updating the data.
	/// </summary>
	internal class ConversionTrackerServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<ConversionTrackerOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<ConversionTrackerOperation>();
					var operationsItem = new ConversionTrackerOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ConversionTrackerServiceMutateResponse : ISoapable
	{
		public ConversionTrackerReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ConversionTrackerReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of conversion trackers that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of conversion trackers.
	/// @throws ApiException if problems occur while parsing the query or fetching conversion trackers.
	/// </summary>
	internal class ConversionTrackerServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class ConversionTrackerServiceQueryResponse : ISoapable
	{
		public ConversionTrackerPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ConversionTrackerPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ConversionTrackerServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class ConversionTrackerServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CustomerExtensionSettingServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of CustomerExtensionSettings that meet the selector criteria.
	///
	/// @param selector Determines which CustomerExtensionSettings to return. If empty, all
	/// CustomerExtensionSettings are returned.
	/// @return The list of CustomerExtensionSettings specified by the selector.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CustomerExtensionSettingServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerExtensionSettingServiceGetResponse : ISoapable
	{
		public CustomerExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations (add, remove, and set).
	///
	/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
	/// operation when there is an existing ExtensionSetting will cause the operation to be
	/// treated like a set operation. Performing a set operation when there is no existing
	/// ExtensionSetting will cause the operation to be treated like an add operation.
	///
	/// @param operations The operations to apply. The same {@link CustomerExtensionSetting} cannot be
	/// specified in more than one operation.
	/// @return The changed {@link CustomerExtensionSetting}s.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CustomerExtensionSettingServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<CustomerExtensionSettingOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CustomerExtensionSettingOperation>();
					var operationsItem = new CustomerExtensionSettingOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CustomerExtensionSettingServiceMutateResponse : ISoapable
	{
		public CustomerExtensionSettingReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerExtensionSettingReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of CustomerExtensionSettings that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return The list of CustomerExtensionSettings specified by the query.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CustomerExtensionSettingServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerExtensionSettingServiceQueryResponse : ISoapable
	{
		public CustomerExtensionSettingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerExtensionSettingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerExtensionSettingServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerExtensionSettingServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CustomerFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of customer feeds that meet the selector criteria.
	///
	/// @param selector Determines which customer feeds to return. If empty, all
	/// customer feeds are returned.
	/// @return The list of customer feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CustomerFeedServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerFeedServiceGetResponse : ISoapable
	{
		public CustomerFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, sets, or removes customer feeds.
	///
	/// @param operations The operations to apply.
	/// @return The resulting feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class CustomerFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<CustomerFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<CustomerFeedOperation>();
					var operationsItem = new CustomerFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CustomerFeedServiceMutateResponse : ISoapable
	{
		public CustomerFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of customer feeds that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of CustomerFeed.
	/// @throws ApiException If problems occur while parsing the query or fetching CustomerFeed.
	/// </summary>
	internal class CustomerFeedServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerFeedServiceQueryResponse : ISoapable
	{
		public CustomerFeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerFeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CustomerServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns details of all the customers directly accessible by the user authenticating the call.
	/// <p>
	/// Starting with v201607, if {@code clientCustomerId} is specified in the request header,
	/// only details of that customer will be returned. To do this for prior versions, use the
	/// {@code get()} method instead.
	/// </summary>
	internal class CustomerServiceGetCustomers : ISoapable
	{
		public virtual void ReadFrom(XElement xE)
		{
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
			}
		}
		public virtual void WriteTo(XElement xE)
		{
		}
	}
	internal class CustomerServiceGetCustomersResponse : ISoapable
	{
		public List<Customer> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Customer>();
					var rvalItem = new Customer();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Retrieves the list of service links for the authorized customer.
	/// See {@link ServiceType} for information on the various linking types supported.
	///
	/// @param selector describing which links to retrieve
	/// @throws ApiException
	/// </summary>
	internal class CustomerServiceGetServiceLinks : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerServiceGetServiceLinksResponse : ISoapable
	{
		public List<ServiceLink> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<ServiceLink>();
					var rvalItem = new ServiceLink();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Update the authorized customer.
	///
	/// <p>While there are a limited set of properties available to update, please read this
	/// <a href="https://support.google.com/analytics/answer/1033981">help center article
	/// on auto-tagging</a> before updating {@code customer.autoTaggingEnabled}.
	///
	/// @param customer the requested updated value for the customer.
	/// @throws ApiException
	/// </summary>
	internal class CustomerServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Customer Customer { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Customer = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "customer")
				{
					Customer = new Customer();
					Customer.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Customer != null)
			{
				xItem = new XElement(XName.Get("customer", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Customer.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerServiceMutateResponse : ISoapable
	{
		public Customer Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new Customer();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Modifies links to other services for the authorized customer.
	/// See {@link ServiceType} for information on the various linking types supported.
	///
	/// @param operations to perform
	/// @throws ApiException
	/// </summary>
	internal class CustomerServiceMutateServiceLinks : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, REMOVE.</span>
		/// </summary>
		public List<ServiceLinkOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<ServiceLinkOperation>();
					var operationsItem = new ServiceLinkOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CustomerServiceMutateServiceLinksResponse : ISoapable
	{
		public List<ServiceLink> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<ServiceLink>();
					var rvalItem = new ServiceLink();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class CustomerServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class CustomerSyncServiceApiExceptionFault : ApplicationException, ISoapable
	{
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/ch/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns information about changed entities inside a customer's account.
	///
	/// @param selector Specifies the filter for selecting changehistory events for a customer.
	/// @return A Customer->Campaign->AdGroup hierarchy containing information about the objects
	/// changed at each level. All Campaigns that are requested in the selector will be returned,
	/// regardless of whether or not they have changed, but unchanged AdGroups will be ignored.
	/// </summary>
	internal class CustomerSyncServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public CustomerSyncSelector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new CustomerSyncSelector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/ch/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerSyncServiceGetResponse : ISoapable
	{
		public CustomerChangeData Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CustomerChangeData();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/ch/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerSyncServiceRequestHeader : ISoapable
	{
		public string ClientCustomerId { get; set; }
		public string DeveloperToken { get; set; }
		public string UserAgent { get; set; }
		public bool? ValidateOnly { get; set; }
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class CustomerSyncServiceResponseHeader : ISoapable
	{
		public string RequestId { get; set; }
		public string ServiceName { get; set; }
		public string MethodName { get; set; }
		public long? Operations { get; set; }
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class DataServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups specified in the selector.
	/// In the result, the returned {@link LandscapePoint}s are grouped into
	/// {@link AdGroupBidLandscape}s by their ad groups, and numberResults of paging limits the total
	/// number of {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
	///
	/// @param serviceSelector Selects the entities to return bid landscapes for.
	/// @return A list of bid landscapes.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class DataServiceGetAdGroupBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceGetAdGroupBidLandscapeResponse : ISoapable
	{
		public AdGroupBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria specified in the
	/// selector. In the result, the returned {@link LandscapePoint}s are grouped into
	/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
	/// of paging limits the total number of {@link LandscapePoint}s instead of number of
	/// {@link CriterionBidLandscape}s.
	///
	/// @param serviceSelector Selects the entities to return bid landscapes for.
	/// @return A list of bid landscapes.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class DataServiceGetCampaignCriterionBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceGetCampaignCriterionBidLandscapeResponse : ISoapable
	{
		public CriterionBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CriterionBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link CriterionBidLandscape}s for the criteria specified in the selector.
	/// In the result, the returned {@link LandscapePoint}s are grouped into
	/// {@link CriterionBidLandscape}s by their criteria, and numberResults of paging limits the total
	/// number of {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
	///
	/// @param serviceSelector Selects the entities to return bid landscapes for.
	/// @return A list of bid landscapes.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class DataServiceGetCriterionBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceGetCriterionBidLandscapeResponse : ISoapable
	{
		public CriterionBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CriterionBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
	///
	/// @param serviceSelector Selects the entities to return domain categories for.
	/// @return A list of domain categories.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class DataServiceGetDomainCategory : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceGetDomainCategoryResponse : ISoapable
	{
		public DomainCategoryPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DomainCategoryPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups that match the query. In the
	/// result, the returned {@link LandscapePoint}s are grouped into {@link AdGroupBidLandscape}s
	/// by their ad groups, and numberResults of paging limits the total number of
	/// {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of bid landscapes.
	/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
	/// </summary>
	internal class DataServiceQueryAdGroupBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceQueryAdGroupBidLandscapeResponse : ISoapable
	{
		public AdGroupBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new AdGroupBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria that match the
	/// query. In the result, the returned {@link LandscapePoint}s are grouped into
	/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
	/// of paging limits the total number of {@link LandscapePoint}s instead of number of
	/// {@link CriterionBidLandscape}s.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of bid landscapes.
	/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
	/// </summary>
	internal class DataServiceQueryCampaignCriterionBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceQueryCampaignCriterionBidLandscapeResponse : ISoapable
	{
		public CriterionBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CriterionBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link CriterionBidLandscape}s for the criteria that match the query. In the
	/// result, the returned {@link LandscapePoint}s are grouped into {@link CriterionBidLandscape}s
	/// by their criteria, and numberResults of paging limits the total number of
	/// {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of bid landscapes.
	/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
	/// </summary>
	internal class DataServiceQueryCriterionBidLandscape : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceQueryCriterionBidLandscapeResponse : ISoapable
	{
		public CriterionBidLandscapePage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new CriterionBidLandscapePage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of domain categories.
	/// @throws ApiException if problems occur while parsing the query
	/// or fetching domain categories.
	/// </summary>
	internal class DataServiceQueryDomainCategory : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceQueryDomainCategoryResponse : ISoapable
	{
		public DomainCategoryPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DomainCategoryPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class DataServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class DraftAsyncErrorServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the selector.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class DraftAsyncErrorServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftAsyncErrorServiceGetResponse : ISoapable
	{
		public DraftAsyncErrorPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DraftAsyncErrorPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the query.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class DraftAsyncErrorServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftAsyncErrorServiceQueryResponse : ISoapable
	{
		public DraftAsyncErrorPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DraftAsyncErrorPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftAsyncErrorServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class DraftAsyncErrorServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class DraftServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a DraftPage that contains a list of Draft objects matching the selector.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class DraftServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftServiceGetResponse : ISoapable
	{
		public DraftPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DraftPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// The mutate action is used for creating new Drafts and controlling the life cycle of Drafts,
	/// such as abandoning or promoting Drafts.
	///
	/// @return The list of updated Drafts, in the same order as the {@code operations} list.
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while processing the request.
	/// </summary>
	internal class DraftServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
		/// </summary>
		public List<DraftOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<DraftOperation>();
					var operationsItem = new DraftOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class DraftServiceMutateResponse : ISoapable
	{
		public DraftReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DraftReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a DraftPage that contains a list of Draft objects matching the query.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class DraftServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftServiceQueryResponse : ISoapable
	{
		public DraftPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new DraftPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class DraftServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class DraftServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class FeedItemServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of FeedItems that meet the selector criteria.
	///
	/// @param selector Determines which FeedItems to return. If empty all
	/// FeedItems are returned.
	/// @return The list of FeedItems.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class FeedItemServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedItemServiceGetResponse : ISoapable
	{
		public FeedItemPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedItemPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Add, remove, and set FeedItems.
	///
	/// @param operations The operations to apply.
	/// @return The resulting FeedItems.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class FeedItemServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<FeedItemOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<FeedItemOperation>();
					var operationsItem = new FeedItemOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class FeedItemServiceMutateResponse : ISoapable
	{
		public FeedItemReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedItemReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of FeedItems that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of FeedItems
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class FeedItemServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedItemServiceQueryResponse : ISoapable
	{
		public FeedItemPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedItemPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedItemServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class FeedItemServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class FeedMappingServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of FeedMappings that meet the selector criteria.
	///
	/// @param selector Determines which FeedMappings to return. If empty all
	/// FeedMappings are returned.
	/// @return The list of FeedMappings.
	/// @throws ApiException indicates a problem with the request.
	/// </summary>
	internal class FeedMappingServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedMappingServiceGetResponse : ISoapable
	{
		public FeedMappingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedMappingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Add and remove FeedMappings.
	/// The following {@link Operator}s are supported: ADD, REMOVE.
	///
	/// @param operations The operations to apply.
	/// @return The resulting FeedMappings.
	/// @throws ApiException indicates a problem with the request.
	/// </summary>
	internal class FeedMappingServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<FeedMappingOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<FeedMappingOperation>();
					var operationsItem = new FeedMappingOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class FeedMappingServiceMutateResponse : ISoapable
	{
		public FeedMappingReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedMappingReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of FeedMappings that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns The list of FeedMappings
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class FeedMappingServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedMappingServiceQueryResponse : ISoapable
	{
		public FeedMappingPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedMappingPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedMappingServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class FeedMappingServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class FeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of Feeds that meet the selector criteria.
	///
	/// @param selector Determines which Feeds to return. If empty all
	/// Feeds are returned.
	/// @return The list of Feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class FeedServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedServiceGetResponse : ISoapable
	{
		public FeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Add, remove, and set Feeds.
	///
	/// @param operations The operations to apply.
	/// @return The resulting Feeds.
	/// @throws ApiException Indicates a problem with the request.
	/// </summary>
	internal class FeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<FeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<FeedOperation>();
					var operationsItem = new FeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class FeedServiceMutateResponse : ISoapable
	{
		public FeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of Feed that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @returns A list of Feed.
	/// @throws ApiException if problems occur while parsing the query or fetching Feed.
	/// </summary>
	internal class FeedServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedServiceQueryResponse : ISoapable
	{
		public FeedPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new FeedPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class FeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class FeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class LabelServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link Label}s.
	///
	/// @param serviceSelector The selector specifying the {@link Label}s to return.
	/// @return The page containing the {@link Label}s which meet the criteria specified by the
	/// selector.
	/// @throws ApiException when there is at least one error with the request
	/// </summary>
	internal class LabelServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class LabelServiceGetResponse : ISoapable
	{
		public LabelPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new LabelPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations.
	///
	/// @param operations The operations to apply. The same {@link Label} cannot be specified in
	/// more than one operation.
	/// @return The applied {@link Label}s.
	/// @throws ApiException when there is at least one error with the request
	/// </summary>
	internal class LabelServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET, REMOVE.</span>
		/// </summary>
		public List<LabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<LabelOperation>();
					var operationsItem = new LabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class LabelServiceMutateResponse : ISoapable
	{
		public LabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new LabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of {@link Label}s that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns  The page containing the {@link Label}s which match the query.
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class LabelServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class LabelServiceQueryResponse : ISoapable
	{
		public LabelPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new LabelPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class LabelServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class LabelServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class LocationCriterionServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of {@link LocationCriterion}'s that match the specified selector.
	///
	/// @param selector filters the LocationCriterion to be returned.
	/// @return A list of location criterion.
	/// @throws ApiException when there is at least one error with the request.
	/// </summary>
	internal class LocationCriterionServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class LocationCriterionServiceGetResponse : ISoapable
	{
		public List<LocationCriterion> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<LocationCriterion>();
					var rvalItem = new LocationCriterion();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the list of {@link LocationCriterion}s that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns The list of location criteria
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class LocationCriterionServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class LocationCriterionServiceQueryResponse : ISoapable
	{
		public List<LocationCriterion> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<LocationCriterion>();
					var rvalItem = new LocationCriterion();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class LocationCriterionServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class LocationCriterionServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class ManagedCustomerServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/mcm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the list of customers that meet the selector criteria.
	///
	/// @param selector The selector specifying the {@link ManagedCustomer}s to return.
	/// @return List of customers identified by the selector.
	/// @throws ApiException When there is at least one error with the request.
	/// </summary>
	internal class ManagedCustomerServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/mcm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the pending invitations for the customer IDs in the selector.
	/// @param selector the manager customer ids (inviters) or the client customer ids (invitees)
	/// @throws ApiException when there is at least one error with the request
	/// </summary>
	internal class ManagedCustomerServiceGetPendingInvitations : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public PendingInvitationSelector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new PendingInvitationSelector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ManagedCustomerServiceGetPendingInvitationsResponse : ISoapable
	{
		public List<PendingInvitation> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<PendingInvitation>();
					var rvalItem = new PendingInvitation();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ManagedCustomerServiceGetResponse : ISoapable
	{
		public ManagedCustomerPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ManagedCustomerPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Modifies or creates new {@link ManagedCustomer}s.
	///
	/// <p class="note"><b>Note:</b> See {@link ManagedCustomerOperation} for available operators.</p>
	///
	/// @param operations List of unique operations.
	/// @return The list of updated managed customers, returned in the same order as the
	/// <code>operations</code> array.
	/// </summary>
	internal class ManagedCustomerServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, ADD.</span>
		/// </summary>
		public List<ManagedCustomerOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<ManagedCustomerOperation>();
					var operationsItem = new ManagedCustomerOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Adds {@linkplain AccountLabel}s to, and removes
	/// {@linkplain AccountLabel}s from, {@linkplain ManagedCustomer}s.
	///
	/// <p>To add an {@linkplain AccountLabel} to a {@linkplain ManagedCustomer},
	/// use {@link Operator#ADD}.
	/// To remove an {@linkplain AccountLabel} from a {@linkplain ManagedCustomer},
	/// use {@link Operator#REMOVE}.</p>
	/// <p>The label must already exist (see {@link AccountLabelService#mutate} for
	/// how to create them) and be owned by the authenticated user.</p>
	/// <p>The {@linkplain ManagedCustomer} must already exist and be managed by
	/// the customer making the request (either directly or indirectly).</p>
	/// <p>An AccountLabel may be applied to at most 1000 customers.</p>
	/// <p>This method does not support partial failures, and will fail if any
	/// operation is invalid.</p>
	/// </summary>
	internal class ManagedCustomerServiceMutateLabel : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<ManagedCustomerLabelOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<ManagedCustomerLabelOperation>();
					var operationsItem = new ManagedCustomerLabelOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ManagedCustomerServiceMutateLabelResponse : ISoapable
	{
		public ManagedCustomerLabelReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ManagedCustomerLabelReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Modifies the ManagedCustomer forest. These actions are possible (categorized by
	/// Operator + Link Status):
	///
	/// <ul>
	/// <li>ADD + PENDING:   manager extends invitations</li>
	/// <li>SET + CANCELLED: manager rescinds invitations</li>
	/// <li>SET + INACTIVE:  manager/client terminates links</li>
	/// <li>SET + ACTIVE:    client accepts invitations</li>
	/// <li>SET + REFUSED:   client declines invitations</li>
	/// </ul>
	///
	/// In addition to these, active links can also be marked hidden / unhidden.
	/// <ul>
	/// <li> An ACTIVE link can be marked hidden with SET + ACTIVE along with setting the
	/// isHidden bit to true. </li>
	/// <li> An ACTIVE link can be marked unhidden with SET + ACTIVE along with setting the
	/// isHidden bit to false. </li>
	/// </ul>
	///
	/// @param operations the list of operations
	/// @return results for the given operations
	/// @throws ApiException with a {@link ManagedCustomerServiceError}
	/// </summary>
	internal class ManagedCustomerServiceMutateLink : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET, ADD.</span>
		/// </summary>
		public List<LinkOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<LinkOperation>();
					var operationsItem = new LinkOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ManagedCustomerServiceMutateLinkResponse : ISoapable
	{
		public MutateLinkResults Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new MutateLinkResults();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Moves client customers to new managers (moving links). Only the following action is possible:
	///
	/// <ul>
	/// <li>SET + ACTIVE: manager moves client customers to new managers within the same manager
	/// account hierarchy</li>
	/// </ul>
	///
	/// @param operations List of unique operations.
	/// @return results for the given operations
	/// @throws ApiException with a {@link ManagedCustomerServiceError}
	/// </summary>
	internal class ManagedCustomerServiceMutateManager : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: SET.</span>
		/// </summary>
		public List<MoveOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<MoveOperation>();
					var operationsItem = new MoveOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/mcm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ManagedCustomerServiceMutateManagerResponse : ISoapable
	{
		public MutateManagerResults Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new MutateManagerResults();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ManagedCustomerServiceMutateResponse : ISoapable
	{
		public ManagedCustomerReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new ManagedCustomerReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/mcm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class ManagedCustomerServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class ManagedCustomerServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class MediaServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of media that meet the criteria specified by the selector.
	/// <p class="note"><b>Note:</b> {@code MediaService} will not return any
	/// {@link ImageAd} image files.</p>
	///
	/// @param serviceSelector Selects which media objects to return.
	/// @return A list of {@code Media} objects.
	/// </summary>
	internal class MediaServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector ServiceSelector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ServiceSelector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "serviceSelector")
				{
					ServiceSelector = new Selector();
					ServiceSelector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ServiceSelector != null)
			{
				xItem = new XElement(XName.Get("serviceSelector", "https://adwords.google.com/api/adwords/cm/v201609"));
				ServiceSelector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class MediaServiceGetResponse : ISoapable
	{
		public MediaPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new MediaPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of {@link Media} objects that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of {@code Media} objects.
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class MediaServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class MediaServiceQueryResponse : ISoapable
	{
		public MediaPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new MediaPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class MediaServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class MediaServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Uploads new media. Currently, you can upload {@link Image} files and {@link MediaBundle}s.
	///
	/// @param media A list of {@code Media} objects, each containing the data to
	/// be uploaded.
	/// @return A list of uploaded media in the same order as the argument list.
	/// </summary>
	internal class MediaServiceUpload : ISoapable
	{
		public List<Media> Media { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Media = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "media")
				{
					if (Media == null) Media = new List<Media>();
					var mediaItem = new Media();
					mediaItem.ReadFrom(xItem);
					Media.Add(mediaItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Media != null)
			{
				foreach (var mediaItem in Media)
				{
					xItem = new XElement(XName.Get("media", "https://adwords.google.com/api/adwords/cm/v201609"));
					mediaItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class MediaServiceUploadResponse : ISoapable
	{
		public List<Media> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<Media>();
					var rvalItem = new Media();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class OfflineCallConversionFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Reports a call conversion for each entry in {@code operations}.
	///
	/// <p>This bulk operation does not have any transactional guarantees. Some operations can succeed
	/// while others fail.
	///
	/// @param operations A list of offline call conversion feed operations.
	/// @return The list of offline call conversion feed results (in the same order as the operations).
	/// @throws {@link ApiException} if problems occurred while applying offline call conversions.
	/// </summary>
	internal class OfflineCallConversionFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD.</span>
		/// </summary>
		public List<OfflineCallConversionFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<OfflineCallConversionFeedOperation>();
					var operationsItem = new OfflineCallConversionFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class OfflineCallConversionFeedServiceMutateResponse : ISoapable
	{
		public OfflineCallConversionFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new OfflineCallConversionFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class OfflineCallConversionFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class OfflineCallConversionFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class OfflineConversionFeedServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Reports an offline conversion for each entry in {@code operations}.
	/// <p>
	/// This bulk operation does not have any transactional guarantees. Some operations can succeed
	/// while others fail.
	///
	/// @param operations A list of offline conversion feed operations.
	/// @return The list of offline conversion feed results (in the same order as the operations).
	/// @throws {@link ApiException} if problems occurred while applying offline conversions.
	/// </summary>
	internal class OfflineConversionFeedServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD.</span>
		/// </summary>
		public List<OfflineConversionFeedOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<OfflineConversionFeedOperation>();
					var operationsItem = new OfflineConversionFeedOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class OfflineConversionFeedServiceMutateResponse : ISoapable
	{
		public OfflineConversionFeedReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new OfflineConversionFeedReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class OfflineConversionFeedServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class OfflineConversionFeedServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	public class ReportDefinition : ISoapable
	{
		public long? Id { get; set; }
		public Selector Selector { get; set; }
		public string ReportName { get; set; }
		public ReportDefinitionReportType ReportType { get; set; }
		public ReportDefinitionDateRangeType DateRangeType { get; set; }
		public DownloadFormat DownloadFormat { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Id = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "id")
				{
					Id = long.Parse(xItem.Value);
				}
				else if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
				else if (localName == "reportName")
				{
					ReportName = xItem.Value;
				}
				else if (localName == "reportType")
				{
					ReportType = ReportDefinitionReportTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "dateRangeType")
				{
					DateRangeType = ReportDefinitionDateRangeTypeExtensions.Parse(xItem.Value);
				}
				else if (localName == "downloadFormat")
				{
					DownloadFormat = DownloadFormatExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Id != null)
			{
				xItem = new XElement(XName.Get("id", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Id.Value.ToString());
				xE.Add(xItem);
			}
			xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
			Selector.WriteTo(xItem);
			xE.Add(xItem);
			xItem = new XElement(XName.Get("reportName", "https://adwords.google.com/api/adwords/cm/v201609"));
			xItem.Add(ReportName);
			xE.Add(xItem);
			xItem = new XElement(XName.Get("reportType", "https://adwords.google.com/api/adwords/cm/v201609"));
			xItem.Add(ReportType.ToXmlValue());
			xE.Add(xItem);
			xItem = new XElement(XName.Get("dateRangeType", "https://adwords.google.com/api/adwords/cm/v201609"));
			xItem.Add(DateRangeType.ToXmlValue());
			xE.Add(xItem);
			xItem = new XElement(XName.Get("downloadFormat", "https://adwords.google.com/api/adwords/cm/v201609"));
			xItem.Add(DownloadFormat.ToXmlValue());
			xE.Add(xItem);
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class ReportDefinitionServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns the available report fields for a given report type.
	/// When using this method the {@code clientCustomerId} header field is
	/// optional. Callers are discouraged from setting the clientCustomerId
	/// header field in calls to this method as its presence will trigger an
	/// authorization error if the caller does not have access to the customer
	/// with the included ID.
	///
	/// @param reportType The type of report.
	/// @return The list of available report fields. Each
	/// {@link ReportDefinitionField} encapsulates the field name, the
	/// field data type, and the enum values (if the field's type is
	/// {@code enum}).
	/// @throws ApiException if a problem occurred while fetching the
	/// ReportDefinitionField information.
	/// </summary>
	internal class ReportDefinitionServiceGetReportFields : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public ReportDefinitionReportType? ReportType { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ReportType = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "reportType")
				{
					ReportType = ReportDefinitionReportTypeExtensions.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ReportType != null)
			{
				xItem = new XElement(XName.Get("reportType", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ReportType.Value.ToXmlValue());
				xE.Add(xItem);
			}
		}
	}
	internal class ReportDefinitionServiceGetReportFieldsResponse : ISoapable
	{
		public List<ReportDefinitionField> Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					if (Rval == null) Rval = new List<ReportDefinitionField>();
					var rvalItem = new ReportDefinitionField();
					rvalItem.ReadFrom(xItem);
					Rval.Add(rvalItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				foreach (var rvalItem in Rval)
				{
					xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
					rvalItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class ReportDefinitionServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class ReportDefinitionServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class SharedCriterionServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of SharedCriterion that meets the selector criteria.
	///
	/// @param selector filters the criteria returned
	/// @return The list of SharedCriterion
	/// @throws ApiException
	/// </summary>
	internal class SharedCriterionServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedCriterionServiceGetResponse : ISoapable
	{
		public SharedCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Adds, removes criteria in a shared set.
	///
	/// @param operations A list of unique operations
	/// @return The list of updated SharedCriterion, returned in the same order as the
	/// {@code operations} array.
	/// @throws ApiException
	/// </summary>
	internal class SharedCriterionServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
		/// </summary>
		public List<SharedCriterionOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<SharedCriterionOperation>();
					var operationsItem = new SharedCriterionOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class SharedCriterionServiceMutateResponse : ISoapable
	{
		public SharedCriterionReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedCriterionReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of SharedCriterion that match the query.
	///
	/// @param query The SQL-like AWQL query string.
	/// @return A list of SharedCriterion.
	/// @throws ApiException
	/// </summary>
	internal class SharedCriterionServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedCriterionServiceQueryResponse : ISoapable
	{
		public SharedCriterionPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedCriterionPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedCriterionServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class SharedCriterionServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class SharedSetServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a list of SharedSets based on the given selector.
	/// @param selector the selector specifying the query
	/// @return a list of SharedSet entities that meet the criterion specified
	/// by the selector
	/// @throws ApiException
	/// </summary>
	internal class SharedSetServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedSetServiceGetResponse : ISoapable
	{
		public SharedSetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedSetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Applies the list of mutate operations.
	/// @param operations the operations to apply
	/// @return the modified CriterionList entities
	/// @throws ApiException
	/// </summary>
	internal class SharedSetServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<SharedSetOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<SharedSetOperation>();
					var operationsItem = new SharedSetOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class SharedSetServiceMutateResponse : ISoapable
	{
		public SharedSetReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedSetReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns the list of SharedSet entities that match the query.
	///
	/// @param query The SQL-like AWQL query string
	/// @returns A list of SharedSet entities
	/// @throws ApiException when the query is invalid or there are errors processing the request.
	/// </summary>
	internal class SharedSetServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedSetServiceQueryResponse : ISoapable
	{
		public SharedSetPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new SharedSetPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class SharedSetServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class SharedSetServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class TargetingIdeaServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a page of ideas that match the query described by the specified
	/// {@link TargetingIdeaSelector}.
	///
	/// <p>The selector must specify a {@code paging} value, with {@code numberResults} set to 800 or
	/// less.  Large result sets must be composed through multiple calls to this method, advancing the
	/// paging {@code startIndex} value by {@code numberResults} with each call.</p>
	///
	/// @param selector Query describing the types of results to return when
	/// finding matches (similar keyword ideas).
	/// @return A {@link TargetingIdeaPage} of results, that is a subset of the
	/// list of possible ideas meeting the criteria of the
	/// {@link TargetingIdeaSelector}.
	/// @throws ApiException If problems occurred while querying for ideas.
	/// </summary>
	internal class TargetingIdeaServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public TargetingIdeaSelector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new TargetingIdeaSelector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/o/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TargetingIdeaServiceGetResponse : ISoapable
	{
		public TargetingIdeaPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TargetingIdeaPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/o/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TargetingIdeaServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class TargetingIdeaServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class TrafficEstimatorServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/o/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns traffic estimates for specified criteria.
	///
	/// @param selector Campaigns, ad groups and keywords for which traffic
	/// should be estimated.
	/// @return Traffic estimation results.
	/// @throws ApiException if problems occurred while retrieving estimates
	/// </summary>
	internal class TrafficEstimatorServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public TrafficEstimatorSelector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new TrafficEstimatorSelector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/o/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrafficEstimatorServiceGetResponse : ISoapable
	{
		public TrafficEstimatorResult Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrafficEstimatorResult();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/o/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrafficEstimatorServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class TrafficEstimatorServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class TrialAsyncErrorServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncErrors matching the selector.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class TrialAsyncErrorServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialAsyncErrorServiceGetResponse : ISoapable
	{
		public TrialAsyncErrorPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrialAsyncErrorPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncError matching the query.
	///
	/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
	/// while retrieving the results.
	/// </summary>
	internal class TrialAsyncErrorServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialAsyncErrorServiceQueryResponse : ISoapable
	{
		public TrialAsyncErrorPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrialAsyncErrorPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialAsyncErrorServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class TrialAsyncErrorServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// A fault element of type ApiException.
	/// </summary>
	internal class TrialServiceApiExceptionFault : ApplicationException, ISoapable
	{
		/// <summary>
		/// List of errors.
		/// </summary>
		public List<ApiError> Errors { get; set; }
		public override void ReadFrom(XElement xE)
		{
			base.ReadFrom(xE);
			Errors = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "errors")
				{
					if (Errors == null) Errors = new List<ApiError>();
					var errorsItem = InstanceCreator.CreateApiError(xItem);
					errorsItem.ReadFrom(xItem);
					Errors.Add(errorsItem);
				}
			}
		}
		public override void WriteTo(XElement xE)
		{
			base.WriteTo(xE);
			XmlUtility.SetXsiType(xE, "https://adwords.google.com/api/adwords/cm/v201609", "ApiExceptionFault");
			XElement xItem = null;
			if (Errors != null)
			{
				foreach (var errorsItem in Errors)
				{
					xItem = new XElement(XName.Get("errors", "https://adwords.google.com/api/adwords/cm/v201609"));
					errorsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	/// <summary>
	/// Loads a TrialPage containing a list of {@link Trial} objects matching the selector.
	///
	/// @param selector defines which subset of all available trials to return, the sort order, and
	/// which fields to include
	///
	/// @return Returns a page of matching trial objects.
	/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
	/// retrieving the results.
	/// </summary>
	internal class TrialServiceGet : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public Selector Selector { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Selector = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "selector")
				{
					Selector = new Selector();
					Selector.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Selector != null)
			{
				xItem = new XElement(XName.Get("selector", "https://adwords.google.com/api/adwords/cm/v201609"));
				Selector.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialServiceGetResponse : ISoapable
	{
		public TrialPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrialPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Creates new trials, updates properties and controls the life cycle of existing trials.
	/// See {@link TrialService} for details on the trial life cycle.
	///
	/// @return Returns the list of updated Trials, in the same order as the {@code operations} list.
	/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
	/// processing the request.
	/// </summary>
	internal class TrialServiceMutate : ISoapable
	{
		/// <summary>
		/// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
		/// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
		/// <span class="constraint NotEmpty">This field must contain at least one element.</span>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public List<TrialOperation> Operations { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Operations = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "operations")
				{
					if (Operations == null) Operations = new List<TrialOperation>();
					var operationsItem = new TrialOperation();
					operationsItem.ReadFrom(xItem);
					Operations.Add(operationsItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Operations != null)
			{
				foreach (var operationsItem in Operations)
				{
					xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
					operationsItem.WriteTo(xItem);
					xE.Add(xItem);
				}
			}
		}
	}
	internal class TrialServiceMutateResponse : ISoapable
	{
		public TrialReturnValue Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrialReturnValue();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Loads a TrialPage containing a list of {@link Trial} objects matching the query.
	///
	/// @param query defines which subset of all available trials to return, the sort order, and
	/// which fields to include
	///
	/// @return Returns a page of matching trial objects.
	/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
	/// retrieving the results.
	/// </summary>
	internal class TrialServiceQuery : ISoapable
	{
		/// <summary>
		/// <span class="constraint Required">This field is required and should not be {@code null}.</span>
		/// </summary>
		public string Query { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Query = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "query")
				{
					Query = xItem.Value;
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Query != null)
			{
				xItem = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Query);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialServiceQueryResponse : ISoapable
	{
		public TrialPage Rval { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			Rval = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "rval")
				{
					Rval = new TrialPage();
					Rval.ReadFrom(xItem);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (Rval != null)
			{
				xItem = new XElement(XName.Get("rval", "https://adwords.google.com/api/adwords/cm/v201609"));
				Rval.WriteTo(xItem);
				xE.Add(xItem);
			}
		}
	}
	internal class TrialServiceRequestHeader : ISoapable
	{
		/// <summary>
		/// The header identifies the customer id of the client of the AdWords manager, if an AdWords
		/// manager is acting on behalf of their client or the customer id of the advertiser managing their
		/// own account.
		/// </summary>
		public string ClientCustomerId { get; set; }
		/// <summary>
		/// Developer token to identify that the person making the call has enough
		/// quota.
		/// </summary>
		public string DeveloperToken { get; set; }
		/// <summary>
		/// UserAgent is used to track distribution of API client programs and
		/// application usage. The client is responsible for putting in a meaningful
		/// value for tracking purposes. To be clear this is not the same as an HTTP
		/// user agent.
		/// </summary>
		public string UserAgent { get; set; }
		/// <summary>
		/// Used to validate the request without executing it.
		/// </summary>
		public bool? ValidateOnly { get; set; }
		/// <summary>
		/// If true, API will try to commit as many error free operations as possible and
		/// report the other operations' errors.
		///
		/// <p>Ignored for non-mutate calls.
		/// </summary>
		public bool? PartialFailure { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			ClientCustomerId = null;
			DeveloperToken = null;
			UserAgent = null;
			ValidateOnly = null;
			PartialFailure = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "clientCustomerId")
				{
					ClientCustomerId = xItem.Value;
				}
				else if (localName == "developerToken")
				{
					DeveloperToken = xItem.Value;
				}
				else if (localName == "userAgent")
				{
					UserAgent = xItem.Value;
				}
				else if (localName == "validateOnly")
				{
					ValidateOnly = bool.Parse(xItem.Value);
				}
				else if (localName == "partialFailure")
				{
					PartialFailure = bool.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (ClientCustomerId != null)
			{
				xItem = new XElement(XName.Get("clientCustomerId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ClientCustomerId);
				xE.Add(xItem);
			}
			if (DeveloperToken != null)
			{
				xItem = new XElement(XName.Get("developerToken", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(DeveloperToken);
				xE.Add(xItem);
			}
			if (UserAgent != null)
			{
				xItem = new XElement(XName.Get("userAgent", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(UserAgent);
				xE.Add(xItem);
			}
			if (ValidateOnly != null)
			{
				xItem = new XElement(XName.Get("validateOnly", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ValidateOnly.Value.ToString());
				xE.Add(xItem);
			}
			if (PartialFailure != null)
			{
				xItem = new XElement(XName.Get("partialFailure", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(PartialFailure.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	internal class TrialServiceResponseHeader : ISoapable
	{
		/// <summary>
		/// Unique id that identifies this request. If developers have any support issues, sending us
		/// this id will enable us to find their request more easily.
		/// </summary>
		public string RequestId { get; set; }
		/// <summary>
		/// The name of the service being invoked.
		/// </summary>
		public string ServiceName { get; set; }
		/// <summary>
		/// The name of the method being invoked.
		/// </summary>
		public string MethodName { get; set; }
		/// <summary>
		/// Number of operations performed for this SOAP request.
		/// </summary>
		public long? Operations { get; set; }
		/// <summary>
		/// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
		/// response.
		/// </summary>
		public long? ResponseTime { get; set; }
		public virtual void ReadFrom(XElement xE)
		{
			RequestId = null;
			ServiceName = null;
			MethodName = null;
			Operations = null;
			ResponseTime = null;
			foreach (var xItem in xE.Elements())
			{
				var localName = xItem.Name.LocalName;
				if (localName == "requestId")
				{
					RequestId = xItem.Value;
				}
				else if (localName == "serviceName")
				{
					ServiceName = xItem.Value;
				}
				else if (localName == "methodName")
				{
					MethodName = xItem.Value;
				}
				else if (localName == "operations")
				{
					Operations = long.Parse(xItem.Value);
				}
				else if (localName == "responseTime")
				{
					ResponseTime = long.Parse(xItem.Value);
				}
			}
		}
		public virtual void WriteTo(XElement xE)
		{
			XElement xItem = null;
			if (RequestId != null)
			{
				xItem = new XElement(XName.Get("requestId", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(RequestId);
				xE.Add(xItem);
			}
			if (ServiceName != null)
			{
				xItem = new XElement(XName.Get("serviceName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ServiceName);
				xE.Add(xItem);
			}
			if (MethodName != null)
			{
				xItem = new XElement(XName.Get("methodName", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(MethodName);
				xE.Add(xItem);
			}
			if (Operations != null)
			{
				xItem = new XElement(XName.Get("operations", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(Operations.Value.ToString());
				xE.Add(xItem);
			}
			if (ResponseTime != null)
			{
				xItem = new XElement(XName.Get("responseTime", "https://adwords.google.com/api/adwords/cm/v201609"));
				xItem.Add(ResponseTime.Value.ToString());
				xE.Add(xItem);
			}
		}
	}
	/// <summary>
	/// Service for creating, editing, and deleting labels that can be applied to managed customers.
	///
	/// <p>Labels created by a manager are not accessible to any customers managed
	/// by this manager.  Only manager customers may create these labels.
	///
	/// <p>Note that label access works a little differently in the API than it does in the
	/// AdWords UI.  In the UI, a manager will never see a submanager's labels, and will always
	/// be using his own labels regardless of which managed account he is viewing.  In this API,
	/// like other API services, if you specify a submanager as the effective account for the API
	/// request, then the request will operate on the submanager's labels.
	///
	/// <p>To apply a label to a managed customer, see {@link ManagedCustomerService#mutateLabel}.
	/// </summary>
	public interface IAccountLabelService
	{
		/// <summary>
		/// Returns a list of labels specified by the selector for the authenticated user.
		///
		/// @param selector filters the list of labels to return
		/// @return response containing lists of labels that meet all the criteria of the selector
		/// @throws ApiException if a problem occurs fetching the information requested
		/// </summary>
		Task<AccountLabelPage> GetAsync(Selector Selector);
		/// <summary>
		/// Possible actions:
		/// <ul>
		/// <li> Create a new label - create a new {@link Label} and call mutate with ADD operator
		/// <li> Edit the label name - set the appropriate fields in your {@linkplain Label} and call
		/// mutate with the SET operator. Null fields will be interpreted to mean "no change"
		/// <li> Delete the label - call mutate with REMOVE operator
		/// </ul>
		///
		/// @param operations list of unique operations to be executed in a single transaction, in the
		/// order specified.
		/// @return the mutated labels, in the same order that they were in as the parameter
		/// @throws ApiException if problems occurs while modifying label information
		/// </summary>
		Task<AccountLabelReturnValue> MutateAsync(IEnumerable<AccountLabelOperation> Operations);
	}
	/// <summary>
	/// Service used to get and mutate Feeds that contain ad customizer data.
	///
	/// <p>This service is a convenience for creating and modifying ad customizer Feeds, but such Feeds
	/// can also be managed using a combination of the Feed, FeedMapping, and CustomerFeed services.
	/// </summary>
	public interface IAdCustomizerFeedService
	{
		/// <summary>
		/// Returns a list of AdCustomizerFeeds that meet the selector criteria.
		///
		/// @param selector Determines which AdCustomizerFeeds to return. If empty, all AdCustomizerFeeds
		/// are returned.
		/// @return The list of AdCustomizerFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdCustomizerFeedPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, removes, or modifies AdCustomizerFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting AdCustomizerFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdCustomizerFeedReturnValue> MutateAsync(IEnumerable<AdCustomizerFeedOperation> Operations);
	}
	/// <summary>
	/// Use this service to manage ads. Available ad types are subclasses of the base {@link Ad} type and
	/// are shown in the {@link AdGroupAd#ad AdGroupAd.ad} documentation. Here are some of the commonly
	/// used ad types:
	///
	/// <dl>
	/// <dt>{@linkplain ExpandedTextAd Expanded Text Ad}
	/// <dd>The primary ad type used on the search network. An expanded text ad contains two headlines,
	/// a single description line, a final url, and optional path fields.
	/// <dt>{@linkplain ImageAd Image Ad}
	/// <dd>A standard image ad.
	/// <dt>{@linkplain TemplateAd Template Ad} (<span class="deem">AdWords Display Ad Builder</span>)
	/// <dd>A flexible ad type that supports various <a
	/// href="/adwords/api/docs/appendix/templateads">Template Ad formats</a>.
	/// </dl>
	/// </summary>
	public interface IAdGroupAdService
	{
		/// <summary>
		/// Returns a list of AdGroupAds.
		/// AdGroupAds that had been removed are not returned by default.
		///
		/// @param serviceSelector The selector specifying the {@link AdGroupAd}s to return.
		/// @return The page containing the AdGroupAds that meet the criteria specified by the selector.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<AdGroupAdPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Applies the list of mutate operations (ie. add, set, remove):
		/// <p>Add - Creates a new {@linkplain AdGroupAd ad group ad}. The
		/// {@code adGroupId} must
		/// reference an existing ad group. The child {@code Ad} must be sufficiently
		/// specified by constructing a concrete ad type (such as {@code TextAd})
		/// and setting its fields accordingly.</p>
		/// <p>Set - Updates an ad group ad. Except for {@code status},
		/// ad group ad fields are not mutable. Status updates are
		/// straightforward - the status of the ad group ad is updated as
		/// specified. If any other field has changed, it will be ignored. If
		/// you want to change any of the fields other than status, you must
		/// make a new ad and then remove the old one.</p>
		/// <p>Remove - Removes the link between the specified AdGroup and
		/// Ad.</p>
		/// @param operations The operations to apply.
		/// @return A list of AdGroupAds where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add/set operation, the return AdGroupAd will be what is saved to the db.
		/// In the case of the remove operation, the return AdGroupAd will simply be
		/// an AdGroupAd containing an Ad with the id set to the Ad being removed from
		/// the AdGroup.
		/// </summary>
		Task<AdGroupAdReturnValue> MutateAsync(IEnumerable<AdGroupAdOperation> Operations);
		/// <summary>
		/// Adds labels to the AdGroupAd or removes labels from the AdGroupAd.
		/// <p>Add - Apply an existing label to an existing {@linkplain AdGroupAd ad group ad}. The
		/// {@code adGroupId} and {@code adId} must reference an existing
		/// {@linkplain AdGroupAd ad group ad}. The {@code labelId} must reference an existing
		/// {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified {@linkplain AdGroupAd ad group ad} and
		/// {@linkplain Label label}.
		/// @param operations The operations to apply.
		/// @return A list of AdGroupAdLabel where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupAdLabel contains the AdGroupId, AdId and the LabelId.
		/// In the case of a remove operation, the returned AdGroupAdLabel will only have AdGroupId and
		/// AdId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<AdGroupAdLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupAdLabelOperation> Operations);
		/// <summary>
		/// Returns a list of AdGroupAds based on the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of AdGroupAds.
		/// @throws ApiException if problems occur while parsing the query or fetching AdGroupAds.
		/// </summary>
		Task<AdGroupAdPage> QueryAsync(string Query);
		/// <summary>
		/// Upgrades the url for a set of ads.
		/// @param operations The list of upgrades to apply.
		/// @return The list of Ads that were upgraded.
		/// </summary>
		Task<IEnumerable<Ad>> UpgradeUrlAsync(IEnumerable<AdUrlUpgrade> Operations);
	}
	/// <summary>
	/// Service used to manage campaign criterion bid overrides at the ad group level.
	/// Currently supports platform (mobile) bid multiplier overrides only.
	/// </summary>
	public interface IAdGroupBidModifierService
	{
		/// <summary>
		/// Gets ad group level criterion bid modifiers.
		///
		/// @param selector The selector specifying the {@link AdGroupBidModifier}s to return.
		/// @return A list of ad group bid modifiers.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<AdGroupBidModifierPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, removes or updates ad group bid modifier overrides.
		///
		/// @param operations The operations to apply.
		/// @return The added ad group bid modifier overrides.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<AdGroupBidModifierReturnValue> MutateAsync(IEnumerable<AdGroupBidModifierOperation> Operations);
		/// <summary>
		/// Returns a list of {@link AdGroupBidModifier}s that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<AdGroupBidModifierPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage criteria (such as {@linkplain Keyword keywords} or
	/// {@linkplain Placement placements}). A criterion describes the conditions that
	/// determine if an ad should display. Two classes of criteria are available:
	/// <ul>
	/// <li>A {@linkplain BiddableAdGroupCriterion biddable criterion} defines
	/// conditions that will cause the parent ad group's ads to display. A biddable
	/// criterion can also specify a bid amount that overrides the parent ad group's
	/// default bid.</li>
	/// <li>A {@linkplain NegativeAdGroupCriterion negative criterion} defines
	/// conditions that will prevent the parent ad group's ads from displaying.</li>
	/// </ul>
	/// </summary>
	public interface IAdGroupCriterionService
	{
		/// <summary>
		/// Gets adgroup criteria.
		///
		/// @param serviceSelector filters the adgroup criteria to be returned.
		/// @return a page (subset) view of the criteria selected
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		Task<AdGroupCriterionPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Adds, removes or updates adgroup criteria.
		///
		/// @param operations operations to do
		/// during checks on keywords to be added.
		/// @return added and updated adgroup criteria (without optional parts)
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		Task<AdGroupCriterionReturnValue> MutateAsync(IEnumerable<AdGroupCriterionOperation> Operations);
		/// <summary>
		/// Adds labels to the AdGroupCriterion or removes labels from the AdGroupCriterion
		/// <p>Add - Apply an existing label to an existing
		/// {@linkplain AdGroupCriterion ad group criterion}. The {@code adGroupId} and
		/// {@code criterionId}
		/// must reference an existing {@linkplain AdGroupCriterion ad group criterion}. The
		/// {@code labelId} must reference an existing {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified
		/// {@linkplain AdGroupCriterion ad group criterion} and {@linkplain Label label}.</p>
		/// @param operations the operations to apply
		/// @return a list of AdGroupCriterionLabel where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupCriterionLabel contains the AdGroupId, CriterionId and the
		/// LabelId. In the case of a remove operation, the returned AdGroupCriterionLabel will only have
		/// AdGroupId and CriterionId.
		/// @throws ApiException when there are one or more errors with the request
		/// </summary>
		Task<AdGroupCriterionLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupCriterionLabelOperation> Operations);
		/// <summary>
		/// Returns the list of AdGroupCriterion that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of AdGroupCriterion
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<AdGroupCriterionPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage extensions at the adgroup level. The extensions are managed by AdWords
	/// using existing feed services, including creating and modifying feeds, feed items, and adgroup
	/// feeds for the user.
	/// </summary>
	public interface IAdGroupExtensionSettingService
	{
		/// <summary>
		/// Returns a list of AdGroupExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which AdGroupExtensionSettings to return. If empty, all
		/// AdGroupExtensionSettings are returned.
		/// @return The list of AdGroupExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdGroupExtensionSettingPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation on an ad group with an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation on an ad group with no
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link AdGroupExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link AdGroupExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdGroupExtensionSettingReturnValue> MutateAsync(IEnumerable<AdGroupExtensionSettingOperation> Operations);
		/// <summary>
		/// Returns a list of AdGroupExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of AdGroupExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdGroupExtensionSettingPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage adgroup feed links, and matching functions.
	/// </summary>
	public interface IAdGroupFeedService
	{
		/// <summary>
		/// Returns a list of AdGroupFeeds that meet the selector criteria.
		///
		/// @param selector Determines which AdGroupFeeds to return. If empty all
		/// adgroup feeds are returned.
		/// @return The list of AdgroupFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdGroupFeedPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, updates or removes AdGroupFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<AdGroupFeedReturnValue> MutateAsync(IEnumerable<AdGroupFeedOperation> Operations);
		/// <summary>
		/// Returns the list of AdGroupFeeds that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @returns A list of AdGroupFeed.
		/// @throws ApiException if problems occur while parsing the query or fetching AdGroupFeed.
		/// </summary>
		Task<AdGroupFeedPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage ad groups. An {@linkplain AdGroup ad group}
	/// organizes a set of ads and criteria together, and also provides the
	/// {@linkplain AdGroup#bids default bid} for its criteria. One or more ad groups
	/// belong to a campaign.
	/// </summary>
	public interface IAdGroupService
	{
		/// <summary>
		/// Returns a list of all the ad groups specified by the selector
		/// from the target customer's account.
		///
		/// @param serviceSelector The selector specifying the {@link AdGroup}s to return.
		/// @return List of adgroups identified by the selector.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<AdGroupPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Adds, updates, or removes ad groups.
		/// <p class="note"><b>Note:</b> {@link AdGroupOperation} does not support the
		/// {@code REMOVE} operator. To remove an ad group, set its
		/// {@link AdGroup#status status} to {@code REMOVED}.</p>
		///
		/// @param operations List of unique operations. The same ad group cannot be
		/// specified in more than one operation.
		/// @return The updated adgroups.
		/// </summary>
		Task<AdGroupReturnValue> MutateAsync(IEnumerable<AdGroupOperation> Operations);
		/// <summary>
		/// Adds labels to the {@linkplain AdGroup ad group} or removes {@linkplain Label label}s from the
		/// {@linkplain AdGroup ad group}.
		/// <p>{@code ADD} -- Apply an existing label to an existing {@linkplain AdGroup ad group}.
		/// The {@code adGroupId} must reference an existing {@linkplain AdGroup ad group}. The
		/// {@code labelId} must reference an existing {@linkplain Label label}.
		/// <p>{@code REMOVE} -- Removes the link between the specified {@linkplain AdGroup ad group}
		/// and a {@linkplain Label label}.</p>
		///
		/// @param operations the operations to apply.
		/// @return a list of {@linkplain AdGroupLabel}s where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupLabel contains the AdGroupId and the LabelId.
		/// In the case of a remove operation, the returned AdGroupLabel will only have AdGroupId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<AdGroupLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupLabelOperation> Operations);
		/// <summary>
		/// Returns the list of ad groups that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @return A list of adgroups
		/// @throws ApiException
		/// </summary>
		Task<AdGroupPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage ad parameters, which let you quickly update
	/// parameterized values (such as prices or inventory levels) in a text ad.
	/// Whereas updates to regular ad text can take hours to go live, updates to
	/// parameterized values go live in minutes.
	///
	/// <p>To define where parameterized values appear in an ad, you insert
	/// <code>{param#:<var>default-value</var>}</code> tags in your ad text. You
	/// can use these tags in any line of display text, and also in the
	/// destination URL. When the text ad is displayed, values in these tags are
	/// replaced by the ad parameter's {@linkplain AdParam#insertionText
	/// insertion text}. <code>default-value</code> specifies the string to display
	/// if one of the following conditions is true:</p>
	/// <ul>
	/// <li>The parameter has not been set.</li>
	/// <li>The parameter's insertion text is too long for the display line.</li>
	/// <li>The ad is being shown on the
	/// {@linkplain NetworkTarget#networkCoverageType Google Display Network}.</li>
	/// </ul>
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public interface IAdParamService
	{
		/// <summary>
		/// Returns the ad parameters that match the criteria specified in the
		/// selector.
		///
		/// @param serviceSelector Specifies which ad parameters to return.
		/// @return A list of ad parameters.
		/// </summary>
		Task<AdParamPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Sets and removes ad parameters.
		/// <p class="note"><b>Note:</b> {@code ADD} is not supported. Use {@code SET}
		/// for new ad parameters.</p>
		///
		/// <ul class="nolist">
		/// <li>{@code SET}: Creates or updates an ad parameter, setting the new
		/// parameterized value for the given ad group / keyword pair.
		/// <li>{@code REMOVE}: Removes an ad parameter. The <code><var>default-value</var>
		/// </code> specified in the ad text will be used.</li>
		/// </ul>
		///
		/// @param operations The operations to perform.
		/// @return A list of ad parameters, where each entry in the list is the
		/// result of applying the operation in the input list with the same index.
		/// For a {@code SET} operation, the returned ad parameter will contain the
		/// updated values. For a {@code REMOVE} operation, the returned ad parameter
		/// will simply be the ad parameter that was removed.
		/// </summary>
		Task<IEnumerable<AdParam>> MutateAsync(IEnumerable<AdParamOperation> Operations);
	}
	/// <summary>
	/// Service which is used to manage user lists.
	/// </summary>
	public interface IAdwordsUserListService
	{
		/// <summary>
		/// Returns the list of user lists that meet the selector criteria.
		///
		/// @param serviceSelector the selector specifying the {@link UserList}s to return.
		/// @return a list of UserList entities which meet the selector criteria.
		/// @throws ApiException if problems occurred while fetching UserList information.
		/// </summary>
		Task<UserListPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Applies a list of mutate operations (i.e. add, set):
		///
		/// Add - creates a set of user lists
		/// Set - updates a set of user lists
		/// Remove - not supported
		///
		/// @param operations the operations to apply
		/// @return a list of UserList objects
		/// </summary>
		Task<UserListReturnValue> MutateAsync(IEnumerable<UserListOperation> Operations);
		/// <summary>
		/// Mutate members of user lists by either adding or removing their lists of members.
		/// The following {@link Operator}s are supported: ADD and REMOVE.
		///
		/// <p>Note that operations cannot have same user list id but different operators.
		///
		/// @param operations the mutate members operations to apply
		/// @return a list of UserList objects
		/// @throws ApiException when there are one or more errors with the request
		/// </summary>
		Task<MutateMembersReturnValue> MutateMembersAsync(IEnumerable<MutateMembersOperation> Operations);
		/// <summary>
		/// Returns the list of user lists that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @return A list of UserList
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<UserListPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use the {@code BatchJobService} to schedule large batches of updates to
	/// your AdWords campaigns as asynchronous mutate jobs, and to retrieve the
	/// status, results or statistics of your recent jobs.
	///
	/// <p>Use this service when you wish to release your application from actively
	/// waiting on a synchronous response. Your application can do other things or
	/// even shutdown while we execute mutations asynchronously.
	///
	/// <p>Once a job has been submitted, you may check its status periodically, by
	/// calling {@link #get}.
	///
	/// <p class="caution"><b>Caution:</b> Do not poll the job status too frequently
	/// or you will risk getting your customer rate-limited.
	///
	/// <p>Once a job's status changes to {@code DONE}, you can retrieve the job's
	/// results.
	/// </summary>
	public interface IBatchJobService
	{
		/// <summary>
		/// Query the status of existing {@code BatchJob}s.
		///
		/// @param selector The selector specifying the {@code BatchJob}s to return.
		/// @return The list of selected jobs.
		/// @throws ApiException
		/// </summary>
		Task<BatchJobPage> GetAsync(Selector Selector);
		/// <summary>
		/// Creates or updates a {@code BatchJob}.
		///
		/// <p class="note"><b>Note:</b> {@link BatchJobOperation} does not support the
		/// {@code REMOVE} operator. It is not necessary to remove BatchJobs.
		///
		/// @param operations A list of operations.
		/// @return The list of created or updated jobs.
		/// @throws ApiException
		/// </summary>
		Task<BatchJobReturnValue> MutateAsync(IEnumerable<BatchJobOperation> Operations);
		/// <summary>
		/// Returns the list of {@code BatchJob}s that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of selected jobs.
		/// @throws ApiException if problems occur while parsing the query or fetching
		/// batchjob information.
		/// </summary>
		Task<BatchJobPage> QueryAsync(string Query);
	}
	/// <summary>
	/// BiddingStrategy Service to get/mutate bidding strategies.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public interface IBiddingStrategyService
	{
		/// <summary>
		/// Returns a list of bidding strategies that match the selector.
		///
		/// @return list of bidding strategies specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		Task<BiddingStrategyPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations the operations to apply
		/// @return the modified list of BiddingStrategy
		/// @throws ApiException
		/// </summary>
		Task<BiddingStrategyReturnValue> MutateAsync(IEnumerable<BiddingStrategyOperation> Operations);
		/// <summary>
		/// Returns a list of bidding strategies that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<BiddingStrategyPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service for managing {@link BudgetOrder}s.
	/// <p class="note"><b>Note:</b> This service is available only
	/// on a whitelist basis.</p>
	/// <p class="warning"><b>Warning:</b> The <code>BudgetOrderService</code>
	/// is limited to one operation per mutate request. Any attempt to make
	/// more than one operation will result in an <code>ApiException</code>.</p>
	/// </summary>
	public interface IBudgetOrderService
	{
		/// <summary>
		/// Gets a list of {@link BudgetOrder}s using the generic selector.
		/// @param serviceSelector specifies which BudgetOrder to return.
		/// @return A {@link BudgetOrderPage} of BudgetOrders of the client customer.
		/// All BudgetOrder fields are returned. Stats are not yet supported.
		/// @throws ApiException
		/// </summary>
		Task<BudgetOrderPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns all the open/active BillingAccounts associated with the current
		/// manager.
		/// @return A list of {@link BillingAccount}s.
		/// @throws ApiException
		/// </summary>
		Task<IEnumerable<BillingAccount>> GetBillingAccountsAsync();
		/// <summary>
		/// Mutates BudgetOrders, supported operations are:
		/// <p><code>ADD</code>: Adds a {@link BudgetOrder} to the billing account
		/// specified by the billing account ID.</p>
		/// <p><code>SET</code>: Sets the start/end date and amount of the
		/// {@link BudgetOrder}.</p>
		/// <p><code>REMOVE</code>: Cancels the {@link BudgetOrder} (status change).</p>
		/// <p class="warning"><b>Warning:</b> The <code>BudgetOrderService</code>
		/// is limited to one operation per mutate request. Any attempt to make more
		/// than one operation will result in an <code>ApiException</code>.</p>
		/// @param operations A list of operations, <b>however currently we only
		/// support one operation per mutate call</b>.
		/// @return BudgetOrders affected by the mutate operation.
		/// @throws ApiException
		/// </summary>
		Task<BudgetOrderReturnValue> MutateAsync(IEnumerable<BudgetOrderOperation> Operations);
	}
	/// <summary>
	/// Budget Service to get/mutate budgets.
	/// </summary>
	public interface IBudgetService
	{
		/// <summary>
		/// Returns a list of budgets that match the selector.
		///
		/// @return List of budgets specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		Task<BudgetPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations The operations to apply.
		/// @return The modified list of Budgets, returned in the same order as <code>operations</code>.
		/// @throws ApiException
		/// </summary>
		Task<BudgetReturnValue> MutateAsync(IEnumerable<BudgetOperation> Operations);
		/// <summary>
		/// Returns the list of budgets that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of Budget
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<BudgetPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage campaign-level criteria.
	///
	/// <p>A campaign-level negative criterion prevents the campaign's ads from
	/// showing on specific placements, specific keywords, demographics, and so on.</p>
	///
	/// <p>Additionally, the service can be used to target criteria such as
	/// {@linkplain Criterion.Type#LOCATION location}, {@linkplain Criterion.Type#LANGUAGE language},
	/// {@linkplain Criterion.Type#CARRIER carrier}, {@linkplain Criterion.Type#PLATFORM platform}, and
	/// so on. The targeting criteria can be added using the Criterion Id listed in the
	/// <a href="/adwords/api/docs/appendix/platforms">documentation</a>.</p>
	/// </summary>
	public interface ICampaignCriterionService
	{
		/// <summary>
		/// Gets campaign criteria.
		///
		/// @param serviceSelector The selector specifying the {@link CampaignCriterion}s to return.
		/// @return A list of campaign criteria.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<CampaignCriterionPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Adds, removes or updates campaign criteria.
		///
		/// @param operations The operations to apply.
		/// @return The added campaign criteria (without any optional parts).
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<CampaignCriterionReturnValue> MutateAsync(IEnumerable<CampaignCriterionOperation> Operations);
		/// <summary>
		/// Returns the list of campaign criteria that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of campaign criteria.
		/// @throws ApiException if problems occur while parsing the query or fetching campaign criteria.
		/// </summary>
		Task<CampaignCriterionPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage extensions at the campaign level. The extensions are managed by AdWords
	/// using existing feed services, including creating and modifying feeds, feed items, and campaign
	/// feeds for the user.
	/// </summary>
	public interface ICampaignExtensionSettingService
	{
		/// <summary>
		/// Returns a list of CampaignExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which CampaignExtensionSettings to return. If empty, all
		/// CampaignExtensionSettings are returned.
		/// @return The list of CampaignExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CampaignExtensionSettingPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation on a campaign with an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation on a campaign with no
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link CampaignExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link CampaignExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CampaignExtensionSettingReturnValue> MutateAsync(IEnumerable<CampaignExtensionSettingOperation> Operations);
		/// <summary>
		/// Returns a list of CampaignExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of CampaignExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CampaignExtensionSettingPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage campaign feed links, and matching functions.
	/// </summary>
	public interface ICampaignFeedService
	{
		/// <summary>
		/// Returns a list of CampaignFeeds that meet the selector criteria.
		///
		/// @param selector Determines which CampaignFeeds to return. If empty all
		/// Campaign feeds are returned.
		/// @return The list of CampaignFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CampaignFeedPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, sets or removes CampaignFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CampaignFeedReturnValue> MutateAsync(IEnumerable<CampaignFeedOperation> Operations);
		/// <summary>
		/// Returns a list of {@link CampaignFeed}s inside a {@link CampaignFeedPage} that matches
		/// the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<CampaignFeedPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage campaigns. A {@linkplain Campaign campaign}
	/// organizes one or more ad groups together and has its own budget, bidding
	/// strategy, serving date range, and targeting settings (managed using
	/// {@link CampaignCriterionService}). You can also set campaign-wide ad
	/// extensions using {@link CampaignExtensionSettingService}.
	///
	/// <p><b>Note:</b> CampaignService does not support video campaigns.</p>
	/// </summary>
	public interface ICampaignService
	{
		/// <summary>
		/// Returns the list of campaigns that meet the selector criteria.
		///
		/// @param serviceSelector the selector specifying the {@link Campaign}s to return.
		/// @return A list of campaigns.
		/// @throws ApiException if problems occurred while fetching campaign information.
		/// </summary>
		Task<CampaignPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Adds, updates, or removes campaigns.
		/// <p class="note"><b>Note:</b> {@link CampaignOperation} does not support the
		/// <code>REMOVE</code> operator. To remove a campaign, set its
		/// {@link Campaign#status status} to {@code REMOVED}.</p>
		/// @param operations A list of unique operations.
		/// The same campaign cannot be specified in more than one operation.
		/// @return The list of updated campaigns, returned in the same order as the
		/// <code>operations</code> array.
		/// @throws ApiException if problems occurred while updating campaign information.
		/// </summary>
		Task<CampaignReturnValue> MutateAsync(IEnumerable<CampaignOperation> Operations);
		/// <summary>
		/// Adds labels to the {@linkplain Campaign campaign} or removes {@linkplain Label label}s from the
		/// {@linkplain Campaign campaign}.
		/// <p>Add - Apply an existing label to an existing {@linkplain Campaign campaign}. The
		/// {@code campaignId} must reference an existing {@linkplain Campaign}. The {@code labelId} must
		/// reference an existing {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified {@linkplain Campaign campaign} and
		/// {@linkplain Label label}.
		///
		/// @param operations the operations to apply.
		/// @return a list of {@linkplain CampaignLabel}s where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned CampaignLabel contains the CampaignId and the LabelId.
		/// In the case of a remove operation, the returned CampaignLabel will only have CampaignId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		Task<CampaignLabelReturnValue> MutateLabelAsync(IEnumerable<CampaignLabelOperation> Operations);
		/// <summary>
		/// Returns the list of campaigns that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of campaigns.
		/// @throws ApiException if problems occur while parsing the query or fetching campaign
		/// information.
		/// </summary>
		Task<CampaignPage> QueryAsync(string Query);
	}
	/// <summary>
	/// This service is used for managing associations between {@code SharedSet} entities
	/// and {@code Campaign} entities.
	/// </summary>
	public interface ICampaignSharedSetService
	{
		/// <summary>
		/// Returns a list of CampaignSharedSets based on the given selector.
		/// @param selector the selector specifying the query
		/// @return a list of CampaignSharedSet entities that meet the criterion specified
		/// by the selector
		/// @throws ApiException
		/// </summary>
		Task<CampaignSharedSetPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations.
		/// @param operations the operations to apply
		/// @return the modified list of CampaignSharedSet associations
		/// @throws ApiException
		/// </summary>
		Task<CampaignSharedSetReturnValue> MutateAsync(IEnumerable<CampaignSharedSetOperation> Operations);
		/// <summary>
		/// Returns the list of CampaignSharedSets that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of CampaignSharedSets
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<CampaignSharedSetPage> QueryAsync(string Query);
	}
	/// <summary>
	/// A service to return constant data.
	/// </summary>
	public interface IConstantDataService
	{
		/// <summary>
		/// Returns a list of all age range criteria.
		///
		/// @return A list of age ranges.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<AgeRange>> GetAgeRangeCriterionAsync();
		/// <summary>
		/// Returns a list of all carrier criteria.
		///
		/// @return A list of carriers.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<Carrier>> GetCarrierCriterionAsync();
		/// <summary>
		/// Returns a list of all gender criteria.
		///
		/// @return A list of genders.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<Gender>> GetGenderCriterionAsync();
		/// <summary>
		/// Returns a list of all language criteria.
		///
		/// @return A list of languages.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<Language>> GetLanguageCriterionAsync();
		/// <summary>
		/// Returns a list of all mobile app category criteria.
		///
		/// @return A list of mobile app categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<MobileAppCategory>> GetMobileAppCategoryCriterionAsync();
		/// <summary>
		/// Returns a list of all mobile devices.
		///
		/// @return A list of mobile devices.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<MobileDevice>> GetMobileDeviceCriterionAsync();
		/// <summary>
		/// Returns a list of all operating system version criteria.
		///
		/// @return A list of operating system versions.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<OperatingSystemVersion>> GetOperatingSystemVersionCriterionAsync();
		/// <summary>
		/// Returns a list of shopping bidding categories.
		///
		/// A country predicate must be included in the selector, only {@link Predicate.Operator#EQUALS}
		/// and {@link Predicate.Operator#IN} with a single value are supported in the country predicate.
		/// An empty parentDimensionType predicate will filter for root categories.
		///
		/// @return A list of shopping bidding categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<ProductBiddingCategoryData>> GetProductBiddingCategoryDataAsync(Selector Selector);
		/// <summary>
		/// Returns a list of user interests.
		///
		/// @param userInterestTaxonomyType The type of taxonomy to use when requesting user interests.
		/// @return A list of user interests.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<CriterionUserInterest>> GetUserInterestCriterionAsync(ConstantDataServiceUserInterestTaxonomyType? UserInterestTaxonomyType);
		/// <summary>
		/// Returns a list of content verticals.
		///
		/// @return A list of verticals.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<Vertical>> GetVerticalCriterionAsync();
	}
	/// <summary>
	/// Use this service to manage conversion trackers. A conversion tracker provides
	/// a snippet of code which records every time a user visits a page that contains
	/// it. The data this provides can be used to gauge the effectiveness of your ads
	/// and keywords.
	/// </summary>
	public interface IConversionTrackerService
	{
		/// <summary>
		/// Returns a list of the conversion trackers that match the selector. The
		/// actual objects contained in the page's list of entries will be specific
		/// subclasses of the abstract {@link ConversionTracker} class.
		///
		/// @param serviceSelector The selector specifying the
		/// {@link ConversionTracker}s to return.
		/// @return List of conversion trackers specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		Task<ConversionTrackerPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Applies the list of mutate operations such as adding or updating conversion trackers.
		/// <p class="note"><b>Note:</b> {@link ConversionTrackerOperation} does not support the
		/// <code>REMOVE</code> operator. In order to 'disable' a conversion type, send a
		/// <code>SET</code> operation for the conversion tracker with the <code>status</code>
		/// property set to <code>DISABLED</code></p>
		///
		/// <p>You can mutate any ConversionTracker that belongs to your account. You may not
		/// mutate a ConversionTracker that belongs to some other account. You may not directly
		/// mutate a system-defined ConversionTracker, but you can create a mutable copy of it
		/// in your account by sending a mutate request with an ADD operation specifying
		/// an originalConversionTypeId matching a system-defined conversion tracker's ID. That new
		/// ADDed ConversionTracker will inherit the statistics and properties
		/// of the system-defined type, but will be editable as usual.</p>
		///
		/// @param operations A list of mutate operations to perform.
		/// @return The list of the conversion trackers as they appear after mutation,
		/// in the same order as they appeared in the list of operations.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while updating the data.
		/// </summary>
		Task<ConversionTrackerReturnValue> MutateAsync(IEnumerable<ConversionTrackerOperation> Operations);
		/// <summary>
		/// Returns a list of conversion trackers that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of conversion trackers.
		/// @throws ApiException if problems occur while parsing the query or fetching conversion trackers.
		/// </summary>
		Task<ConversionTrackerPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage extensions at the customer level. The extensions are managed by AdWords
	/// using existing feed services, including creating and modifying feeds, feed items, and customer
	/// feeds for the user.
	/// </summary>
	public interface ICustomerExtensionSettingService
	{
		/// <summary>
		/// Returns a list of CustomerExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which CustomerExtensionSettings to return. If empty, all
		/// CustomerExtensionSettings are returned.
		/// @return The list of CustomerExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CustomerExtensionSettingPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation when there is an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation when there is no existing
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link CustomerExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link CustomerExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CustomerExtensionSettingReturnValue> MutateAsync(IEnumerable<CustomerExtensionSettingOperation> Operations);
		/// <summary>
		/// Returns a list of CustomerExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of CustomerExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CustomerExtensionSettingPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to manage customer feed links, and matching functions.
	/// </summary>
	public interface ICustomerFeedService
	{
		/// <summary>
		/// Returns a list of customer feeds that meet the selector criteria.
		///
		/// @param selector Determines which customer feeds to return. If empty, all
		/// customer feeds are returned.
		/// @return The list of customer feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CustomerFeedPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, sets, or removes customer feeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<CustomerFeedReturnValue> MutateAsync(IEnumerable<CustomerFeedOperation> Operations);
		/// <summary>
		/// Returns the list of customer feeds that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of CustomerFeed.
		/// @throws ApiException If problems occur while parsing the query or fetching CustomerFeed.
		/// </summary>
		Task<CustomerFeedPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service to access basic details about any customer.
	/// </summary>
	public interface ICustomerService
	{
		/// <summary>
		/// Returns details of all the customers directly accessible by the user authenticating the call.
		/// <p>
		/// Starting with v201607, if {@code clientCustomerId} is specified in the request header,
		/// only details of that customer will be returned. To do this for prior versions, use the
		/// {@code get()} method instead.
		/// </summary>
		Task<IEnumerable<Customer>> GetCustomersAsync();
		/// <summary>
		/// Retrieves the list of service links for the authorized customer.
		/// See {@link ServiceType} for information on the various linking types supported.
		///
		/// @param selector describing which links to retrieve
		/// @throws ApiException
		/// </summary>
		Task<IEnumerable<ServiceLink>> GetServiceLinksAsync(Selector Selector);
		/// <summary>
		/// Update the authorized customer.
		///
		/// <p>While there are a limited set of properties available to update, please read this
		/// <a href="https://support.google.com/analytics/answer/1033981">help center article
		/// on auto-tagging</a> before updating {@code customer.autoTaggingEnabled}.
		///
		/// @param customer the requested updated value for the customer.
		/// @throws ApiException
		/// </summary>
		Task<Customer> MutateAsync(Customer Customer);
		/// <summary>
		/// Modifies links to other services for the authorized customer.
		/// See {@link ServiceType} for information on the various linking types supported.
		///
		/// @param operations to perform
		/// @throws ApiException
		/// </summary>
		Task<IEnumerable<ServiceLink>> MutateServiceLinksAsync(IEnumerable<ServiceLinkOperation> Operations);
	}
	/// <summary>
	/// Use this service to retrieve the changed entities for a customer account or campaign based on the
	/// given date range.
	///
	/// <p class="note"><b>Note:</b> There will be some delay in changes becoming visible to this
	/// service; thus, use {@code lastChangeTimestamp} from the response to determine the validity period
	/// for the data.
	///
	/// <p class="note"><b>Note:</b> CustomerSyncService only supports queries for dates within the last
	/// 90 days.
	/// </summary>
	public interface ICustomerSyncService
	{
		/// <summary>
		/// Returns information about changed entities inside a customer's account.
		///
		/// @param selector Specifies the filter for selecting changehistory events for a customer.
		/// @return A Customer->Campaign->AdGroup hierarchy containing information about the objects
		/// changed at each level. All Campaigns that are requested in the selector will be returned,
		/// regardless of whether or not they have changed, but unchanged AdGroups will be ignored.
		/// </summary>
		Task<CustomerChangeData> GetAsync(CustomerSyncSelector Selector);
	}
	/// <summary>
	/// A service to return Ads Campaign Management data matching a {@link Selector}.
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public interface IDataService
	{
		/// <summary>
		/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups specified in the selector.
		/// In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link AdGroupBidLandscape}s by their ad groups, and numberResults of paging limits the total
		/// number of {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<AdGroupBidLandscapePage> GetAdGroupBidLandscapeAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria specified in the
		/// selector. In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
		/// of paging limits the total number of {@link LandscapePoint}s instead of number of
		/// {@link CriterionBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<CriterionBidLandscapePage> GetCampaignCriterionBidLandscapeAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the criteria specified in the selector.
		/// In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their criteria, and numberResults of paging limits the total
		/// number of {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<CriterionBidLandscapePage> GetCriterionBidLandscapeAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
		///
		/// @param serviceSelector Selects the entities to return domain categories for.
		/// @return A list of domain categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<DomainCategoryPage> GetDomainCategoryAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups that match the query. In the
		/// result, the returned {@link LandscapePoint}s are grouped into {@link AdGroupBidLandscape}s
		/// by their ad groups, and numberResults of paging limits the total number of
		/// {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		Task<AdGroupBidLandscapePage> QueryAdGroupBidLandscapeAsync(string Query);
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria that match the
		/// query. In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
		/// of paging limits the total number of {@link LandscapePoint}s instead of number of
		/// {@link CriterionBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		Task<CriterionBidLandscapePage> QueryCampaignCriterionBidLandscapeAsync(string Query);
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the criteria that match the query. In the
		/// result, the returned {@link LandscapePoint}s are grouped into {@link CriterionBidLandscape}s
		/// by their criteria, and numberResults of paging limits the total number of
		/// {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		Task<CriterionBidLandscapePage> QueryCriterionBidLandscapeAsync(string Query);
		/// <summary>
		/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of domain categories.
		/// @throws ApiException if problems occur while parsing the query
		/// or fetching domain categories.
		/// </summary>
		Task<DomainCategoryPage> QueryDomainCategoryAsync(string Query);
	}
	/// <summary>
	/// The DraftAsyncErrorService is retrieving asynchronous errors from promoting drafts.
	/// </summary>
	public interface IDraftAsyncErrorService
	{
		/// <summary>
		/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<DraftAsyncErrorPage> GetAsync(Selector Selector);
		/// <summary>
		/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<DraftAsyncErrorPage> QueryAsync(string Query);
	}
	/// <summary>
	/// The DraftService is used for creating new drafts and controlling the life cycle of drafts.
	/// </summary>
	public interface IDraftService
	{
		/// <summary>
		/// Returns a DraftPage that contains a list of Draft objects matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<DraftPage> GetAsync(Selector Selector);
		/// <summary>
		/// The mutate action is used for creating new Drafts and controlling the life cycle of Drafts,
		/// such as abandoning or promoting Drafts.
		///
		/// @return The list of updated Drafts, in the same order as the {@code operations} list.
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while processing the request.
		/// </summary>
		Task<DraftReturnValue> MutateAsync(IEnumerable<DraftOperation> Operations);
		/// <summary>
		/// Returns a DraftPage that contains a list of Draft objects matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<DraftPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service to operate on feed items.
	/// </summary>
	public interface IFeedItemService
	{
		/// <summary>
		/// Returns a list of FeedItems that meet the selector criteria.
		///
		/// @param selector Determines which FeedItems to return. If empty all
		/// FeedItems are returned.
		/// @return The list of FeedItems.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<FeedItemPage> GetAsync(Selector Selector);
		/// <summary>
		/// Add, remove, and set FeedItems.
		///
		/// @param operations The operations to apply.
		/// @return The resulting FeedItems.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<FeedItemReturnValue> MutateAsync(IEnumerable<FeedItemOperation> Operations);
		/// <summary>
		/// Returns the list of FeedItems that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of FeedItems
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<FeedItemPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service for getting and mutating FeedMappings.
	/// </summary>
	public interface IFeedMappingService
	{
		/// <summary>
		/// Returns a list of FeedMappings that meet the selector criteria.
		///
		/// @param selector Determines which FeedMappings to return. If empty all
		/// FeedMappings are returned.
		/// @return The list of FeedMappings.
		/// @throws ApiException indicates a problem with the request.
		/// </summary>
		Task<FeedMappingPage> GetAsync(Selector Selector);
		/// <summary>
		/// Add and remove FeedMappings.
		/// The following {@link Operator}s are supported: ADD, REMOVE.
		///
		/// @param operations The operations to apply.
		/// @return The resulting FeedMappings.
		/// @throws ApiException indicates a problem with the request.
		/// </summary>
		Task<FeedMappingReturnValue> MutateAsync(IEnumerable<FeedMappingOperation> Operations);
		/// <summary>
		/// Returns the list of FeedMappings that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns The list of FeedMappings
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<FeedMappingPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service used to get and mutate Feeds.
	/// </summary>
	public interface IFeedService
	{
		/// <summary>
		/// Returns a list of Feeds that meet the selector criteria.
		///
		/// @param selector Determines which Feeds to return. If empty all
		/// Feeds are returned.
		/// @return The list of Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<FeedPage> GetAsync(Selector Selector);
		/// <summary>
		/// Add, remove, and set Feeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		Task<FeedReturnValue> MutateAsync(IEnumerable<FeedOperation> Operations);
		/// <summary>
		/// Returns the list of Feed that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @returns A list of Feed.
		/// @throws ApiException if problems occur while parsing the query or fetching Feed.
		/// </summary>
		Task<FeedPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to manage labels. The light weight label, once created, can be attached
	/// to campaign management entities such as campaigns, ad groups, creatives, criterion and etc.
	/// </summary>
	public interface ILabelService
	{
		/// <summary>
		/// Returns a list of {@link Label}s.
		///
		/// @param serviceSelector The selector specifying the {@link Label}s to return.
		/// @return The page containing the {@link Label}s which meet the criteria specified by the
		/// selector.
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		Task<LabelPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations The operations to apply. The same {@link Label} cannot be specified in
		/// more than one operation.
		/// @return The applied {@link Label}s.
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		Task<LabelReturnValue> MutateAsync(IEnumerable<LabelOperation> Operations);
		/// <summary>
		/// Returns the list of {@link Label}s that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns  The page containing the {@link Label}s which match the query.
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<LabelPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Service that returns {@link LocationCriterion} constants that match a specified name or list of
	/// criterion id(s) as specified in the input selector.<p>
	///
	/// <p>Please note that filtering by date range is not supported.
	/// </summary>
	public interface ILocationCriterionService
	{
		/// <summary>
		/// Returns a list of {@link LocationCriterion}'s that match the specified selector.
		///
		/// @param selector filters the LocationCriterion to be returned.
		/// @return A list of location criterion.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		Task<IEnumerable<LocationCriterion>> GetAsync(Selector Selector);
		/// <summary>
		/// Returns the list of {@link LocationCriterion}s that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns The list of location criteria
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<IEnumerable<LocationCriterion>> QueryAsync(string Query);
	}
	/// <summary>
	/// Customer Manager Service.
	/// </summary>
	public interface IManagedCustomerService
	{
		/// <summary>
		/// Returns the list of customers that meet the selector criteria.
		///
		/// @param selector The selector specifying the {@link ManagedCustomer}s to return.
		/// @return List of customers identified by the selector.
		/// @throws ApiException When there is at least one error with the request.
		/// </summary>
		Task<ManagedCustomerPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns the pending invitations for the customer IDs in the selector.
		/// @param selector the manager customer ids (inviters) or the client customer ids (invitees)
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		Task<IEnumerable<PendingInvitation>> GetPendingInvitationsAsync(PendingInvitationSelector Selector);
		/// <summary>
		/// Modifies or creates new {@link ManagedCustomer}s.
		///
		/// <p class="note"><b>Note:</b> See {@link ManagedCustomerOperation} for available operators.</p>
		///
		/// @param operations List of unique operations.
		/// @return The list of updated managed customers, returned in the same order as the
		/// <code>operations</code> array.
		/// </summary>
		Task<ManagedCustomerReturnValue> MutateAsync(IEnumerable<ManagedCustomerOperation> Operations);
		/// <summary>
		/// Adds {@linkplain AccountLabel}s to, and removes
		/// {@linkplain AccountLabel}s from, {@linkplain ManagedCustomer}s.
		///
		/// <p>To add an {@linkplain AccountLabel} to a {@linkplain ManagedCustomer},
		/// use {@link Operator#ADD}.
		/// To remove an {@linkplain AccountLabel} from a {@linkplain ManagedCustomer},
		/// use {@link Operator#REMOVE}.</p>
		/// <p>The label must already exist (see {@link AccountLabelService#mutate} for
		/// how to create them) and be owned by the authenticated user.</p>
		/// <p>The {@linkplain ManagedCustomer} must already exist and be managed by
		/// the customer making the request (either directly or indirectly).</p>
		/// <p>An AccountLabel may be applied to at most 1000 customers.</p>
		/// <p>This method does not support partial failures, and will fail if any
		/// operation is invalid.</p>
		/// </summary>
		Task<ManagedCustomerLabelReturnValue> MutateLabelAsync(IEnumerable<ManagedCustomerLabelOperation> Operations);
		/// <summary>
		/// Modifies the ManagedCustomer forest. These actions are possible (categorized by
		/// Operator + Link Status):
		///
		/// <ul>
		/// <li>ADD + PENDING:   manager extends invitations</li>
		/// <li>SET + CANCELLED: manager rescinds invitations</li>
		/// <li>SET + INACTIVE:  manager/client terminates links</li>
		/// <li>SET + ACTIVE:    client accepts invitations</li>
		/// <li>SET + REFUSED:   client declines invitations</li>
		/// </ul>
		///
		/// In addition to these, active links can also be marked hidden / unhidden.
		/// <ul>
		/// <li> An ACTIVE link can be marked hidden with SET + ACTIVE along with setting the
		/// isHidden bit to true. </li>
		/// <li> An ACTIVE link can be marked unhidden with SET + ACTIVE along with setting the
		/// isHidden bit to false. </li>
		/// </ul>
		///
		/// @param operations the list of operations
		/// @return results for the given operations
		/// @throws ApiException with a {@link ManagedCustomerServiceError}
		/// </summary>
		Task<MutateLinkResults> MutateLinkAsync(IEnumerable<LinkOperation> Operations);
		/// <summary>
		/// Moves client customers to new managers (moving links). Only the following action is possible:
		///
		/// <ul>
		/// <li>SET + ACTIVE: manager moves client customers to new managers within the same manager
		/// account hierarchy</li>
		/// </ul>
		///
		/// @param operations List of unique operations.
		/// @return results for the given operations
		/// @throws ApiException with a {@link ManagedCustomerServiceError}
		/// </summary>
		Task<MutateManagerResults> MutateManagerAsync(IEnumerable<MoveOperation> Operations);
	}
	/// <summary>
	/// Use this service to manage media for your template ads. After uploading images and videos
	/// with this service, use the IDs when creating image or template ads.
	/// </summary>
	public interface IMediaService
	{
		/// <summary>
		/// Returns a list of media that meet the criteria specified by the selector.
		/// <p class="note"><b>Note:</b> {@code MediaService} will not return any
		/// {@link ImageAd} image files.</p>
		///
		/// @param serviceSelector Selects which media objects to return.
		/// @return A list of {@code Media} objects.
		/// </summary>
		Task<MediaPage> GetAsync(Selector ServiceSelector);
		/// <summary>
		/// Returns the list of {@link Media} objects that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of {@code Media} objects.
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<MediaPage> QueryAsync(string Query);
		/// <summary>
		/// Uploads new media. Currently, you can upload {@link Image} files and {@link MediaBundle}s.
		///
		/// @param media A list of {@code Media} objects, each containing the data to
		/// be uploaded.
		/// @return A list of uploaded media in the same order as the argument list.
		/// </summary>
		Task<IEnumerable<Media>> UploadAsync(IEnumerable<Media> Media);
	}
	/// <summary>
	/// Service that handles the reporting of externally provided call conversions.
	/// </summary>
	public interface IOfflineCallConversionFeedService
	{
		/// <summary>
		/// Reports a call conversion for each entry in {@code operations}.
		///
		/// <p>This bulk operation does not have any transactional guarantees. Some operations can succeed
		/// while others fail.
		///
		/// @param operations A list of offline call conversion feed operations.
		/// @return The list of offline call conversion feed results (in the same order as the operations).
		/// @throws {@link ApiException} if problems occurred while applying offline call conversions.
		/// </summary>
		Task<OfflineCallConversionFeedReturnValue> MutateAsync(IEnumerable<OfflineCallConversionFeedOperation> Operations);
	}
	/// <summary>
	/// Service that handles the reporting of offline conversion data from external third parties.
	///
	/// <p>For more information, see our
	/// <a href="https://developers.google.com/adwords/api/docs/guides/conversion-tracking">conversion
	/// tracking guide</a>.</p>
	/// </summary>
	public interface IOfflineConversionFeedService
	{
		/// <summary>
		/// Reports an offline conversion for each entry in {@code operations}.
		/// <p>
		/// This bulk operation does not have any transactional guarantees. Some operations can succeed
		/// while others fail.
		///
		/// @param operations A list of offline conversion feed operations.
		/// @return The list of offline conversion feed results (in the same order as the operations).
		/// @throws {@link ApiException} if problems occurred while applying offline conversions.
		/// </summary>
		Task<OfflineConversionFeedReturnValue> MutateAsync(IEnumerable<OfflineConversionFeedOperation> Operations);
	}
	/// <summary>
	/// <p><b>Note:</b> As of v201109 this service is read-only. New report
	/// definitions are no longer allowed.</p>
	/// <p>A report definition describes the report type, date range, and
	/// {@linkplain Selector fields to include in the report}. Additionally, you can
	/// specify {@linkplain Predicate predicates} to filter which rows are returned
	/// in a generated report. Please note that sorting and paging are not supported for report
	/// downloads.</p>
	///
	/// <p>To find out which report fields are available based on report
	/// type, see the <a href="/adwords/api/docs/appendix/reports">Report
	/// Types</a> appendix or call {@link #getReportFields}.</p>
	///
	/// <p>For more information about retrieving reports, see
	/// <a href="/adwords/api/docs/guides/reporting">Reporting Basics</a>.
	/// </summary>
	public interface IReportDefinitionService
	{
		/// <summary>
		/// Returns the available report fields for a given report type.
		/// When using this method the {@code clientCustomerId} header field is
		/// optional. Callers are discouraged from setting the clientCustomerId
		/// header field in calls to this method as its presence will trigger an
		/// authorization error if the caller does not have access to the customer
		/// with the included ID.
		///
		/// @param reportType The type of report.
		/// @return The list of available report fields. Each
		/// {@link ReportDefinitionField} encapsulates the field name, the
		/// field data type, and the enum values (if the field's type is
		/// {@code enum}).
		/// @throws ApiException if a problem occurred while fetching the
		/// ReportDefinitionField information.
		/// </summary>
		Task<IEnumerable<ReportDefinitionField>> GetReportFieldsAsync(ReportDefinitionReportType? ReportType);
	}
	/// <summary>
	/// Manages which criteria are associated with shared sets.
	/// </summary>
	public interface ISharedCriterionService
	{
		/// <summary>
		/// Returns a list of SharedCriterion that meets the selector criteria.
		///
		/// @param selector filters the criteria returned
		/// @return The list of SharedCriterion
		/// @throws ApiException
		/// </summary>
		Task<SharedCriterionPage> GetAsync(Selector Selector);
		/// <summary>
		/// Adds, removes criteria in a shared set.
		///
		/// @param operations A list of unique operations
		/// @return The list of updated SharedCriterion, returned in the same order as the
		/// {@code operations} array.
		/// @throws ApiException
		/// </summary>
		Task<SharedCriterionReturnValue> MutateAsync(IEnumerable<SharedCriterionOperation> Operations);
		/// <summary>
		/// Returns the list of SharedCriterion that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of SharedCriterion.
		/// @throws ApiException
		/// </summary>
		Task<SharedCriterionPage> QueryAsync(string Query);
	}
	/// <summary>
	/// This service is used for managing {@link SharedSet} entities themselves
	/// and the association between sets and campaigns.
	/// </summary>
	public interface ISharedSetService
	{
		/// <summary>
		/// Returns a list of SharedSets based on the given selector.
		/// @param selector the selector specifying the query
		/// @return a list of SharedSet entities that meet the criterion specified
		/// by the selector
		/// @throws ApiException
		/// </summary>
		Task<SharedSetPage> GetAsync(Selector Selector);
		/// <summary>
		/// Applies the list of mutate operations.
		/// @param operations the operations to apply
		/// @return the modified CriterionList entities
		/// @throws ApiException
		/// </summary>
		Task<SharedSetReturnValue> MutateAsync(IEnumerable<SharedSetOperation> Operations);
		/// <summary>
		/// Returns the list of SharedSet entities that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of SharedSet entities
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		Task<SharedSetPage> QueryAsync(string Query);
	}
	/// <summary>
	/// Use this service to generate new keyword ideas based on the
	/// parameters specified in the selector. See the {@link TargetingIdeaSelector}
	/// documentation for more details.
	///
	/// <p>You can also use this service to retrieve statistics for existing keyword
	/// ideas by setting the selector's {@code requestType} to {@link RequestType#STATS}
	/// and passing in the appropriate search parameters.</p>
	/// </summary>
	public interface ITargetingIdeaService
	{
		/// <summary>
		/// Returns a page of ideas that match the query described by the specified
		/// {@link TargetingIdeaSelector}.
		///
		/// <p>The selector must specify a {@code paging} value, with {@code numberResults} set to 800 or
		/// less.  Large result sets must be composed through multiple calls to this method, advancing the
		/// paging {@code startIndex} value by {@code numberResults} with each call.</p>
		///
		/// @param selector Query describing the types of results to return when
		/// finding matches (similar keyword ideas).
		/// @return A {@link TargetingIdeaPage} of results, that is a subset of the
		/// list of possible ideas meeting the criteria of the
		/// {@link TargetingIdeaSelector}.
		/// @throws ApiException If problems occurred while querying for ideas.
		/// </summary>
		Task<TargetingIdeaPage> GetAsync(TargetingIdeaSelector Selector);
	}
	/// <summary>
	/// Use this service to request traffic estimates for proposed or existing campaigns, ad
	/// groups, and keywords.
	///
	/// <p>
	/// To simply retrieve estimates for a list of proposed keywords, create a
	/// {@linkplain CampaignEstimateRequest campaign estimate request} and a child
	/// {@linkplain AdGroupEstimateRequest ad group estimate request} with {@code null} IDs,
	/// and then set the
	/// {@link AdGroupEstimateRequest#keywordEstimateRequests keywordEstimateRequests}
	/// to contain the keywords.</p>
	///
	/// <p>You can refine the traffic estimates by setting
	/// {@linkplain CampaignEstimateRequest#targets campaign targeting options} in the request.
	/// If an ad group ID is provided, all creatives from that ad group will be loaded and used
	/// to improve estimates.</p>
	///
	/// <p>The maximum number of {@linkplain KeywordEstimateRequest keyword estimate
	/// requests} across all campaign estimate requests and
	/// ad group estimate requests is 2500.</p>
	///
	/// <p>The maximum number of {@linkplain AdGroupEstimateRequest adgroup estimate
	/// requests} across all campaign estimate requests is 50.</p>
	///
	/// <p>Note that the API returns intervals whereas the Traffic Estimator UI displays averages.
	/// Estimates are account specific since they are based on creatives already in the account.
	/// When comparing numbers, use the same account for the API and UI.</p>
	/// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	/// </summary>
	public interface ITrafficEstimatorService
	{
		/// <summary>
		/// Returns traffic estimates for specified criteria.
		///
		/// @param selector Campaigns, ad groups and keywords for which traffic
		/// should be estimated.
		/// @return Traffic estimation results.
		/// @throws ApiException if problems occurred while retrieving estimates
		/// </summary>
		Task<TrafficEstimatorResult> GetAsync(TrafficEstimatorSelector Selector);
	}
	/// <summary>
	/// The TrialAsyncErrorService is retrieving asynchronous errors from creating and promoting trials.
	/// </summary>
	public interface ITrialAsyncErrorService
	{
		/// <summary>
		/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncErrors matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<TrialAsyncErrorPage> GetAsync(Selector Selector);
		/// <summary>
		/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncError matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		Task<TrialAsyncErrorPage> QueryAsync(string Query);
	}
	/// <summary>
	/// TrialService manages the life cycle of campaign trials. It is used to create new trials from
	/// drafts, modify trial properties, promote changes in a trial back to its base campaign, and to
	/// archive a trial.
	///
	/// <p>A trial is an experiment, running two variants (trial arms) - the base campaign and the trial
	/// - at the same time, directing a fixed share of traffic to each trial arm. A trial is created from
	/// a draft of the base campaign and will be a snapshot of changes in the draft at the time of
	/// creation.
	///
	/// <h3>Constraints</h3>
	///
	/// <ul>
	/// <li>A campaign cannot have running/scheduled "AdWords Campaign Experiments" (ACE) and
	/// running/scheduled trials at the same time. Trial creation will fail, if the base campaign
	/// has a running/scheduled ACE experiment.</li>
	/// <li>Trial names must be unique across all of the customer's non-deleted trial and campaign
	/// names.</li>
	/// <li>When creating a trial, [startDate, endDate] cannot be in the past or overlap with any other
	/// running/scheduled trial, must be within the base campaign's [startDate, endDate] and
	/// endDate must be later than startDate.</li>
	/// <li>A future startDate/endDate can be updated to a different future startDate/endDate as long
	/// as the constraints on [startDate, endDate] are not violated.</li>
	/// <li>There is at most one trial running and at most one trial scheduled for the future at a
	/// time, per base campaign.</li>
	/// <li>The base campaign's budget cannot be shared with any other campaign. Trial creation will
	/// fail if the base campaign's budget is shared with another campaign.</li>
	/// </ul>
	///
	/// <h3>Life cycle</h3>
	///
	/// A trial's {@link Trial#status status} reflects the state of the trial within its life cycle. Some
	/// status transitions are performed explicitly by sending a {@link Operator#SET SET} operation,
	/// while other status transitions occur asynchronously without a client operation.
	///
	/// <p>When a trial is first {@link Operator#ADD ADD}ed, its status is
	/// {@link TrialStatus#CREATING CREATING}. The trial will be created asynchronously, and once it
	/// is fully created, its status will change to {@link TrialStatus#ACTIVE ACTIVE}.
	///
	/// <p>If the asynchronous creation of the trial fails, its status will change to
	/// {@link TrialStatus#CREATION_FAILED CREATION_FAILED}.
	///
	/// <p>To promote changes in an {@link TrialStatus#ACTIVE ACTIVE} trial back to the base campaign,
	/// set the trial status to {@link TrialStatus#PROMOTING PROMOTING}. The promotion itself will occur
	/// asynchronously. If the promotion operation fails after some of the base campaign has already been
	/// updated, the status will change to {@link TrialStatus#PROMOTE_FAILED PROMOTE_FAILED}.
	///
	/// <p>To graduate an {@link TrialStatus#ACTIVE ACTIVE} trial, which will allow its associated
	/// campaign to act independently of the trial and free it of restrictions from the trial, set the
	/// status to {@link TrialStatus#GRADUATED GRADUATED} and provide a new
	/// {@link Budget#budgetid budgetId} for the campaign to use (since it can no longer share the base
	/// campaign's budget).
	///
	/// <p>Any trial that is not {@link TrialStatus#CREATING CREATING} or
	/// {@link TrialStatus#PROMOTING PROMOTING} can be archived by setting the status to the value of the
	/// same name.
	/// </summary>
	public interface ITrialService
	{
		/// <summary>
		/// Loads a TrialPage containing a list of {@link Trial} objects matching the selector.
		///
		/// @param selector defines which subset of all available trials to return, the sort order, and
		/// which fields to include
		///
		/// @return Returns a page of matching trial objects.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// retrieving the results.
		/// </summary>
		Task<TrialPage> GetAsync(Selector Selector);
		/// <summary>
		/// Creates new trials, updates properties and controls the life cycle of existing trials.
		/// See {@link TrialService} for details on the trial life cycle.
		///
		/// @return Returns the list of updated Trials, in the same order as the {@code operations} list.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// processing the request.
		/// </summary>
		Task<TrialReturnValue> MutateAsync(IEnumerable<TrialOperation> Operations);
		/// <summary>
		/// Loads a TrialPage containing a list of {@link Trial} objects matching the query.
		///
		/// @param query defines which subset of all available trials to return, the sort order, and
		/// which fields to include
		///
		/// @return Returns a page of matching trial objects.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// retrieving the results.
		/// </summary>
		Task<TrialPage> QueryAsync(string Query);
	}
	internal class AccountLabelServiceSoapBinding : BaseSoapBinding
	{
		public AccountLabelServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AccountLabelServiceResponseHeader, AccountLabelServiceGetResponse>> GetAsync(SoapData<AccountLabelServiceRequestHeader, AccountLabelServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AccountLabelServiceResponseHeader, AccountLabelServiceGetResponse>();
			outData.Header = new AccountLabelServiceResponseHeader();
			outData.Body = new AccountLabelServiceGetResponse();
			var faultData = new AccountLabelServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AccountLabelServiceResponseHeader, AccountLabelServiceMutateResponse>> MutateAsync(SoapData<AccountLabelServiceRequestHeader, AccountLabelServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AccountLabelServiceResponseHeader, AccountLabelServiceMutateResponse>();
			outData.Header = new AccountLabelServiceResponseHeader();
			outData.Body = new AccountLabelServiceMutateResponse();
			var faultData = new AccountLabelServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdCustomizerFeedServiceSoapBinding : BaseSoapBinding
	{
		public AdCustomizerFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdCustomizerFeedServiceResponseHeader, AdCustomizerFeedServiceGetResponse>> GetAsync(SoapData<AdCustomizerFeedServiceRequestHeader, AdCustomizerFeedServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdCustomizerFeedServiceResponseHeader, AdCustomizerFeedServiceGetResponse>();
			outData.Header = new AdCustomizerFeedServiceResponseHeader();
			outData.Body = new AdCustomizerFeedServiceGetResponse();
			var faultData = new AdCustomizerFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdCustomizerFeedServiceResponseHeader, AdCustomizerFeedServiceMutateResponse>> MutateAsync(SoapData<AdCustomizerFeedServiceRequestHeader, AdCustomizerFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdCustomizerFeedServiceResponseHeader, AdCustomizerFeedServiceMutateResponse>();
			outData.Header = new AdCustomizerFeedServiceResponseHeader();
			outData.Body = new AdCustomizerFeedServiceMutateResponse();
			var faultData = new AdCustomizerFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupAdServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupAdServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceGetResponse>> GetAsync(SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceGetResponse>();
			outData.Header = new AdGroupAdServiceResponseHeader();
			outData.Body = new AdGroupAdServiceGetResponse();
			var faultData = new AdGroupAdServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceMutateResponse>> MutateAsync(SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceMutateResponse>();
			outData.Header = new AdGroupAdServiceResponseHeader();
			outData.Body = new AdGroupAdServiceMutateResponse();
			var faultData = new AdGroupAdServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceMutateLabelResponse>> MutateLabelAsync(SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceMutateLabel> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLabel", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceMutateLabelResponse>();
			outData.Header = new AdGroupAdServiceResponseHeader();
			outData.Body = new AdGroupAdServiceMutateLabelResponse();
			var faultData = new AdGroupAdServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceQueryResponse>> QueryAsync(SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceQueryResponse>();
			outData.Header = new AdGroupAdServiceResponseHeader();
			outData.Body = new AdGroupAdServiceQueryResponse();
			var faultData = new AdGroupAdServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceUpgradeUrlResponse>> UpgradeUrlAsync(SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceUpgradeUrl> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("upgradeUrl", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupAdServiceResponseHeader, AdGroupAdServiceUpgradeUrlResponse>();
			outData.Header = new AdGroupAdServiceResponseHeader();
			outData.Body = new AdGroupAdServiceUpgradeUrlResponse();
			var faultData = new AdGroupAdServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupBidModifierServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupBidModifierServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceGetResponse>> GetAsync(SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceGetResponse>();
			outData.Header = new AdGroupBidModifierServiceResponseHeader();
			outData.Body = new AdGroupBidModifierServiceGetResponse();
			var faultData = new AdGroupBidModifierServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceMutateResponse>> MutateAsync(SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceMutateResponse>();
			outData.Header = new AdGroupBidModifierServiceResponseHeader();
			outData.Body = new AdGroupBidModifierServiceMutateResponse();
			var faultData = new AdGroupBidModifierServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceQueryResponse>> QueryAsync(SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupBidModifierServiceResponseHeader, AdGroupBidModifierServiceQueryResponse>();
			outData.Header = new AdGroupBidModifierServiceResponseHeader();
			outData.Body = new AdGroupBidModifierServiceQueryResponse();
			var faultData = new AdGroupBidModifierServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupCriterionServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupCriterionServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceGetResponse>> GetAsync(SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceGetResponse>();
			outData.Header = new AdGroupCriterionServiceResponseHeader();
			outData.Body = new AdGroupCriterionServiceGetResponse();
			var faultData = new AdGroupCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceMutateResponse>> MutateAsync(SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceMutateResponse>();
			outData.Header = new AdGroupCriterionServiceResponseHeader();
			outData.Body = new AdGroupCriterionServiceMutateResponse();
			var faultData = new AdGroupCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceMutateLabelResponse>> MutateLabelAsync(SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceMutateLabel> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLabel", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceMutateLabelResponse>();
			outData.Header = new AdGroupCriterionServiceResponseHeader();
			outData.Body = new AdGroupCriterionServiceMutateLabelResponse();
			var faultData = new AdGroupCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceQueryResponse>> QueryAsync(SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupCriterionServiceResponseHeader, AdGroupCriterionServiceQueryResponse>();
			outData.Header = new AdGroupCriterionServiceResponseHeader();
			outData.Body = new AdGroupCriterionServiceQueryResponse();
			var faultData = new AdGroupCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupExtensionSettingServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupExtensionSettingServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceGetResponse>> GetAsync(SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceGetResponse>();
			outData.Header = new AdGroupExtensionSettingServiceResponseHeader();
			outData.Body = new AdGroupExtensionSettingServiceGetResponse();
			var faultData = new AdGroupExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceMutateResponse>> MutateAsync(SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceMutateResponse>();
			outData.Header = new AdGroupExtensionSettingServiceResponseHeader();
			outData.Body = new AdGroupExtensionSettingServiceMutateResponse();
			var faultData = new AdGroupExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceQueryResponse>> QueryAsync(SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupExtensionSettingServiceResponseHeader, AdGroupExtensionSettingServiceQueryResponse>();
			outData.Header = new AdGroupExtensionSettingServiceResponseHeader();
			outData.Body = new AdGroupExtensionSettingServiceQueryResponse();
			var faultData = new AdGroupExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupFeedServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceGetResponse>> GetAsync(SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceGetResponse>();
			outData.Header = new AdGroupFeedServiceResponseHeader();
			outData.Body = new AdGroupFeedServiceGetResponse();
			var faultData = new AdGroupFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceMutateResponse>> MutateAsync(SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceMutateResponse>();
			outData.Header = new AdGroupFeedServiceResponseHeader();
			outData.Body = new AdGroupFeedServiceMutateResponse();
			var faultData = new AdGroupFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceQueryResponse>> QueryAsync(SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupFeedServiceResponseHeader, AdGroupFeedServiceQueryResponse>();
			outData.Header = new AdGroupFeedServiceResponseHeader();
			outData.Body = new AdGroupFeedServiceQueryResponse();
			var faultData = new AdGroupFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdGroupServiceSoapBinding : BaseSoapBinding
	{
		public AdGroupServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdGroupServiceResponseHeader, AdGroupServiceGetResponse>> GetAsync(SoapData<AdGroupServiceRequestHeader, AdGroupServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupServiceResponseHeader, AdGroupServiceGetResponse>();
			outData.Header = new AdGroupServiceResponseHeader();
			outData.Body = new AdGroupServiceGetResponse();
			var faultData = new AdGroupServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupServiceResponseHeader, AdGroupServiceMutateResponse>> MutateAsync(SoapData<AdGroupServiceRequestHeader, AdGroupServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupServiceResponseHeader, AdGroupServiceMutateResponse>();
			outData.Header = new AdGroupServiceResponseHeader();
			outData.Body = new AdGroupServiceMutateResponse();
			var faultData = new AdGroupServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupServiceResponseHeader, AdGroupServiceMutateLabelResponse>> MutateLabelAsync(SoapData<AdGroupServiceRequestHeader, AdGroupServiceMutateLabel> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLabel", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupServiceResponseHeader, AdGroupServiceMutateLabelResponse>();
			outData.Header = new AdGroupServiceResponseHeader();
			outData.Body = new AdGroupServiceMutateLabelResponse();
			var faultData = new AdGroupServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdGroupServiceResponseHeader, AdGroupServiceQueryResponse>> QueryAsync(SoapData<AdGroupServiceRequestHeader, AdGroupServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdGroupServiceResponseHeader, AdGroupServiceQueryResponse>();
			outData.Header = new AdGroupServiceResponseHeader();
			outData.Body = new AdGroupServiceQueryResponse();
			var faultData = new AdGroupServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdParamServiceSoapBinding : BaseSoapBinding
	{
		public AdParamServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdParamServiceResponseHeader, AdParamServiceGetResponse>> GetAsync(SoapData<AdParamServiceRequestHeader, AdParamServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdParamServiceResponseHeader, AdParamServiceGetResponse>();
			outData.Header = new AdParamServiceResponseHeader();
			outData.Body = new AdParamServiceGetResponse();
			var faultData = new AdParamServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdParamServiceResponseHeader, AdParamServiceMutateResponse>> MutateAsync(SoapData<AdParamServiceRequestHeader, AdParamServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdParamServiceResponseHeader, AdParamServiceMutateResponse>();
			outData.Header = new AdParamServiceResponseHeader();
			outData.Body = new AdParamServiceMutateResponse();
			var faultData = new AdParamServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class AdwordsUserListServiceSoapBinding : BaseSoapBinding
	{
		public AdwordsUserListServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceGetResponse>> GetAsync(SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceGetResponse>();
			outData.Header = new AdwordsUserListServiceResponseHeader();
			outData.Body = new AdwordsUserListServiceGetResponse();
			var faultData = new AdwordsUserListServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceMutateResponse>> MutateAsync(SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceMutateResponse>();
			outData.Header = new AdwordsUserListServiceResponseHeader();
			outData.Body = new AdwordsUserListServiceMutateResponse();
			var faultData = new AdwordsUserListServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceMutateMembersResponse>> MutateMembersAsync(SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceMutateMembers> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateMembers", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceMutateMembersResponse>();
			outData.Header = new AdwordsUserListServiceResponseHeader();
			outData.Body = new AdwordsUserListServiceMutateMembersResponse();
			var faultData = new AdwordsUserListServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceQueryResponse>> QueryAsync(SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/rm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<AdwordsUserListServiceResponseHeader, AdwordsUserListServiceQueryResponse>();
			outData.Header = new AdwordsUserListServiceResponseHeader();
			outData.Body = new AdwordsUserListServiceQueryResponse();
			var faultData = new AdwordsUserListServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class BatchJobServiceSoapBinding : BaseSoapBinding
	{
		public BatchJobServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<BatchJobServiceResponseHeader, BatchJobServiceGetResponse>> GetAsync(SoapData<BatchJobServiceRequestHeader, BatchJobServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BatchJobServiceResponseHeader, BatchJobServiceGetResponse>();
			outData.Header = new BatchJobServiceResponseHeader();
			outData.Body = new BatchJobServiceGetResponse();
			var faultData = new BatchJobServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BatchJobServiceResponseHeader, BatchJobServiceMutateResponse>> MutateAsync(SoapData<BatchJobServiceRequestHeader, BatchJobServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BatchJobServiceResponseHeader, BatchJobServiceMutateResponse>();
			outData.Header = new BatchJobServiceResponseHeader();
			outData.Body = new BatchJobServiceMutateResponse();
			var faultData = new BatchJobServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BatchJobServiceResponseHeader, BatchJobServiceQueryResponse>> QueryAsync(SoapData<BatchJobServiceRequestHeader, BatchJobServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BatchJobServiceResponseHeader, BatchJobServiceQueryResponse>();
			outData.Header = new BatchJobServiceResponseHeader();
			outData.Body = new BatchJobServiceQueryResponse();
			var faultData = new BatchJobServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class BiddingStrategyServiceSoapBinding : BaseSoapBinding
	{
		public BiddingStrategyServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceGetResponse>> GetAsync(SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceGetResponse>();
			outData.Header = new BiddingStrategyServiceResponseHeader();
			outData.Body = new BiddingStrategyServiceGetResponse();
			var faultData = new BiddingStrategyServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceMutateResponse>> MutateAsync(SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceMutateResponse>();
			outData.Header = new BiddingStrategyServiceResponseHeader();
			outData.Body = new BiddingStrategyServiceMutateResponse();
			var faultData = new BiddingStrategyServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceQueryResponse>> QueryAsync(SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BiddingStrategyServiceResponseHeader, BiddingStrategyServiceQueryResponse>();
			outData.Header = new BiddingStrategyServiceResponseHeader();
			outData.Body = new BiddingStrategyServiceQueryResponse();
			var faultData = new BiddingStrategyServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class BudgetOrderServiceSoapBinding : BaseSoapBinding
	{
		public BudgetOrderServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceGetResponse>> GetAsync(SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceGetResponse>();
			outData.Header = new BudgetOrderServiceResponseHeader();
			outData.Body = new BudgetOrderServiceGetResponse();
			var faultData = new BudgetOrderServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceGetBillingAccountsResponse>> GetBillingAccountsAsync(SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceGetBillingAccounts> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getBillingAccounts", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceGetBillingAccountsResponse>();
			outData.Header = new BudgetOrderServiceResponseHeader();
			outData.Body = new BudgetOrderServiceGetBillingAccountsResponse();
			var faultData = new BudgetOrderServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceMutateResponse>> MutateAsync(SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/billing/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetOrderServiceResponseHeader, BudgetOrderServiceMutateResponse>();
			outData.Header = new BudgetOrderServiceResponseHeader();
			outData.Body = new BudgetOrderServiceMutateResponse();
			var faultData = new BudgetOrderServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class BudgetServiceSoapBinding : BaseSoapBinding
	{
		public BudgetServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<BudgetServiceResponseHeader, BudgetServiceGetResponse>> GetAsync(SoapData<BudgetServiceRequestHeader, BudgetServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetServiceResponseHeader, BudgetServiceGetResponse>();
			outData.Header = new BudgetServiceResponseHeader();
			outData.Body = new BudgetServiceGetResponse();
			var faultData = new BudgetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BudgetServiceResponseHeader, BudgetServiceMutateResponse>> MutateAsync(SoapData<BudgetServiceRequestHeader, BudgetServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetServiceResponseHeader, BudgetServiceMutateResponse>();
			outData.Header = new BudgetServiceResponseHeader();
			outData.Body = new BudgetServiceMutateResponse();
			var faultData = new BudgetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<BudgetServiceResponseHeader, BudgetServiceQueryResponse>> QueryAsync(SoapData<BudgetServiceRequestHeader, BudgetServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<BudgetServiceResponseHeader, BudgetServiceQueryResponse>();
			outData.Header = new BudgetServiceResponseHeader();
			outData.Body = new BudgetServiceQueryResponse();
			var faultData = new BudgetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CampaignCriterionServiceSoapBinding : BaseSoapBinding
	{
		public CampaignCriterionServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceGetResponse>> GetAsync(SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceGetResponse>();
			outData.Header = new CampaignCriterionServiceResponseHeader();
			outData.Body = new CampaignCriterionServiceGetResponse();
			var faultData = new CampaignCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceMutateResponse>> MutateAsync(SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceMutateResponse>();
			outData.Header = new CampaignCriterionServiceResponseHeader();
			outData.Body = new CampaignCriterionServiceMutateResponse();
			var faultData = new CampaignCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceQueryResponse>> QueryAsync(SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignCriterionServiceResponseHeader, CampaignCriterionServiceQueryResponse>();
			outData.Header = new CampaignCriterionServiceResponseHeader();
			outData.Body = new CampaignCriterionServiceQueryResponse();
			var faultData = new CampaignCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CampaignExtensionSettingServiceSoapBinding : BaseSoapBinding
	{
		public CampaignExtensionSettingServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceGetResponse>> GetAsync(SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceGetResponse>();
			outData.Header = new CampaignExtensionSettingServiceResponseHeader();
			outData.Body = new CampaignExtensionSettingServiceGetResponse();
			var faultData = new CampaignExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceMutateResponse>> MutateAsync(SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceMutateResponse>();
			outData.Header = new CampaignExtensionSettingServiceResponseHeader();
			outData.Body = new CampaignExtensionSettingServiceMutateResponse();
			var faultData = new CampaignExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceQueryResponse>> QueryAsync(SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignExtensionSettingServiceResponseHeader, CampaignExtensionSettingServiceQueryResponse>();
			outData.Header = new CampaignExtensionSettingServiceResponseHeader();
			outData.Body = new CampaignExtensionSettingServiceQueryResponse();
			var faultData = new CampaignExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CampaignFeedServiceSoapBinding : BaseSoapBinding
	{
		public CampaignFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceGetResponse>> GetAsync(SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceGetResponse>();
			outData.Header = new CampaignFeedServiceResponseHeader();
			outData.Body = new CampaignFeedServiceGetResponse();
			var faultData = new CampaignFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceMutateResponse>> MutateAsync(SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceMutateResponse>();
			outData.Header = new CampaignFeedServiceResponseHeader();
			outData.Body = new CampaignFeedServiceMutateResponse();
			var faultData = new CampaignFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceQueryResponse>> QueryAsync(SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignFeedServiceResponseHeader, CampaignFeedServiceQueryResponse>();
			outData.Header = new CampaignFeedServiceResponseHeader();
			outData.Body = new CampaignFeedServiceQueryResponse();
			var faultData = new CampaignFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CampaignServiceSoapBinding : BaseSoapBinding
	{
		public CampaignServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CampaignServiceResponseHeader, CampaignServiceGetResponse>> GetAsync(SoapData<CampaignServiceRequestHeader, CampaignServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignServiceResponseHeader, CampaignServiceGetResponse>();
			outData.Header = new CampaignServiceResponseHeader();
			outData.Body = new CampaignServiceGetResponse();
			var faultData = new CampaignServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignServiceResponseHeader, CampaignServiceMutateResponse>> MutateAsync(SoapData<CampaignServiceRequestHeader, CampaignServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignServiceResponseHeader, CampaignServiceMutateResponse>();
			outData.Header = new CampaignServiceResponseHeader();
			outData.Body = new CampaignServiceMutateResponse();
			var faultData = new CampaignServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignServiceResponseHeader, CampaignServiceMutateLabelResponse>> MutateLabelAsync(SoapData<CampaignServiceRequestHeader, CampaignServiceMutateLabel> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLabel", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignServiceResponseHeader, CampaignServiceMutateLabelResponse>();
			outData.Header = new CampaignServiceResponseHeader();
			outData.Body = new CampaignServiceMutateLabelResponse();
			var faultData = new CampaignServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignServiceResponseHeader, CampaignServiceQueryResponse>> QueryAsync(SoapData<CampaignServiceRequestHeader, CampaignServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignServiceResponseHeader, CampaignServiceQueryResponse>();
			outData.Header = new CampaignServiceResponseHeader();
			outData.Body = new CampaignServiceQueryResponse();
			var faultData = new CampaignServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CampaignSharedSetServiceSoapBinding : BaseSoapBinding
	{
		public CampaignSharedSetServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceGetResponse>> GetAsync(SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceGetResponse>();
			outData.Header = new CampaignSharedSetServiceResponseHeader();
			outData.Body = new CampaignSharedSetServiceGetResponse();
			var faultData = new CampaignSharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceMutateResponse>> MutateAsync(SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceMutateResponse>();
			outData.Header = new CampaignSharedSetServiceResponseHeader();
			outData.Body = new CampaignSharedSetServiceMutateResponse();
			var faultData = new CampaignSharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceQueryResponse>> QueryAsync(SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CampaignSharedSetServiceResponseHeader, CampaignSharedSetServiceQueryResponse>();
			outData.Header = new CampaignSharedSetServiceResponseHeader();
			outData.Body = new CampaignSharedSetServiceQueryResponse();
			var faultData = new CampaignSharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class ConstantDataServiceSoapBinding : BaseSoapBinding
	{
		public ConstantDataServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetAgeRangeCriterionResponse>> GetAgeRangeCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetAgeRangeCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getAgeRangeCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetAgeRangeCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetAgeRangeCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetCarrierCriterionResponse>> GetCarrierCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetCarrierCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getCarrierCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetCarrierCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetCarrierCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetGenderCriterionResponse>> GetGenderCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetGenderCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getGenderCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetGenderCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetGenderCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetLanguageCriterionResponse>> GetLanguageCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetLanguageCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getLanguageCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetLanguageCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetLanguageCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetMobileAppCategoryCriterionResponse>> GetMobileAppCategoryCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetMobileAppCategoryCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getMobileAppCategoryCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetMobileAppCategoryCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetMobileAppCategoryCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetMobileDeviceCriterionResponse>> GetMobileDeviceCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetMobileDeviceCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getMobileDeviceCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetMobileDeviceCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetMobileDeviceCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetOperatingSystemVersionCriterionResponse>> GetOperatingSystemVersionCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetOperatingSystemVersionCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getOperatingSystemVersionCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetOperatingSystemVersionCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetOperatingSystemVersionCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetProductBiddingCategoryDataResponse>> GetProductBiddingCategoryDataAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetProductBiddingCategoryData> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getProductBiddingCategoryData", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetProductBiddingCategoryDataResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetProductBiddingCategoryDataResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetUserInterestCriterionResponse>> GetUserInterestCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetUserInterestCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getUserInterestCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetUserInterestCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetUserInterestCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetVerticalCriterionResponse>> GetVerticalCriterionAsync(SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetVerticalCriterion> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getVerticalCriterion", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConstantDataServiceResponseHeader, ConstantDataServiceGetVerticalCriterionResponse>();
			outData.Header = new ConstantDataServiceResponseHeader();
			outData.Body = new ConstantDataServiceGetVerticalCriterionResponse();
			var faultData = new ConstantDataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class ConversionTrackerServiceSoapBinding : BaseSoapBinding
	{
		public ConversionTrackerServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceGetResponse>> GetAsync(SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceGetResponse>();
			outData.Header = new ConversionTrackerServiceResponseHeader();
			outData.Body = new ConversionTrackerServiceGetResponse();
			var faultData = new ConversionTrackerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceMutateResponse>> MutateAsync(SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceMutateResponse>();
			outData.Header = new ConversionTrackerServiceResponseHeader();
			outData.Body = new ConversionTrackerServiceMutateResponse();
			var faultData = new ConversionTrackerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceQueryResponse>> QueryAsync(SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ConversionTrackerServiceResponseHeader, ConversionTrackerServiceQueryResponse>();
			outData.Header = new ConversionTrackerServiceResponseHeader();
			outData.Body = new ConversionTrackerServiceQueryResponse();
			var faultData = new ConversionTrackerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CustomerExtensionSettingServiceSoapBinding : BaseSoapBinding
	{
		public CustomerExtensionSettingServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceGetResponse>> GetAsync(SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceGetResponse>();
			outData.Header = new CustomerExtensionSettingServiceResponseHeader();
			outData.Body = new CustomerExtensionSettingServiceGetResponse();
			var faultData = new CustomerExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceMutateResponse>> MutateAsync(SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceMutateResponse>();
			outData.Header = new CustomerExtensionSettingServiceResponseHeader();
			outData.Body = new CustomerExtensionSettingServiceMutateResponse();
			var faultData = new CustomerExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceQueryResponse>> QueryAsync(SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerExtensionSettingServiceResponseHeader, CustomerExtensionSettingServiceQueryResponse>();
			outData.Header = new CustomerExtensionSettingServiceResponseHeader();
			outData.Body = new CustomerExtensionSettingServiceQueryResponse();
			var faultData = new CustomerExtensionSettingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CustomerFeedServiceSoapBinding : BaseSoapBinding
	{
		public CustomerFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceGetResponse>> GetAsync(SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceGetResponse>();
			outData.Header = new CustomerFeedServiceResponseHeader();
			outData.Body = new CustomerFeedServiceGetResponse();
			var faultData = new CustomerFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceMutateResponse>> MutateAsync(SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceMutateResponse>();
			outData.Header = new CustomerFeedServiceResponseHeader();
			outData.Body = new CustomerFeedServiceMutateResponse();
			var faultData = new CustomerFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceQueryResponse>> QueryAsync(SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerFeedServiceResponseHeader, CustomerFeedServiceQueryResponse>();
			outData.Header = new CustomerFeedServiceResponseHeader();
			outData.Body = new CustomerFeedServiceQueryResponse();
			var faultData = new CustomerFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CustomerServiceSoapBinding : BaseSoapBinding
	{
		public CustomerServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CustomerServiceResponseHeader, CustomerServiceGetCustomersResponse>> GetCustomersAsync(SoapData<CustomerServiceRequestHeader, CustomerServiceGetCustomers> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getCustomers", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerServiceResponseHeader, CustomerServiceGetCustomersResponse>();
			outData.Header = new CustomerServiceResponseHeader();
			outData.Body = new CustomerServiceGetCustomersResponse();
			var faultData = new CustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerServiceResponseHeader, CustomerServiceGetServiceLinksResponse>> GetServiceLinksAsync(SoapData<CustomerServiceRequestHeader, CustomerServiceGetServiceLinks> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getServiceLinks", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerServiceResponseHeader, CustomerServiceGetServiceLinksResponse>();
			outData.Header = new CustomerServiceResponseHeader();
			outData.Body = new CustomerServiceGetServiceLinksResponse();
			var faultData = new CustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerServiceResponseHeader, CustomerServiceMutateResponse>> MutateAsync(SoapData<CustomerServiceRequestHeader, CustomerServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerServiceResponseHeader, CustomerServiceMutateResponse>();
			outData.Header = new CustomerServiceResponseHeader();
			outData.Body = new CustomerServiceMutateResponse();
			var faultData = new CustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<CustomerServiceResponseHeader, CustomerServiceMutateServiceLinksResponse>> MutateServiceLinksAsync(SoapData<CustomerServiceRequestHeader, CustomerServiceMutateServiceLinks> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateServiceLinks", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerServiceResponseHeader, CustomerServiceMutateServiceLinksResponse>();
			outData.Header = new CustomerServiceResponseHeader();
			outData.Body = new CustomerServiceMutateServiceLinksResponse();
			var faultData = new CustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class CustomerSyncServiceSoapBinding : BaseSoapBinding
	{
		public CustomerSyncServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<CustomerSyncServiceResponseHeader, CustomerSyncServiceGetResponse>> GetAsync(SoapData<CustomerSyncServiceRequestHeader, CustomerSyncServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/ch/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/ch/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<CustomerSyncServiceResponseHeader, CustomerSyncServiceGetResponse>();
			outData.Header = new CustomerSyncServiceResponseHeader();
			outData.Body = new CustomerSyncServiceGetResponse();
			var faultData = new CustomerSyncServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class DataServiceSoapBinding : BaseSoapBinding
	{
		public DataServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceGetAdGroupBidLandscapeResponse>> GetAdGroupBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceGetAdGroupBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getAdGroupBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceGetAdGroupBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceGetAdGroupBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceGetCampaignCriterionBidLandscapeResponse>> GetCampaignCriterionBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceGetCampaignCriterionBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getCampaignCriterionBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceGetCampaignCriterionBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceGetCampaignCriterionBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceGetCriterionBidLandscapeResponse>> GetCriterionBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceGetCriterionBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getCriterionBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceGetCriterionBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceGetCriterionBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceGetDomainCategoryResponse>> GetDomainCategoryAsync(SoapData<DataServiceRequestHeader, DataServiceGetDomainCategory> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getDomainCategory", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceGetDomainCategoryResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceGetDomainCategoryResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceQueryAdGroupBidLandscapeResponse>> QueryAdGroupBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceQueryAdGroupBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("queryAdGroupBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceQueryAdGroupBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceQueryAdGroupBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceQueryCampaignCriterionBidLandscapeResponse>> QueryCampaignCriterionBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceQueryCampaignCriterionBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("queryCampaignCriterionBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceQueryCampaignCriterionBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceQueryCampaignCriterionBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceQueryCriterionBidLandscapeResponse>> QueryCriterionBidLandscapeAsync(SoapData<DataServiceRequestHeader, DataServiceQueryCriterionBidLandscape> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("queryCriterionBidLandscape", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceQueryCriterionBidLandscapeResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceQueryCriterionBidLandscapeResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DataServiceResponseHeader, DataServiceQueryDomainCategoryResponse>> QueryDomainCategoryAsync(SoapData<DataServiceRequestHeader, DataServiceQueryDomainCategory> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("queryDomainCategory", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DataServiceResponseHeader, DataServiceQueryDomainCategoryResponse>();
			outData.Header = new DataServiceResponseHeader();
			outData.Body = new DataServiceQueryDomainCategoryResponse();
			var faultData = new DataServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class DraftAsyncErrorServiceSoapBinding : BaseSoapBinding
	{
		public DraftAsyncErrorServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<DraftAsyncErrorServiceResponseHeader, DraftAsyncErrorServiceGetResponse>> GetAsync(SoapData<DraftAsyncErrorServiceRequestHeader, DraftAsyncErrorServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DraftAsyncErrorServiceResponseHeader, DraftAsyncErrorServiceGetResponse>();
			outData.Header = new DraftAsyncErrorServiceResponseHeader();
			outData.Body = new DraftAsyncErrorServiceGetResponse();
			var faultData = new DraftAsyncErrorServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DraftAsyncErrorServiceResponseHeader, DraftAsyncErrorServiceQueryResponse>> QueryAsync(SoapData<DraftAsyncErrorServiceRequestHeader, DraftAsyncErrorServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DraftAsyncErrorServiceResponseHeader, DraftAsyncErrorServiceQueryResponse>();
			outData.Header = new DraftAsyncErrorServiceResponseHeader();
			outData.Body = new DraftAsyncErrorServiceQueryResponse();
			var faultData = new DraftAsyncErrorServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class DraftServiceSoapBinding : BaseSoapBinding
	{
		public DraftServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<DraftServiceResponseHeader, DraftServiceGetResponse>> GetAsync(SoapData<DraftServiceRequestHeader, DraftServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DraftServiceResponseHeader, DraftServiceGetResponse>();
			outData.Header = new DraftServiceResponseHeader();
			outData.Body = new DraftServiceGetResponse();
			var faultData = new DraftServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DraftServiceResponseHeader, DraftServiceMutateResponse>> MutateAsync(SoapData<DraftServiceRequestHeader, DraftServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DraftServiceResponseHeader, DraftServiceMutateResponse>();
			outData.Header = new DraftServiceResponseHeader();
			outData.Body = new DraftServiceMutateResponse();
			var faultData = new DraftServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<DraftServiceResponseHeader, DraftServiceQueryResponse>> QueryAsync(SoapData<DraftServiceRequestHeader, DraftServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<DraftServiceResponseHeader, DraftServiceQueryResponse>();
			outData.Header = new DraftServiceResponseHeader();
			outData.Body = new DraftServiceQueryResponse();
			var faultData = new DraftServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class FeedItemServiceSoapBinding : BaseSoapBinding
	{
		public FeedItemServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<FeedItemServiceResponseHeader, FeedItemServiceGetResponse>> GetAsync(SoapData<FeedItemServiceRequestHeader, FeedItemServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedItemServiceResponseHeader, FeedItemServiceGetResponse>();
			outData.Header = new FeedItemServiceResponseHeader();
			outData.Body = new FeedItemServiceGetResponse();
			var faultData = new FeedItemServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedItemServiceResponseHeader, FeedItemServiceMutateResponse>> MutateAsync(SoapData<FeedItemServiceRequestHeader, FeedItemServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedItemServiceResponseHeader, FeedItemServiceMutateResponse>();
			outData.Header = new FeedItemServiceResponseHeader();
			outData.Body = new FeedItemServiceMutateResponse();
			var faultData = new FeedItemServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedItemServiceResponseHeader, FeedItemServiceQueryResponse>> QueryAsync(SoapData<FeedItemServiceRequestHeader, FeedItemServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedItemServiceResponseHeader, FeedItemServiceQueryResponse>();
			outData.Header = new FeedItemServiceResponseHeader();
			outData.Body = new FeedItemServiceQueryResponse();
			var faultData = new FeedItemServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class FeedMappingServiceSoapBinding : BaseSoapBinding
	{
		public FeedMappingServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceGetResponse>> GetAsync(SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceGetResponse>();
			outData.Header = new FeedMappingServiceResponseHeader();
			outData.Body = new FeedMappingServiceGetResponse();
			var faultData = new FeedMappingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceMutateResponse>> MutateAsync(SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceMutateResponse>();
			outData.Header = new FeedMappingServiceResponseHeader();
			outData.Body = new FeedMappingServiceMutateResponse();
			var faultData = new FeedMappingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceQueryResponse>> QueryAsync(SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedMappingServiceResponseHeader, FeedMappingServiceQueryResponse>();
			outData.Header = new FeedMappingServiceResponseHeader();
			outData.Body = new FeedMappingServiceQueryResponse();
			var faultData = new FeedMappingServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class FeedServiceSoapBinding : BaseSoapBinding
	{
		public FeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<FeedServiceResponseHeader, FeedServiceGetResponse>> GetAsync(SoapData<FeedServiceRequestHeader, FeedServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedServiceResponseHeader, FeedServiceGetResponse>();
			outData.Header = new FeedServiceResponseHeader();
			outData.Body = new FeedServiceGetResponse();
			var faultData = new FeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedServiceResponseHeader, FeedServiceMutateResponse>> MutateAsync(SoapData<FeedServiceRequestHeader, FeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedServiceResponseHeader, FeedServiceMutateResponse>();
			outData.Header = new FeedServiceResponseHeader();
			outData.Body = new FeedServiceMutateResponse();
			var faultData = new FeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<FeedServiceResponseHeader, FeedServiceQueryResponse>> QueryAsync(SoapData<FeedServiceRequestHeader, FeedServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<FeedServiceResponseHeader, FeedServiceQueryResponse>();
			outData.Header = new FeedServiceResponseHeader();
			outData.Body = new FeedServiceQueryResponse();
			var faultData = new FeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class LabelServiceSoapBinding : BaseSoapBinding
	{
		public LabelServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<LabelServiceResponseHeader, LabelServiceGetResponse>> GetAsync(SoapData<LabelServiceRequestHeader, LabelServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<LabelServiceResponseHeader, LabelServiceGetResponse>();
			outData.Header = new LabelServiceResponseHeader();
			outData.Body = new LabelServiceGetResponse();
			var faultData = new LabelServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<LabelServiceResponseHeader, LabelServiceMutateResponse>> MutateAsync(SoapData<LabelServiceRequestHeader, LabelServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<LabelServiceResponseHeader, LabelServiceMutateResponse>();
			outData.Header = new LabelServiceResponseHeader();
			outData.Body = new LabelServiceMutateResponse();
			var faultData = new LabelServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<LabelServiceResponseHeader, LabelServiceQueryResponse>> QueryAsync(SoapData<LabelServiceRequestHeader, LabelServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<LabelServiceResponseHeader, LabelServiceQueryResponse>();
			outData.Header = new LabelServiceResponseHeader();
			outData.Body = new LabelServiceQueryResponse();
			var faultData = new LabelServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class LocationCriterionServiceSoapBinding : BaseSoapBinding
	{
		public LocationCriterionServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<LocationCriterionServiceResponseHeader, LocationCriterionServiceGetResponse>> GetAsync(SoapData<LocationCriterionServiceRequestHeader, LocationCriterionServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<LocationCriterionServiceResponseHeader, LocationCriterionServiceGetResponse>();
			outData.Header = new LocationCriterionServiceResponseHeader();
			outData.Body = new LocationCriterionServiceGetResponse();
			var faultData = new LocationCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<LocationCriterionServiceResponseHeader, LocationCriterionServiceQueryResponse>> QueryAsync(SoapData<LocationCriterionServiceRequestHeader, LocationCriterionServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<LocationCriterionServiceResponseHeader, LocationCriterionServiceQueryResponse>();
			outData.Header = new LocationCriterionServiceResponseHeader();
			outData.Body = new LocationCriterionServiceQueryResponse();
			var faultData = new LocationCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class ManagedCustomerServiceSoapBinding : BaseSoapBinding
	{
		public ManagedCustomerServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceGetResponse>> GetAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceGetResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceGetResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceGetPendingInvitationsResponse>> GetPendingInvitationsAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceGetPendingInvitations> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getPendingInvitations", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceGetPendingInvitationsResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceGetPendingInvitationsResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateResponse>> MutateAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceMutateResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateLabelResponse>> MutateLabelAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateLabel> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLabel", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateLabelResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceMutateLabelResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateLinkResponse>> MutateLinkAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateLink> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateLink", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateLinkResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceMutateLinkResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateManagerResponse>> MutateManagerAsync(SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateManager> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutateManager", "https://adwords.google.com/api/adwords/mcm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ManagedCustomerServiceResponseHeader, ManagedCustomerServiceMutateManagerResponse>();
			outData.Header = new ManagedCustomerServiceResponseHeader();
			outData.Body = new ManagedCustomerServiceMutateManagerResponse();
			var faultData = new ManagedCustomerServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class MediaServiceSoapBinding : BaseSoapBinding
	{
		public MediaServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<MediaServiceResponseHeader, MediaServiceGetResponse>> GetAsync(SoapData<MediaServiceRequestHeader, MediaServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<MediaServiceResponseHeader, MediaServiceGetResponse>();
			outData.Header = new MediaServiceResponseHeader();
			outData.Body = new MediaServiceGetResponse();
			var faultData = new MediaServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<MediaServiceResponseHeader, MediaServiceQueryResponse>> QueryAsync(SoapData<MediaServiceRequestHeader, MediaServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<MediaServiceResponseHeader, MediaServiceQueryResponse>();
			outData.Header = new MediaServiceResponseHeader();
			outData.Body = new MediaServiceQueryResponse();
			var faultData = new MediaServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<MediaServiceResponseHeader, MediaServiceUploadResponse>> UploadAsync(SoapData<MediaServiceRequestHeader, MediaServiceUpload> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("upload", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<MediaServiceResponseHeader, MediaServiceUploadResponse>();
			outData.Header = new MediaServiceResponseHeader();
			outData.Body = new MediaServiceUploadResponse();
			var faultData = new MediaServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class OfflineCallConversionFeedServiceSoapBinding : BaseSoapBinding
	{
		public OfflineCallConversionFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<OfflineCallConversionFeedServiceResponseHeader, OfflineCallConversionFeedServiceMutateResponse>> MutateAsync(SoapData<OfflineCallConversionFeedServiceRequestHeader, OfflineCallConversionFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<OfflineCallConversionFeedServiceResponseHeader, OfflineCallConversionFeedServiceMutateResponse>();
			outData.Header = new OfflineCallConversionFeedServiceResponseHeader();
			outData.Body = new OfflineCallConversionFeedServiceMutateResponse();
			var faultData = new OfflineCallConversionFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class OfflineConversionFeedServiceSoapBinding : BaseSoapBinding
	{
		public OfflineConversionFeedServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<OfflineConversionFeedServiceResponseHeader, OfflineConversionFeedServiceMutateResponse>> MutateAsync(SoapData<OfflineConversionFeedServiceRequestHeader, OfflineConversionFeedServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<OfflineConversionFeedServiceResponseHeader, OfflineConversionFeedServiceMutateResponse>();
			outData.Header = new OfflineConversionFeedServiceResponseHeader();
			outData.Body = new OfflineConversionFeedServiceMutateResponse();
			var faultData = new OfflineConversionFeedServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class ReportDefinitionServiceSoapBinding : BaseSoapBinding
	{
		public ReportDefinitionServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<ReportDefinitionServiceResponseHeader, ReportDefinitionServiceGetReportFieldsResponse>> GetReportFieldsAsync(SoapData<ReportDefinitionServiceRequestHeader, ReportDefinitionServiceGetReportFields> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("getReportFields", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<ReportDefinitionServiceResponseHeader, ReportDefinitionServiceGetReportFieldsResponse>();
			outData.Header = new ReportDefinitionServiceResponseHeader();
			outData.Body = new ReportDefinitionServiceGetReportFieldsResponse();
			var faultData = new ReportDefinitionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class SharedCriterionServiceSoapBinding : BaseSoapBinding
	{
		public SharedCriterionServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceGetResponse>> GetAsync(SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceGetResponse>();
			outData.Header = new SharedCriterionServiceResponseHeader();
			outData.Body = new SharedCriterionServiceGetResponse();
			var faultData = new SharedCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceMutateResponse>> MutateAsync(SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceMutateResponse>();
			outData.Header = new SharedCriterionServiceResponseHeader();
			outData.Body = new SharedCriterionServiceMutateResponse();
			var faultData = new SharedCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceQueryResponse>> QueryAsync(SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedCriterionServiceResponseHeader, SharedCriterionServiceQueryResponse>();
			outData.Header = new SharedCriterionServiceResponseHeader();
			outData.Body = new SharedCriterionServiceQueryResponse();
			var faultData = new SharedCriterionServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class SharedSetServiceSoapBinding : BaseSoapBinding
	{
		public SharedSetServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<SharedSetServiceResponseHeader, SharedSetServiceGetResponse>> GetAsync(SoapData<SharedSetServiceRequestHeader, SharedSetServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedSetServiceResponseHeader, SharedSetServiceGetResponse>();
			outData.Header = new SharedSetServiceResponseHeader();
			outData.Body = new SharedSetServiceGetResponse();
			var faultData = new SharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<SharedSetServiceResponseHeader, SharedSetServiceMutateResponse>> MutateAsync(SoapData<SharedSetServiceRequestHeader, SharedSetServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedSetServiceResponseHeader, SharedSetServiceMutateResponse>();
			outData.Header = new SharedSetServiceResponseHeader();
			outData.Body = new SharedSetServiceMutateResponse();
			var faultData = new SharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<SharedSetServiceResponseHeader, SharedSetServiceQueryResponse>> QueryAsync(SoapData<SharedSetServiceRequestHeader, SharedSetServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<SharedSetServiceResponseHeader, SharedSetServiceQueryResponse>();
			outData.Header = new SharedSetServiceResponseHeader();
			outData.Body = new SharedSetServiceQueryResponse();
			var faultData = new SharedSetServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class TargetingIdeaServiceSoapBinding : BaseSoapBinding
	{
		public TargetingIdeaServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<TargetingIdeaServiceResponseHeader, TargetingIdeaServiceGetResponse>> GetAsync(SoapData<TargetingIdeaServiceRequestHeader, TargetingIdeaServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/o/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/o/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TargetingIdeaServiceResponseHeader, TargetingIdeaServiceGetResponse>();
			outData.Header = new TargetingIdeaServiceResponseHeader();
			outData.Body = new TargetingIdeaServiceGetResponse();
			var faultData = new TargetingIdeaServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class TrafficEstimatorServiceSoapBinding : BaseSoapBinding
	{
		public TrafficEstimatorServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<TrafficEstimatorServiceResponseHeader, TrafficEstimatorServiceGetResponse>> GetAsync(SoapData<TrafficEstimatorServiceRequestHeader, TrafficEstimatorServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/o/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/o/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrafficEstimatorServiceResponseHeader, TrafficEstimatorServiceGetResponse>();
			outData.Header = new TrafficEstimatorServiceResponseHeader();
			outData.Body = new TrafficEstimatorServiceGetResponse();
			var faultData = new TrafficEstimatorServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class TrialAsyncErrorServiceSoapBinding : BaseSoapBinding
	{
		public TrialAsyncErrorServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<TrialAsyncErrorServiceResponseHeader, TrialAsyncErrorServiceGetResponse>> GetAsync(SoapData<TrialAsyncErrorServiceRequestHeader, TrialAsyncErrorServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrialAsyncErrorServiceResponseHeader, TrialAsyncErrorServiceGetResponse>();
			outData.Header = new TrialAsyncErrorServiceResponseHeader();
			outData.Body = new TrialAsyncErrorServiceGetResponse();
			var faultData = new TrialAsyncErrorServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<TrialAsyncErrorServiceResponseHeader, TrialAsyncErrorServiceQueryResponse>> QueryAsync(SoapData<TrialAsyncErrorServiceRequestHeader, TrialAsyncErrorServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrialAsyncErrorServiceResponseHeader, TrialAsyncErrorServiceQueryResponse>();
			outData.Header = new TrialAsyncErrorServiceResponseHeader();
			outData.Body = new TrialAsyncErrorServiceQueryResponse();
			var faultData = new TrialAsyncErrorServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	internal class TrialServiceSoapBinding : BaseSoapBinding
	{
		public TrialServiceSoapBinding(string soapLocation, string accessToken, int timeout, bool enableGzipCompression, ILogger logger)
			: base(soapLocation, accessToken, timeout, enableGzipCompression, logger)
		{
		}
		public async Task<SoapData<TrialServiceResponseHeader, TrialServiceGetResponse>> GetAsync(SoapData<TrialServiceRequestHeader, TrialServiceGet> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("get", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrialServiceResponseHeader, TrialServiceGetResponse>();
			outData.Header = new TrialServiceResponseHeader();
			outData.Body = new TrialServiceGetResponse();
			var faultData = new TrialServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<TrialServiceResponseHeader, TrialServiceMutateResponse>> MutateAsync(SoapData<TrialServiceRequestHeader, TrialServiceMutate> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("mutate", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrialServiceResponseHeader, TrialServiceMutateResponse>();
			outData.Header = new TrialServiceResponseHeader();
			outData.Body = new TrialServiceMutateResponse();
			var faultData = new TrialServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
		public async Task<SoapData<TrialServiceResponseHeader, TrialServiceQueryResponse>> QueryAsync(SoapData<TrialServiceRequestHeader, TrialServiceQuery> inData)
		{
			var xHeaderData = new XElement(XName.Get("RequestHeader", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Header.WriteTo(xHeaderData);
			var xBodyData = new XElement(XName.Get("query", "https://adwords.google.com/api/adwords/cm/v201609"));
			inData.Body.WriteTo(xBodyData);
			var outData = new SoapData<TrialServiceResponseHeader, TrialServiceQueryResponse>();
			outData.Header = new TrialServiceResponseHeader();
			outData.Body = new TrialServiceQueryResponse();
			var faultData = new TrialServiceApiExceptionFault();
			var isSuccessful = await GetSoapResultAsync("", xHeaderData, xBodyData, outData, faultData).ConfigureAwait(false);
			if (!isSuccessful)
			{
				if (faultData.Errors.Count == 1)
				{
					throw faultData.Errors[0];
				}
				else
				{
					throw new AggregateException(faultData.Errors);
				}
			}
			return outData;
		}
	}
	public class AccountLabelService : IAccountLabelService
	{
		public AdWordsApiConfig Config { get; }
		public AccountLabelService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of labels specified by the selector for the authenticated user.
		///
		/// @param selector filters the list of labels to return
		/// @return response containing lists of labels that meet all the criteria of the selector
		/// @throws ApiException if a problem occurs fetching the information requested
		/// </summary>
		public async Task<AccountLabelPage> GetAsync(Selector selector)
		{
			var binding = new AccountLabelServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/AccountLabelService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AccountLabelServiceRequestHeader, AccountLabelServiceGet>();
			inData.Header = new AccountLabelServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AccountLabelServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Possible actions:
		/// <ul>
		/// <li> Create a new label - create a new {@link Label} and call mutate with ADD operator
		/// <li> Edit the label name - set the appropriate fields in your {@linkplain Label} and call
		/// mutate with the SET operator. Null fields will be interpreted to mean "no change"
		/// <li> Delete the label - call mutate with REMOVE operator
		/// </ul>
		///
		/// @param operations list of unique operations to be executed in a single transaction, in the
		/// order specified.
		/// @return the mutated labels, in the same order that they were in as the parameter
		/// @throws ApiException if problems occurs while modifying label information
		/// </summary>
		public async Task<AccountLabelReturnValue> MutateAsync(IEnumerable<AccountLabelOperation> operations)
		{
			var binding = new AccountLabelServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/AccountLabelService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AccountLabelServiceRequestHeader, AccountLabelServiceMutate>();
			inData.Header = new AccountLabelServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AccountLabelServiceMutate();
			inData.Body.Operations = new List<AccountLabelOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AccountLabelServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdCustomizerFeedService : IAdCustomizerFeedService
	{
		public AdWordsApiConfig Config { get; }
		public AdCustomizerFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of AdCustomizerFeeds that meet the selector criteria.
		///
		/// @param selector Determines which AdCustomizerFeeds to return. If empty, all AdCustomizerFeeds
		/// are returned.
		/// @return The list of AdCustomizerFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdCustomizerFeedPage> GetAsync(Selector selector)
		{
			var binding = new AdCustomizerFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdCustomizerFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdCustomizerFeedServiceRequestHeader, AdCustomizerFeedServiceGet>();
			inData.Header = new AdCustomizerFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdCustomizerFeedServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, removes, or modifies AdCustomizerFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting AdCustomizerFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdCustomizerFeedReturnValue> MutateAsync(IEnumerable<AdCustomizerFeedOperation> operations)
		{
			var binding = new AdCustomizerFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdCustomizerFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdCustomizerFeedServiceRequestHeader, AdCustomizerFeedServiceMutate>();
			inData.Header = new AdCustomizerFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdCustomizerFeedServiceMutate();
			inData.Body.Operations = new List<AdCustomizerFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdCustomizerFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupAdService : IAdGroupAdService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupAdService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of AdGroupAds.
		/// AdGroupAds that had been removed are not returned by default.
		///
		/// @param serviceSelector The selector specifying the {@link AdGroupAd}s to return.
		/// @return The page containing the AdGroupAds that meet the criteria specified by the selector.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<AdGroupAdPage> GetAsync(Selector serviceSelector)
		{
			var binding = new AdGroupAdServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupAdService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceGet>();
			inData.Header = new AdGroupAdServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupAdServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations (ie. add, set, remove):
		/// <p>Add - Creates a new {@linkplain AdGroupAd ad group ad}. The
		/// {@code adGroupId} must
		/// reference an existing ad group. The child {@code Ad} must be sufficiently
		/// specified by constructing a concrete ad type (such as {@code TextAd})
		/// and setting its fields accordingly.</p>
		/// <p>Set - Updates an ad group ad. Except for {@code status},
		/// ad group ad fields are not mutable. Status updates are
		/// straightforward - the status of the ad group ad is updated as
		/// specified. If any other field has changed, it will be ignored. If
		/// you want to change any of the fields other than status, you must
		/// make a new ad and then remove the old one.</p>
		/// <p>Remove - Removes the link between the specified AdGroup and
		/// Ad.</p>
		/// @param operations The operations to apply.
		/// @return A list of AdGroupAds where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add/set operation, the return AdGroupAd will be what is saved to the db.
		/// In the case of the remove operation, the return AdGroupAd will simply be
		/// an AdGroupAd containing an Ad with the id set to the Ad being removed from
		/// the AdGroup.
		/// </summary>
		public async Task<AdGroupAdReturnValue> MutateAsync(IEnumerable<AdGroupAdOperation> operations)
		{
			var binding = new AdGroupAdServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupAdService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceMutate>();
			inData.Header = new AdGroupAdServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupAdServiceMutate();
			inData.Body.Operations = new List<AdGroupAdOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds labels to the AdGroupAd or removes labels from the AdGroupAd.
		/// <p>Add - Apply an existing label to an existing {@linkplain AdGroupAd ad group ad}. The
		/// {@code adGroupId} and {@code adId} must reference an existing
		/// {@linkplain AdGroupAd ad group ad}. The {@code labelId} must reference an existing
		/// {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified {@linkplain AdGroupAd ad group ad} and
		/// {@linkplain Label label}.
		/// @param operations The operations to apply.
		/// @return A list of AdGroupAdLabel where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupAdLabel contains the AdGroupId, AdId and the LabelId.
		/// In the case of a remove operation, the returned AdGroupAdLabel will only have AdGroupId and
		/// AdId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<AdGroupAdLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupAdLabelOperation> operations)
		{
			var binding = new AdGroupAdServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupAdService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceMutateLabel>();
			inData.Header = new AdGroupAdServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupAdServiceMutateLabel();
			inData.Body.Operations = new List<AdGroupAdLabelOperation>(operations);
			var outData = await binding.MutateLabelAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of AdGroupAds based on the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of AdGroupAds.
		/// @throws ApiException if problems occur while parsing the query or fetching AdGroupAds.
		/// </summary>
		public async Task<AdGroupAdPage> QueryAsync(string query)
		{
			var binding = new AdGroupAdServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupAdService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceQuery>();
			inData.Header = new AdGroupAdServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupAdServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Upgrades the url for a set of ads.
		/// @param operations The list of upgrades to apply.
		/// @return The list of Ads that were upgraded.
		/// </summary>
		public async Task<IEnumerable<Ad>> UpgradeUrlAsync(IEnumerable<AdUrlUpgrade> operations)
		{
			var binding = new AdGroupAdServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupAdService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupAdServiceRequestHeader, AdGroupAdServiceUpgradeUrl>();
			inData.Header = new AdGroupAdServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupAdServiceUpgradeUrl();
			inData.Body.Operations = new List<AdUrlUpgrade>(operations);
			var outData = await binding.UpgradeUrlAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupAdServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupBidModifierService : IAdGroupBidModifierService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupBidModifierService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Gets ad group level criterion bid modifiers.
		///
		/// @param selector The selector specifying the {@link AdGroupBidModifier}s to return.
		/// @return A list of ad group bid modifiers.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<AdGroupBidModifierPage> GetAsync(Selector selector)
		{
			var binding = new AdGroupBidModifierServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupBidModifierService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceGet>();
			inData.Header = new AdGroupBidModifierServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupBidModifierServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, removes or updates ad group bid modifier overrides.
		///
		/// @param operations The operations to apply.
		/// @return The added ad group bid modifier overrides.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<AdGroupBidModifierReturnValue> MutateAsync(IEnumerable<AdGroupBidModifierOperation> operations)
		{
			var binding = new AdGroupBidModifierServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupBidModifierService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceMutate>();
			inData.Header = new AdGroupBidModifierServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupBidModifierServiceMutate();
			inData.Body.Operations = new List<AdGroupBidModifierOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link AdGroupBidModifier}s that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<AdGroupBidModifierPage> QueryAsync(string query)
		{
			var binding = new AdGroupBidModifierServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupBidModifierService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupBidModifierServiceRequestHeader, AdGroupBidModifierServiceQuery>();
			inData.Header = new AdGroupBidModifierServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupBidModifierServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupBidModifierServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupCriterionService : IAdGroupCriterionService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupCriterionService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Gets adgroup criteria.
		///
		/// @param serviceSelector filters the adgroup criteria to be returned.
		/// @return a page (subset) view of the criteria selected
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		public async Task<AdGroupCriterionPage> GetAsync(Selector serviceSelector)
		{
			var binding = new AdGroupCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceGet>();
			inData.Header = new AdGroupCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupCriterionServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, removes or updates adgroup criteria.
		///
		/// @param operations operations to do
		/// during checks on keywords to be added.
		/// @return added and updated adgroup criteria (without optional parts)
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		public async Task<AdGroupCriterionReturnValue> MutateAsync(IEnumerable<AdGroupCriterionOperation> operations)
		{
			var binding = new AdGroupCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceMutate>();
			inData.Header = new AdGroupCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupCriterionServiceMutate();
			inData.Body.Operations = new List<AdGroupCriterionOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds labels to the AdGroupCriterion or removes labels from the AdGroupCriterion
		/// <p>Add - Apply an existing label to an existing
		/// {@linkplain AdGroupCriterion ad group criterion}. The {@code adGroupId} and
		/// {@code criterionId}
		/// must reference an existing {@linkplain AdGroupCriterion ad group criterion}. The
		/// {@code labelId} must reference an existing {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified
		/// {@linkplain AdGroupCriterion ad group criterion} and {@linkplain Label label}.</p>
		/// @param operations the operations to apply
		/// @return a list of AdGroupCriterionLabel where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupCriterionLabel contains the AdGroupId, CriterionId and the
		/// LabelId. In the case of a remove operation, the returned AdGroupCriterionLabel will only have
		/// AdGroupId and CriterionId.
		/// @throws ApiException when there are one or more errors with the request
		/// </summary>
		public async Task<AdGroupCriterionLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupCriterionLabelOperation> operations)
		{
			var binding = new AdGroupCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceMutateLabel>();
			inData.Header = new AdGroupCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupCriterionServiceMutateLabel();
			inData.Body.Operations = new List<AdGroupCriterionLabelOperation>(operations);
			var outData = await binding.MutateLabelAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of AdGroupCriterion that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of AdGroupCriterion
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<AdGroupCriterionPage> QueryAsync(string query)
		{
			var binding = new AdGroupCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupCriterionServiceRequestHeader, AdGroupCriterionServiceQuery>();
			inData.Header = new AdGroupCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupCriterionServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupCriterionServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupExtensionSettingService : IAdGroupExtensionSettingService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupExtensionSettingService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of AdGroupExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which AdGroupExtensionSettings to return. If empty, all
		/// AdGroupExtensionSettings are returned.
		/// @return The list of AdGroupExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdGroupExtensionSettingPage> GetAsync(Selector selector)
		{
			var binding = new AdGroupExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceGet>();
			inData.Header = new AdGroupExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupExtensionSettingServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation on an ad group with an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation on an ad group with no
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link AdGroupExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link AdGroupExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdGroupExtensionSettingReturnValue> MutateAsync(IEnumerable<AdGroupExtensionSettingOperation> operations)
		{
			var binding = new AdGroupExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceMutate>();
			inData.Header = new AdGroupExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupExtensionSettingServiceMutate();
			inData.Body.Operations = new List<AdGroupExtensionSettingOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of AdGroupExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of AdGroupExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdGroupExtensionSettingPage> QueryAsync(string query)
		{
			var binding = new AdGroupExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupExtensionSettingServiceRequestHeader, AdGroupExtensionSettingServiceQuery>();
			inData.Header = new AdGroupExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupExtensionSettingServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupExtensionSettingServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupFeedService : IAdGroupFeedService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of AdGroupFeeds that meet the selector criteria.
		///
		/// @param selector Determines which AdGroupFeeds to return. If empty all
		/// adgroup feeds are returned.
		/// @return The list of AdgroupFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdGroupFeedPage> GetAsync(Selector selector)
		{
			var binding = new AdGroupFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceGet>();
			inData.Header = new AdGroupFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupFeedServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, updates or removes AdGroupFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<AdGroupFeedReturnValue> MutateAsync(IEnumerable<AdGroupFeedOperation> operations)
		{
			var binding = new AdGroupFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceMutate>();
			inData.Header = new AdGroupFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupFeedServiceMutate();
			inData.Body.Operations = new List<AdGroupFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of AdGroupFeeds that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @returns A list of AdGroupFeed.
		/// @throws ApiException if problems occur while parsing the query or fetching AdGroupFeed.
		/// </summary>
		public async Task<AdGroupFeedPage> QueryAsync(string query)
		{
			var binding = new AdGroupFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupFeedServiceRequestHeader, AdGroupFeedServiceQuery>();
			inData.Header = new AdGroupFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupFeedServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdGroupService : IAdGroupService
	{
		public AdWordsApiConfig Config { get; }
		public AdGroupService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of all the ad groups specified by the selector
		/// from the target customer's account.
		///
		/// @param serviceSelector The selector specifying the {@link AdGroup}s to return.
		/// @return List of adgroups identified by the selector.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<AdGroupPage> GetAsync(Selector serviceSelector)
		{
			var binding = new AdGroupServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupServiceRequestHeader, AdGroupServiceGet>();
			inData.Header = new AdGroupServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, updates, or removes ad groups.
		/// <p class="note"><b>Note:</b> {@link AdGroupOperation} does not support the
		/// {@code REMOVE} operator. To remove an ad group, set its
		/// {@link AdGroup#status status} to {@code REMOVED}.</p>
		///
		/// @param operations List of unique operations. The same ad group cannot be
		/// specified in more than one operation.
		/// @return The updated adgroups.
		/// </summary>
		public async Task<AdGroupReturnValue> MutateAsync(IEnumerable<AdGroupOperation> operations)
		{
			var binding = new AdGroupServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupServiceRequestHeader, AdGroupServiceMutate>();
			inData.Header = new AdGroupServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupServiceMutate();
			inData.Body.Operations = new List<AdGroupOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds labels to the {@linkplain AdGroup ad group} or removes {@linkplain Label label}s from the
		/// {@linkplain AdGroup ad group}.
		/// <p>{@code ADD} -- Apply an existing label to an existing {@linkplain AdGroup ad group}.
		/// The {@code adGroupId} must reference an existing {@linkplain AdGroup ad group}. The
		/// {@code labelId} must reference an existing {@linkplain Label label}.
		/// <p>{@code REMOVE} -- Removes the link between the specified {@linkplain AdGroup ad group}
		/// and a {@linkplain Label label}.</p>
		///
		/// @param operations the operations to apply.
		/// @return a list of {@linkplain AdGroupLabel}s where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned AdGroupLabel contains the AdGroupId and the LabelId.
		/// In the case of a remove operation, the returned AdGroupLabel will only have AdGroupId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<AdGroupLabelReturnValue> MutateLabelAsync(IEnumerable<AdGroupLabelOperation> operations)
		{
			var binding = new AdGroupServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupServiceRequestHeader, AdGroupServiceMutateLabel>();
			inData.Header = new AdGroupServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupServiceMutateLabel();
			inData.Body.Operations = new List<AdGroupLabelOperation>(operations);
			var outData = await binding.MutateLabelAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of ad groups that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @return A list of adgroups
		/// @throws ApiException
		/// </summary>
		public async Task<AdGroupPage> QueryAsync(string query)
		{
			var binding = new AdGroupServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdGroupService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdGroupServiceRequestHeader, AdGroupServiceQuery>();
			inData.Header = new AdGroupServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdGroupServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdGroupServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdParamService : IAdParamService
	{
		public AdWordsApiConfig Config { get; }
		public AdParamService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns the ad parameters that match the criteria specified in the
		/// selector.
		///
		/// @param serviceSelector Specifies which ad parameters to return.
		/// @return A list of ad parameters.
		/// </summary>
		public async Task<AdParamPage> GetAsync(Selector serviceSelector)
		{
			var binding = new AdParamServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdParamService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdParamServiceRequestHeader, AdParamServiceGet>();
			inData.Header = new AdParamServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdParamServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Sets and removes ad parameters.
		/// <p class="note"><b>Note:</b> {@code ADD} is not supported. Use {@code SET}
		/// for new ad parameters.</p>
		///
		/// <ul class="nolist">
		/// <li>{@code SET}: Creates or updates an ad parameter, setting the new
		/// parameterized value for the given ad group / keyword pair.
		/// <li>{@code REMOVE}: Removes an ad parameter. The <code><var>default-value</var>
		/// </code> specified in the ad text will be used.</li>
		/// </ul>
		///
		/// @param operations The operations to perform.
		/// @return A list of ad parameters, where each entry in the list is the
		/// result of applying the operation in the input list with the same index.
		/// For a {@code SET} operation, the returned ad parameter will contain the
		/// updated values. For a {@code REMOVE} operation, the returned ad parameter
		/// will simply be the ad parameter that was removed.
		/// </summary>
		public async Task<IEnumerable<AdParam>> MutateAsync(IEnumerable<AdParamOperation> operations)
		{
			var binding = new AdParamServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/AdParamService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdParamServiceRequestHeader, AdParamServiceMutate>();
			inData.Header = new AdParamServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdParamServiceMutate();
			inData.Body.Operations = new List<AdParamOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdParamServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class AdwordsUserListService : IAdwordsUserListService
	{
		public AdWordsApiConfig Config { get; }
		public AdwordsUserListService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns the list of user lists that meet the selector criteria.
		///
		/// @param serviceSelector the selector specifying the {@link UserList}s to return.
		/// @return a list of UserList entities which meet the selector criteria.
		/// @throws ApiException if problems occurred while fetching UserList information.
		/// </summary>
		public async Task<UserListPage> GetAsync(Selector serviceSelector)
		{
			var binding = new AdwordsUserListServiceSoapBinding("https://adwords.google.com/api/adwords/rm/v201609/AdwordsUserListService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceGet>();
			inData.Header = new AdwordsUserListServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdwordsUserListServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies a list of mutate operations (i.e. add, set):
		///
		/// Add - creates a set of user lists
		/// Set - updates a set of user lists
		/// Remove - not supported
		///
		/// @param operations the operations to apply
		/// @return a list of UserList objects
		/// </summary>
		public async Task<UserListReturnValue> MutateAsync(IEnumerable<UserListOperation> operations)
		{
			var binding = new AdwordsUserListServiceSoapBinding("https://adwords.google.com/api/adwords/rm/v201609/AdwordsUserListService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceMutate>();
			inData.Header = new AdwordsUserListServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdwordsUserListServiceMutate();
			inData.Body.Operations = new List<UserListOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Mutate members of user lists by either adding or removing their lists of members.
		/// The following {@link Operator}s are supported: ADD and REMOVE.
		///
		/// <p>Note that operations cannot have same user list id but different operators.
		///
		/// @param operations the mutate members operations to apply
		/// @return a list of UserList objects
		/// @throws ApiException when there are one or more errors with the request
		/// </summary>
		public async Task<MutateMembersReturnValue> MutateMembersAsync(IEnumerable<MutateMembersOperation> operations)
		{
			var binding = new AdwordsUserListServiceSoapBinding("https://adwords.google.com/api/adwords/rm/v201609/AdwordsUserListService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceMutateMembers>();
			inData.Header = new AdwordsUserListServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdwordsUserListServiceMutateMembers();
			inData.Body.Operations = new List<MutateMembersOperation>(operations);
			var outData = await binding.MutateMembersAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of user lists that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @return A list of UserList
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<UserListPage> QueryAsync(string query)
		{
			var binding = new AdwordsUserListServiceSoapBinding("https://adwords.google.com/api/adwords/rm/v201609/AdwordsUserListService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<AdwordsUserListServiceRequestHeader, AdwordsUserListServiceQuery>();
			inData.Header = new AdwordsUserListServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new AdwordsUserListServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(AdwordsUserListServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class BatchJobService : IBatchJobService
	{
		public AdWordsApiConfig Config { get; }
		public BatchJobService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Query the status of existing {@code BatchJob}s.
		///
		/// @param selector The selector specifying the {@code BatchJob}s to return.
		/// @return The list of selected jobs.
		/// @throws ApiException
		/// </summary>
		public async Task<BatchJobPage> GetAsync(Selector selector)
		{
			var binding = new BatchJobServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BatchJobService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BatchJobServiceRequestHeader, BatchJobServiceGet>();
			inData.Header = new BatchJobServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BatchJobServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Creates or updates a {@code BatchJob}.
		///
		/// <p class="note"><b>Note:</b> {@link BatchJobOperation} does not support the
		/// {@code REMOVE} operator. It is not necessary to remove BatchJobs.
		///
		/// @param operations A list of operations.
		/// @return The list of created or updated jobs.
		/// @throws ApiException
		/// </summary>
		public async Task<BatchJobReturnValue> MutateAsync(IEnumerable<BatchJobOperation> operations)
		{
			var binding = new BatchJobServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BatchJobService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BatchJobServiceRequestHeader, BatchJobServiceMutate>();
			inData.Header = new BatchJobServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BatchJobServiceMutate();
			inData.Body.Operations = new List<BatchJobOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of {@code BatchJob}s that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of selected jobs.
		/// @throws ApiException if problems occur while parsing the query or fetching
		/// batchjob information.
		/// </summary>
		public async Task<BatchJobPage> QueryAsync(string query)
		{
			var binding = new BatchJobServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BatchJobService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BatchJobServiceRequestHeader, BatchJobServiceQuery>();
			inData.Header = new BatchJobServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BatchJobServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(BatchJobServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class BiddingStrategyService : IBiddingStrategyService
	{
		public AdWordsApiConfig Config { get; }
		public BiddingStrategyService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of bidding strategies that match the selector.
		///
		/// @return list of bidding strategies specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		public async Task<BiddingStrategyPage> GetAsync(Selector selector)
		{
			var binding = new BiddingStrategyServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BiddingStrategyService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceGet>();
			inData.Header = new BiddingStrategyServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BiddingStrategyServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations the operations to apply
		/// @return the modified list of BiddingStrategy
		/// @throws ApiException
		/// </summary>
		public async Task<BiddingStrategyReturnValue> MutateAsync(IEnumerable<BiddingStrategyOperation> operations)
		{
			var binding = new BiddingStrategyServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BiddingStrategyService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceMutate>();
			inData.Header = new BiddingStrategyServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BiddingStrategyServiceMutate();
			inData.Body.Operations = new List<BiddingStrategyOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of bidding strategies that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<BiddingStrategyPage> QueryAsync(string query)
		{
			var binding = new BiddingStrategyServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BiddingStrategyService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BiddingStrategyServiceRequestHeader, BiddingStrategyServiceQuery>();
			inData.Header = new BiddingStrategyServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BiddingStrategyServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(BiddingStrategyServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class BudgetOrderService : IBudgetOrderService
	{
		public AdWordsApiConfig Config { get; }
		public BudgetOrderService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Gets a list of {@link BudgetOrder}s using the generic selector.
		/// @param serviceSelector specifies which BudgetOrder to return.
		/// @return A {@link BudgetOrderPage} of BudgetOrders of the client customer.
		/// All BudgetOrder fields are returned. Stats are not yet supported.
		/// @throws ApiException
		/// </summary>
		public async Task<BudgetOrderPage> GetAsync(Selector serviceSelector)
		{
			var binding = new BudgetOrderServiceSoapBinding("https://adwords.google.com/api/adwords/billing/v201609/BudgetOrderService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceGet>();
			inData.Header = new BudgetOrderServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetOrderServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns all the open/active BillingAccounts associated with the current
		/// manager.
		/// @return A list of {@link BillingAccount}s.
		/// @throws ApiException
		/// </summary>
		public async Task<IEnumerable<BillingAccount>> GetBillingAccountsAsync()
		{
			var binding = new BudgetOrderServiceSoapBinding("https://adwords.google.com/api/adwords/billing/v201609/BudgetOrderService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceGetBillingAccounts>();
			inData.Header = new BudgetOrderServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetOrderServiceGetBillingAccounts();
			var outData = await binding.GetBillingAccountsAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Mutates BudgetOrders, supported operations are:
		/// <p><code>ADD</code>: Adds a {@link BudgetOrder} to the billing account
		/// specified by the billing account ID.</p>
		/// <p><code>SET</code>: Sets the start/end date and amount of the
		/// {@link BudgetOrder}.</p>
		/// <p><code>REMOVE</code>: Cancels the {@link BudgetOrder} (status change).</p>
		/// <p class="warning"><b>Warning:</b> The <code>BudgetOrderService</code>
		/// is limited to one operation per mutate request. Any attempt to make more
		/// than one operation will result in an <code>ApiException</code>.</p>
		/// @param operations A list of operations, <b>however currently we only
		/// support one operation per mutate call</b>.
		/// @return BudgetOrders affected by the mutate operation.
		/// @throws ApiException
		/// </summary>
		public async Task<BudgetOrderReturnValue> MutateAsync(IEnumerable<BudgetOrderOperation> operations)
		{
			var binding = new BudgetOrderServiceSoapBinding("https://adwords.google.com/api/adwords/billing/v201609/BudgetOrderService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetOrderServiceRequestHeader, BudgetOrderServiceMutate>();
			inData.Header = new BudgetOrderServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetOrderServiceMutate();
			inData.Body.Operations = new List<BudgetOrderOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(BudgetOrderServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class BudgetService : IBudgetService
	{
		public AdWordsApiConfig Config { get; }
		public BudgetService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of budgets that match the selector.
		///
		/// @return List of budgets specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		public async Task<BudgetPage> GetAsync(Selector selector)
		{
			var binding = new BudgetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BudgetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetServiceRequestHeader, BudgetServiceGet>();
			inData.Header = new BudgetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations The operations to apply.
		/// @return The modified list of Budgets, returned in the same order as <code>operations</code>.
		/// @throws ApiException
		/// </summary>
		public async Task<BudgetReturnValue> MutateAsync(IEnumerable<BudgetOperation> operations)
		{
			var binding = new BudgetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BudgetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetServiceRequestHeader, BudgetServiceMutate>();
			inData.Header = new BudgetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetServiceMutate();
			inData.Body.Operations = new List<BudgetOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of budgets that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of Budget
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<BudgetPage> QueryAsync(string query)
		{
			var binding = new BudgetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/BudgetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<BudgetServiceRequestHeader, BudgetServiceQuery>();
			inData.Header = new BudgetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new BudgetServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(BudgetServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CampaignCriterionService : ICampaignCriterionService
	{
		public AdWordsApiConfig Config { get; }
		public CampaignCriterionService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Gets campaign criteria.
		///
		/// @param serviceSelector The selector specifying the {@link CampaignCriterion}s to return.
		/// @return A list of campaign criteria.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<CampaignCriterionPage> GetAsync(Selector serviceSelector)
		{
			var binding = new CampaignCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceGet>();
			inData.Header = new CampaignCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignCriterionServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, removes or updates campaign criteria.
		///
		/// @param operations The operations to apply.
		/// @return The added campaign criteria (without any optional parts).
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<CampaignCriterionReturnValue> MutateAsync(IEnumerable<CampaignCriterionOperation> operations)
		{
			var binding = new CampaignCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceMutate>();
			inData.Header = new CampaignCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignCriterionServiceMutate();
			inData.Body.Operations = new List<CampaignCriterionOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of campaign criteria that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of campaign criteria.
		/// @throws ApiException if problems occur while parsing the query or fetching campaign criteria.
		/// </summary>
		public async Task<CampaignCriterionPage> QueryAsync(string query)
		{
			var binding = new CampaignCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignCriterionServiceRequestHeader, CampaignCriterionServiceQuery>();
			inData.Header = new CampaignCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignCriterionServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CampaignCriterionServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CampaignExtensionSettingService : ICampaignExtensionSettingService
	{
		public AdWordsApiConfig Config { get; }
		public CampaignExtensionSettingService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of CampaignExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which CampaignExtensionSettings to return. If empty, all
		/// CampaignExtensionSettings are returned.
		/// @return The list of CampaignExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CampaignExtensionSettingPage> GetAsync(Selector selector)
		{
			var binding = new CampaignExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceGet>();
			inData.Header = new CampaignExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignExtensionSettingServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation on a campaign with an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation on a campaign with no
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link CampaignExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link CampaignExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CampaignExtensionSettingReturnValue> MutateAsync(IEnumerable<CampaignExtensionSettingOperation> operations)
		{
			var binding = new CampaignExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceMutate>();
			inData.Header = new CampaignExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignExtensionSettingServiceMutate();
			inData.Body.Operations = new List<CampaignExtensionSettingOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of CampaignExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of CampaignExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CampaignExtensionSettingPage> QueryAsync(string query)
		{
			var binding = new CampaignExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignExtensionSettingServiceRequestHeader, CampaignExtensionSettingServiceQuery>();
			inData.Header = new CampaignExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignExtensionSettingServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CampaignExtensionSettingServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CampaignFeedService : ICampaignFeedService
	{
		public AdWordsApiConfig Config { get; }
		public CampaignFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of CampaignFeeds that meet the selector criteria.
		///
		/// @param selector Determines which CampaignFeeds to return. If empty all
		/// Campaign feeds are returned.
		/// @return The list of CampaignFeeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CampaignFeedPage> GetAsync(Selector selector)
		{
			var binding = new CampaignFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceGet>();
			inData.Header = new CampaignFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignFeedServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, sets or removes CampaignFeeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CampaignFeedReturnValue> MutateAsync(IEnumerable<CampaignFeedOperation> operations)
		{
			var binding = new CampaignFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceMutate>();
			inData.Header = new CampaignFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignFeedServiceMutate();
			inData.Body.Operations = new List<CampaignFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link CampaignFeed}s inside a {@link CampaignFeedPage} that matches
		/// the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<CampaignFeedPage> QueryAsync(string query)
		{
			var binding = new CampaignFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignFeedServiceRequestHeader, CampaignFeedServiceQuery>();
			inData.Header = new CampaignFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignFeedServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CampaignFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CampaignService : ICampaignService
	{
		public AdWordsApiConfig Config { get; }
		public CampaignService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns the list of campaigns that meet the selector criteria.
		///
		/// @param serviceSelector the selector specifying the {@link Campaign}s to return.
		/// @return A list of campaigns.
		/// @throws ApiException if problems occurred while fetching campaign information.
		/// </summary>
		public async Task<CampaignPage> GetAsync(Selector serviceSelector)
		{
			var binding = new CampaignServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignServiceRequestHeader, CampaignServiceGet>();
			inData.Header = new CampaignServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, updates, or removes campaigns.
		/// <p class="note"><b>Note:</b> {@link CampaignOperation} does not support the
		/// <code>REMOVE</code> operator. To remove a campaign, set its
		/// {@link Campaign#status status} to {@code REMOVED}.</p>
		/// @param operations A list of unique operations.
		/// The same campaign cannot be specified in more than one operation.
		/// @return The list of updated campaigns, returned in the same order as the
		/// <code>operations</code> array.
		/// @throws ApiException if problems occurred while updating campaign information.
		/// </summary>
		public async Task<CampaignReturnValue> MutateAsync(IEnumerable<CampaignOperation> operations)
		{
			var binding = new CampaignServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignServiceRequestHeader, CampaignServiceMutate>();
			inData.Header = new CampaignServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignServiceMutate();
			inData.Body.Operations = new List<CampaignOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds labels to the {@linkplain Campaign campaign} or removes {@linkplain Label label}s from the
		/// {@linkplain Campaign campaign}.
		/// <p>Add - Apply an existing label to an existing {@linkplain Campaign campaign}. The
		/// {@code campaignId} must reference an existing {@linkplain Campaign}. The {@code labelId} must
		/// reference an existing {@linkplain Label label}.
		/// <p>Remove - Removes the link between the specified {@linkplain Campaign campaign} and
		/// {@linkplain Label label}.
		///
		/// @param operations the operations to apply.
		/// @return a list of {@linkplain CampaignLabel}s where each entry in the list is the result of
		/// applying the operation in the input list with the same index. For an
		/// add operation, the returned CampaignLabel contains the CampaignId and the LabelId.
		/// In the case of a remove operation, the returned CampaignLabel will only have CampaignId.
		/// @throws ApiException when there are one or more errors with the request.
		/// </summary>
		public async Task<CampaignLabelReturnValue> MutateLabelAsync(IEnumerable<CampaignLabelOperation> operations)
		{
			var binding = new CampaignServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignServiceRequestHeader, CampaignServiceMutateLabel>();
			inData.Header = new CampaignServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignServiceMutateLabel();
			inData.Body.Operations = new List<CampaignLabelOperation>(operations);
			var outData = await binding.MutateLabelAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of campaigns that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of campaigns.
		/// @throws ApiException if problems occur while parsing the query or fetching campaign
		/// information.
		/// </summary>
		public async Task<CampaignPage> QueryAsync(string query)
		{
			var binding = new CampaignServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignServiceRequestHeader, CampaignServiceQuery>();
			inData.Header = new CampaignServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CampaignServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CampaignSharedSetService : ICampaignSharedSetService
	{
		public AdWordsApiConfig Config { get; }
		public CampaignSharedSetService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of CampaignSharedSets based on the given selector.
		/// @param selector the selector specifying the query
		/// @return a list of CampaignSharedSet entities that meet the criterion specified
		/// by the selector
		/// @throws ApiException
		/// </summary>
		public async Task<CampaignSharedSetPage> GetAsync(Selector selector)
		{
			var binding = new CampaignSharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignSharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceGet>();
			inData.Header = new CampaignSharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignSharedSetServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations.
		/// @param operations the operations to apply
		/// @return the modified list of CampaignSharedSet associations
		/// @throws ApiException
		/// </summary>
		public async Task<CampaignSharedSetReturnValue> MutateAsync(IEnumerable<CampaignSharedSetOperation> operations)
		{
			var binding = new CampaignSharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignSharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceMutate>();
			inData.Header = new CampaignSharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignSharedSetServiceMutate();
			inData.Body.Operations = new List<CampaignSharedSetOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of CampaignSharedSets that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of CampaignSharedSets
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<CampaignSharedSetPage> QueryAsync(string query)
		{
			var binding = new CampaignSharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CampaignSharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CampaignSharedSetServiceRequestHeader, CampaignSharedSetServiceQuery>();
			inData.Header = new CampaignSharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CampaignSharedSetServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CampaignSharedSetServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class ConstantDataService : IConstantDataService
	{
		public AdWordsApiConfig Config { get; }
		public ConstantDataService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of all age range criteria.
		///
		/// @return A list of age ranges.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<AgeRange>> GetAgeRangeCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetAgeRangeCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetAgeRangeCriterion();
			var outData = await binding.GetAgeRangeCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all carrier criteria.
		///
		/// @return A list of carriers.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<Carrier>> GetCarrierCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetCarrierCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetCarrierCriterion();
			var outData = await binding.GetCarrierCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all gender criteria.
		///
		/// @return A list of genders.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<Gender>> GetGenderCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetGenderCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetGenderCriterion();
			var outData = await binding.GetGenderCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all language criteria.
		///
		/// @return A list of languages.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<Language>> GetLanguageCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetLanguageCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetLanguageCriterion();
			var outData = await binding.GetLanguageCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all mobile app category criteria.
		///
		/// @return A list of mobile app categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<MobileAppCategory>> GetMobileAppCategoryCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetMobileAppCategoryCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetMobileAppCategoryCriterion();
			var outData = await binding.GetMobileAppCategoryCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all mobile devices.
		///
		/// @return A list of mobile devices.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<MobileDevice>> GetMobileDeviceCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetMobileDeviceCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetMobileDeviceCriterion();
			var outData = await binding.GetMobileDeviceCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of all operating system version criteria.
		///
		/// @return A list of operating system versions.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<OperatingSystemVersion>> GetOperatingSystemVersionCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetOperatingSystemVersionCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetOperatingSystemVersionCriterion();
			var outData = await binding.GetOperatingSystemVersionCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of shopping bidding categories.
		///
		/// A country predicate must be included in the selector, only {@link Predicate.Operator#EQUALS}
		/// and {@link Predicate.Operator#IN} with a single value are supported in the country predicate.
		/// An empty parentDimensionType predicate will filter for root categories.
		///
		/// @return A list of shopping bidding categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<ProductBiddingCategoryData>> GetProductBiddingCategoryDataAsync(Selector selector)
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetProductBiddingCategoryData>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetProductBiddingCategoryData();
			inData.Body.Selector = selector;
			var outData = await binding.GetProductBiddingCategoryDataAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of user interests.
		///
		/// @param userInterestTaxonomyType The type of taxonomy to use when requesting user interests.
		/// @return A list of user interests.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<CriterionUserInterest>> GetUserInterestCriterionAsync(ConstantDataServiceUserInterestTaxonomyType? userInterestTaxonomyType)
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetUserInterestCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetUserInterestCriterion();
			inData.Body.UserInterestTaxonomyType = userInterestTaxonomyType;
			var outData = await binding.GetUserInterestCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of content verticals.
		///
		/// @return A list of verticals.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<Vertical>> GetVerticalCriterionAsync()
		{
			var binding = new ConstantDataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConstantDataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConstantDataServiceRequestHeader, ConstantDataServiceGetVerticalCriterion>();
			inData.Header = new ConstantDataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConstantDataServiceGetVerticalCriterion();
			var outData = await binding.GetVerticalCriterionAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(ConstantDataServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class ConversionTrackerService : IConversionTrackerService
	{
		public AdWordsApiConfig Config { get; }
		public ConversionTrackerService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of the conversion trackers that match the selector. The
		/// actual objects contained in the page's list of entries will be specific
		/// subclasses of the abstract {@link ConversionTracker} class.
		///
		/// @param serviceSelector The selector specifying the
		/// {@link ConversionTracker}s to return.
		/// @return List of conversion trackers specified by the selector.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while retrieving results.
		/// </summary>
		public async Task<ConversionTrackerPage> GetAsync(Selector serviceSelector)
		{
			var binding = new ConversionTrackerServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConversionTrackerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceGet>();
			inData.Header = new ConversionTrackerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConversionTrackerServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations such as adding or updating conversion trackers.
		/// <p class="note"><b>Note:</b> {@link ConversionTrackerOperation} does not support the
		/// <code>REMOVE</code> operator. In order to 'disable' a conversion type, send a
		/// <code>SET</code> operation for the conversion tracker with the <code>status</code>
		/// property set to <code>DISABLED</code></p>
		///
		/// <p>You can mutate any ConversionTracker that belongs to your account. You may not
		/// mutate a ConversionTracker that belongs to some other account. You may not directly
		/// mutate a system-defined ConversionTracker, but you can create a mutable copy of it
		/// in your account by sending a mutate request with an ADD operation specifying
		/// an originalConversionTypeId matching a system-defined conversion tracker's ID. That new
		/// ADDed ConversionTracker will inherit the statistics and properties
		/// of the system-defined type, but will be editable as usual.</p>
		///
		/// @param operations A list of mutate operations to perform.
		/// @return The list of the conversion trackers as they appear after mutation,
		/// in the same order as they appeared in the list of operations.
		/// @throws com.google.ads.api.services.common.error.ApiException if problems
		/// occurred while updating the data.
		/// </summary>
		public async Task<ConversionTrackerReturnValue> MutateAsync(IEnumerable<ConversionTrackerOperation> operations)
		{
			var binding = new ConversionTrackerServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConversionTrackerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceMutate>();
			inData.Header = new ConversionTrackerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConversionTrackerServiceMutate();
			inData.Body.Operations = new List<ConversionTrackerOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of conversion trackers that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of conversion trackers.
		/// @throws ApiException if problems occur while parsing the query or fetching conversion trackers.
		/// </summary>
		public async Task<ConversionTrackerPage> QueryAsync(string query)
		{
			var binding = new ConversionTrackerServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ConversionTrackerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ConversionTrackerServiceRequestHeader, ConversionTrackerServiceQuery>();
			inData.Header = new ConversionTrackerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ConversionTrackerServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(ConversionTrackerServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CustomerExtensionSettingService : ICustomerExtensionSettingService
	{
		public AdWordsApiConfig Config { get; }
		public CustomerExtensionSettingService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of CustomerExtensionSettings that meet the selector criteria.
		///
		/// @param selector Determines which CustomerExtensionSettings to return. If empty, all
		/// CustomerExtensionSettings are returned.
		/// @return The list of CustomerExtensionSettings specified by the selector.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CustomerExtensionSettingPage> GetAsync(Selector selector)
		{
			var binding = new CustomerExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceGet>();
			inData.Header = new CustomerExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerExtensionSettingServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations (add, remove, and set).
		///
		/// <p> Beginning in v201509, add and set operations are treated identically. Performing an add
		/// operation when there is an existing ExtensionSetting will cause the operation to be
		/// treated like a set operation. Performing a set operation when there is no existing
		/// ExtensionSetting will cause the operation to be treated like an add operation.
		///
		/// @param operations The operations to apply. The same {@link CustomerExtensionSetting} cannot be
		/// specified in more than one operation.
		/// @return The changed {@link CustomerExtensionSetting}s.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CustomerExtensionSettingReturnValue> MutateAsync(IEnumerable<CustomerExtensionSettingOperation> operations)
		{
			var binding = new CustomerExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceMutate>();
			inData.Header = new CustomerExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerExtensionSettingServiceMutate();
			inData.Body.Operations = new List<CustomerExtensionSettingOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of CustomerExtensionSettings that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return The list of CustomerExtensionSettings specified by the query.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CustomerExtensionSettingPage> QueryAsync(string query)
		{
			var binding = new CustomerExtensionSettingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerExtensionSettingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerExtensionSettingServiceRequestHeader, CustomerExtensionSettingServiceQuery>();
			inData.Header = new CustomerExtensionSettingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerExtensionSettingServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CustomerExtensionSettingServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CustomerFeedService : ICustomerFeedService
	{
		public AdWordsApiConfig Config { get; }
		public CustomerFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of customer feeds that meet the selector criteria.
		///
		/// @param selector Determines which customer feeds to return. If empty, all
		/// customer feeds are returned.
		/// @return The list of customer feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CustomerFeedPage> GetAsync(Selector selector)
		{
			var binding = new CustomerFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceGet>();
			inData.Header = new CustomerFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerFeedServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, sets, or removes customer feeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<CustomerFeedReturnValue> MutateAsync(IEnumerable<CustomerFeedOperation> operations)
		{
			var binding = new CustomerFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceMutate>();
			inData.Header = new CustomerFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerFeedServiceMutate();
			inData.Body.Operations = new List<CustomerFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of customer feeds that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of CustomerFeed.
		/// @throws ApiException If problems occur while parsing the query or fetching CustomerFeed.
		/// </summary>
		public async Task<CustomerFeedPage> QueryAsync(string query)
		{
			var binding = new CustomerFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/CustomerFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerFeedServiceRequestHeader, CustomerFeedServiceQuery>();
			inData.Header = new CustomerFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerFeedServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CustomerFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CustomerService : ICustomerService
	{
		public AdWordsApiConfig Config { get; }
		public CustomerService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns details of all the customers directly accessible by the user authenticating the call.
		/// <p>
		/// Starting with v201607, if {@code clientCustomerId} is specified in the request header,
		/// only details of that customer will be returned. To do this for prior versions, use the
		/// {@code get()} method instead.
		/// </summary>
		public async Task<IEnumerable<Customer>> GetCustomersAsync()
		{
			var binding = new CustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/CustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerServiceRequestHeader, CustomerServiceGetCustomers>();
			inData.Header = new CustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerServiceGetCustomers();
			var outData = await binding.GetCustomersAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Retrieves the list of service links for the authorized customer.
		/// See {@link ServiceType} for information on the various linking types supported.
		///
		/// @param selector describing which links to retrieve
		/// @throws ApiException
		/// </summary>
		public async Task<IEnumerable<ServiceLink>> GetServiceLinksAsync(Selector selector)
		{
			var binding = new CustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/CustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerServiceRequestHeader, CustomerServiceGetServiceLinks>();
			inData.Header = new CustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerServiceGetServiceLinks();
			inData.Body.Selector = selector;
			var outData = await binding.GetServiceLinksAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Update the authorized customer.
		///
		/// <p>While there are a limited set of properties available to update, please read this
		/// <a href="https://support.google.com/analytics/answer/1033981">help center article
		/// on auto-tagging</a> before updating {@code customer.autoTaggingEnabled}.
		///
		/// @param customer the requested updated value for the customer.
		/// @throws ApiException
		/// </summary>
		public async Task<Customer> MutateAsync(Customer customer)
		{
			var binding = new CustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/CustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerServiceRequestHeader, CustomerServiceMutate>();
			inData.Header = new CustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerServiceMutate();
			inData.Body.Customer = customer;
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Modifies links to other services for the authorized customer.
		/// See {@link ServiceType} for information on the various linking types supported.
		///
		/// @param operations to perform
		/// @throws ApiException
		/// </summary>
		public async Task<IEnumerable<ServiceLink>> MutateServiceLinksAsync(IEnumerable<ServiceLinkOperation> operations)
		{
			var binding = new CustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/CustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerServiceRequestHeader, CustomerServiceMutateServiceLinks>();
			inData.Header = new CustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerServiceMutateServiceLinks();
			inData.Body.Operations = new List<ServiceLinkOperation>(operations);
			var outData = await binding.MutateServiceLinksAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CustomerServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class CustomerSyncService : ICustomerSyncService
	{
		public AdWordsApiConfig Config { get; }
		public CustomerSyncService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns information about changed entities inside a customer's account.
		///
		/// @param selector Specifies the filter for selecting changehistory events for a customer.
		/// @return A Customer->Campaign->AdGroup hierarchy containing information about the objects
		/// changed at each level. All Campaigns that are requested in the selector will be returned,
		/// regardless of whether or not they have changed, but unchanged AdGroups will be ignored.
		/// </summary>
		public async Task<CustomerChangeData> GetAsync(CustomerSyncSelector selector)
		{
			var binding = new CustomerSyncServiceSoapBinding("https://adwords.google.com/api/adwords/ch/v201609/CustomerSyncService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<CustomerSyncServiceRequestHeader, CustomerSyncServiceGet>();
			inData.Header = new CustomerSyncServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new CustomerSyncServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(CustomerSyncServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class DataService : IDataService
	{
		public AdWordsApiConfig Config { get; }
		public DataService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups specified in the selector.
		/// In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link AdGroupBidLandscape}s by their ad groups, and numberResults of paging limits the total
		/// number of {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<AdGroupBidLandscapePage> GetAdGroupBidLandscapeAsync(Selector serviceSelector)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceGetAdGroupBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceGetAdGroupBidLandscape();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAdGroupBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria specified in the
		/// selector. In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
		/// of paging limits the total number of {@link LandscapePoint}s instead of number of
		/// {@link CriterionBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<CriterionBidLandscapePage> GetCampaignCriterionBidLandscapeAsync(Selector serviceSelector)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceGetCampaignCriterionBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceGetCampaignCriterionBidLandscape();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetCampaignCriterionBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the criteria specified in the selector.
		/// In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their criteria, and numberResults of paging limits the total
		/// number of {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
		///
		/// @param serviceSelector Selects the entities to return bid landscapes for.
		/// @return A list of bid landscapes.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<CriterionBidLandscapePage> GetCriterionBidLandscapeAsync(Selector serviceSelector)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceGetCriterionBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceGetCriterionBidLandscape();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetCriterionBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
		///
		/// @param serviceSelector Selects the entities to return domain categories for.
		/// @return A list of domain categories.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<DomainCategoryPage> GetDomainCategoryAsync(Selector serviceSelector)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceGetDomainCategory>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceGetDomainCategory();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetDomainCategoryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link AdGroupBidLandscape}s for the ad groups that match the query. In the
		/// result, the returned {@link LandscapePoint}s are grouped into {@link AdGroupBidLandscape}s
		/// by their ad groups, and numberResults of paging limits the total number of
		/// {@link LandscapePoint}s instead of number of {@link AdGroupBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		public async Task<AdGroupBidLandscapePage> QueryAdGroupBidLandscapeAsync(string query)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceQueryAdGroupBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceQueryAdGroupBidLandscape();
			inData.Body.Query = query;
			var outData = await binding.QueryAdGroupBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the campaign criteria that match the
		/// query. In the result, the returned {@link LandscapePoint}s are grouped into
		/// {@link CriterionBidLandscape}s by their campaign id and criterion id, and numberResults
		/// of paging limits the total number of {@link LandscapePoint}s instead of number of
		/// {@link CriterionBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		public async Task<CriterionBidLandscapePage> QueryCampaignCriterionBidLandscapeAsync(string query)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceQueryCampaignCriterionBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceQueryCampaignCriterionBidLandscape();
			inData.Body.Query = query;
			var outData = await binding.QueryCampaignCriterionBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of {@link CriterionBidLandscape}s for the criteria that match the query. In the
		/// result, the returned {@link LandscapePoint}s are grouped into {@link CriterionBidLandscape}s
		/// by their criteria, and numberResults of paging limits the total number of
		/// {@link LandscapePoint}s instead of number of {@link CriterionBidLandscape}s.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of bid landscapes.
		/// @throws ApiException if problems occur while parsing the query or fetching bid landscapes.
		/// </summary>
		public async Task<CriterionBidLandscapePage> QueryCriterionBidLandscapeAsync(string query)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceQueryCriterionBidLandscape>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceQueryCriterionBidLandscape();
			inData.Body.Query = query;
			var outData = await binding.QueryCriterionBidLandscapeAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a list of domain categories that can be used to create {@link WebPage} criterion.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of domain categories.
		/// @throws ApiException if problems occur while parsing the query
		/// or fetching domain categories.
		/// </summary>
		public async Task<DomainCategoryPage> QueryDomainCategoryAsync(string query)
		{
			var binding = new DataServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DataService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DataServiceRequestHeader, DataServiceQueryDomainCategory>();
			inData.Header = new DataServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DataServiceQueryDomainCategory();
			inData.Body.Query = query;
			var outData = await binding.QueryDomainCategoryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(DataServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class DraftAsyncErrorService : IDraftAsyncErrorService
	{
		public AdWordsApiConfig Config { get; }
		public DraftAsyncErrorService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<DraftAsyncErrorPage> GetAsync(Selector selector)
		{
			var binding = new DraftAsyncErrorServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DraftAsyncErrorService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DraftAsyncErrorServiceRequestHeader, DraftAsyncErrorServiceGet>();
			inData.Header = new DraftAsyncErrorServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DraftAsyncErrorServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a DraftAsyncErrorPage that contains a list of DraftAsyncErrors matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<DraftAsyncErrorPage> QueryAsync(string query)
		{
			var binding = new DraftAsyncErrorServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DraftAsyncErrorService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DraftAsyncErrorServiceRequestHeader, DraftAsyncErrorServiceQuery>();
			inData.Header = new DraftAsyncErrorServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DraftAsyncErrorServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(DraftAsyncErrorServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class DraftService : IDraftService
	{
		public AdWordsApiConfig Config { get; }
		public DraftService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a DraftPage that contains a list of Draft objects matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<DraftPage> GetAsync(Selector selector)
		{
			var binding = new DraftServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DraftService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DraftServiceRequestHeader, DraftServiceGet>();
			inData.Header = new DraftServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DraftServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// The mutate action is used for creating new Drafts and controlling the life cycle of Drafts,
		/// such as abandoning or promoting Drafts.
		///
		/// @return The list of updated Drafts, in the same order as the {@code operations} list.
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while processing the request.
		/// </summary>
		public async Task<DraftReturnValue> MutateAsync(IEnumerable<DraftOperation> operations)
		{
			var binding = new DraftServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DraftService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DraftServiceRequestHeader, DraftServiceMutate>();
			inData.Header = new DraftServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DraftServiceMutate();
			inData.Body.Operations = new List<DraftOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a DraftPage that contains a list of Draft objects matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<DraftPage> QueryAsync(string query)
		{
			var binding = new DraftServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/DraftService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<DraftServiceRequestHeader, DraftServiceQuery>();
			inData.Header = new DraftServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new DraftServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(DraftServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class FeedItemService : IFeedItemService
	{
		public AdWordsApiConfig Config { get; }
		public FeedItemService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of FeedItems that meet the selector criteria.
		///
		/// @param selector Determines which FeedItems to return. If empty all
		/// FeedItems are returned.
		/// @return The list of FeedItems.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<FeedItemPage> GetAsync(Selector selector)
		{
			var binding = new FeedItemServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedItemService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedItemServiceRequestHeader, FeedItemServiceGet>();
			inData.Header = new FeedItemServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedItemServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Add, remove, and set FeedItems.
		///
		/// @param operations The operations to apply.
		/// @return The resulting FeedItems.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<FeedItemReturnValue> MutateAsync(IEnumerable<FeedItemOperation> operations)
		{
			var binding = new FeedItemServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedItemService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedItemServiceRequestHeader, FeedItemServiceMutate>();
			inData.Header = new FeedItemServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedItemServiceMutate();
			inData.Body.Operations = new List<FeedItemOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of FeedItems that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of FeedItems
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<FeedItemPage> QueryAsync(string query)
		{
			var binding = new FeedItemServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedItemService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedItemServiceRequestHeader, FeedItemServiceQuery>();
			inData.Header = new FeedItemServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedItemServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(FeedItemServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class FeedMappingService : IFeedMappingService
	{
		public AdWordsApiConfig Config { get; }
		public FeedMappingService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of FeedMappings that meet the selector criteria.
		///
		/// @param selector Determines which FeedMappings to return. If empty all
		/// FeedMappings are returned.
		/// @return The list of FeedMappings.
		/// @throws ApiException indicates a problem with the request.
		/// </summary>
		public async Task<FeedMappingPage> GetAsync(Selector selector)
		{
			var binding = new FeedMappingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedMappingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceGet>();
			inData.Header = new FeedMappingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedMappingServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Add and remove FeedMappings.
		/// The following {@link Operator}s are supported: ADD, REMOVE.
		///
		/// @param operations The operations to apply.
		/// @return The resulting FeedMappings.
		/// @throws ApiException indicates a problem with the request.
		/// </summary>
		public async Task<FeedMappingReturnValue> MutateAsync(IEnumerable<FeedMappingOperation> operations)
		{
			var binding = new FeedMappingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedMappingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceMutate>();
			inData.Header = new FeedMappingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedMappingServiceMutate();
			inData.Body.Operations = new List<FeedMappingOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of FeedMappings that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns The list of FeedMappings
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<FeedMappingPage> QueryAsync(string query)
		{
			var binding = new FeedMappingServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedMappingService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedMappingServiceRequestHeader, FeedMappingServiceQuery>();
			inData.Header = new FeedMappingServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedMappingServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(FeedMappingServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class FeedService : IFeedService
	{
		public AdWordsApiConfig Config { get; }
		public FeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of Feeds that meet the selector criteria.
		///
		/// @param selector Determines which Feeds to return. If empty all
		/// Feeds are returned.
		/// @return The list of Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<FeedPage> GetAsync(Selector selector)
		{
			var binding = new FeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedServiceRequestHeader, FeedServiceGet>();
			inData.Header = new FeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Add, remove, and set Feeds.
		///
		/// @param operations The operations to apply.
		/// @return The resulting Feeds.
		/// @throws ApiException Indicates a problem with the request.
		/// </summary>
		public async Task<FeedReturnValue> MutateAsync(IEnumerable<FeedOperation> operations)
		{
			var binding = new FeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedServiceRequestHeader, FeedServiceMutate>();
			inData.Header = new FeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedServiceMutate();
			inData.Body.Operations = new List<FeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of Feed that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @returns A list of Feed.
		/// @throws ApiException if problems occur while parsing the query or fetching Feed.
		/// </summary>
		public async Task<FeedPage> QueryAsync(string query)
		{
			var binding = new FeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/FeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<FeedServiceRequestHeader, FeedServiceQuery>();
			inData.Header = new FeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new FeedServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(FeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class LabelService : ILabelService
	{
		public AdWordsApiConfig Config { get; }
		public LabelService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of {@link Label}s.
		///
		/// @param serviceSelector The selector specifying the {@link Label}s to return.
		/// @return The page containing the {@link Label}s which meet the criteria specified by the
		/// selector.
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		public async Task<LabelPage> GetAsync(Selector serviceSelector)
		{
			var binding = new LabelServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/LabelService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<LabelServiceRequestHeader, LabelServiceGet>();
			inData.Header = new LabelServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new LabelServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations.
		///
		/// @param operations The operations to apply. The same {@link Label} cannot be specified in
		/// more than one operation.
		/// @return The applied {@link Label}s.
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		public async Task<LabelReturnValue> MutateAsync(IEnumerable<LabelOperation> operations)
		{
			var binding = new LabelServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/LabelService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<LabelServiceRequestHeader, LabelServiceMutate>();
			inData.Header = new LabelServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new LabelServiceMutate();
			inData.Body.Operations = new List<LabelOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of {@link Label}s that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns  The page containing the {@link Label}s which match the query.
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<LabelPage> QueryAsync(string query)
		{
			var binding = new LabelServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/LabelService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<LabelServiceRequestHeader, LabelServiceQuery>();
			inData.Header = new LabelServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new LabelServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(LabelServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class LocationCriterionService : ILocationCriterionService
	{
		public AdWordsApiConfig Config { get; }
		public LocationCriterionService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of {@link LocationCriterion}'s that match the specified selector.
		///
		/// @param selector filters the LocationCriterion to be returned.
		/// @return A list of location criterion.
		/// @throws ApiException when there is at least one error with the request.
		/// </summary>
		public async Task<IEnumerable<LocationCriterion>> GetAsync(Selector selector)
		{
			var binding = new LocationCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/LocationCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<LocationCriterionServiceRequestHeader, LocationCriterionServiceGet>();
			inData.Header = new LocationCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new LocationCriterionServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of {@link LocationCriterion}s that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns The list of location criteria
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<IEnumerable<LocationCriterion>> QueryAsync(string query)
		{
			var binding = new LocationCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/LocationCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<LocationCriterionServiceRequestHeader, LocationCriterionServiceQuery>();
			inData.Header = new LocationCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new LocationCriterionServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(LocationCriterionServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class ManagedCustomerService : IManagedCustomerService
	{
		public AdWordsApiConfig Config { get; }
		public ManagedCustomerService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns the list of customers that meet the selector criteria.
		///
		/// @param selector The selector specifying the {@link ManagedCustomer}s to return.
		/// @return List of customers identified by the selector.
		/// @throws ApiException When there is at least one error with the request.
		/// </summary>
		public async Task<ManagedCustomerPage> GetAsync(Selector serviceSelector)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceGet>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the pending invitations for the customer IDs in the selector.
		/// @param selector the manager customer ids (inviters) or the client customer ids (invitees)
		/// @throws ApiException when there is at least one error with the request
		/// </summary>
		public async Task<IEnumerable<PendingInvitation>> GetPendingInvitationsAsync(PendingInvitationSelector selector)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceGetPendingInvitations>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceGetPendingInvitations();
			inData.Body.Selector = selector;
			var outData = await binding.GetPendingInvitationsAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Modifies or creates new {@link ManagedCustomer}s.
		///
		/// <p class="note"><b>Note:</b> See {@link ManagedCustomerOperation} for available operators.</p>
		///
		/// @param operations List of unique operations.
		/// @return The list of updated managed customers, returned in the same order as the
		/// <code>operations</code> array.
		/// </summary>
		public async Task<ManagedCustomerReturnValue> MutateAsync(IEnumerable<ManagedCustomerOperation> operations)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutate>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceMutate();
			inData.Body.Operations = new List<ManagedCustomerOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds {@linkplain AccountLabel}s to, and removes
		/// {@linkplain AccountLabel}s from, {@linkplain ManagedCustomer}s.
		///
		/// <p>To add an {@linkplain AccountLabel} to a {@linkplain ManagedCustomer},
		/// use {@link Operator#ADD}.
		/// To remove an {@linkplain AccountLabel} from a {@linkplain ManagedCustomer},
		/// use {@link Operator#REMOVE}.</p>
		/// <p>The label must already exist (see {@link AccountLabelService#mutate} for
		/// how to create them) and be owned by the authenticated user.</p>
		/// <p>The {@linkplain ManagedCustomer} must already exist and be managed by
		/// the customer making the request (either directly or indirectly).</p>
		/// <p>An AccountLabel may be applied to at most 1000 customers.</p>
		/// <p>This method does not support partial failures, and will fail if any
		/// operation is invalid.</p>
		/// </summary>
		public async Task<ManagedCustomerLabelReturnValue> MutateLabelAsync(IEnumerable<ManagedCustomerLabelOperation> operations)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateLabel>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceMutateLabel();
			inData.Body.Operations = new List<ManagedCustomerLabelOperation>(operations);
			var outData = await binding.MutateLabelAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Modifies the ManagedCustomer forest. These actions are possible (categorized by
		/// Operator + Link Status):
		///
		/// <ul>
		/// <li>ADD + PENDING:   manager extends invitations</li>
		/// <li>SET + CANCELLED: manager rescinds invitations</li>
		/// <li>SET + INACTIVE:  manager/client terminates links</li>
		/// <li>SET + ACTIVE:    client accepts invitations</li>
		/// <li>SET + REFUSED:   client declines invitations</li>
		/// </ul>
		///
		/// In addition to these, active links can also be marked hidden / unhidden.
		/// <ul>
		/// <li> An ACTIVE link can be marked hidden with SET + ACTIVE along with setting the
		/// isHidden bit to true. </li>
		/// <li> An ACTIVE link can be marked unhidden with SET + ACTIVE along with setting the
		/// isHidden bit to false. </li>
		/// </ul>
		///
		/// @param operations the list of operations
		/// @return results for the given operations
		/// @throws ApiException with a {@link ManagedCustomerServiceError}
		/// </summary>
		public async Task<MutateLinkResults> MutateLinkAsync(IEnumerable<LinkOperation> operations)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateLink>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceMutateLink();
			inData.Body.Operations = new List<LinkOperation>(operations);
			var outData = await binding.MutateLinkAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Moves client customers to new managers (moving links). Only the following action is possible:
		///
		/// <ul>
		/// <li>SET + ACTIVE: manager moves client customers to new managers within the same manager
		/// account hierarchy</li>
		/// </ul>
		///
		/// @param operations List of unique operations.
		/// @return results for the given operations
		/// @throws ApiException with a {@link ManagedCustomerServiceError}
		/// </summary>
		public async Task<MutateManagerResults> MutateManagerAsync(IEnumerable<MoveOperation> operations)
		{
			var binding = new ManagedCustomerServiceSoapBinding("https://adwords.google.com/api/adwords/mcm/v201609/ManagedCustomerService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ManagedCustomerServiceRequestHeader, ManagedCustomerServiceMutateManager>();
			inData.Header = new ManagedCustomerServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ManagedCustomerServiceMutateManager();
			inData.Body.Operations = new List<MoveOperation>(operations);
			var outData = await binding.MutateManagerAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(ManagedCustomerServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class MediaService : IMediaService
	{
		public AdWordsApiConfig Config { get; }
		public MediaService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of media that meet the criteria specified by the selector.
		/// <p class="note"><b>Note:</b> {@code MediaService} will not return any
		/// {@link ImageAd} image files.</p>
		///
		/// @param serviceSelector Selects which media objects to return.
		/// @return A list of {@code Media} objects.
		/// </summary>
		public async Task<MediaPage> GetAsync(Selector serviceSelector)
		{
			var binding = new MediaServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/MediaService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<MediaServiceRequestHeader, MediaServiceGet>();
			inData.Header = new MediaServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new MediaServiceGet();
			inData.Body.ServiceSelector = serviceSelector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of {@link Media} objects that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of {@code Media} objects.
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<MediaPage> QueryAsync(string query)
		{
			var binding = new MediaServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/MediaService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<MediaServiceRequestHeader, MediaServiceQuery>();
			inData.Header = new MediaServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new MediaServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Uploads new media. Currently, you can upload {@link Image} files and {@link MediaBundle}s.
		///
		/// @param media A list of {@code Media} objects, each containing the data to
		/// be uploaded.
		/// @return A list of uploaded media in the same order as the argument list.
		/// </summary>
		public async Task<IEnumerable<Media>> UploadAsync(IEnumerable<Media> media)
		{
			var binding = new MediaServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/MediaService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<MediaServiceRequestHeader, MediaServiceUpload>();
			inData.Header = new MediaServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new MediaServiceUpload();
			inData.Body.Media = new List<Media>(media);
			var outData = await binding.UploadAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(MediaServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class OfflineCallConversionFeedService : IOfflineCallConversionFeedService
	{
		public AdWordsApiConfig Config { get; }
		public OfflineCallConversionFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Reports a call conversion for each entry in {@code operations}.
		///
		/// <p>This bulk operation does not have any transactional guarantees. Some operations can succeed
		/// while others fail.
		///
		/// @param operations A list of offline call conversion feed operations.
		/// @return The list of offline call conversion feed results (in the same order as the operations).
		/// @throws {@link ApiException} if problems occurred while applying offline call conversions.
		/// </summary>
		public async Task<OfflineCallConversionFeedReturnValue> MutateAsync(IEnumerable<OfflineCallConversionFeedOperation> operations)
		{
			var binding = new OfflineCallConversionFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/OfflineCallConversionFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<OfflineCallConversionFeedServiceRequestHeader, OfflineCallConversionFeedServiceMutate>();
			inData.Header = new OfflineCallConversionFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new OfflineCallConversionFeedServiceMutate();
			inData.Body.Operations = new List<OfflineCallConversionFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(OfflineCallConversionFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class OfflineConversionFeedService : IOfflineConversionFeedService
	{
		public AdWordsApiConfig Config { get; }
		public OfflineConversionFeedService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Reports an offline conversion for each entry in {@code operations}.
		/// <p>
		/// This bulk operation does not have any transactional guarantees. Some operations can succeed
		/// while others fail.
		///
		/// @param operations A list of offline conversion feed operations.
		/// @return The list of offline conversion feed results (in the same order as the operations).
		/// @throws {@link ApiException} if problems occurred while applying offline conversions.
		/// </summary>
		public async Task<OfflineConversionFeedReturnValue> MutateAsync(IEnumerable<OfflineConversionFeedOperation> operations)
		{
			var binding = new OfflineConversionFeedServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/OfflineConversionFeedService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<OfflineConversionFeedServiceRequestHeader, OfflineConversionFeedServiceMutate>();
			inData.Header = new OfflineConversionFeedServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new OfflineConversionFeedServiceMutate();
			inData.Body.Operations = new List<OfflineConversionFeedOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(OfflineConversionFeedServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class ReportDefinitionService : IReportDefinitionService
	{
		public AdWordsApiConfig Config { get; }
		public ReportDefinitionService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns the available report fields for a given report type.
		/// When using this method the {@code clientCustomerId} header field is
		/// optional. Callers are discouraged from setting the clientCustomerId
		/// header field in calls to this method as its presence will trigger an
		/// authorization error if the caller does not have access to the customer
		/// with the included ID.
		///
		/// @param reportType The type of report.
		/// @return The list of available report fields. Each
		/// {@link ReportDefinitionField} encapsulates the field name, the
		/// field data type, and the enum values (if the field's type is
		/// {@code enum}).
		/// @throws ApiException if a problem occurred while fetching the
		/// ReportDefinitionField information.
		/// </summary>
		public async Task<IEnumerable<ReportDefinitionField>> GetReportFieldsAsync(ReportDefinitionReportType? reportType)
		{
			var binding = new ReportDefinitionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/ReportDefinitionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<ReportDefinitionServiceRequestHeader, ReportDefinitionServiceGetReportFields>();
			inData.Header = new ReportDefinitionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new ReportDefinitionServiceGetReportFields();
			inData.Body.ReportType = reportType;
			var outData = await binding.GetReportFieldsAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(ReportDefinitionServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class SharedCriterionService : ISharedCriterionService
	{
		public AdWordsApiConfig Config { get; }
		public SharedCriterionService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of SharedCriterion that meets the selector criteria.
		///
		/// @param selector filters the criteria returned
		/// @return The list of SharedCriterion
		/// @throws ApiException
		/// </summary>
		public async Task<SharedCriterionPage> GetAsync(Selector selector)
		{
			var binding = new SharedCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceGet>();
			inData.Header = new SharedCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedCriterionServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Adds, removes criteria in a shared set.
		///
		/// @param operations A list of unique operations
		/// @return The list of updated SharedCriterion, returned in the same order as the
		/// {@code operations} array.
		/// @throws ApiException
		/// </summary>
		public async Task<SharedCriterionReturnValue> MutateAsync(IEnumerable<SharedCriterionOperation> operations)
		{
			var binding = new SharedCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceMutate>();
			inData.Header = new SharedCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedCriterionServiceMutate();
			inData.Body.Operations = new List<SharedCriterionOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of SharedCriterion that match the query.
		///
		/// @param query The SQL-like AWQL query string.
		/// @return A list of SharedCriterion.
		/// @throws ApiException
		/// </summary>
		public async Task<SharedCriterionPage> QueryAsync(string query)
		{
			var binding = new SharedCriterionServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedCriterionService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedCriterionServiceRequestHeader, SharedCriterionServiceQuery>();
			inData.Header = new SharedCriterionServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedCriterionServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(SharedCriterionServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class SharedSetService : ISharedSetService
	{
		public AdWordsApiConfig Config { get; }
		public SharedSetService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a list of SharedSets based on the given selector.
		/// @param selector the selector specifying the query
		/// @return a list of SharedSet entities that meet the criterion specified
		/// by the selector
		/// @throws ApiException
		/// </summary>
		public async Task<SharedSetPage> GetAsync(Selector selector)
		{
			var binding = new SharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedSetServiceRequestHeader, SharedSetServiceGet>();
			inData.Header = new SharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedSetServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Applies the list of mutate operations.
		/// @param operations the operations to apply
		/// @return the modified CriterionList entities
		/// @throws ApiException
		/// </summary>
		public async Task<SharedSetReturnValue> MutateAsync(IEnumerable<SharedSetOperation> operations)
		{
			var binding = new SharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedSetServiceRequestHeader, SharedSetServiceMutate>();
			inData.Header = new SharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedSetServiceMutate();
			inData.Body.Operations = new List<SharedSetOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns the list of SharedSet entities that match the query.
		///
		/// @param query The SQL-like AWQL query string
		/// @returns A list of SharedSet entities
		/// @throws ApiException when the query is invalid or there are errors processing the request.
		/// </summary>
		public async Task<SharedSetPage> QueryAsync(string query)
		{
			var binding = new SharedSetServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/SharedSetService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<SharedSetServiceRequestHeader, SharedSetServiceQuery>();
			inData.Header = new SharedSetServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new SharedSetServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(SharedSetServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class TargetingIdeaService : ITargetingIdeaService
	{
		public AdWordsApiConfig Config { get; }
		public TargetingIdeaService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a page of ideas that match the query described by the specified
		/// {@link TargetingIdeaSelector}.
		///
		/// <p>The selector must specify a {@code paging} value, with {@code numberResults} set to 800 or
		/// less.  Large result sets must be composed through multiple calls to this method, advancing the
		/// paging {@code startIndex} value by {@code numberResults} with each call.</p>
		///
		/// @param selector Query describing the types of results to return when
		/// finding matches (similar keyword ideas).
		/// @return A {@link TargetingIdeaPage} of results, that is a subset of the
		/// list of possible ideas meeting the criteria of the
		/// {@link TargetingIdeaSelector}.
		/// @throws ApiException If problems occurred while querying for ideas.
		/// </summary>
		public async Task<TargetingIdeaPage> GetAsync(TargetingIdeaSelector selector)
		{
			var binding = new TargetingIdeaServiceSoapBinding("https://adwords.google.com/api/adwords/o/v201609/TargetingIdeaService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TargetingIdeaServiceRequestHeader, TargetingIdeaServiceGet>();
			inData.Header = new TargetingIdeaServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TargetingIdeaServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(TargetingIdeaServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class TrafficEstimatorService : ITrafficEstimatorService
	{
		public AdWordsApiConfig Config { get; }
		public TrafficEstimatorService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns traffic estimates for specified criteria.
		///
		/// @param selector Campaigns, ad groups and keywords for which traffic
		/// should be estimated.
		/// @return Traffic estimation results.
		/// @throws ApiException if problems occurred while retrieving estimates
		/// </summary>
		public async Task<TrafficEstimatorResult> GetAsync(TrafficEstimatorSelector selector)
		{
			var binding = new TrafficEstimatorServiceSoapBinding("https://adwords.google.com/api/adwords/o/v201609/TrafficEstimatorService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrafficEstimatorServiceRequestHeader, TrafficEstimatorServiceGet>();
			inData.Header = new TrafficEstimatorServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrafficEstimatorServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(TrafficEstimatorServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class TrialAsyncErrorService : ITrialAsyncErrorService
	{
		public AdWordsApiConfig Config { get; }
		public TrialAsyncErrorService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncErrors matching the selector.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<TrialAsyncErrorPage> GetAsync(Selector selector)
		{
			var binding = new TrialAsyncErrorServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/TrialAsyncErrorService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrialAsyncErrorServiceRequestHeader, TrialAsyncErrorServiceGet>();
			inData.Header = new TrialAsyncErrorServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrialAsyncErrorServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Returns a TrialAsyncErrorPage that contains a list of TrialAsyncError matching the query.
		///
		/// @throws {#link com.google.ads.api.services.common.error.ApiException} if problems occurred
		/// while retrieving the results.
		/// </summary>
		public async Task<TrialAsyncErrorPage> QueryAsync(string query)
		{
			var binding = new TrialAsyncErrorServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/TrialAsyncErrorService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrialAsyncErrorServiceRequestHeader, TrialAsyncErrorServiceQuery>();
			inData.Header = new TrialAsyncErrorServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrialAsyncErrorServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(TrialAsyncErrorServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	public class TrialService : ITrialService
	{
		public AdWordsApiConfig Config { get; }
		public TrialService(AdWordsApiConfig config)
		{
			Config = config;
		}
		/// <summary>
		/// Loads a TrialPage containing a list of {@link Trial} objects matching the selector.
		///
		/// @param selector defines which subset of all available trials to return, the sort order, and
		/// which fields to include
		///
		/// @return Returns a page of matching trial objects.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// retrieving the results.
		/// </summary>
		public async Task<TrialPage> GetAsync(Selector selector)
		{
			var binding = new TrialServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/TrialService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrialServiceRequestHeader, TrialServiceGet>();
			inData.Header = new TrialServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrialServiceGet();
			inData.Body.Selector = selector;
			var outData = await binding.GetAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Creates new trials, updates properties and controls the life cycle of existing trials.
		/// See {@link TrialService} for details on the trial life cycle.
		///
		/// @return Returns the list of updated Trials, in the same order as the {@code operations} list.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// processing the request.
		/// </summary>
		public async Task<TrialReturnValue> MutateAsync(IEnumerable<TrialOperation> operations)
		{
			var binding = new TrialServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/TrialService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrialServiceRequestHeader, TrialServiceMutate>();
			inData.Header = new TrialServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrialServiceMutate();
			inData.Body.Operations = new List<TrialOperation>(operations);
			var outData = await binding.MutateAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		/// <summary>
		/// Loads a TrialPage containing a list of {@link Trial} objects matching the query.
		///
		/// @param query defines which subset of all available trials to return, the sort order, and
		/// which fields to include
		///
		/// @return Returns a page of matching trial objects.
		/// @throws com.google.ads.api.services.common.error.ApiException if errors occurred while
		/// retrieving the results.
		/// </summary>
		public async Task<TrialPage> QueryAsync(string query)
		{
			var binding = new TrialServiceSoapBinding("https://adwords.google.com/api/adwords/cm/v201609/TrialService", Config.AccessToken, Config.Timeout, Config.EnableGzipCompression,  Config.Logger);
			var inData = new SoapData<TrialServiceRequestHeader, TrialServiceQuery>();
			inData.Header = new TrialServiceRequestHeader();
			AssignHeaderValues(inData.Header);
			inData.Body = new TrialServiceQuery();
			inData.Body.Query = query;
			var outData = await binding.QueryAsync(inData).ConfigureAwait(false);
			return outData.Body.Rval;
		}
		private void AssignHeaderValues(TrialServiceRequestHeader header)
		{
			header.ClientCustomerId = Config.ClientCustomerId;
			header.DeveloperToken = Config.DeveloperToken;
			header.PartialFailure = Config.PartialFailure;
			header.UserAgent = Config.UserAgent;
			header.ValidateOnly = Config.ValidateOnly;
		}
	}
	namespace EnumExtensions
	{
		public static class AccessReasonExtensions
		{
			public static string ToXmlValue(this AccessReason enumValue)
			{
				switch (enumValue)
				{
					case AccessReason.Owned: return "OWNED";
					case AccessReason.Shared: return "SHARED";
					case AccessReason.Licensed: return "LICENSED";
					case AccessReason.Subscribed: return "SUBSCRIBED";
					default: return null;
				}
			}
			public static AccessReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OWNED": return AccessReason.Owned;
					case "SHARED": return AccessReason.Shared;
					case "LICENSED": return AccessReason.Licensed;
					case "SUBSCRIBED": return AccessReason.Subscribed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AccessReason.", nameof(xmlValue));
				}
			}
		}
		public static class AccountUserListStatusExtensions
		{
			public static string ToXmlValue(this AccountUserListStatus enumValue)
			{
				switch (enumValue)
				{
					case AccountUserListStatus.Active: return "ACTIVE";
					case AccountUserListStatus.Inactive: return "INACTIVE";
					default: return null;
				}
			}
			public static AccountUserListStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTIVE": return AccountUserListStatus.Active;
					case "INACTIVE": return AccountUserListStatus.Inactive;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AccountUserListStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdCustomizerErrorReasonExtensions
		{
			public static string ToXmlValue(this AdCustomizerErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdCustomizerErrorReason.CountdownInvalidDateFormat: return "COUNTDOWN_INVALID_DATE_FORMAT";
					case AdCustomizerErrorReason.CountdownDateInPast: return "COUNTDOWN_DATE_IN_PAST";
					case AdCustomizerErrorReason.CountdownInvalidLocale: return "COUNTDOWN_INVALID_LOCALE";
					case AdCustomizerErrorReason.CountdownInvalidStartDaysBefore: return "COUNTDOWN_INVALID_START_DAYS_BEFORE";
					default: return null;
				}
			}
			public static AdCustomizerErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "COUNTDOWN_INVALID_DATE_FORMAT": return AdCustomizerErrorReason.CountdownInvalidDateFormat;
					case "COUNTDOWN_DATE_IN_PAST": return AdCustomizerErrorReason.CountdownDateInPast;
					case "COUNTDOWN_INVALID_LOCALE": return AdCustomizerErrorReason.CountdownInvalidLocale;
					case "COUNTDOWN_INVALID_START_DAYS_BEFORE": return AdCustomizerErrorReason.CountdownInvalidStartDaysBefore;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdCustomizerErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdCustomizerFeedAttributeTypeExtensions
		{
			public static string ToXmlValue(this AdCustomizerFeedAttributeType enumValue)
			{
				switch (enumValue)
				{
					case AdCustomizerFeedAttributeType.Integer: return "INTEGER";
					case AdCustomizerFeedAttributeType.Price: return "PRICE";
					case AdCustomizerFeedAttributeType.DateTime: return "DATE_TIME";
					case AdCustomizerFeedAttributeType.String: return "STRING";
					case AdCustomizerFeedAttributeType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdCustomizerFeedAttributeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INTEGER": return AdCustomizerFeedAttributeType.Integer;
					case "PRICE": return AdCustomizerFeedAttributeType.Price;
					case "DATE_TIME": return AdCustomizerFeedAttributeType.DateTime;
					case "STRING": return AdCustomizerFeedAttributeType.String;
					case "UNKNOWN": return AdCustomizerFeedAttributeType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdCustomizerFeedAttributeType.", nameof(xmlValue));
				}
			}
		}
		public static class AdCustomizerFeedErrorReasonExtensions
		{
			public static string ToXmlValue(this AdCustomizerFeedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdCustomizerFeedErrorReason.CannotAddKeyAttribute: return "CANNOT_ADD_KEY_ATTRIBUTE";
					case AdCustomizerFeedErrorReason.NotAdCustomizerFeed: return "NOT_AD_CUSTOMIZER_FEED";
					case AdCustomizerFeedErrorReason.InvalidFeedName: return "INVALID_FEED_NAME";
					case AdCustomizerFeedErrorReason.TooManyFeedAttributesForFeed: return "TOO_MANY_FEED_ATTRIBUTES_FOR_FEED";
					case AdCustomizerFeedErrorReason.AttributeNamesNotUnique: return "ATTRIBUTE_NAMES_NOT_UNIQUE";
					case AdCustomizerFeedErrorReason.FeedDeleted: return "FEED_DELETED";
					case AdCustomizerFeedErrorReason.DuplicateFeedName: return "DUPLICATE_FEED_NAME";
					case AdCustomizerFeedErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdCustomizerFeedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_ADD_KEY_ATTRIBUTE": return AdCustomizerFeedErrorReason.CannotAddKeyAttribute;
					case "NOT_AD_CUSTOMIZER_FEED": return AdCustomizerFeedErrorReason.NotAdCustomizerFeed;
					case "INVALID_FEED_NAME": return AdCustomizerFeedErrorReason.InvalidFeedName;
					case "TOO_MANY_FEED_ATTRIBUTES_FOR_FEED": return AdCustomizerFeedErrorReason.TooManyFeedAttributesForFeed;
					case "ATTRIBUTE_NAMES_NOT_UNIQUE": return AdCustomizerFeedErrorReason.AttributeNamesNotUnique;
					case "FEED_DELETED": return AdCustomizerFeedErrorReason.FeedDeleted;
					case "DUPLICATE_FEED_NAME": return AdCustomizerFeedErrorReason.DuplicateFeedName;
					case "UNKNOWN": return AdCustomizerFeedErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdCustomizerFeedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdErrorReasonExtensions
		{
			public static string ToXmlValue(this AdErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdErrorReason.AdCustomizersNotSupportedForAdType: return "AD_CUSTOMIZERS_NOT_SUPPORTED_FOR_AD_TYPE";
					case AdErrorReason.ApproximatelyTooLong: return "APPROXIMATELY_TOO_LONG";
					case AdErrorReason.ApproximatelyTooShort: return "APPROXIMATELY_TOO_SHORT";
					case AdErrorReason.BadSnippet: return "BAD_SNIPPET";
					case AdErrorReason.CannotModifyAd: return "CANNOT_MODIFY_AD";
					case AdErrorReason.CannotSetBusinessNameIfUrlSet: return "CANNOT_SET_BUSINESS_NAME_IF_URL_SET";
					case AdErrorReason.CannotSetField: return "CANNOT_SET_FIELD";
					case AdErrorReason.CannotSetFieldWithOriginAdIdSet: return "CANNOT_SET_FIELD_WITH_ORIGIN_AD_ID_SET";
					case AdErrorReason.CannotSetFieldWithAdIdSetForSharing: return "CANNOT_SET_FIELD_WITH_AD_ID_SET_FOR_SHARING";
					case AdErrorReason.CannotSetUrl: return "CANNOT_SET_URL";
					case AdErrorReason.CannotSetWithoutFinalUrls: return "CANNOT_SET_WITHOUT_FINAL_URLS";
					case AdErrorReason.CannotSetWithFinalUrls: return "CANNOT_SET_WITH_FINAL_URLS";
					case AdErrorReason.CannotSetWithTrackingUrlTemplate: return "CANNOT_SET_WITH_TRACKING_URL_TEMPLATE";
					case AdErrorReason.CannotUseAdSubclassForOperator: return "CANNOT_USE_AD_SUBCLASS_FOR_OPERATOR";
					case AdErrorReason.CustomerNotApprovedMobileads: return "CUSTOMER_NOT_APPROVED_MOBILEADS";
					case AdErrorReason.CustomerNotApprovedThirdpartyAds: return "CUSTOMER_NOT_APPROVED_THIRDPARTY_ADS";
					case AdErrorReason.CustomerNotApprovedThirdpartyRedirectAds: return "CUSTOMER_NOT_APPROVED_THIRDPARTY_REDIRECT_ADS";
					case AdErrorReason.CustomerNotEligible: return "CUSTOMER_NOT_ELIGIBLE";
					case AdErrorReason.CustomerNotEligibleForUpdatingBeaconUrl: return "CUSTOMER_NOT_ELIGIBLE_FOR_UPDATING_BEACON_URL";
					case AdErrorReason.DimensionAlreadyInUnion: return "DIMENSION_ALREADY_IN_UNION";
					case AdErrorReason.DimensionMustBeSet: return "DIMENSION_MUST_BE_SET";
					case AdErrorReason.DimensionNotInUnion: return "DIMENSION_NOT_IN_UNION";
					case AdErrorReason.DisplayUrlCannotBeSpecified: return "DISPLAY_URL_CANNOT_BE_SPECIFIED";
					case AdErrorReason.DomesticPhoneNumberFormat: return "DOMESTIC_PHONE_NUMBER_FORMAT";
					case AdErrorReason.EmergencyPhoneNumber: return "EMERGENCY_PHONE_NUMBER";
					case AdErrorReason.EmptyField: return "EMPTY_FIELD";
					case AdErrorReason.FeedAttributeMustHaveMappingForTypeId: return "FEED_ATTRIBUTE_MUST_HAVE_MAPPING_FOR_TYPE_ID";
					case AdErrorReason.FeedAttributeMappingTypeMismatch: return "FEED_ATTRIBUTE_MAPPING_TYPE_MISMATCH";
					case AdErrorReason.IllegalAdCustomizerTagUse: return "ILLEGAL_AD_CUSTOMIZER_TAG_USE";
					case AdErrorReason.InconsistentDimensions: return "INCONSISTENT_DIMENSIONS";
					case AdErrorReason.InconsistentStatusInTemplateUnion: return "INCONSISTENT_STATUS_IN_TEMPLATE_UNION";
					case AdErrorReason.IncorrectLength: return "INCORRECT_LENGTH";
					case AdErrorReason.IneligibleForUpgrade: return "INELIGIBLE_FOR_UPGRADE";
					case AdErrorReason.InvalidAdAddressCampaignTarget: return "INVALID_AD_ADDRESS_CAMPAIGN_TARGET";
					case AdErrorReason.InvalidAdType: return "INVALID_AD_TYPE";
					case AdErrorReason.InvalidAttributesForMobileImage: return "INVALID_ATTRIBUTES_FOR_MOBILE_IMAGE";
					case AdErrorReason.InvalidAttributesForMobileText: return "INVALID_ATTRIBUTES_FOR_MOBILE_TEXT";
					case AdErrorReason.InvalidCharacterForUrl: return "INVALID_CHARACTER_FOR_URL";
					case AdErrorReason.InvalidCountryCode: return "INVALID_COUNTRY_CODE";
					case AdErrorReason.InvalidDsaUrlTag: return "INVALID_DSA_URL_TAG";
					case AdErrorReason.InvalidInput: return "INVALID_INPUT";
					case AdErrorReason.InvalidMarkupLanguage: return "INVALID_MARKUP_LANGUAGE";
					case AdErrorReason.InvalidMobileCarrier: return "INVALID_MOBILE_CARRIER";
					case AdErrorReason.InvalidMobileCarrierTarget: return "INVALID_MOBILE_CARRIER_TARGET";
					case AdErrorReason.InvalidNumberOfElements: return "INVALID_NUMBER_OF_ELEMENTS";
					case AdErrorReason.InvalidPhoneNumberFormat: return "INVALID_PHONE_NUMBER_FORMAT";
					case AdErrorReason.InvalidRichMediaCertifiedVendorFormatId: return "INVALID_RICH_MEDIA_CERTIFIED_VENDOR_FORMAT_ID";
					case AdErrorReason.InvalidTemplateData: return "INVALID_TEMPLATE_DATA";
					case AdErrorReason.InvalidTemplateElementFieldType: return "INVALID_TEMPLATE_ELEMENT_FIELD_TYPE";
					case AdErrorReason.InvalidTemplateId: return "INVALID_TEMPLATE_ID";
					case AdErrorReason.LineTooWide: return "LINE_TOO_WIDE";
					case AdErrorReason.MarkupLanguagesPresent: return "MARKUP_LANGUAGES_PRESENT";
					case AdErrorReason.MissingAdCustomizerMapping: return "MISSING_AD_CUSTOMIZER_MAPPING";
					case AdErrorReason.MissingAddressComponent: return "MISSING_ADDRESS_COMPONENT";
					case AdErrorReason.MissingAdvertisementName: return "MISSING_ADVERTISEMENT_NAME";
					case AdErrorReason.MissingBusinessName: return "MISSING_BUSINESS_NAME";
					case AdErrorReason.MissingDescription1: return "MISSING_DESCRIPTION1";
					case AdErrorReason.MissingDescription2: return "MISSING_DESCRIPTION2";
					case AdErrorReason.MissingDestinationUrl: return "MISSING_DESTINATION_URL";
					case AdErrorReason.MissingDestinationUrlTag: return "MISSING_DESTINATION_URL_TAG";
					case AdErrorReason.MissingDimension: return "MISSING_DIMENSION";
					case AdErrorReason.MissingDisplayUrl: return "MISSING_DISPLAY_URL";
					case AdErrorReason.MissingHeadline: return "MISSING_HEADLINE";
					case AdErrorReason.MissingHeight: return "MISSING_HEIGHT";
					case AdErrorReason.MissingImage: return "MISSING_IMAGE";
					case AdErrorReason.MissingMarkupLanguages: return "MISSING_MARKUP_LANGUAGES";
					case AdErrorReason.MissingMobileCarrier: return "MISSING_MOBILE_CARRIER";
					case AdErrorReason.MissingPhone: return "MISSING_PHONE";
					case AdErrorReason.MissingRequiredTemplateFields: return "MISSING_REQUIRED_TEMPLATE_FIELDS";
					case AdErrorReason.MissingTemplateFieldValue: return "MISSING_TEMPLATE_FIELD_VALUE";
					case AdErrorReason.MissingText: return "MISSING_TEXT";
					case AdErrorReason.MissingUrlAndPhone: return "MISSING_URL_AND_PHONE";
					case AdErrorReason.MissingVisibleUrl: return "MISSING_VISIBLE_URL";
					case AdErrorReason.MissingWidth: return "MISSING_WIDTH";
					case AdErrorReason.MultipleDistinctFeedsUnsupported: return "MULTIPLE_DISTINCT_FEEDS_UNSUPPORTED";
					case AdErrorReason.MustUseTempAdUnionIdOnAdd: return "MUST_USE_TEMP_AD_UNION_ID_ON_ADD";
					case AdErrorReason.TooLong: return "TOO_LONG";
					case AdErrorReason.TooShort: return "TOO_SHORT";
					case AdErrorReason.UnionDimensionsCannotChange: return "UNION_DIMENSIONS_CANNOT_CHANGE";
					case AdErrorReason.UnknownAddressComponent: return "UNKNOWN_ADDRESS_COMPONENT";
					case AdErrorReason.UnknownFieldName: return "UNKNOWN_FIELD_NAME";
					case AdErrorReason.UnknownUniqueName: return "UNKNOWN_UNIQUE_NAME";
					case AdErrorReason.UnsupportedDimensions: return "UNSUPPORTED_DIMENSIONS";
					case AdErrorReason.UrlInvalidScheme: return "URL_INVALID_SCHEME";
					case AdErrorReason.UrlInvalidTopLevelDomain: return "URL_INVALID_TOP_LEVEL_DOMAIN";
					case AdErrorReason.UrlMalformed: return "URL_MALFORMED";
					case AdErrorReason.UrlNoHost: return "URL_NO_HOST";
					case AdErrorReason.UrlNotEquivalent: return "URL_NOT_EQUIVALENT";
					case AdErrorReason.UrlHostNameTooLong: return "URL_HOST_NAME_TOO_LONG";
					case AdErrorReason.UrlNoScheme: return "URL_NO_SCHEME";
					case AdErrorReason.UrlNoTopLevelDomain: return "URL_NO_TOP_LEVEL_DOMAIN";
					case AdErrorReason.UrlPathNotAllowed: return "URL_PATH_NOT_ALLOWED";
					case AdErrorReason.UrlPortNotAllowed: return "URL_PORT_NOT_ALLOWED";
					case AdErrorReason.UrlQueryNotAllowed: return "URL_QUERY_NOT_ALLOWED";
					case AdErrorReason.UrlSchemeBeforeDsaTag: return "URL_SCHEME_BEFORE_DSA_TAG";
					case AdErrorReason.UserDoesNotHaveAccessToTemplate: return "USER_DOES_NOT_HAVE_ACCESS_TO_TEMPLATE";
					case AdErrorReason.InconsistentExpandableSettings: return "INCONSISTENT_EXPANDABLE_SETTINGS";
					case AdErrorReason.InvalidFormat: return "INVALID_FORMAT";
					case AdErrorReason.InvalidFieldText: return "INVALID_FIELD_TEXT";
					case AdErrorReason.ElementNotPresent: return "ELEMENT_NOT_PRESENT";
					case AdErrorReason.ImageError: return "IMAGE_ERROR";
					case AdErrorReason.ValueNotInRange: return "VALUE_NOT_IN_RANGE";
					case AdErrorReason.FieldNotPresent: return "FIELD_NOT_PRESENT";
					case AdErrorReason.AddressNotComplete: return "ADDRESS_NOT_COMPLETE";
					case AdErrorReason.AddressInvalid: return "ADDRESS_INVALID";
					case AdErrorReason.VideoRetrievalError: return "VIDEO_RETRIEVAL_ERROR";
					case AdErrorReason.AudioError: return "AUDIO_ERROR";
					case AdErrorReason.InvalidYoutubeDisplayUrl: return "INVALID_YOUTUBE_DISPLAY_URL";
					case AdErrorReason.IncompatibleAdTypeAndDevicePreference: return "INCOMPATIBLE_AD_TYPE_AND_DEVICE_PREFERENCE";
					case AdErrorReason.CalltrackingNotSupportedForCountry: return "CALLTRACKING_NOT_SUPPORTED_FOR_COUNTRY";
					case AdErrorReason.CarrierSpecificShortNumberNotAllowed: return "CARRIER_SPECIFIC_SHORT_NUMBER_NOT_ALLOWED";
					case AdErrorReason.DisallowedNumberType: return "DISALLOWED_NUMBER_TYPE";
					case AdErrorReason.PhoneNumberNotSupportedForCountry: return "PHONE_NUMBER_NOT_SUPPORTED_FOR_COUNTRY";
					case AdErrorReason.PhoneNumberNotSupportedWithCalltrackingForCountry: return "PHONE_NUMBER_NOT_SUPPORTED_WITH_CALLTRACKING_FOR_COUNTRY";
					case AdErrorReason.PremiumRateNumberNotAllowed: return "PREMIUM_RATE_NUMBER_NOT_ALLOWED";
					case AdErrorReason.VanityPhoneNumberNotAllowed: return "VANITY_PHONE_NUMBER_NOT_ALLOWED";
					case AdErrorReason.InvalidCallConversionTypeId: return "INVALID_CALL_CONVERSION_TYPE_ID";
					case AdErrorReason.CannotDisableCallConversionAndSetConversionTypeId: return "CANNOT_DISABLE_CALL_CONVERSION_AND_SET_CONVERSION_TYPE_ID";
					case AdErrorReason.CannotSetPath2WithoutPath1: return "CANNOT_SET_PATH2_WITHOUT_PATH1";
					case AdErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AD_CUSTOMIZERS_NOT_SUPPORTED_FOR_AD_TYPE": return AdErrorReason.AdCustomizersNotSupportedForAdType;
					case "APPROXIMATELY_TOO_LONG": return AdErrorReason.ApproximatelyTooLong;
					case "APPROXIMATELY_TOO_SHORT": return AdErrorReason.ApproximatelyTooShort;
					case "BAD_SNIPPET": return AdErrorReason.BadSnippet;
					case "CANNOT_MODIFY_AD": return AdErrorReason.CannotModifyAd;
					case "CANNOT_SET_BUSINESS_NAME_IF_URL_SET": return AdErrorReason.CannotSetBusinessNameIfUrlSet;
					case "CANNOT_SET_FIELD": return AdErrorReason.CannotSetField;
					case "CANNOT_SET_FIELD_WITH_ORIGIN_AD_ID_SET": return AdErrorReason.CannotSetFieldWithOriginAdIdSet;
					case "CANNOT_SET_FIELD_WITH_AD_ID_SET_FOR_SHARING": return AdErrorReason.CannotSetFieldWithAdIdSetForSharing;
					case "CANNOT_SET_URL": return AdErrorReason.CannotSetUrl;
					case "CANNOT_SET_WITHOUT_FINAL_URLS": return AdErrorReason.CannotSetWithoutFinalUrls;
					case "CANNOT_SET_WITH_FINAL_URLS": return AdErrorReason.CannotSetWithFinalUrls;
					case "CANNOT_SET_WITH_TRACKING_URL_TEMPLATE": return AdErrorReason.CannotSetWithTrackingUrlTemplate;
					case "CANNOT_USE_AD_SUBCLASS_FOR_OPERATOR": return AdErrorReason.CannotUseAdSubclassForOperator;
					case "CUSTOMER_NOT_APPROVED_MOBILEADS": return AdErrorReason.CustomerNotApprovedMobileads;
					case "CUSTOMER_NOT_APPROVED_THIRDPARTY_ADS": return AdErrorReason.CustomerNotApprovedThirdpartyAds;
					case "CUSTOMER_NOT_APPROVED_THIRDPARTY_REDIRECT_ADS": return AdErrorReason.CustomerNotApprovedThirdpartyRedirectAds;
					case "CUSTOMER_NOT_ELIGIBLE": return AdErrorReason.CustomerNotEligible;
					case "CUSTOMER_NOT_ELIGIBLE_FOR_UPDATING_BEACON_URL": return AdErrorReason.CustomerNotEligibleForUpdatingBeaconUrl;
					case "DIMENSION_ALREADY_IN_UNION": return AdErrorReason.DimensionAlreadyInUnion;
					case "DIMENSION_MUST_BE_SET": return AdErrorReason.DimensionMustBeSet;
					case "DIMENSION_NOT_IN_UNION": return AdErrorReason.DimensionNotInUnion;
					case "DISPLAY_URL_CANNOT_BE_SPECIFIED": return AdErrorReason.DisplayUrlCannotBeSpecified;
					case "DOMESTIC_PHONE_NUMBER_FORMAT": return AdErrorReason.DomesticPhoneNumberFormat;
					case "EMERGENCY_PHONE_NUMBER": return AdErrorReason.EmergencyPhoneNumber;
					case "EMPTY_FIELD": return AdErrorReason.EmptyField;
					case "FEED_ATTRIBUTE_MUST_HAVE_MAPPING_FOR_TYPE_ID": return AdErrorReason.FeedAttributeMustHaveMappingForTypeId;
					case "FEED_ATTRIBUTE_MAPPING_TYPE_MISMATCH": return AdErrorReason.FeedAttributeMappingTypeMismatch;
					case "ILLEGAL_AD_CUSTOMIZER_TAG_USE": return AdErrorReason.IllegalAdCustomizerTagUse;
					case "INCONSISTENT_DIMENSIONS": return AdErrorReason.InconsistentDimensions;
					case "INCONSISTENT_STATUS_IN_TEMPLATE_UNION": return AdErrorReason.InconsistentStatusInTemplateUnion;
					case "INCORRECT_LENGTH": return AdErrorReason.IncorrectLength;
					case "INELIGIBLE_FOR_UPGRADE": return AdErrorReason.IneligibleForUpgrade;
					case "INVALID_AD_ADDRESS_CAMPAIGN_TARGET": return AdErrorReason.InvalidAdAddressCampaignTarget;
					case "INVALID_AD_TYPE": return AdErrorReason.InvalidAdType;
					case "INVALID_ATTRIBUTES_FOR_MOBILE_IMAGE": return AdErrorReason.InvalidAttributesForMobileImage;
					case "INVALID_ATTRIBUTES_FOR_MOBILE_TEXT": return AdErrorReason.InvalidAttributesForMobileText;
					case "INVALID_CHARACTER_FOR_URL": return AdErrorReason.InvalidCharacterForUrl;
					case "INVALID_COUNTRY_CODE": return AdErrorReason.InvalidCountryCode;
					case "INVALID_DSA_URL_TAG": return AdErrorReason.InvalidDsaUrlTag;
					case "INVALID_INPUT": return AdErrorReason.InvalidInput;
					case "INVALID_MARKUP_LANGUAGE": return AdErrorReason.InvalidMarkupLanguage;
					case "INVALID_MOBILE_CARRIER": return AdErrorReason.InvalidMobileCarrier;
					case "INVALID_MOBILE_CARRIER_TARGET": return AdErrorReason.InvalidMobileCarrierTarget;
					case "INVALID_NUMBER_OF_ELEMENTS": return AdErrorReason.InvalidNumberOfElements;
					case "INVALID_PHONE_NUMBER_FORMAT": return AdErrorReason.InvalidPhoneNumberFormat;
					case "INVALID_RICH_MEDIA_CERTIFIED_VENDOR_FORMAT_ID": return AdErrorReason.InvalidRichMediaCertifiedVendorFormatId;
					case "INVALID_TEMPLATE_DATA": return AdErrorReason.InvalidTemplateData;
					case "INVALID_TEMPLATE_ELEMENT_FIELD_TYPE": return AdErrorReason.InvalidTemplateElementFieldType;
					case "INVALID_TEMPLATE_ID": return AdErrorReason.InvalidTemplateId;
					case "LINE_TOO_WIDE": return AdErrorReason.LineTooWide;
					case "MARKUP_LANGUAGES_PRESENT": return AdErrorReason.MarkupLanguagesPresent;
					case "MISSING_AD_CUSTOMIZER_MAPPING": return AdErrorReason.MissingAdCustomizerMapping;
					case "MISSING_ADDRESS_COMPONENT": return AdErrorReason.MissingAddressComponent;
					case "MISSING_ADVERTISEMENT_NAME": return AdErrorReason.MissingAdvertisementName;
					case "MISSING_BUSINESS_NAME": return AdErrorReason.MissingBusinessName;
					case "MISSING_DESCRIPTION1": return AdErrorReason.MissingDescription1;
					case "MISSING_DESCRIPTION2": return AdErrorReason.MissingDescription2;
					case "MISSING_DESTINATION_URL": return AdErrorReason.MissingDestinationUrl;
					case "MISSING_DESTINATION_URL_TAG": return AdErrorReason.MissingDestinationUrlTag;
					case "MISSING_DIMENSION": return AdErrorReason.MissingDimension;
					case "MISSING_DISPLAY_URL": return AdErrorReason.MissingDisplayUrl;
					case "MISSING_HEADLINE": return AdErrorReason.MissingHeadline;
					case "MISSING_HEIGHT": return AdErrorReason.MissingHeight;
					case "MISSING_IMAGE": return AdErrorReason.MissingImage;
					case "MISSING_MARKUP_LANGUAGES": return AdErrorReason.MissingMarkupLanguages;
					case "MISSING_MOBILE_CARRIER": return AdErrorReason.MissingMobileCarrier;
					case "MISSING_PHONE": return AdErrorReason.MissingPhone;
					case "MISSING_REQUIRED_TEMPLATE_FIELDS": return AdErrorReason.MissingRequiredTemplateFields;
					case "MISSING_TEMPLATE_FIELD_VALUE": return AdErrorReason.MissingTemplateFieldValue;
					case "MISSING_TEXT": return AdErrorReason.MissingText;
					case "MISSING_URL_AND_PHONE": return AdErrorReason.MissingUrlAndPhone;
					case "MISSING_VISIBLE_URL": return AdErrorReason.MissingVisibleUrl;
					case "MISSING_WIDTH": return AdErrorReason.MissingWidth;
					case "MULTIPLE_DISTINCT_FEEDS_UNSUPPORTED": return AdErrorReason.MultipleDistinctFeedsUnsupported;
					case "MUST_USE_TEMP_AD_UNION_ID_ON_ADD": return AdErrorReason.MustUseTempAdUnionIdOnAdd;
					case "TOO_LONG": return AdErrorReason.TooLong;
					case "TOO_SHORT": return AdErrorReason.TooShort;
					case "UNION_DIMENSIONS_CANNOT_CHANGE": return AdErrorReason.UnionDimensionsCannotChange;
					case "UNKNOWN_ADDRESS_COMPONENT": return AdErrorReason.UnknownAddressComponent;
					case "UNKNOWN_FIELD_NAME": return AdErrorReason.UnknownFieldName;
					case "UNKNOWN_UNIQUE_NAME": return AdErrorReason.UnknownUniqueName;
					case "UNSUPPORTED_DIMENSIONS": return AdErrorReason.UnsupportedDimensions;
					case "URL_INVALID_SCHEME": return AdErrorReason.UrlInvalidScheme;
					case "URL_INVALID_TOP_LEVEL_DOMAIN": return AdErrorReason.UrlInvalidTopLevelDomain;
					case "URL_MALFORMED": return AdErrorReason.UrlMalformed;
					case "URL_NO_HOST": return AdErrorReason.UrlNoHost;
					case "URL_NOT_EQUIVALENT": return AdErrorReason.UrlNotEquivalent;
					case "URL_HOST_NAME_TOO_LONG": return AdErrorReason.UrlHostNameTooLong;
					case "URL_NO_SCHEME": return AdErrorReason.UrlNoScheme;
					case "URL_NO_TOP_LEVEL_DOMAIN": return AdErrorReason.UrlNoTopLevelDomain;
					case "URL_PATH_NOT_ALLOWED": return AdErrorReason.UrlPathNotAllowed;
					case "URL_PORT_NOT_ALLOWED": return AdErrorReason.UrlPortNotAllowed;
					case "URL_QUERY_NOT_ALLOWED": return AdErrorReason.UrlQueryNotAllowed;
					case "URL_SCHEME_BEFORE_DSA_TAG": return AdErrorReason.UrlSchemeBeforeDsaTag;
					case "USER_DOES_NOT_HAVE_ACCESS_TO_TEMPLATE": return AdErrorReason.UserDoesNotHaveAccessToTemplate;
					case "INCONSISTENT_EXPANDABLE_SETTINGS": return AdErrorReason.InconsistentExpandableSettings;
					case "INVALID_FORMAT": return AdErrorReason.InvalidFormat;
					case "INVALID_FIELD_TEXT": return AdErrorReason.InvalidFieldText;
					case "ELEMENT_NOT_PRESENT": return AdErrorReason.ElementNotPresent;
					case "IMAGE_ERROR": return AdErrorReason.ImageError;
					case "VALUE_NOT_IN_RANGE": return AdErrorReason.ValueNotInRange;
					case "FIELD_NOT_PRESENT": return AdErrorReason.FieldNotPresent;
					case "ADDRESS_NOT_COMPLETE": return AdErrorReason.AddressNotComplete;
					case "ADDRESS_INVALID": return AdErrorReason.AddressInvalid;
					case "VIDEO_RETRIEVAL_ERROR": return AdErrorReason.VideoRetrievalError;
					case "AUDIO_ERROR": return AdErrorReason.AudioError;
					case "INVALID_YOUTUBE_DISPLAY_URL": return AdErrorReason.InvalidYoutubeDisplayUrl;
					case "INCOMPATIBLE_AD_TYPE_AND_DEVICE_PREFERENCE": return AdErrorReason.IncompatibleAdTypeAndDevicePreference;
					case "CALLTRACKING_NOT_SUPPORTED_FOR_COUNTRY": return AdErrorReason.CalltrackingNotSupportedForCountry;
					case "CARRIER_SPECIFIC_SHORT_NUMBER_NOT_ALLOWED": return AdErrorReason.CarrierSpecificShortNumberNotAllowed;
					case "DISALLOWED_NUMBER_TYPE": return AdErrorReason.DisallowedNumberType;
					case "PHONE_NUMBER_NOT_SUPPORTED_FOR_COUNTRY": return AdErrorReason.PhoneNumberNotSupportedForCountry;
					case "PHONE_NUMBER_NOT_SUPPORTED_WITH_CALLTRACKING_FOR_COUNTRY": return AdErrorReason.PhoneNumberNotSupportedWithCalltrackingForCountry;
					case "PREMIUM_RATE_NUMBER_NOT_ALLOWED": return AdErrorReason.PremiumRateNumberNotAllowed;
					case "VANITY_PHONE_NUMBER_NOT_ALLOWED": return AdErrorReason.VanityPhoneNumberNotAllowed;
					case "INVALID_CALL_CONVERSION_TYPE_ID": return AdErrorReason.InvalidCallConversionTypeId;
					case "CANNOT_DISABLE_CALL_CONVERSION_AND_SET_CONVERSION_TYPE_ID": return AdErrorReason.CannotDisableCallConversionAndSetConversionTypeId;
					case "CANNOT_SET_PATH2_WITHOUT_PATH1": return AdErrorReason.CannotSetPath2WithoutPath1;
					case "UNKNOWN": return AdErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupAdApprovalStatusExtensions
		{
			public static string ToXmlValue(this AdGroupAdApprovalStatus enumValue)
			{
				switch (enumValue)
				{
					case AdGroupAdApprovalStatus.Approved: return "APPROVED";
					case AdGroupAdApprovalStatus.Disapproved: return "DISAPPROVED";
					case AdGroupAdApprovalStatus.FamilySafe: return "FAMILY_SAFE";
					case AdGroupAdApprovalStatus.NonFamilySafe: return "NON_FAMILY_SAFE";
					case AdGroupAdApprovalStatus.Porn: return "PORN";
					case AdGroupAdApprovalStatus.Unchecked: return "UNCHECKED";
					case AdGroupAdApprovalStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupAdApprovalStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "APPROVED": return AdGroupAdApprovalStatus.Approved;
					case "DISAPPROVED": return AdGroupAdApprovalStatus.Disapproved;
					case "FAMILY_SAFE": return AdGroupAdApprovalStatus.FamilySafe;
					case "NON_FAMILY_SAFE": return AdGroupAdApprovalStatus.NonFamilySafe;
					case "PORN": return AdGroupAdApprovalStatus.Porn;
					case "UNCHECKED": return AdGroupAdApprovalStatus.Unchecked;
					case "UNKNOWN": return AdGroupAdApprovalStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupAdApprovalStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupAdErrorReasonExtensions
		{
			public static string ToXmlValue(this AdGroupAdErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdGroupAdErrorReason.AdGroupAdLabelDoesNotExist: return "AD_GROUP_AD_LABEL_DOES_NOT_EXIST";
					case AdGroupAdErrorReason.AdGroupAdLabelAlreadyExists: return "AD_GROUP_AD_LABEL_ALREADY_EXISTS";
					case AdGroupAdErrorReason.AdNotUnderAdgroup: return "AD_NOT_UNDER_ADGROUP";
					case AdGroupAdErrorReason.CannotOperateOnRemovedAdgroupad: return "CANNOT_OPERATE_ON_REMOVED_ADGROUPAD";
					case AdGroupAdErrorReason.CannotCreateDeprecatedAds: return "CANNOT_CREATE_DEPRECATED_ADS";
					case AdGroupAdErrorReason.EmptyField: return "EMPTY_FIELD";
					case AdGroupAdErrorReason.EntityReferencedInMultipleOps: return "ENTITY_REFERENCED_IN_MULTIPLE_OPS";
					case AdGroupAdErrorReason.UnsupportedOperation: return "UNSUPPORTED_OPERATION";
					default: return null;
				}
			}
			public static AdGroupAdErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AD_GROUP_AD_LABEL_DOES_NOT_EXIST": return AdGroupAdErrorReason.AdGroupAdLabelDoesNotExist;
					case "AD_GROUP_AD_LABEL_ALREADY_EXISTS": return AdGroupAdErrorReason.AdGroupAdLabelAlreadyExists;
					case "AD_NOT_UNDER_ADGROUP": return AdGroupAdErrorReason.AdNotUnderAdgroup;
					case "CANNOT_OPERATE_ON_REMOVED_ADGROUPAD": return AdGroupAdErrorReason.CannotOperateOnRemovedAdgroupad;
					case "CANNOT_CREATE_DEPRECATED_ADS": return AdGroupAdErrorReason.CannotCreateDeprecatedAds;
					case "EMPTY_FIELD": return AdGroupAdErrorReason.EmptyField;
					case "ENTITY_REFERENCED_IN_MULTIPLE_OPS": return AdGroupAdErrorReason.EntityReferencedInMultipleOps;
					case "UNSUPPORTED_OPERATION": return AdGroupAdErrorReason.UnsupportedOperation;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupAdErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupAdStatusExtensions
		{
			public static string ToXmlValue(this AdGroupAdStatus enumValue)
			{
				switch (enumValue)
				{
					case AdGroupAdStatus.Enabled: return "ENABLED";
					case AdGroupAdStatus.Paused: return "PAUSED";
					case AdGroupAdStatus.Disabled: return "DISABLED";
					default: return null;
				}
			}
			public static AdGroupAdStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return AdGroupAdStatus.Enabled;
					case "PAUSED": return AdGroupAdStatus.Paused;
					case "DISABLED": return AdGroupAdStatus.Disabled;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupAdStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupBidLandscapeTypeExtensions
		{
			public static string ToXmlValue(this AdGroupBidLandscapeType enumValue)
			{
				switch (enumValue)
				{
					case AdGroupBidLandscapeType.Uniform: return "UNIFORM";
					case AdGroupBidLandscapeType.Default: return "DEFAULT";
					case AdGroupBidLandscapeType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupBidLandscapeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNIFORM": return AdGroupBidLandscapeType.Uniform;
					case "DEFAULT": return AdGroupBidLandscapeType.Default;
					case "UNKNOWN": return AdGroupBidLandscapeType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupBidLandscapeType.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupCriterionErrorReasonExtensions
		{
			public static string ToXmlValue(this AdGroupCriterionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdGroupCriterionErrorReason.AdGroupCriterionLabelDoesNotExist: return "AD_GROUP_CRITERION_LABEL_DOES_NOT_EXIST";
					case AdGroupCriterionErrorReason.AdGroupCriterionLabelAlreadyExists: return "AD_GROUP_CRITERION_LABEL_ALREADY_EXISTS";
					case AdGroupCriterionErrorReason.CannotAddLabelToNegativeCriterion: return "CANNOT_ADD_LABEL_TO_NEGATIVE_CRITERION";
					case AdGroupCriterionErrorReason.TooManyOperations: return "TOO_MANY_OPERATIONS";
					case AdGroupCriterionErrorReason.CantUpdateNegative: return "CANT_UPDATE_NEGATIVE";
					case AdGroupCriterionErrorReason.ConcreteTypeRequired: return "CONCRETE_TYPE_REQUIRED";
					case AdGroupCriterionErrorReason.BidIncompatibleWithAdgroup: return "BID_INCOMPATIBLE_WITH_ADGROUP";
					case AdGroupCriterionErrorReason.CannotTargetAndExclude: return "CANNOT_TARGET_AND_EXCLUDE";
					case AdGroupCriterionErrorReason.IllegalUrl: return "ILLEGAL_URL";
					case AdGroupCriterionErrorReason.InvalidKeywordText: return "INVALID_KEYWORD_TEXT";
					case AdGroupCriterionErrorReason.InvalidDestinationUrl: return "INVALID_DESTINATION_URL";
					case AdGroupCriterionErrorReason.MissingDestinationUrlTag: return "MISSING_DESTINATION_URL_TAG";
					case AdGroupCriterionErrorReason.KeywordLevelBidNotSupportedForManualcpm: return "KEYWORD_LEVEL_BID_NOT_SUPPORTED_FOR_MANUALCPM";
					case AdGroupCriterionErrorReason.InvalidUserStatus: return "INVALID_USER_STATUS";
					case AdGroupCriterionErrorReason.CannotAddCriteriaType: return "CANNOT_ADD_CRITERIA_TYPE";
					case AdGroupCriterionErrorReason.CannotExcludeCriteriaType: return "CANNOT_EXCLUDE_CRITERIA_TYPE";
					case AdGroupCriterionErrorReason.InvalidProductPartitionHierarchy: return "INVALID_PRODUCT_PARTITION_HIERARCHY";
					case AdGroupCriterionErrorReason.ProductPartitionUnitCannotHaveChildren: return "PRODUCT_PARTITION_UNIT_CANNOT_HAVE_CHILDREN";
					case AdGroupCriterionErrorReason.ProductPartitionSubdivisionRequiresOthersCase: return "PRODUCT_PARTITION_SUBDIVISION_REQUIRES_OTHERS_CASE";
					case AdGroupCriterionErrorReason.ProductPartitionRequiresSameDimensionTypeAsSiblings: return "PRODUCT_PARTITION_REQUIRES_SAME_DIMENSION_TYPE_AS_SIBLINGS";
					case AdGroupCriterionErrorReason.ProductPartitionAlreadyExists: return "PRODUCT_PARTITION_ALREADY_EXISTS";
					case AdGroupCriterionErrorReason.ProductPartitionDoesNotExist: return "PRODUCT_PARTITION_DOES_NOT_EXIST";
					case AdGroupCriterionErrorReason.ProductPartitionCannotBeRemoved: return "PRODUCT_PARTITION_CANNOT_BE_REMOVED";
					case AdGroupCriterionErrorReason.InvalidProductPartitionType: return "INVALID_PRODUCT_PARTITION_TYPE";
					case AdGroupCriterionErrorReason.ProductPartitionAddMayOnlyUseTempId: return "PRODUCT_PARTITION_ADD_MAY_ONLY_USE_TEMP_ID";
					case AdGroupCriterionErrorReason.CampaignTypeNotCompatibleWithPartialFailure: return "CAMPAIGN_TYPE_NOT_COMPATIBLE_WITH_PARTIAL_FAILURE";
					case AdGroupCriterionErrorReason.OperationsForTooManyShoppingAdgroups: return "OPERATIONS_FOR_TOO_MANY_SHOPPING_ADGROUPS";
					case AdGroupCriterionErrorReason.CannotModifyUrlFieldsWithDuplicateElements: return "CANNOT_MODIFY_URL_FIELDS_WITH_DUPLICATE_ELEMENTS";
					case AdGroupCriterionErrorReason.CannotSetWithoutFinalUrls: return "CANNOT_SET_WITHOUT_FINAL_URLS";
					case AdGroupCriterionErrorReason.CannotClearFinalUrlsIfFinalMobileUrlsExist: return "CANNOT_CLEAR_FINAL_URLS_IF_FINAL_MOBILE_URLS_EXIST";
					case AdGroupCriterionErrorReason.CannotClearFinalUrlsIfFinalAppUrlsExist: return "CANNOT_CLEAR_FINAL_URLS_IF_FINAL_APP_URLS_EXIST";
					case AdGroupCriterionErrorReason.CannotClearFinalUrlsIfTrackingUrlTemplateExists: return "CANNOT_CLEAR_FINAL_URLS_IF_TRACKING_URL_TEMPLATE_EXISTS";
					case AdGroupCriterionErrorReason.CannotClearFinalUrlsIfUrlCustomParametersExist: return "CANNOT_CLEAR_FINAL_URLS_IF_URL_CUSTOM_PARAMETERS_EXIST";
					case AdGroupCriterionErrorReason.CannotSetBothDestinationUrlAndFinalUrls: return "CANNOT_SET_BOTH_DESTINATION_URL_AND_FINAL_URLS";
					case AdGroupCriterionErrorReason.CannotSetBothDestinationUrlAndTrackingUrlTemplate: return "CANNOT_SET_BOTH_DESTINATION_URL_AND_TRACKING_URL_TEMPLATE";
					case AdGroupCriterionErrorReason.FinalUrlsNotSupportedForCriterionType: return "FINAL_URLS_NOT_SUPPORTED_FOR_CRITERION_TYPE";
					case AdGroupCriterionErrorReason.FinalMobileUrlsNotSupportedForCriterionType: return "FINAL_MOBILE_URLS_NOT_SUPPORTED_FOR_CRITERION_TYPE";
					case AdGroupCriterionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupCriterionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AD_GROUP_CRITERION_LABEL_DOES_NOT_EXIST": return AdGroupCriterionErrorReason.AdGroupCriterionLabelDoesNotExist;
					case "AD_GROUP_CRITERION_LABEL_ALREADY_EXISTS": return AdGroupCriterionErrorReason.AdGroupCriterionLabelAlreadyExists;
					case "CANNOT_ADD_LABEL_TO_NEGATIVE_CRITERION": return AdGroupCriterionErrorReason.CannotAddLabelToNegativeCriterion;
					case "TOO_MANY_OPERATIONS": return AdGroupCriterionErrorReason.TooManyOperations;
					case "CANT_UPDATE_NEGATIVE": return AdGroupCriterionErrorReason.CantUpdateNegative;
					case "CONCRETE_TYPE_REQUIRED": return AdGroupCriterionErrorReason.ConcreteTypeRequired;
					case "BID_INCOMPATIBLE_WITH_ADGROUP": return AdGroupCriterionErrorReason.BidIncompatibleWithAdgroup;
					case "CANNOT_TARGET_AND_EXCLUDE": return AdGroupCriterionErrorReason.CannotTargetAndExclude;
					case "ILLEGAL_URL": return AdGroupCriterionErrorReason.IllegalUrl;
					case "INVALID_KEYWORD_TEXT": return AdGroupCriterionErrorReason.InvalidKeywordText;
					case "INVALID_DESTINATION_URL": return AdGroupCriterionErrorReason.InvalidDestinationUrl;
					case "MISSING_DESTINATION_URL_TAG": return AdGroupCriterionErrorReason.MissingDestinationUrlTag;
					case "KEYWORD_LEVEL_BID_NOT_SUPPORTED_FOR_MANUALCPM": return AdGroupCriterionErrorReason.KeywordLevelBidNotSupportedForManualcpm;
					case "INVALID_USER_STATUS": return AdGroupCriterionErrorReason.InvalidUserStatus;
					case "CANNOT_ADD_CRITERIA_TYPE": return AdGroupCriterionErrorReason.CannotAddCriteriaType;
					case "CANNOT_EXCLUDE_CRITERIA_TYPE": return AdGroupCriterionErrorReason.CannotExcludeCriteriaType;
					case "INVALID_PRODUCT_PARTITION_HIERARCHY": return AdGroupCriterionErrorReason.InvalidProductPartitionHierarchy;
					case "PRODUCT_PARTITION_UNIT_CANNOT_HAVE_CHILDREN": return AdGroupCriterionErrorReason.ProductPartitionUnitCannotHaveChildren;
					case "PRODUCT_PARTITION_SUBDIVISION_REQUIRES_OTHERS_CASE": return AdGroupCriterionErrorReason.ProductPartitionSubdivisionRequiresOthersCase;
					case "PRODUCT_PARTITION_REQUIRES_SAME_DIMENSION_TYPE_AS_SIBLINGS": return AdGroupCriterionErrorReason.ProductPartitionRequiresSameDimensionTypeAsSiblings;
					case "PRODUCT_PARTITION_ALREADY_EXISTS": return AdGroupCriterionErrorReason.ProductPartitionAlreadyExists;
					case "PRODUCT_PARTITION_DOES_NOT_EXIST": return AdGroupCriterionErrorReason.ProductPartitionDoesNotExist;
					case "PRODUCT_PARTITION_CANNOT_BE_REMOVED": return AdGroupCriterionErrorReason.ProductPartitionCannotBeRemoved;
					case "INVALID_PRODUCT_PARTITION_TYPE": return AdGroupCriterionErrorReason.InvalidProductPartitionType;
					case "PRODUCT_PARTITION_ADD_MAY_ONLY_USE_TEMP_ID": return AdGroupCriterionErrorReason.ProductPartitionAddMayOnlyUseTempId;
					case "CAMPAIGN_TYPE_NOT_COMPATIBLE_WITH_PARTIAL_FAILURE": return AdGroupCriterionErrorReason.CampaignTypeNotCompatibleWithPartialFailure;
					case "OPERATIONS_FOR_TOO_MANY_SHOPPING_ADGROUPS": return AdGroupCriterionErrorReason.OperationsForTooManyShoppingAdgroups;
					case "CANNOT_MODIFY_URL_FIELDS_WITH_DUPLICATE_ELEMENTS": return AdGroupCriterionErrorReason.CannotModifyUrlFieldsWithDuplicateElements;
					case "CANNOT_SET_WITHOUT_FINAL_URLS": return AdGroupCriterionErrorReason.CannotSetWithoutFinalUrls;
					case "CANNOT_CLEAR_FINAL_URLS_IF_FINAL_MOBILE_URLS_EXIST": return AdGroupCriterionErrorReason.CannotClearFinalUrlsIfFinalMobileUrlsExist;
					case "CANNOT_CLEAR_FINAL_URLS_IF_FINAL_APP_URLS_EXIST": return AdGroupCriterionErrorReason.CannotClearFinalUrlsIfFinalAppUrlsExist;
					case "CANNOT_CLEAR_FINAL_URLS_IF_TRACKING_URL_TEMPLATE_EXISTS": return AdGroupCriterionErrorReason.CannotClearFinalUrlsIfTrackingUrlTemplateExists;
					case "CANNOT_CLEAR_FINAL_URLS_IF_URL_CUSTOM_PARAMETERS_EXIST": return AdGroupCriterionErrorReason.CannotClearFinalUrlsIfUrlCustomParametersExist;
					case "CANNOT_SET_BOTH_DESTINATION_URL_AND_FINAL_URLS": return AdGroupCriterionErrorReason.CannotSetBothDestinationUrlAndFinalUrls;
					case "CANNOT_SET_BOTH_DESTINATION_URL_AND_TRACKING_URL_TEMPLATE": return AdGroupCriterionErrorReason.CannotSetBothDestinationUrlAndTrackingUrlTemplate;
					case "FINAL_URLS_NOT_SUPPORTED_FOR_CRITERION_TYPE": return AdGroupCriterionErrorReason.FinalUrlsNotSupportedForCriterionType;
					case "FINAL_MOBILE_URLS_NOT_SUPPORTED_FOR_CRITERION_TYPE": return AdGroupCriterionErrorReason.FinalMobileUrlsNotSupportedForCriterionType;
					case "UNKNOWN": return AdGroupCriterionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupCriterionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupCriterionLimitExceededCriteriaLimitTypeExtensions
		{
			public static string ToXmlValue(this AdGroupCriterionLimitExceededCriteriaLimitType enumValue)
			{
				switch (enumValue)
				{
					case AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupKeyword: return "ADGROUP_KEYWORD";
					case AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupWebsite: return "ADGROUP_WEBSITE";
					case AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupCriterion: return "ADGROUP_CRITERION";
					case AdGroupCriterionLimitExceededCriteriaLimitType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupCriterionLimitExceededCriteriaLimitType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADGROUP_KEYWORD": return AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupKeyword;
					case "ADGROUP_WEBSITE": return AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupWebsite;
					case "ADGROUP_CRITERION": return AdGroupCriterionLimitExceededCriteriaLimitType.AdgroupCriterion;
					case "UNKNOWN": return AdGroupCriterionLimitExceededCriteriaLimitType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupCriterionLimitExceededCriteriaLimitType.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupFeedErrorReasonExtensions
		{
			public static string ToXmlValue(this AdGroupFeedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdGroupFeedErrorReason.FeedAlreadyExistsForPlaceholderType: return "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case AdGroupFeedErrorReason.InvalidId: return "INVALID_ID";
					case AdGroupFeedErrorReason.CannotAddForDeletedFeed: return "CANNOT_ADD_FOR_DELETED_FEED";
					case AdGroupFeedErrorReason.CannotAddAlreadyExistingAdgroupFeed: return "CANNOT_ADD_ALREADY_EXISTING_ADGROUP_FEED";
					case AdGroupFeedErrorReason.CannotOperateOnRemovedAdgroupFeed: return "CANNOT_OPERATE_ON_REMOVED_ADGROUP_FEED";
					case AdGroupFeedErrorReason.InvalidPlaceholderTypes: return "INVALID_PLACEHOLDER_TYPES";
					case AdGroupFeedErrorReason.MissingFeedmappingForPlaceholderType: return "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE";
					case AdGroupFeedErrorReason.NoExistingLocationCustomerFeed: return "NO_EXISTING_LOCATION_CUSTOMER_FEED";
					case AdGroupFeedErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupFeedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return AdGroupFeedErrorReason.FeedAlreadyExistsForPlaceholderType;
					case "INVALID_ID": return AdGroupFeedErrorReason.InvalidId;
					case "CANNOT_ADD_FOR_DELETED_FEED": return AdGroupFeedErrorReason.CannotAddForDeletedFeed;
					case "CANNOT_ADD_ALREADY_EXISTING_ADGROUP_FEED": return AdGroupFeedErrorReason.CannotAddAlreadyExistingAdgroupFeed;
					case "CANNOT_OPERATE_ON_REMOVED_ADGROUP_FEED": return AdGroupFeedErrorReason.CannotOperateOnRemovedAdgroupFeed;
					case "INVALID_PLACEHOLDER_TYPES": return AdGroupFeedErrorReason.InvalidPlaceholderTypes;
					case "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE": return AdGroupFeedErrorReason.MissingFeedmappingForPlaceholderType;
					case "NO_EXISTING_LOCATION_CUSTOMER_FEED": return AdGroupFeedErrorReason.NoExistingLocationCustomerFeed;
					case "UNKNOWN": return AdGroupFeedErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupFeedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupFeedStatusExtensions
		{
			public static string ToXmlValue(this AdGroupFeedStatus enumValue)
			{
				switch (enumValue)
				{
					case AdGroupFeedStatus.Enabled: return "ENABLED";
					case AdGroupFeedStatus.Removed: return "REMOVED";
					case AdGroupFeedStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdGroupFeedStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return AdGroupFeedStatus.Enabled;
					case "REMOVED": return AdGroupFeedStatus.Removed;
					case "UNKNOWN": return AdGroupFeedStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupFeedStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupServiceErrorReasonExtensions
		{
			public static string ToXmlValue(this AdGroupServiceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdGroupServiceErrorReason.DuplicateAdgroupName: return "DUPLICATE_ADGROUP_NAME";
					case AdGroupServiceErrorReason.InvalidAdgroupName: return "INVALID_ADGROUP_NAME";
					case AdGroupServiceErrorReason.UseSetOperatorAndMarkStatusToRemoved: return "USE_SET_OPERATOR_AND_MARK_STATUS_TO_REMOVED";
					case AdGroupServiceErrorReason.AdvertiserNotOnContentNetwork: return "ADVERTISER_NOT_ON_CONTENT_NETWORK";
					case AdGroupServiceErrorReason.BidTooBig: return "BID_TOO_BIG";
					case AdGroupServiceErrorReason.BidTypeAndBiddingStrategyMismatch: return "BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH";
					case AdGroupServiceErrorReason.MissingAdgroupName: return "MISSING_ADGROUP_NAME";
					case AdGroupServiceErrorReason.AdgroupLabelDoesNotExist: return "ADGROUP_LABEL_DOES_NOT_EXIST";
					case AdGroupServiceErrorReason.AdgroupLabelAlreadyExists: return "ADGROUP_LABEL_ALREADY_EXISTS";
					case AdGroupServiceErrorReason.InvalidContentBidCriterionTypeGroup: return "INVALID_CONTENT_BID_CRITERION_TYPE_GROUP";
					default: return null;
				}
			}
			public static AdGroupServiceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_ADGROUP_NAME": return AdGroupServiceErrorReason.DuplicateAdgroupName;
					case "INVALID_ADGROUP_NAME": return AdGroupServiceErrorReason.InvalidAdgroupName;
					case "USE_SET_OPERATOR_AND_MARK_STATUS_TO_REMOVED": return AdGroupServiceErrorReason.UseSetOperatorAndMarkStatusToRemoved;
					case "ADVERTISER_NOT_ON_CONTENT_NETWORK": return AdGroupServiceErrorReason.AdvertiserNotOnContentNetwork;
					case "BID_TOO_BIG": return AdGroupServiceErrorReason.BidTooBig;
					case "BID_TYPE_AND_BIDDING_STRATEGY_MISMATCH": return AdGroupServiceErrorReason.BidTypeAndBiddingStrategyMismatch;
					case "MISSING_ADGROUP_NAME": return AdGroupServiceErrorReason.MissingAdgroupName;
					case "ADGROUP_LABEL_DOES_NOT_EXIST": return AdGroupServiceErrorReason.AdgroupLabelDoesNotExist;
					case "ADGROUP_LABEL_ALREADY_EXISTS": return AdGroupServiceErrorReason.AdgroupLabelAlreadyExists;
					case "INVALID_CONTENT_BID_CRITERION_TYPE_GROUP": return AdGroupServiceErrorReason.InvalidContentBidCriterionTypeGroup;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupServiceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdGroupStatusExtensions
		{
			public static string ToXmlValue(this AdGroupStatus enumValue)
			{
				switch (enumValue)
				{
					case AdGroupStatus.Unknown: return "UNKNOWN";
					case AdGroupStatus.Enabled: return "ENABLED";
					case AdGroupStatus.Paused: return "PAUSED";
					case AdGroupStatus.Removed: return "REMOVED";
					default: return null;
				}
			}
			public static AdGroupStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return AdGroupStatus.Unknown;
					case "ENABLED": return AdGroupStatus.Enabled;
					case "PAUSED": return AdGroupStatus.Paused;
					case "REMOVED": return AdGroupStatus.Removed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdGroupStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdParamErrorReasonExtensions
		{
			public static string ToXmlValue(this AdParamErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdParamErrorReason.AdParamCannotBeSpecifiedMultipleTimes: return "AD_PARAM_CANNOT_BE_SPECIFIED_MULTIPLE_TIMES";
					case AdParamErrorReason.AdParamDoesNotExist: return "AD_PARAM_DOES_NOT_EXIST";
					case AdParamErrorReason.CriterionSpecifiedMustBeKeyword: return "CRITERION_SPECIFIED_MUST_BE_KEYWORD";
					case AdParamErrorReason.InvalidAdgroupCriterionSpecified: return "INVALID_ADGROUP_CRITERION_SPECIFIED";
					case AdParamErrorReason.InvalidInsertionTextFormat: return "INVALID_INSERTION_TEXT_FORMAT";
					case AdParamErrorReason.MustSpecifyAdgroupId: return "MUST_SPECIFY_ADGROUP_ID";
					case AdParamErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdParamErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AD_PARAM_CANNOT_BE_SPECIFIED_MULTIPLE_TIMES": return AdParamErrorReason.AdParamCannotBeSpecifiedMultipleTimes;
					case "AD_PARAM_DOES_NOT_EXIST": return AdParamErrorReason.AdParamDoesNotExist;
					case "CRITERION_SPECIFIED_MUST_BE_KEYWORD": return AdParamErrorReason.CriterionSpecifiedMustBeKeyword;
					case "INVALID_ADGROUP_CRITERION_SPECIFIED": return AdParamErrorReason.InvalidAdgroupCriterionSpecified;
					case "INVALID_INSERTION_TEXT_FORMAT": return AdParamErrorReason.InvalidInsertionTextFormat;
					case "MUST_SPECIFY_ADGROUP_ID": return AdParamErrorReason.MustSpecifyAdgroupId;
					case "UNKNOWN": return AdParamErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdParamErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AdServingOptimizationStatusExtensions
		{
			public static string ToXmlValue(this AdServingOptimizationStatus enumValue)
			{
				switch (enumValue)
				{
					case AdServingOptimizationStatus.Optimize: return "OPTIMIZE";
					case AdServingOptimizationStatus.ConversionOptimize: return "CONVERSION_OPTIMIZE";
					case AdServingOptimizationStatus.Rotate: return "ROTATE";
					case AdServingOptimizationStatus.RotateIndefinitely: return "ROTATE_INDEFINITELY";
					case AdServingOptimizationStatus.Unavailable: return "UNAVAILABLE";
					case AdServingOptimizationStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdServingOptimizationStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OPTIMIZE": return AdServingOptimizationStatus.Optimize;
					case "CONVERSION_OPTIMIZE": return AdServingOptimizationStatus.ConversionOptimize;
					case "ROTATE": return AdServingOptimizationStatus.Rotate;
					case "ROTATE_INDEFINITELY": return AdServingOptimizationStatus.RotateIndefinitely;
					case "UNAVAILABLE": return AdServingOptimizationStatus.Unavailable;
					case "UNKNOWN": return AdServingOptimizationStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdServingOptimizationStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AdTypeExtensions
		{
			public static string ToXmlValue(this AdType enumValue)
			{
				switch (enumValue)
				{
					case AdType.DeprecatedAd: return "DEPRECATED_AD";
					case AdType.ImageAd: return "IMAGE_AD";
					case AdType.ProductAd: return "PRODUCT_AD";
					case AdType.TemplateAd: return "TEMPLATE_AD";
					case AdType.TextAd: return "TEXT_AD";
					case AdType.ThirdPartyRedirectAd: return "THIRD_PARTY_REDIRECT_AD";
					case AdType.DynamicSearchAd: return "DYNAMIC_SEARCH_AD";
					case AdType.CallOnlyAd: return "CALL_ONLY_AD";
					case AdType.ExpandedTextAd: return "EXPANDED_TEXT_AD";
					case AdType.ResponsiveDisplayAd: return "RESPONSIVE_DISPLAY_AD";
					case AdType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AdType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DEPRECATED_AD": return AdType.DeprecatedAd;
					case "IMAGE_AD": return AdType.ImageAd;
					case "PRODUCT_AD": return AdType.ProductAd;
					case "TEMPLATE_AD": return AdType.TemplateAd;
					case "TEXT_AD": return AdType.TextAd;
					case "THIRD_PARTY_REDIRECT_AD": return AdType.ThirdPartyRedirectAd;
					case "DYNAMIC_SEARCH_AD": return AdType.DynamicSearchAd;
					case "CALL_ONLY_AD": return AdType.CallOnlyAd;
					case "EXPANDED_TEXT_AD": return AdType.ExpandedTextAd;
					case "RESPONSIVE_DISPLAY_AD": return AdType.ResponsiveDisplayAd;
					case "UNKNOWN": return AdType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdType.", nameof(xmlValue));
				}
			}
		}
		public static class AdvertisingChannelSubTypeExtensions
		{
			public static string ToXmlValue(this AdvertisingChannelSubType enumValue)
			{
				switch (enumValue)
				{
					case AdvertisingChannelSubType.Unknown: return "UNKNOWN";
					case AdvertisingChannelSubType.SearchMobileApp: return "SEARCH_MOBILE_APP";
					case AdvertisingChannelSubType.DisplayMobileApp: return "DISPLAY_MOBILE_APP";
					case AdvertisingChannelSubType.SearchExpress: return "SEARCH_EXPRESS";
					case AdvertisingChannelSubType.DisplayExpress: return "DISPLAY_EXPRESS";
					case AdvertisingChannelSubType.UniversalAppCampaign: return "UNIVERSAL_APP_CAMPAIGN";
					default: return null;
				}
			}
			public static AdvertisingChannelSubType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return AdvertisingChannelSubType.Unknown;
					case "SEARCH_MOBILE_APP": return AdvertisingChannelSubType.SearchMobileApp;
					case "DISPLAY_MOBILE_APP": return AdvertisingChannelSubType.DisplayMobileApp;
					case "SEARCH_EXPRESS": return AdvertisingChannelSubType.SearchExpress;
					case "DISPLAY_EXPRESS": return AdvertisingChannelSubType.DisplayExpress;
					case "UNIVERSAL_APP_CAMPAIGN": return AdvertisingChannelSubType.UniversalAppCampaign;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdvertisingChannelSubType.", nameof(xmlValue));
				}
			}
		}
		public static class AdvertisingChannelTypeExtensions
		{
			public static string ToXmlValue(this AdvertisingChannelType enumValue)
			{
				switch (enumValue)
				{
					case AdvertisingChannelType.Unknown: return "UNKNOWN";
					case AdvertisingChannelType.Search: return "SEARCH";
					case AdvertisingChannelType.Display: return "DISPLAY";
					case AdvertisingChannelType.Shopping: return "SHOPPING";
					case AdvertisingChannelType.MultiChannel: return "MULTI_CHANNEL";
					default: return null;
				}
			}
			public static AdvertisingChannelType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return AdvertisingChannelType.Unknown;
					case "SEARCH": return AdvertisingChannelType.Search;
					case "DISPLAY": return AdvertisingChannelType.Display;
					case "SHOPPING": return AdvertisingChannelType.Shopping;
					case "MULTI_CHANNEL": return AdvertisingChannelType.MultiChannel;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdvertisingChannelType.", nameof(xmlValue));
				}
			}
		}
		public static class AdWordsConversionTrackerTextFormatExtensions
		{
			public static string ToXmlValue(this AdWordsConversionTrackerTextFormat enumValue)
			{
				switch (enumValue)
				{
					case AdWordsConversionTrackerTextFormat.OneLine: return "ONE_LINE";
					case AdWordsConversionTrackerTextFormat.TwoLine: return "TWO_LINE";
					case AdWordsConversionTrackerTextFormat.Hidden: return "HIDDEN";
					default: return null;
				}
			}
			public static AdWordsConversionTrackerTextFormat Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ONE_LINE": return AdWordsConversionTrackerTextFormat.OneLine;
					case "TWO_LINE": return AdWordsConversionTrackerTextFormat.TwoLine;
					case "HIDDEN": return AdWordsConversionTrackerTextFormat.Hidden;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdWordsConversionTrackerTextFormat.", nameof(xmlValue));
				}
			}
		}
		public static class AdWordsConversionTrackerTrackingCodeTypeExtensions
		{
			public static string ToXmlValue(this AdWordsConversionTrackerTrackingCodeType enumValue)
			{
				switch (enumValue)
				{
					case AdWordsConversionTrackerTrackingCodeType.Webpage: return "WEBPAGE";
					case AdWordsConversionTrackerTrackingCodeType.WebpageOnclick: return "WEBPAGE_ONCLICK";
					case AdWordsConversionTrackerTrackingCodeType.ClickToCall: return "CLICK_TO_CALL";
					default: return null;
				}
			}
			public static AdWordsConversionTrackerTrackingCodeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "WEBPAGE": return AdWordsConversionTrackerTrackingCodeType.Webpage;
					case "WEBPAGE_ONCLICK": return AdWordsConversionTrackerTrackingCodeType.WebpageOnclick;
					case "CLICK_TO_CALL": return AdWordsConversionTrackerTrackingCodeType.ClickToCall;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdWordsConversionTrackerTrackingCodeType.", nameof(xmlValue));
				}
			}
		}
		public static class AdxErrorReasonExtensions
		{
			public static string ToXmlValue(this AdxErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AdxErrorReason.UnsupportedFeature: return "UNSUPPORTED_FEATURE";
					default: return null;
				}
			}
			public static AdxErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNSUPPORTED_FEATURE": return AdxErrorReason.UnsupportedFeature;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AdxErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AgeRangeAgeRangeTypeExtensions
		{
			public static string ToXmlValue(this AgeRangeAgeRangeType enumValue)
			{
				switch (enumValue)
				{
					case AgeRangeAgeRangeType.AgeRange1824: return "AGE_RANGE_18_24";
					case AgeRangeAgeRangeType.AgeRange2534: return "AGE_RANGE_25_34";
					case AgeRangeAgeRangeType.AgeRange3544: return "AGE_RANGE_35_44";
					case AgeRangeAgeRangeType.AgeRange4554: return "AGE_RANGE_45_54";
					case AgeRangeAgeRangeType.AgeRange5564: return "AGE_RANGE_55_64";
					case AgeRangeAgeRangeType.AgeRange65Up: return "AGE_RANGE_65_UP";
					case AgeRangeAgeRangeType.AgeRangeUndetermined: return "AGE_RANGE_UNDETERMINED";
					case AgeRangeAgeRangeType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AgeRangeAgeRangeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AGE_RANGE_18_24": return AgeRangeAgeRangeType.AgeRange1824;
					case "AGE_RANGE_25_34": return AgeRangeAgeRangeType.AgeRange2534;
					case "AGE_RANGE_35_44": return AgeRangeAgeRangeType.AgeRange3544;
					case "AGE_RANGE_45_54": return AgeRangeAgeRangeType.AgeRange4554;
					case "AGE_RANGE_55_64": return AgeRangeAgeRangeType.AgeRange5564;
					case "AGE_RANGE_65_UP": return AgeRangeAgeRangeType.AgeRange65Up;
					case "AGE_RANGE_UNDETERMINED": return AgeRangeAgeRangeType.AgeRangeUndetermined;
					case "UNKNOWN": return AgeRangeAgeRangeType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AgeRangeAgeRangeType.", nameof(xmlValue));
				}
			}
		}
		public static class AppConversionAppConversionTypeExtensions
		{
			public static string ToXmlValue(this AppConversionAppConversionType enumValue)
			{
				switch (enumValue)
				{
					case AppConversionAppConversionType.None: return "NONE";
					case AppConversionAppConversionType.Download: return "DOWNLOAD";
					case AppConversionAppConversionType.InAppPurchase: return "IN_APP_PURCHASE";
					case AppConversionAppConversionType.FirstOpen: return "FIRST_OPEN";
					default: return null;
				}
			}
			public static AppConversionAppConversionType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NONE": return AppConversionAppConversionType.None;
					case "DOWNLOAD": return AppConversionAppConversionType.Download;
					case "IN_APP_PURCHASE": return AppConversionAppConversionType.InAppPurchase;
					case "FIRST_OPEN": return AppConversionAppConversionType.FirstOpen;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppConversionAppConversionType.", nameof(xmlValue));
				}
			}
		}
		public static class AppConversionAppPlatformExtensions
		{
			public static string ToXmlValue(this AppConversionAppPlatform enumValue)
			{
				switch (enumValue)
				{
					case AppConversionAppPlatform.None: return "NONE";
					case AppConversionAppPlatform.Itunes: return "ITUNES";
					case AppConversionAppPlatform.AndroidMarket: return "ANDROID_MARKET";
					case AppConversionAppPlatform.MobileAppChannel: return "MOBILE_APP_CHANNEL";
					default: return null;
				}
			}
			public static AppConversionAppPlatform Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NONE": return AppConversionAppPlatform.None;
					case "ITUNES": return AppConversionAppPlatform.Itunes;
					case "ANDROID_MARKET": return AppConversionAppPlatform.AndroidMarket;
					case "MOBILE_APP_CHANNEL": return AppConversionAppPlatform.MobileAppChannel;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppConversionAppPlatform.", nameof(xmlValue));
				}
			}
		}
		public static class AppFeedItemAppStoreExtensions
		{
			public static string ToXmlValue(this AppFeedItemAppStore enumValue)
			{
				switch (enumValue)
				{
					case AppFeedItemAppStore.AppleItunes: return "APPLE_ITUNES";
					case AppFeedItemAppStore.GooglePlay: return "GOOGLE_PLAY";
					case AppFeedItemAppStore.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AppFeedItemAppStore Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "APPLE_ITUNES": return AppFeedItemAppStore.AppleItunes;
					case "GOOGLE_PLAY": return AppFeedItemAppStore.GooglePlay;
					case "UNKNOWN": return AppFeedItemAppStore.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppFeedItemAppStore.", nameof(xmlValue));
				}
			}
		}
		public static class AppPaymentModelAppPaymentModelTypeExtensions
		{
			public static string ToXmlValue(this AppPaymentModelAppPaymentModelType enumValue)
			{
				switch (enumValue)
				{
					case AppPaymentModelAppPaymentModelType.AppPaymentModelPaid: return "APP_PAYMENT_MODEL_PAID";
					case AppPaymentModelAppPaymentModelType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AppPaymentModelAppPaymentModelType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "APP_PAYMENT_MODEL_PAID": return AppPaymentModelAppPaymentModelType.AppPaymentModelPaid;
					case "UNKNOWN": return AppPaymentModelAppPaymentModelType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppPaymentModelAppPaymentModelType.", nameof(xmlValue));
				}
			}
		}
		public static class AppPostbackUrlErrorReasonExtensions
		{
			public static string ToXmlValue(this AppPostbackUrlErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AppPostbackUrlErrorReason.InvalidUrlFormat: return "INVALID_URL_FORMAT";
					case AppPostbackUrlErrorReason.InvalidDomain: return "INVALID_DOMAIN";
					case AppPostbackUrlErrorReason.RequiredMacroNotFound: return "REQUIRED_MACRO_NOT_FOUND";
					default: return null;
				}
			}
			public static AppPostbackUrlErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_URL_FORMAT": return AppPostbackUrlErrorReason.InvalidUrlFormat;
					case "INVALID_DOMAIN": return AppPostbackUrlErrorReason.InvalidDomain;
					case "REQUIRED_MACRO_NOT_FOUND": return AppPostbackUrlErrorReason.RequiredMacroNotFound;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppPostbackUrlErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ApprovalStatusExtensions
		{
			public static string ToXmlValue(this ApprovalStatus enumValue)
			{
				switch (enumValue)
				{
					case ApprovalStatus.Approved: return "APPROVED";
					case ApprovalStatus.PendingReview: return "PENDING_REVIEW";
					case ApprovalStatus.UnderReview: return "UNDER_REVIEW";
					case ApprovalStatus.Disapproved: return "DISAPPROVED";
					default: return null;
				}
			}
			public static ApprovalStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "APPROVED": return ApprovalStatus.Approved;
					case "PENDING_REVIEW": return ApprovalStatus.PendingReview;
					case "UNDER_REVIEW": return ApprovalStatus.UnderReview;
					case "DISAPPROVED": return ApprovalStatus.Disapproved;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ApprovalStatus.", nameof(xmlValue));
				}
			}
		}
		public static class AppUrlOsTypeExtensions
		{
			public static string ToXmlValue(this AppUrlOsType enumValue)
			{
				switch (enumValue)
				{
					case AppUrlOsType.OsTypeIos: return "OS_TYPE_IOS";
					case AppUrlOsType.OsTypeAndroid: return "OS_TYPE_ANDROID";
					case AppUrlOsType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static AppUrlOsType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OS_TYPE_IOS": return AppUrlOsType.OsTypeIos;
					case "OS_TYPE_ANDROID": return AppUrlOsType.OsTypeAndroid;
					case "UNKNOWN": return AppUrlOsType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AppUrlOsType.", nameof(xmlValue));
				}
			}
		}
		public static class AttributeTypeExtensions
		{
			public static string ToXmlValue(this AttributeType enumValue)
			{
				switch (enumValue)
				{
					case AttributeType.Unknown: return "UNKNOWN";
					case AttributeType.CategoryProductsAndServices: return "CATEGORY_PRODUCTS_AND_SERVICES";
					case AttributeType.Competition: return "COMPETITION";
					case AttributeType.ExtractedFromWebpage: return "EXTRACTED_FROM_WEBPAGE";
					case AttributeType.IdeaType: return "IDEA_TYPE";
					case AttributeType.KeywordText: return "KEYWORD_TEXT";
					case AttributeType.SearchVolume: return "SEARCH_VOLUME";
					case AttributeType.AverageCpc: return "AVERAGE_CPC";
					case AttributeType.TargetedMonthlySearches: return "TARGETED_MONTHLY_SEARCHES";
					default: return null;
				}
			}
			public static AttributeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return AttributeType.Unknown;
					case "CATEGORY_PRODUCTS_AND_SERVICES": return AttributeType.CategoryProductsAndServices;
					case "COMPETITION": return AttributeType.Competition;
					case "EXTRACTED_FROM_WEBPAGE": return AttributeType.ExtractedFromWebpage;
					case "IDEA_TYPE": return AttributeType.IdeaType;
					case "KEYWORD_TEXT": return AttributeType.KeywordText;
					case "SEARCH_VOLUME": return AttributeType.SearchVolume;
					case "AVERAGE_CPC": return AttributeType.AverageCpc;
					case "TARGETED_MONTHLY_SEARCHES": return AttributeType.TargetedMonthlySearches;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AttributeType.", nameof(xmlValue));
				}
			}
		}
		public static class AttributionModelTypeExtensions
		{
			public static string ToXmlValue(this AttributionModelType enumValue)
			{
				switch (enumValue)
				{
					case AttributionModelType.Unknown: return "UNKNOWN";
					case AttributionModelType.LastClick: return "LAST_CLICK";
					case AttributionModelType.FirstClick: return "FIRST_CLICK";
					case AttributionModelType.Linear: return "LINEAR";
					case AttributionModelType.TimeDecay: return "TIME_DECAY";
					case AttributionModelType.UShaped: return "U_SHAPED";
					case AttributionModelType.DataDriven: return "DATA_DRIVEN";
					default: return null;
				}
			}
			public static AttributionModelType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return AttributionModelType.Unknown;
					case "LAST_CLICK": return AttributionModelType.LastClick;
					case "FIRST_CLICK": return AttributionModelType.FirstClick;
					case "LINEAR": return AttributionModelType.Linear;
					case "TIME_DECAY": return AttributionModelType.TimeDecay;
					case "U_SHAPED": return AttributionModelType.UShaped;
					case "DATA_DRIVEN": return AttributionModelType.DataDriven;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AttributionModelType.", nameof(xmlValue));
				}
			}
		}
		public static class AudioErrorReasonExtensions
		{
			public static string ToXmlValue(this AudioErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AudioErrorReason.InvalidAudio: return "INVALID_AUDIO";
					case AudioErrorReason.ProblemReadingAudioFile: return "PROBLEM_READING_AUDIO_FILE";
					case AudioErrorReason.ErrorStoringAudio: return "ERROR_STORING_AUDIO";
					case AudioErrorReason.FileTooLarge: return "FILE_TOO_LARGE";
					case AudioErrorReason.UnsupportedAudio: return "UNSUPPORTED_AUDIO";
					case AudioErrorReason.ErrorGeneratingStreamingUrl: return "ERROR_GENERATING_STREAMING_URL";
					default: return null;
				}
			}
			public static AudioErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_AUDIO": return AudioErrorReason.InvalidAudio;
					case "PROBLEM_READING_AUDIO_FILE": return AudioErrorReason.ProblemReadingAudioFile;
					case "ERROR_STORING_AUDIO": return AudioErrorReason.ErrorStoringAudio;
					case "FILE_TOO_LARGE": return AudioErrorReason.FileTooLarge;
					case "UNSUPPORTED_AUDIO": return AudioErrorReason.UnsupportedAudio;
					case "ERROR_GENERATING_STREAMING_URL": return AudioErrorReason.ErrorGeneratingStreamingUrl;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AudioErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AuthenticationErrorReasonExtensions
		{
			public static string ToXmlValue(this AuthenticationErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AuthenticationErrorReason.AuthenticationFailed: return "AUTHENTICATION_FAILED";
					case AuthenticationErrorReason.ClientCustomerIdIsRequired: return "CLIENT_CUSTOMER_ID_IS_REQUIRED";
					case AuthenticationErrorReason.ClientEmailRequired: return "CLIENT_EMAIL_REQUIRED";
					case AuthenticationErrorReason.ClientCustomerIdInvalid: return "CLIENT_CUSTOMER_ID_INVALID";
					case AuthenticationErrorReason.ClientEmailInvalid: return "CLIENT_EMAIL_INVALID";
					case AuthenticationErrorReason.ClientEmailFailedToAuthenticate: return "CLIENT_EMAIL_FAILED_TO_AUTHENTICATE";
					case AuthenticationErrorReason.CustomerNotFound: return "CUSTOMER_NOT_FOUND";
					case AuthenticationErrorReason.GoogleAccountDeleted: return "GOOGLE_ACCOUNT_DELETED";
					case AuthenticationErrorReason.GoogleAccountCookieInvalid: return "GOOGLE_ACCOUNT_COOKIE_INVALID";
					case AuthenticationErrorReason.FailedToAuthenticateGoogleAccount: return "FAILED_TO_AUTHENTICATE_GOOGLE_ACCOUNT";
					case AuthenticationErrorReason.GoogleAccountUserAndAdsUserMismatch: return "GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH";
					case AuthenticationErrorReason.LoginCookieRequired: return "LOGIN_COOKIE_REQUIRED";
					case AuthenticationErrorReason.NotAdsUser: return "NOT_ADS_USER";
					case AuthenticationErrorReason.OauthTokenInvalid: return "OAUTH_TOKEN_INVALID";
					case AuthenticationErrorReason.OauthTokenExpired: return "OAUTH_TOKEN_EXPIRED";
					case AuthenticationErrorReason.OauthTokenDisabled: return "OAUTH_TOKEN_DISABLED";
					case AuthenticationErrorReason.OauthTokenRevoked: return "OAUTH_TOKEN_REVOKED";
					case AuthenticationErrorReason.OauthTokenHeaderInvalid: return "OAUTH_TOKEN_HEADER_INVALID";
					case AuthenticationErrorReason.LoginCookieInvalid: return "LOGIN_COOKIE_INVALID";
					case AuthenticationErrorReason.FailedToRetrieveLoginCookie: return "FAILED_TO_RETRIEVE_LOGIN_COOKIE";
					case AuthenticationErrorReason.UserIdInvalid: return "USER_ID_INVALID";
					default: return null;
				}
			}
			public static AuthenticationErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AUTHENTICATION_FAILED": return AuthenticationErrorReason.AuthenticationFailed;
					case "CLIENT_CUSTOMER_ID_IS_REQUIRED": return AuthenticationErrorReason.ClientCustomerIdIsRequired;
					case "CLIENT_EMAIL_REQUIRED": return AuthenticationErrorReason.ClientEmailRequired;
					case "CLIENT_CUSTOMER_ID_INVALID": return AuthenticationErrorReason.ClientCustomerIdInvalid;
					case "CLIENT_EMAIL_INVALID": return AuthenticationErrorReason.ClientEmailInvalid;
					case "CLIENT_EMAIL_FAILED_TO_AUTHENTICATE": return AuthenticationErrorReason.ClientEmailFailedToAuthenticate;
					case "CUSTOMER_NOT_FOUND": return AuthenticationErrorReason.CustomerNotFound;
					case "GOOGLE_ACCOUNT_DELETED": return AuthenticationErrorReason.GoogleAccountDeleted;
					case "GOOGLE_ACCOUNT_COOKIE_INVALID": return AuthenticationErrorReason.GoogleAccountCookieInvalid;
					case "FAILED_TO_AUTHENTICATE_GOOGLE_ACCOUNT": return AuthenticationErrorReason.FailedToAuthenticateGoogleAccount;
					case "GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH": return AuthenticationErrorReason.GoogleAccountUserAndAdsUserMismatch;
					case "LOGIN_COOKIE_REQUIRED": return AuthenticationErrorReason.LoginCookieRequired;
					case "NOT_ADS_USER": return AuthenticationErrorReason.NotAdsUser;
					case "OAUTH_TOKEN_INVALID": return AuthenticationErrorReason.OauthTokenInvalid;
					case "OAUTH_TOKEN_EXPIRED": return AuthenticationErrorReason.OauthTokenExpired;
					case "OAUTH_TOKEN_DISABLED": return AuthenticationErrorReason.OauthTokenDisabled;
					case "OAUTH_TOKEN_REVOKED": return AuthenticationErrorReason.OauthTokenRevoked;
					case "OAUTH_TOKEN_HEADER_INVALID": return AuthenticationErrorReason.OauthTokenHeaderInvalid;
					case "LOGIN_COOKIE_INVALID": return AuthenticationErrorReason.LoginCookieInvalid;
					case "FAILED_TO_RETRIEVE_LOGIN_COOKIE": return AuthenticationErrorReason.FailedToRetrieveLoginCookie;
					case "USER_ID_INVALID": return AuthenticationErrorReason.UserIdInvalid;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AuthenticationErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class AuthorizationErrorReasonExtensions
		{
			public static string ToXmlValue(this AuthorizationErrorReason enumValue)
			{
				switch (enumValue)
				{
					case AuthorizationErrorReason.UnableToAuthorize: return "UNABLE_TO_AUTHORIZE";
					case AuthorizationErrorReason.NoAdwordsAccountForCustomer: return "NO_ADWORDS_ACCOUNT_FOR_CUSTOMER";
					case AuthorizationErrorReason.UserPermissionDenied: return "USER_PERMISSION_DENIED";
					case AuthorizationErrorReason.EffectiveUserPermissionDenied: return "EFFECTIVE_USER_PERMISSION_DENIED";
					case AuthorizationErrorReason.UserHasReadonlyPermission: return "USER_HAS_READONLY_PERMISSION";
					case AuthorizationErrorReason.NoCustomerFound: return "NO_CUSTOMER_FOUND";
					case AuthorizationErrorReason.ServiceAccessDenied: return "SERVICE_ACCESS_DENIED";
					default: return null;
				}
			}
			public static AuthorizationErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNABLE_TO_AUTHORIZE": return AuthorizationErrorReason.UnableToAuthorize;
					case "NO_ADWORDS_ACCOUNT_FOR_CUSTOMER": return AuthorizationErrorReason.NoAdwordsAccountForCustomer;
					case "USER_PERMISSION_DENIED": return AuthorizationErrorReason.UserPermissionDenied;
					case "EFFECTIVE_USER_PERMISSION_DENIED": return AuthorizationErrorReason.EffectiveUserPermissionDenied;
					case "USER_HAS_READONLY_PERMISSION": return AuthorizationErrorReason.UserHasReadonlyPermission;
					case "NO_CUSTOMER_FOUND": return AuthorizationErrorReason.NoCustomerFound;
					case "SERVICE_ACCESS_DENIED": return AuthorizationErrorReason.ServiceAccessDenied;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type AuthorizationErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BatchJobErrorReasonExtensions
		{
			public static string ToXmlValue(this BatchJobErrorReason enumValue)
			{
				switch (enumValue)
				{
					case BatchJobErrorReason.Unknown: return "UNKNOWN";
					case BatchJobErrorReason.DiskQuotaExceeded: return "DISK_QUOTA_EXCEEDED";
					case BatchJobErrorReason.FailedToCreateJob: return "FAILED_TO_CREATE_JOB";
					case BatchJobErrorReason.InvalidStateChange: return "INVALID_STATE_CHANGE";
					default: return null;
				}
			}
			public static BatchJobErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return BatchJobErrorReason.Unknown;
					case "DISK_QUOTA_EXCEEDED": return BatchJobErrorReason.DiskQuotaExceeded;
					case "FAILED_TO_CREATE_JOB": return BatchJobErrorReason.FailedToCreateJob;
					case "INVALID_STATE_CHANGE": return BatchJobErrorReason.InvalidStateChange;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BatchJobErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BatchJobProcessingErrorReasonExtensions
		{
			public static string ToXmlValue(this BatchJobProcessingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case BatchJobProcessingErrorReason.Unknown: return "UNKNOWN";
					case BatchJobProcessingErrorReason.InputFileCorruption: return "INPUT_FILE_CORRUPTION";
					case BatchJobProcessingErrorReason.InternalError: return "INTERNAL_ERROR";
					case BatchJobProcessingErrorReason.DeadlineExceeded: return "DEADLINE_EXCEEDED";
					case BatchJobProcessingErrorReason.FileFormatError: return "FILE_FORMAT_ERROR";
					default: return null;
				}
			}
			public static BatchJobProcessingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return BatchJobProcessingErrorReason.Unknown;
					case "INPUT_FILE_CORRUPTION": return BatchJobProcessingErrorReason.InputFileCorruption;
					case "INTERNAL_ERROR": return BatchJobProcessingErrorReason.InternalError;
					case "DEADLINE_EXCEEDED": return BatchJobProcessingErrorReason.DeadlineExceeded;
					case "FILE_FORMAT_ERROR": return BatchJobProcessingErrorReason.FileFormatError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BatchJobProcessingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BatchJobStatusExtensions
		{
			public static string ToXmlValue(this BatchJobStatus enumValue)
			{
				switch (enumValue)
				{
					case BatchJobStatus.Unknown: return "UNKNOWN";
					case BatchJobStatus.AwaitingFile: return "AWAITING_FILE";
					case BatchJobStatus.Active: return "ACTIVE";
					case BatchJobStatus.Canceling: return "CANCELING";
					case BatchJobStatus.Canceled: return "CANCELED";
					case BatchJobStatus.Done: return "DONE";
					default: return null;
				}
			}
			public static BatchJobStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return BatchJobStatus.Unknown;
					case "AWAITING_FILE": return BatchJobStatus.AwaitingFile;
					case "ACTIVE": return BatchJobStatus.Active;
					case "CANCELING": return BatchJobStatus.Canceling;
					case "CANCELED": return BatchJobStatus.Canceled;
					case "DONE": return BatchJobStatus.Done;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BatchJobStatus.", nameof(xmlValue));
				}
			}
		}
		public static class BiddingErrorsReasonExtensions
		{
			public static string ToXmlValue(this BiddingErrorsReason enumValue)
			{
				switch (enumValue)
				{
					case BiddingErrorsReason.BiddingStrategyTransitionNotAllowed: return "BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED";
					case BiddingErrorsReason.BiddingStrategyNotCompatibleWithAdgroupOverrides: return "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_OVERRIDES";
					case BiddingErrorsReason.BiddingStrategyNotCompatibleWithAdgroupCriteriaOverrides: return "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_CRITERIA_OVERRIDES";
					case BiddingErrorsReason.CampaignBiddingStrategyCannotBeOverridden: return "CAMPAIGN_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN";
					case BiddingErrorsReason.AdgroupBiddingStrategyCannotBeOverridden: return "ADGROUP_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN";
					case BiddingErrorsReason.CannotAttachBiddingStrategyToCampaign: return "CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN";
					case BiddingErrorsReason.CannotAttachBiddingStrategyToAdgroup: return "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP";
					case BiddingErrorsReason.CannotAttachBiddingStrategyToAdgroupCriteria: return "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP_CRITERIA";
					case BiddingErrorsReason.InvalidAnonymousBiddingStrategyType: return "INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE";
					case BiddingErrorsReason.BidsNotAlllowed: return "BIDS_NOT_ALLLOWED";
					case BiddingErrorsReason.DuplicateBids: return "DUPLICATE_BIDS";
					case BiddingErrorsReason.InvalidBiddingScheme: return "INVALID_BIDDING_SCHEME";
					case BiddingErrorsReason.InvalidBiddingStrategyType: return "INVALID_BIDDING_STRATEGY_TYPE";
					case BiddingErrorsReason.MissingBiddingStrategyType: return "MISSING_BIDDING_STRATEGY_TYPE";
					case BiddingErrorsReason.NullBid: return "NULL_BID";
					case BiddingErrorsReason.InvalidBid: return "INVALID_BID";
					case BiddingErrorsReason.BiddingStrategyNotAvailableForAccountType: return "BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE";
					case BiddingErrorsReason.ConversionTrackingNotEnabled: return "CONVERSION_TRACKING_NOT_ENABLED";
					case BiddingErrorsReason.NotEnoughConversions: return "NOT_ENOUGH_CONVERSIONS";
					case BiddingErrorsReason.CannotCreateCampaignWithBiddingStrategy: return "CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY";
					case BiddingErrorsReason.CannotTargetContentNetworkOnlyWithAdGroupLevelPopBiddingStrategy: return "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_AD_GROUP_LEVEL_POP_BIDDING_STRATEGY";
					case BiddingErrorsReason.CannotTargetContentNetworkOnlyWithCampaignLevelPopBiddingStrategy: return "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY";
					case BiddingErrorsReason.BiddingStrategyNotSupportedWithAdSchedule: return "BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE";
					case BiddingErrorsReason.PayPerConversionNotAvailableForCustomer: return "PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER";
					case BiddingErrorsReason.PayPerConversionNotAllowedWithTargetCpa: return "PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA";
					case BiddingErrorsReason.BiddingStrategyNotAllowedForSearchOnlyCampaigns: return "BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS";
					case BiddingErrorsReason.BiddingStrategyNotSupportedInDraftsOrExperiments: return "BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS";
					case BiddingErrorsReason.BiddingStrategyTypeDoesNotSupportProductTypeAdgroupCriterion: return "BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION";
					case BiddingErrorsReason.BidTooSmall: return "BID_TOO_SMALL";
					case BiddingErrorsReason.BidTooBig: return "BID_TOO_BIG";
					case BiddingErrorsReason.BidTooManyFractionalDigits: return "BID_TOO_MANY_FRACTIONAL_DIGITS";
					case BiddingErrorsReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BiddingErrorsReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED": return BiddingErrorsReason.BiddingStrategyTransitionNotAllowed;
					case "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_OVERRIDES": return BiddingErrorsReason.BiddingStrategyNotCompatibleWithAdgroupOverrides;
					case "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_CRITERIA_OVERRIDES": return BiddingErrorsReason.BiddingStrategyNotCompatibleWithAdgroupCriteriaOverrides;
					case "CAMPAIGN_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN": return BiddingErrorsReason.CampaignBiddingStrategyCannotBeOverridden;
					case "ADGROUP_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN": return BiddingErrorsReason.AdgroupBiddingStrategyCannotBeOverridden;
					case "CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN": return BiddingErrorsReason.CannotAttachBiddingStrategyToCampaign;
					case "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP": return BiddingErrorsReason.CannotAttachBiddingStrategyToAdgroup;
					case "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP_CRITERIA": return BiddingErrorsReason.CannotAttachBiddingStrategyToAdgroupCriteria;
					case "INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE": return BiddingErrorsReason.InvalidAnonymousBiddingStrategyType;
					case "BIDS_NOT_ALLLOWED": return BiddingErrorsReason.BidsNotAlllowed;
					case "DUPLICATE_BIDS": return BiddingErrorsReason.DuplicateBids;
					case "INVALID_BIDDING_SCHEME": return BiddingErrorsReason.InvalidBiddingScheme;
					case "INVALID_BIDDING_STRATEGY_TYPE": return BiddingErrorsReason.InvalidBiddingStrategyType;
					case "MISSING_BIDDING_STRATEGY_TYPE": return BiddingErrorsReason.MissingBiddingStrategyType;
					case "NULL_BID": return BiddingErrorsReason.NullBid;
					case "INVALID_BID": return BiddingErrorsReason.InvalidBid;
					case "BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE": return BiddingErrorsReason.BiddingStrategyNotAvailableForAccountType;
					case "CONVERSION_TRACKING_NOT_ENABLED": return BiddingErrorsReason.ConversionTrackingNotEnabled;
					case "NOT_ENOUGH_CONVERSIONS": return BiddingErrorsReason.NotEnoughConversions;
					case "CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY": return BiddingErrorsReason.CannotCreateCampaignWithBiddingStrategy;
					case "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_AD_GROUP_LEVEL_POP_BIDDING_STRATEGY": return BiddingErrorsReason.CannotTargetContentNetworkOnlyWithAdGroupLevelPopBiddingStrategy;
					case "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY": return BiddingErrorsReason.CannotTargetContentNetworkOnlyWithCampaignLevelPopBiddingStrategy;
					case "BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE": return BiddingErrorsReason.BiddingStrategyNotSupportedWithAdSchedule;
					case "PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER": return BiddingErrorsReason.PayPerConversionNotAvailableForCustomer;
					case "PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA": return BiddingErrorsReason.PayPerConversionNotAllowedWithTargetCpa;
					case "BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS": return BiddingErrorsReason.BiddingStrategyNotAllowedForSearchOnlyCampaigns;
					case "BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS": return BiddingErrorsReason.BiddingStrategyNotSupportedInDraftsOrExperiments;
					case "BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION": return BiddingErrorsReason.BiddingStrategyTypeDoesNotSupportProductTypeAdgroupCriterion;
					case "BID_TOO_SMALL": return BiddingErrorsReason.BidTooSmall;
					case "BID_TOO_BIG": return BiddingErrorsReason.BidTooBig;
					case "BID_TOO_MANY_FRACTIONAL_DIGITS": return BiddingErrorsReason.BidTooManyFractionalDigits;
					case "UNKNOWN": return BiddingErrorsReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BiddingErrorsReason.", nameof(xmlValue));
				}
			}
		}
		public static class BiddingStrategyErrorReasonExtensions
		{
			public static string ToXmlValue(this BiddingStrategyErrorReason enumValue)
			{
				switch (enumValue)
				{
					case BiddingStrategyErrorReason.DuplicateName: return "DUPLICATE_NAME";
					case BiddingStrategyErrorReason.CannotChangeBiddingStrategyType: return "CANNOT_CHANGE_BIDDING_STRATEGY_TYPE";
					case BiddingStrategyErrorReason.CannotRemoveAssociatedStrategy: return "CANNOT_REMOVE_ASSOCIATED_STRATEGY";
					case BiddingStrategyErrorReason.BiddingStrategyNotSupported: return "BIDDING_STRATEGY_NOT_SUPPORTED";
					case BiddingStrategyErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BiddingStrategyErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_NAME": return BiddingStrategyErrorReason.DuplicateName;
					case "CANNOT_CHANGE_BIDDING_STRATEGY_TYPE": return BiddingStrategyErrorReason.CannotChangeBiddingStrategyType;
					case "CANNOT_REMOVE_ASSOCIATED_STRATEGY": return BiddingStrategyErrorReason.CannotRemoveAssociatedStrategy;
					case "BIDDING_STRATEGY_NOT_SUPPORTED": return BiddingStrategyErrorReason.BiddingStrategyNotSupported;
					case "UNKNOWN": return BiddingStrategyErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BiddingStrategyErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BiddingStrategySourceExtensions
		{
			public static string ToXmlValue(this BiddingStrategySource enumValue)
			{
				switch (enumValue)
				{
					case BiddingStrategySource.Campaign: return "CAMPAIGN";
					case BiddingStrategySource.Adgroup: return "ADGROUP";
					case BiddingStrategySource.Criterion: return "CRITERION";
					default: return null;
				}
			}
			public static BiddingStrategySource Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CAMPAIGN": return BiddingStrategySource.Campaign;
					case "ADGROUP": return BiddingStrategySource.Adgroup;
					case "CRITERION": return BiddingStrategySource.Criterion;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BiddingStrategySource.", nameof(xmlValue));
				}
			}
		}
		public static class BiddingStrategySystemStatusExtensions
		{
			public static string ToXmlValue(this BiddingStrategySystemStatus enumValue)
			{
				switch (enumValue)
				{
					case BiddingStrategySystemStatus.Unknown: return "UNKNOWN";
					case BiddingStrategySystemStatus.Unconstrained: return "UNCONSTRAINED";
					case BiddingStrategySystemStatus.LearningNew: return "LEARNING_NEW";
					case BiddingStrategySystemStatus.LearningSettingChange: return "LEARNING_SETTING_CHANGE";
					case BiddingStrategySystemStatus.LearningBudgetChange: return "LEARNING_BUDGET_CHANGE";
					case BiddingStrategySystemStatus.LearningCompositionChange: return "LEARNING_COMPOSITION_CHANGE";
					case BiddingStrategySystemStatus.LearningConversionTypeChange: return "LEARNING_CONVERSION_TYPE_CHANGE";
					case BiddingStrategySystemStatus.LearningConversionSettingChange: return "LEARNING_CONVERSION_SETTING_CHANGE";
					case BiddingStrategySystemStatus.LimitedByBidConstraints: return "LIMITED_BY_BID_CONSTRAINTS";
					case BiddingStrategySystemStatus.LimitedByMaxBidLimit: return "LIMITED_BY_MAX_BID_LIMIT";
					case BiddingStrategySystemStatus.LimitedByMinBidLimit: return "LIMITED_BY_MIN_BID_LIMIT";
					case BiddingStrategySystemStatus.LimitedByMinRoasLimit: return "LIMITED_BY_MIN_ROAS_LIMIT";
					case BiddingStrategySystemStatus.LimitedByData: return "LIMITED_BY_DATA";
					case BiddingStrategySystemStatus.LimitedByBudget: return "LIMITED_BY_BUDGET";
					case BiddingStrategySystemStatus.LimitedByLowPrioritySpend: return "LIMITED_BY_LOW_PRIORITY_SPEND";
					case BiddingStrategySystemStatus.LimitedByLowQuality: return "LIMITED_BY_LOW_QUALITY";
					case BiddingStrategySystemStatus.MisconfiguredConversionTypes: return "MISCONFIGURED_CONVERSION_TYPES";
					case BiddingStrategySystemStatus.MisconfiguredConversionSettings: return "MISCONFIGURED_CONVERSION_SETTINGS";
					case BiddingStrategySystemStatus.Inactive: return "INACTIVE";
					case BiddingStrategySystemStatus.Unavailable: return "UNAVAILABLE";
					case BiddingStrategySystemStatus.MultipleLearning: return "MULTIPLE_LEARNING";
					case BiddingStrategySystemStatus.MultipleLimited: return "MULTIPLE_LIMITED";
					case BiddingStrategySystemStatus.MultipleMisconfigured: return "MULTIPLE_MISCONFIGURED";
					case BiddingStrategySystemStatus.Multiple: return "MULTIPLE";
					default: return null;
				}
			}
			public static BiddingStrategySystemStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return BiddingStrategySystemStatus.Unknown;
					case "UNCONSTRAINED": return BiddingStrategySystemStatus.Unconstrained;
					case "LEARNING_NEW": return BiddingStrategySystemStatus.LearningNew;
					case "LEARNING_SETTING_CHANGE": return BiddingStrategySystemStatus.LearningSettingChange;
					case "LEARNING_BUDGET_CHANGE": return BiddingStrategySystemStatus.LearningBudgetChange;
					case "LEARNING_COMPOSITION_CHANGE": return BiddingStrategySystemStatus.LearningCompositionChange;
					case "LEARNING_CONVERSION_TYPE_CHANGE": return BiddingStrategySystemStatus.LearningConversionTypeChange;
					case "LEARNING_CONVERSION_SETTING_CHANGE": return BiddingStrategySystemStatus.LearningConversionSettingChange;
					case "LIMITED_BY_BID_CONSTRAINTS": return BiddingStrategySystemStatus.LimitedByBidConstraints;
					case "LIMITED_BY_MAX_BID_LIMIT": return BiddingStrategySystemStatus.LimitedByMaxBidLimit;
					case "LIMITED_BY_MIN_BID_LIMIT": return BiddingStrategySystemStatus.LimitedByMinBidLimit;
					case "LIMITED_BY_MIN_ROAS_LIMIT": return BiddingStrategySystemStatus.LimitedByMinRoasLimit;
					case "LIMITED_BY_DATA": return BiddingStrategySystemStatus.LimitedByData;
					case "LIMITED_BY_BUDGET": return BiddingStrategySystemStatus.LimitedByBudget;
					case "LIMITED_BY_LOW_PRIORITY_SPEND": return BiddingStrategySystemStatus.LimitedByLowPrioritySpend;
					case "LIMITED_BY_LOW_QUALITY": return BiddingStrategySystemStatus.LimitedByLowQuality;
					case "MISCONFIGURED_CONVERSION_TYPES": return BiddingStrategySystemStatus.MisconfiguredConversionTypes;
					case "MISCONFIGURED_CONVERSION_SETTINGS": return BiddingStrategySystemStatus.MisconfiguredConversionSettings;
					case "INACTIVE": return BiddingStrategySystemStatus.Inactive;
					case "UNAVAILABLE": return BiddingStrategySystemStatus.Unavailable;
					case "MULTIPLE_LEARNING": return BiddingStrategySystemStatus.MultipleLearning;
					case "MULTIPLE_LIMITED": return BiddingStrategySystemStatus.MultipleLimited;
					case "MULTIPLE_MISCONFIGURED": return BiddingStrategySystemStatus.MultipleMisconfigured;
					case "MULTIPLE": return BiddingStrategySystemStatus.Multiple;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BiddingStrategySystemStatus.", nameof(xmlValue));
				}
			}
		}
		public static class BiddingStrategyTypeExtensions
		{
			public static string ToXmlValue(this BiddingStrategyType enumValue)
			{
				switch (enumValue)
				{
					case BiddingStrategyType.BudgetOptimizer: return "BUDGET_OPTIMIZER";
					case BiddingStrategyType.ConversionOptimizer: return "CONVERSION_OPTIMIZER";
					case BiddingStrategyType.ManualCpc: return "MANUAL_CPC";
					case BiddingStrategyType.ManualCpm: return "MANUAL_CPM";
					case BiddingStrategyType.PageOnePromoted: return "PAGE_ONE_PROMOTED";
					case BiddingStrategyType.TargetSpend: return "TARGET_SPEND";
					case BiddingStrategyType.EnhancedCpc: return "ENHANCED_CPC";
					case BiddingStrategyType.TargetCpa: return "TARGET_CPA";
					case BiddingStrategyType.TargetRoas: return "TARGET_ROAS";
					case BiddingStrategyType.TargetOutrankShare: return "TARGET_OUTRANK_SHARE";
					case BiddingStrategyType.None: return "NONE";
					case BiddingStrategyType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BiddingStrategyType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BUDGET_OPTIMIZER": return BiddingStrategyType.BudgetOptimizer;
					case "CONVERSION_OPTIMIZER": return BiddingStrategyType.ConversionOptimizer;
					case "MANUAL_CPC": return BiddingStrategyType.ManualCpc;
					case "MANUAL_CPM": return BiddingStrategyType.ManualCpm;
					case "PAGE_ONE_PROMOTED": return BiddingStrategyType.PageOnePromoted;
					case "TARGET_SPEND": return BiddingStrategyType.TargetSpend;
					case "ENHANCED_CPC": return BiddingStrategyType.EnhancedCpc;
					case "TARGET_CPA": return BiddingStrategyType.TargetCpa;
					case "TARGET_ROAS": return BiddingStrategyType.TargetRoas;
					case "TARGET_OUTRANK_SHARE": return BiddingStrategyType.TargetOutrankShare;
					case "NONE": return BiddingStrategyType.None;
					case "UNKNOWN": return BiddingStrategyType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BiddingStrategyType.", nameof(xmlValue));
				}
			}
		}
		public static class BidModifierSourceExtensions
		{
			public static string ToXmlValue(this BidModifierSource enumValue)
			{
				switch (enumValue)
				{
					case BidModifierSource.Unknown: return "UNKNOWN";
					case BidModifierSource.Campaign: return "CAMPAIGN";
					case BidModifierSource.AdGroup: return "AD_GROUP";
					default: return null;
				}
			}
			public static BidModifierSource Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return BidModifierSource.Unknown;
					case "CAMPAIGN": return BidModifierSource.Campaign;
					case "AD_GROUP": return BidModifierSource.AdGroup;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BidModifierSource.", nameof(xmlValue));
				}
			}
		}
		public static class BidSourceExtensions
		{
			public static string ToXmlValue(this BidSource enumValue)
			{
				switch (enumValue)
				{
					case BidSource.Adgroup: return "ADGROUP";
					case BidSource.Criterion: return "CRITERION";
					case BidSource.AdgroupBiddingStrategy: return "ADGROUP_BIDDING_STRATEGY";
					case BidSource.CampaignBiddingStrategy: return "CAMPAIGN_BIDDING_STRATEGY";
					default: return null;
				}
			}
			public static BidSource Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADGROUP": return BidSource.Adgroup;
					case "CRITERION": return BidSource.Criterion;
					case "ADGROUP_BIDDING_STRATEGY": return BidSource.AdgroupBiddingStrategy;
					case "CAMPAIGN_BIDDING_STRATEGY": return BidSource.CampaignBiddingStrategy;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BidSource.", nameof(xmlValue));
				}
			}
		}
		public static class BudgetBudgetDeliveryMethodExtensions
		{
			public static string ToXmlValue(this BudgetBudgetDeliveryMethod enumValue)
			{
				switch (enumValue)
				{
					case BudgetBudgetDeliveryMethod.Standard: return "STANDARD";
					case BudgetBudgetDeliveryMethod.Accelerated: return "ACCELERATED";
					case BudgetBudgetDeliveryMethod.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BudgetBudgetDeliveryMethod Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "STANDARD": return BudgetBudgetDeliveryMethod.Standard;
					case "ACCELERATED": return BudgetBudgetDeliveryMethod.Accelerated;
					case "UNKNOWN": return BudgetBudgetDeliveryMethod.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BudgetBudgetDeliveryMethod.", nameof(xmlValue));
				}
			}
		}
		public static class BudgetBudgetStatusExtensions
		{
			public static string ToXmlValue(this BudgetBudgetStatus enumValue)
			{
				switch (enumValue)
				{
					case BudgetBudgetStatus.Enabled: return "ENABLED";
					case BudgetBudgetStatus.Removed: return "REMOVED";
					case BudgetBudgetStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BudgetBudgetStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return BudgetBudgetStatus.Enabled;
					case "REMOVED": return BudgetBudgetStatus.Removed;
					case "UNKNOWN": return BudgetBudgetStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BudgetBudgetStatus.", nameof(xmlValue));
				}
			}
		}
		public static class BudgetErrorReasonExtensions
		{
			public static string ToXmlValue(this BudgetErrorReason enumValue)
			{
				switch (enumValue)
				{
					case BudgetErrorReason.BudgetRemoved: return "BUDGET_REMOVED";
					case BudgetErrorReason.BudgetError: return "BUDGET_ERROR";
					case BudgetErrorReason.BudgetInUse: return "BUDGET_IN_USE";
					case BudgetErrorReason.BudgetPeriodNotAvailable: return "BUDGET_PERIOD_NOT_AVAILABLE";
					case BudgetErrorReason.CannotEditSharedBudget: return "CANNOT_EDIT_SHARED_BUDGET";
					case BudgetErrorReason.CannotModifyFieldOfImplicitlySharedBudget: return "CANNOT_MODIFY_FIELD_OF_IMPLICITLY_SHARED_BUDGET";
					case BudgetErrorReason.CannotUpdateBudgetToImplicitlyShared: return "CANNOT_UPDATE_BUDGET_TO_IMPLICITLY_SHARED";
					case BudgetErrorReason.CannotUpdateBudgetToExplicitlySharedWithoutName: return "CANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED_WITHOUT_NAME";
					case BudgetErrorReason.CannotUseImplicitlySharedBudgetWithMultipleCampaigns: return "CANNOT_USE_IMPLICITLY_SHARED_BUDGET_WITH_MULTIPLE_CAMPAIGNS";
					case BudgetErrorReason.DuplicateName: return "DUPLICATE_NAME";
					case BudgetErrorReason.MoneyAmountInWrongCurrency: return "MONEY_AMOUNT_IN_WRONG_CURRENCY";
					case BudgetErrorReason.MoneyAmountLessThanCurrencyMinimumCpc: return "MONEY_AMOUNT_LESS_THAN_CURRENCY_MINIMUM_CPC";
					case BudgetErrorReason.MoneyAmountTooLarge: return "MONEY_AMOUNT_TOO_LARGE";
					case BudgetErrorReason.NegativeMoneyAmount: return "NEGATIVE_MONEY_AMOUNT";
					case BudgetErrorReason.NonMultipleOfMinimumCurrencyUnit: return "NON_MULTIPLE_OF_MINIMUM_CURRENCY_UNIT";
					default: return null;
				}
			}
			public static BudgetErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BUDGET_REMOVED": return BudgetErrorReason.BudgetRemoved;
					case "BUDGET_ERROR": return BudgetErrorReason.BudgetError;
					case "BUDGET_IN_USE": return BudgetErrorReason.BudgetInUse;
					case "BUDGET_PERIOD_NOT_AVAILABLE": return BudgetErrorReason.BudgetPeriodNotAvailable;
					case "CANNOT_EDIT_SHARED_BUDGET": return BudgetErrorReason.CannotEditSharedBudget;
					case "CANNOT_MODIFY_FIELD_OF_IMPLICITLY_SHARED_BUDGET": return BudgetErrorReason.CannotModifyFieldOfImplicitlySharedBudget;
					case "CANNOT_UPDATE_BUDGET_TO_IMPLICITLY_SHARED": return BudgetErrorReason.CannotUpdateBudgetToImplicitlyShared;
					case "CANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED_WITHOUT_NAME": return BudgetErrorReason.CannotUpdateBudgetToExplicitlySharedWithoutName;
					case "CANNOT_USE_IMPLICITLY_SHARED_BUDGET_WITH_MULTIPLE_CAMPAIGNS": return BudgetErrorReason.CannotUseImplicitlySharedBudgetWithMultipleCampaigns;
					case "DUPLICATE_NAME": return BudgetErrorReason.DuplicateName;
					case "MONEY_AMOUNT_IN_WRONG_CURRENCY": return BudgetErrorReason.MoneyAmountInWrongCurrency;
					case "MONEY_AMOUNT_LESS_THAN_CURRENCY_MINIMUM_CPC": return BudgetErrorReason.MoneyAmountLessThanCurrencyMinimumCpc;
					case "MONEY_AMOUNT_TOO_LARGE": return BudgetErrorReason.MoneyAmountTooLarge;
					case "NEGATIVE_MONEY_AMOUNT": return BudgetErrorReason.NegativeMoneyAmount;
					case "NON_MULTIPLE_OF_MINIMUM_CURRENCY_UNIT": return BudgetErrorReason.NonMultipleOfMinimumCurrencyUnit;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BudgetErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BudgetOrderErrorReasonExtensions
		{
			public static string ToXmlValue(this BudgetOrderErrorReason enumValue)
			{
				switch (enumValue)
				{
					case BudgetOrderErrorReason.BudgetApprovalInProgress: return "BUDGET_APPROVAL_IN_PROGRESS";
					case BudgetOrderErrorReason.ServiceUnavailable: return "SERVICE_UNAVAILABLE";
					case BudgetOrderErrorReason.FieldNotEligibleForCurrentBilling: return "FIELD_NOT_ELIGIBLE_FOR_CURRENT_BILLING";
					case BudgetOrderErrorReason.InvalidBillingAccount: return "INVALID_BILLING_ACCOUNT";
					case BudgetOrderErrorReason.GenericBillingError: return "GENERIC_BILLING_ERROR";
					case BudgetOrderErrorReason.InvalidBillingAccountIdFormat: return "INVALID_BILLING_ACCOUNT_ID_FORMAT";
					case BudgetOrderErrorReason.InvalidBudgetDateRange: return "INVALID_BUDGET_DATE_RANGE";
					case BudgetOrderErrorReason.IncompatibleCurrency: return "INCOMPATIBLE_CURRENCY";
					case BudgetOrderErrorReason.BudgetUpdateDenied: return "BUDGET_UPDATE_DENIED";
					case BudgetOrderErrorReason.BudgetAlreadyStarted: return "BUDGET_ALREADY_STARTED";
					case BudgetOrderErrorReason.BudgetAlreadyEnded: return "BUDGET_ALREADY_ENDED";
					case BudgetOrderErrorReason.InvalidConstraint: return "INVALID_CONSTRAINT";
					case BudgetOrderErrorReason.InvalidBidTooLarge: return "INVALID_BID_TOO_LARGE";
					case BudgetOrderErrorReason.NoSuchBudgetFound: return "NO_SUCH_BUDGET_FOUND";
					case BudgetOrderErrorReason.InvalidBudgetAlreadySpent: return "INVALID_BUDGET_ALREADY_SPENT";
					case BudgetOrderErrorReason.InvalidTimezoneInDate: return "INVALID_TIMEZONE_IN_DATE";
					case BudgetOrderErrorReason.AccountBudgetIdSetInAdd: return "ACCOUNT_BUDGET_ID_SET_IN_ADD";
					case BudgetOrderErrorReason.MoreThanOneOperations: return "MORE_THAN_ONE_OPERATIONS";
					case BudgetOrderErrorReason.InvalidManagerAccount: return "INVALID_MANAGER_ACCOUNT";
					case BudgetOrderErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BudgetOrderErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BUDGET_APPROVAL_IN_PROGRESS": return BudgetOrderErrorReason.BudgetApprovalInProgress;
					case "SERVICE_UNAVAILABLE": return BudgetOrderErrorReason.ServiceUnavailable;
					case "FIELD_NOT_ELIGIBLE_FOR_CURRENT_BILLING": return BudgetOrderErrorReason.FieldNotEligibleForCurrentBilling;
					case "INVALID_BILLING_ACCOUNT": return BudgetOrderErrorReason.InvalidBillingAccount;
					case "GENERIC_BILLING_ERROR": return BudgetOrderErrorReason.GenericBillingError;
					case "INVALID_BILLING_ACCOUNT_ID_FORMAT": return BudgetOrderErrorReason.InvalidBillingAccountIdFormat;
					case "INVALID_BUDGET_DATE_RANGE": return BudgetOrderErrorReason.InvalidBudgetDateRange;
					case "INCOMPATIBLE_CURRENCY": return BudgetOrderErrorReason.IncompatibleCurrency;
					case "BUDGET_UPDATE_DENIED": return BudgetOrderErrorReason.BudgetUpdateDenied;
					case "BUDGET_ALREADY_STARTED": return BudgetOrderErrorReason.BudgetAlreadyStarted;
					case "BUDGET_ALREADY_ENDED": return BudgetOrderErrorReason.BudgetAlreadyEnded;
					case "INVALID_CONSTRAINT": return BudgetOrderErrorReason.InvalidConstraint;
					case "INVALID_BID_TOO_LARGE": return BudgetOrderErrorReason.InvalidBidTooLarge;
					case "NO_SUCH_BUDGET_FOUND": return BudgetOrderErrorReason.NoSuchBudgetFound;
					case "INVALID_BUDGET_ALREADY_SPENT": return BudgetOrderErrorReason.InvalidBudgetAlreadySpent;
					case "INVALID_TIMEZONE_IN_DATE": return BudgetOrderErrorReason.InvalidTimezoneInDate;
					case "ACCOUNT_BUDGET_ID_SET_IN_ADD": return BudgetOrderErrorReason.AccountBudgetIdSetInAdd;
					case "MORE_THAN_ONE_OPERATIONS": return BudgetOrderErrorReason.MoreThanOneOperations;
					case "INVALID_MANAGER_ACCOUNT": return BudgetOrderErrorReason.InvalidManagerAccount;
					case "UNKNOWN": return BudgetOrderErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BudgetOrderErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class BudgetOrderRequestStatusExtensions
		{
			public static string ToXmlValue(this BudgetOrderRequestStatus enumValue)
			{
				switch (enumValue)
				{
					case BudgetOrderRequestStatus.UnderReview: return "UNDER_REVIEW";
					case BudgetOrderRequestStatus.Approved: return "APPROVED";
					case BudgetOrderRequestStatus.Rejected: return "REJECTED";
					case BudgetOrderRequestStatus.Cancelled: return "CANCELLED";
					case BudgetOrderRequestStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static BudgetOrderRequestStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNDER_REVIEW": return BudgetOrderRequestStatus.UnderReview;
					case "APPROVED": return BudgetOrderRequestStatus.Approved;
					case "REJECTED": return BudgetOrderRequestStatus.Rejected;
					case "CANCELLED": return BudgetOrderRequestStatus.Cancelled;
					case "UNKNOWN": return BudgetOrderRequestStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type BudgetOrderRequestStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignCriterionCampaignCriterionStatusExtensions
		{
			public static string ToXmlValue(this CampaignCriterionCampaignCriterionStatus enumValue)
			{
				switch (enumValue)
				{
					case CampaignCriterionCampaignCriterionStatus.Active: return "ACTIVE";
					case CampaignCriterionCampaignCriterionStatus.Removed: return "REMOVED";
					case CampaignCriterionCampaignCriterionStatus.Paused: return "PAUSED";
					default: return null;
				}
			}
			public static CampaignCriterionCampaignCriterionStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTIVE": return CampaignCriterionCampaignCriterionStatus.Active;
					case "REMOVED": return CampaignCriterionCampaignCriterionStatus.Removed;
					case "PAUSED": return CampaignCriterionCampaignCriterionStatus.Paused;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignCriterionCampaignCriterionStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignCriterionErrorReasonExtensions
		{
			public static string ToXmlValue(this CampaignCriterionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CampaignCriterionErrorReason.ConcreteTypeRequired: return "CONCRETE_TYPE_REQUIRED";
					case CampaignCriterionErrorReason.InvalidPlacementUrl: return "INVALID_PLACEMENT_URL";
					case CampaignCriterionErrorReason.CannotExcludeCriteriaType: return "CANNOT_EXCLUDE_CRITERIA_TYPE";
					case CampaignCriterionErrorReason.CannotSetStatusForCriteriaType: return "CANNOT_SET_STATUS_FOR_CRITERIA_TYPE";
					case CampaignCriterionErrorReason.CannotSetStatusForExcludedCriteria: return "CANNOT_SET_STATUS_FOR_EXCLUDED_CRITERIA";
					case CampaignCriterionErrorReason.CannotTargetAndExclude: return "CANNOT_TARGET_AND_EXCLUDE";
					case CampaignCriterionErrorReason.TooManyOperations: return "TOO_MANY_OPERATIONS";
					case CampaignCriterionErrorReason.OperatorNotSupportedForCriterionType: return "OPERATOR_NOT_SUPPORTED_FOR_CRITERION_TYPE";
					case CampaignCriterionErrorReason.ShoppingCampaignSalesCountryNotSupportedForSalesChannel: return "SHOPPING_CAMPAIGN_SALES_COUNTRY_NOT_SUPPORTED_FOR_SALES_CHANNEL";
					case CampaignCriterionErrorReason.Unknown: return "UNKNOWN";
					case CampaignCriterionErrorReason.CannotAddExistingField: return "CANNOT_ADD_EXISTING_FIELD";
					default: return null;
				}
			}
			public static CampaignCriterionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CONCRETE_TYPE_REQUIRED": return CampaignCriterionErrorReason.ConcreteTypeRequired;
					case "INVALID_PLACEMENT_URL": return CampaignCriterionErrorReason.InvalidPlacementUrl;
					case "CANNOT_EXCLUDE_CRITERIA_TYPE": return CampaignCriterionErrorReason.CannotExcludeCriteriaType;
					case "CANNOT_SET_STATUS_FOR_CRITERIA_TYPE": return CampaignCriterionErrorReason.CannotSetStatusForCriteriaType;
					case "CANNOT_SET_STATUS_FOR_EXCLUDED_CRITERIA": return CampaignCriterionErrorReason.CannotSetStatusForExcludedCriteria;
					case "CANNOT_TARGET_AND_EXCLUDE": return CampaignCriterionErrorReason.CannotTargetAndExclude;
					case "TOO_MANY_OPERATIONS": return CampaignCriterionErrorReason.TooManyOperations;
					case "OPERATOR_NOT_SUPPORTED_FOR_CRITERION_TYPE": return CampaignCriterionErrorReason.OperatorNotSupportedForCriterionType;
					case "SHOPPING_CAMPAIGN_SALES_COUNTRY_NOT_SUPPORTED_FOR_SALES_CHANNEL": return CampaignCriterionErrorReason.ShoppingCampaignSalesCountryNotSupportedForSalesChannel;
					case "UNKNOWN": return CampaignCriterionErrorReason.Unknown;
					case "CANNOT_ADD_EXISTING_FIELD": return CampaignCriterionErrorReason.CannotAddExistingField;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignCriterionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignErrorReasonExtensions
		{
			public static string ToXmlValue(this CampaignErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CampaignErrorReason.CannotGoBackToIncomplete: return "CANNOT_GO_BACK_TO_INCOMPLETE";
					case CampaignErrorReason.CannotTargetContentNetwork: return "CANNOT_TARGET_CONTENT_NETWORK";
					case CampaignErrorReason.CannotTargetSearchNetwork: return "CANNOT_TARGET_SEARCH_NETWORK";
					case CampaignErrorReason.CannotTargetSearchNetworkWithoutGoogleSearch: return "CANNOT_TARGET_SEARCH_NETWORK_WITHOUT_GOOGLE_SEARCH";
					case CampaignErrorReason.CannotTargetGoogleSearchForCpmCampaign: return "CANNOT_TARGET_GOOGLE_SEARCH_FOR_CPM_CAMPAIGN";
					case CampaignErrorReason.CampaignMustTargetAtLeastOneNetwork: return "CAMPAIGN_MUST_TARGET_AT_LEAST_ONE_NETWORK";
					case CampaignErrorReason.CannotTargetPartnerSearchNetwork: return "CANNOT_TARGET_PARTNER_SEARCH_NETWORK";
					case CampaignErrorReason.CannotTargetContentNetworkOnlyWithCriteriaLevelBiddingStrategy: return "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CRITERIA_LEVEL_BIDDING_STRATEGY";
					case CampaignErrorReason.CampaignDurationMustContainAllRunnableTrials: return "CAMPAIGN_DURATION_MUST_CONTAIN_ALL_RUNNABLE_TRIALS";
					case CampaignErrorReason.CannotModifyForTrialCampaign: return "CANNOT_MODIFY_FOR_TRIAL_CAMPAIGN";
					case CampaignErrorReason.DuplicateCampaignName: return "DUPLICATE_CAMPAIGN_NAME";
					case CampaignErrorReason.IncompatibleCampaignField: return "INCOMPATIBLE_CAMPAIGN_FIELD";
					case CampaignErrorReason.InvalidCampaignName: return "INVALID_CAMPAIGN_NAME";
					case CampaignErrorReason.InvalidAdServingOptimizationStatus: return "INVALID_AD_SERVING_OPTIMIZATION_STATUS";
					case CampaignErrorReason.InvalidTrackingUrl: return "INVALID_TRACKING_URL";
					case CampaignErrorReason.CannotSetBothTrackingUrlTemplateAndTrackingSetting: return "CANNOT_SET_BOTH_TRACKING_URL_TEMPLATE_AND_TRACKING_SETTING";
					case CampaignErrorReason.MaxImpressionsNotInRange: return "MAX_IMPRESSIONS_NOT_IN_RANGE";
					case CampaignErrorReason.TimeUnitNotSupported: return "TIME_UNIT_NOT_SUPPORTED";
					case CampaignErrorReason.InvalidOperationIfServingStatusHasEnded: return "INVALID_OPERATION_IF_SERVING_STATUS_HAS_ENDED";
					case CampaignErrorReason.BudgetCannotBeShared: return "BUDGET_CANNOT_BE_SHARED";
					case CampaignErrorReason.CampaignCannotUseSharedBudget: return "CAMPAIGN_CANNOT_USE_SHARED_BUDGET";
					case CampaignErrorReason.CannotChangeBudgetOnCampaignWithTrials: return "CANNOT_CHANGE_BUDGET_ON_CAMPAIGN_WITH_TRIALS";
					case CampaignErrorReason.CampaignLabelDoesNotExist: return "CAMPAIGN_LABEL_DOES_NOT_EXIST";
					case CampaignErrorReason.CampaignLabelAlreadyExists: return "CAMPAIGN_LABEL_ALREADY_EXISTS";
					case CampaignErrorReason.MissingShoppingSetting: return "MISSING_SHOPPING_SETTING";
					case CampaignErrorReason.InvalidShoppingSalesCountry: return "INVALID_SHOPPING_SALES_COUNTRY";
					case CampaignErrorReason.MissingUniversalAppCampaignSetting: return "MISSING_UNIVERSAL_APP_CAMPAIGN_SETTING";
					case CampaignErrorReason.AdvertisingChannelTypeNotAvailableForAccountType: return "ADVERTISING_CHANNEL_TYPE_NOT_AVAILABLE_FOR_ACCOUNT_TYPE";
					case CampaignErrorReason.InvalidAdvertisingChannelSubType: return "INVALID_ADVERTISING_CHANNEL_SUB_TYPE";
					case CampaignErrorReason.AtLeastOneConversionMustBeSelected: return "AT_LEAST_ONE_CONVERSION_MUST_BE_SELECTED";
					case CampaignErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_GO_BACK_TO_INCOMPLETE": return CampaignErrorReason.CannotGoBackToIncomplete;
					case "CANNOT_TARGET_CONTENT_NETWORK": return CampaignErrorReason.CannotTargetContentNetwork;
					case "CANNOT_TARGET_SEARCH_NETWORK": return CampaignErrorReason.CannotTargetSearchNetwork;
					case "CANNOT_TARGET_SEARCH_NETWORK_WITHOUT_GOOGLE_SEARCH": return CampaignErrorReason.CannotTargetSearchNetworkWithoutGoogleSearch;
					case "CANNOT_TARGET_GOOGLE_SEARCH_FOR_CPM_CAMPAIGN": return CampaignErrorReason.CannotTargetGoogleSearchForCpmCampaign;
					case "CAMPAIGN_MUST_TARGET_AT_LEAST_ONE_NETWORK": return CampaignErrorReason.CampaignMustTargetAtLeastOneNetwork;
					case "CANNOT_TARGET_PARTNER_SEARCH_NETWORK": return CampaignErrorReason.CannotTargetPartnerSearchNetwork;
					case "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CRITERIA_LEVEL_BIDDING_STRATEGY": return CampaignErrorReason.CannotTargetContentNetworkOnlyWithCriteriaLevelBiddingStrategy;
					case "CAMPAIGN_DURATION_MUST_CONTAIN_ALL_RUNNABLE_TRIALS": return CampaignErrorReason.CampaignDurationMustContainAllRunnableTrials;
					case "CANNOT_MODIFY_FOR_TRIAL_CAMPAIGN": return CampaignErrorReason.CannotModifyForTrialCampaign;
					case "DUPLICATE_CAMPAIGN_NAME": return CampaignErrorReason.DuplicateCampaignName;
					case "INCOMPATIBLE_CAMPAIGN_FIELD": return CampaignErrorReason.IncompatibleCampaignField;
					case "INVALID_CAMPAIGN_NAME": return CampaignErrorReason.InvalidCampaignName;
					case "INVALID_AD_SERVING_OPTIMIZATION_STATUS": return CampaignErrorReason.InvalidAdServingOptimizationStatus;
					case "INVALID_TRACKING_URL": return CampaignErrorReason.InvalidTrackingUrl;
					case "CANNOT_SET_BOTH_TRACKING_URL_TEMPLATE_AND_TRACKING_SETTING": return CampaignErrorReason.CannotSetBothTrackingUrlTemplateAndTrackingSetting;
					case "MAX_IMPRESSIONS_NOT_IN_RANGE": return CampaignErrorReason.MaxImpressionsNotInRange;
					case "TIME_UNIT_NOT_SUPPORTED": return CampaignErrorReason.TimeUnitNotSupported;
					case "INVALID_OPERATION_IF_SERVING_STATUS_HAS_ENDED": return CampaignErrorReason.InvalidOperationIfServingStatusHasEnded;
					case "BUDGET_CANNOT_BE_SHARED": return CampaignErrorReason.BudgetCannotBeShared;
					case "CAMPAIGN_CANNOT_USE_SHARED_BUDGET": return CampaignErrorReason.CampaignCannotUseSharedBudget;
					case "CANNOT_CHANGE_BUDGET_ON_CAMPAIGN_WITH_TRIALS": return CampaignErrorReason.CannotChangeBudgetOnCampaignWithTrials;
					case "CAMPAIGN_LABEL_DOES_NOT_EXIST": return CampaignErrorReason.CampaignLabelDoesNotExist;
					case "CAMPAIGN_LABEL_ALREADY_EXISTS": return CampaignErrorReason.CampaignLabelAlreadyExists;
					case "MISSING_SHOPPING_SETTING": return CampaignErrorReason.MissingShoppingSetting;
					case "INVALID_SHOPPING_SALES_COUNTRY": return CampaignErrorReason.InvalidShoppingSalesCountry;
					case "MISSING_UNIVERSAL_APP_CAMPAIGN_SETTING": return CampaignErrorReason.MissingUniversalAppCampaignSetting;
					case "ADVERTISING_CHANNEL_TYPE_NOT_AVAILABLE_FOR_ACCOUNT_TYPE": return CampaignErrorReason.AdvertisingChannelTypeNotAvailableForAccountType;
					case "INVALID_ADVERTISING_CHANNEL_SUB_TYPE": return CampaignErrorReason.InvalidAdvertisingChannelSubType;
					case "AT_LEAST_ONE_CONVERSION_MUST_BE_SELECTED": return CampaignErrorReason.AtLeastOneConversionMustBeSelected;
					case "UNKNOWN": return CampaignErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignFeedErrorReasonExtensions
		{
			public static string ToXmlValue(this CampaignFeedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CampaignFeedErrorReason.FeedAlreadyExistsForPlaceholderType: return "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case CampaignFeedErrorReason.InvalidId: return "INVALID_ID";
					case CampaignFeedErrorReason.CannotAddForDeletedFeed: return "CANNOT_ADD_FOR_DELETED_FEED";
					case CampaignFeedErrorReason.CannotAddAlreadyExistingCampaignFeed: return "CANNOT_ADD_ALREADY_EXISTING_CAMPAIGN_FEED";
					case CampaignFeedErrorReason.CannotOperateOnRemovedCampaignFeed: return "CANNOT_OPERATE_ON_REMOVED_CAMPAIGN_FEED";
					case CampaignFeedErrorReason.InvalidPlaceholderTypes: return "INVALID_PLACEHOLDER_TYPES";
					case CampaignFeedErrorReason.MissingFeedmappingForPlaceholderType: return "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE";
					case CampaignFeedErrorReason.NoExistingLocationCustomerFeed: return "NO_EXISTING_LOCATION_CUSTOMER_FEED";
					case CampaignFeedErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignFeedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return CampaignFeedErrorReason.FeedAlreadyExistsForPlaceholderType;
					case "INVALID_ID": return CampaignFeedErrorReason.InvalidId;
					case "CANNOT_ADD_FOR_DELETED_FEED": return CampaignFeedErrorReason.CannotAddForDeletedFeed;
					case "CANNOT_ADD_ALREADY_EXISTING_CAMPAIGN_FEED": return CampaignFeedErrorReason.CannotAddAlreadyExistingCampaignFeed;
					case "CANNOT_OPERATE_ON_REMOVED_CAMPAIGN_FEED": return CampaignFeedErrorReason.CannotOperateOnRemovedCampaignFeed;
					case "INVALID_PLACEHOLDER_TYPES": return CampaignFeedErrorReason.InvalidPlaceholderTypes;
					case "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE": return CampaignFeedErrorReason.MissingFeedmappingForPlaceholderType;
					case "NO_EXISTING_LOCATION_CUSTOMER_FEED": return CampaignFeedErrorReason.NoExistingLocationCustomerFeed;
					case "UNKNOWN": return CampaignFeedErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignFeedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignFeedStatusExtensions
		{
			public static string ToXmlValue(this CampaignFeedStatus enumValue)
			{
				switch (enumValue)
				{
					case CampaignFeedStatus.Enabled: return "ENABLED";
					case CampaignFeedStatus.Removed: return "REMOVED";
					case CampaignFeedStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignFeedStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return CampaignFeedStatus.Enabled;
					case "REMOVED": return CampaignFeedStatus.Removed;
					case "UNKNOWN": return CampaignFeedStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignFeedStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignPreferenceErrorReasonExtensions
		{
			public static string ToXmlValue(this CampaignPreferenceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CampaignPreferenceErrorReason.PreferenceAlreadyExists: return "PREFERENCE_ALREADY_EXISTS";
					case CampaignPreferenceErrorReason.PreferenceNotFound: return "PREFERENCE_NOT_FOUND";
					case CampaignPreferenceErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignPreferenceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "PREFERENCE_ALREADY_EXISTS": return CampaignPreferenceErrorReason.PreferenceAlreadyExists;
					case "PREFERENCE_NOT_FOUND": return CampaignPreferenceErrorReason.PreferenceNotFound;
					case "UNKNOWN": return CampaignPreferenceErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignPreferenceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignSharedSetErrorReasonExtensions
		{
			public static string ToXmlValue(this CampaignSharedSetErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CampaignSharedSetErrorReason.CampaignSharedSetDoesNotExist: return "CAMPAIGN_SHARED_SET_DOES_NOT_EXIST";
					case CampaignSharedSetErrorReason.SharedSetNotActive: return "SHARED_SET_NOT_ACTIVE";
					case CampaignSharedSetErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignSharedSetErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CAMPAIGN_SHARED_SET_DOES_NOT_EXIST": return CampaignSharedSetErrorReason.CampaignSharedSetDoesNotExist;
					case "SHARED_SET_NOT_ACTIVE": return CampaignSharedSetErrorReason.SharedSetNotActive;
					case "UNKNOWN": return CampaignSharedSetErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignSharedSetErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignSharedSetStatusExtensions
		{
			public static string ToXmlValue(this CampaignSharedSetStatus enumValue)
			{
				switch (enumValue)
				{
					case CampaignSharedSetStatus.Enabled: return "ENABLED";
					case CampaignSharedSetStatus.Removed: return "REMOVED";
					case CampaignSharedSetStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CampaignSharedSetStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return CampaignSharedSetStatus.Enabled;
					case "REMOVED": return CampaignSharedSetStatus.Removed;
					case "UNKNOWN": return CampaignSharedSetStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignSharedSetStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignStatusExtensions
		{
			public static string ToXmlValue(this CampaignStatus enumValue)
			{
				switch (enumValue)
				{
					case CampaignStatus.Unknown: return "UNKNOWN";
					case CampaignStatus.Enabled: return "ENABLED";
					case CampaignStatus.Paused: return "PAUSED";
					case CampaignStatus.Removed: return "REMOVED";
					default: return null;
				}
			}
			public static CampaignStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return CampaignStatus.Unknown;
					case "ENABLED": return CampaignStatus.Enabled;
					case "PAUSED": return CampaignStatus.Paused;
					case "REMOVED": return CampaignStatus.Removed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CampaignTrialTypeExtensions
		{
			public static string ToXmlValue(this CampaignTrialType enumValue)
			{
				switch (enumValue)
				{
					case CampaignTrialType.Unknown: return "UNKNOWN";
					case CampaignTrialType.Base: return "BASE";
					case CampaignTrialType.Draft: return "DRAFT";
					case CampaignTrialType.Trial: return "TRIAL";
					default: return null;
				}
			}
			public static CampaignTrialType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return CampaignTrialType.Unknown;
					case "BASE": return CampaignTrialType.Base;
					case "DRAFT": return CampaignTrialType.Draft;
					case "TRIAL": return CampaignTrialType.Trial;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CampaignTrialType.", nameof(xmlValue));
				}
			}
		}
		public static class ChangeStatusExtensions
		{
			public static string ToXmlValue(this ChangeStatus enumValue)
			{
				switch (enumValue)
				{
					case ChangeStatus.FieldsUnchanged: return "FIELDS_UNCHANGED";
					case ChangeStatus.FieldsChanged: return "FIELDS_CHANGED";
					case ChangeStatus.New: return "NEW";
					default: return null;
				}
			}
			public static ChangeStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FIELDS_UNCHANGED": return ChangeStatus.FieldsUnchanged;
					case "FIELDS_CHANGED": return ChangeStatus.FieldsChanged;
					case "NEW": return ChangeStatus.New;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ChangeStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ClientTermsErrorReasonExtensions
		{
			public static string ToXmlValue(this ClientTermsErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ClientTermsErrorReason.IncompleteSignupCurrentAdwordsTncNotAgreed: return "INCOMPLETE_SIGNUP_CURRENT_ADWORDS_TNC_NOT_AGREED";
					default: return null;
				}
			}
			public static ClientTermsErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INCOMPLETE_SIGNUP_CURRENT_ADWORDS_TNC_NOT_AGREED": return ClientTermsErrorReason.IncompleteSignupCurrentAdwordsTncNotAgreed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ClientTermsErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CollectionSizeErrorReasonExtensions
		{
			public static string ToXmlValue(this CollectionSizeErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CollectionSizeErrorReason.TooFew: return "TOO_FEW";
					case CollectionSizeErrorReason.TooMany: return "TOO_MANY";
					default: return null;
				}
			}
			public static CollectionSizeErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "TOO_FEW": return CollectionSizeErrorReason.TooFew;
					case "TOO_MANY": return CollectionSizeErrorReason.TooMany;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CollectionSizeErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CompetitionSearchParameterLevelExtensions
		{
			public static string ToXmlValue(this CompetitionSearchParameterLevel enumValue)
			{
				switch (enumValue)
				{
					case CompetitionSearchParameterLevel.Low: return "LOW";
					case CompetitionSearchParameterLevel.Medium: return "MEDIUM";
					case CompetitionSearchParameterLevel.High: return "HIGH";
					default: return null;
				}
			}
			public static CompetitionSearchParameterLevel Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "LOW": return CompetitionSearchParameterLevel.Low;
					case "MEDIUM": return CompetitionSearchParameterLevel.Medium;
					case "HIGH": return CompetitionSearchParameterLevel.High;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CompetitionSearchParameterLevel.", nameof(xmlValue));
				}
			}
		}
		public static class ConstantDataServiceUserInterestTaxonomyTypeExtensions
		{
			public static string ToXmlValue(this ConstantDataServiceUserInterestTaxonomyType enumValue)
			{
				switch (enumValue)
				{
					case ConstantDataServiceUserInterestTaxonomyType.Brand: return "BRAND";
					case ConstantDataServiceUserInterestTaxonomyType.InMarket: return "IN_MARKET";
					case ConstantDataServiceUserInterestTaxonomyType.MobileAppInstallUser: return "MOBILE_APP_INSTALL_USER";
					case ConstantDataServiceUserInterestTaxonomyType.VerticalGeo: return "VERTICAL_GEO";
					case ConstantDataServiceUserInterestTaxonomyType.NewSmartPhoneUser: return "NEW_SMART_PHONE_USER";
					default: return null;
				}
			}
			public static ConstantDataServiceUserInterestTaxonomyType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BRAND": return ConstantDataServiceUserInterestTaxonomyType.Brand;
					case "IN_MARKET": return ConstantDataServiceUserInterestTaxonomyType.InMarket;
					case "MOBILE_APP_INSTALL_USER": return ConstantDataServiceUserInterestTaxonomyType.MobileAppInstallUser;
					case "VERTICAL_GEO": return ConstantDataServiceUserInterestTaxonomyType.VerticalGeo;
					case "NEW_SMART_PHONE_USER": return ConstantDataServiceUserInterestTaxonomyType.NewSmartPhoneUser;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConstantDataServiceUserInterestTaxonomyType.", nameof(xmlValue));
				}
			}
		}
		public static class ConstantOperandConstantTypeExtensions
		{
			public static string ToXmlValue(this ConstantOperandConstantType enumValue)
			{
				switch (enumValue)
				{
					case ConstantOperandConstantType.Boolean: return "BOOLEAN";
					case ConstantOperandConstantType.Double: return "DOUBLE";
					case ConstantOperandConstantType.Long: return "LONG";
					case ConstantOperandConstantType.String: return "STRING";
					default: return null;
				}
			}
			public static ConstantOperandConstantType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BOOLEAN": return ConstantOperandConstantType.Boolean;
					case "DOUBLE": return ConstantOperandConstantType.Double;
					case "LONG": return ConstantOperandConstantType.Long;
					case "STRING": return ConstantOperandConstantType.String;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConstantOperandConstantType.", nameof(xmlValue));
				}
			}
		}
		public static class ConstantOperandUnitExtensions
		{
			public static string ToXmlValue(this ConstantOperandUnit enumValue)
			{
				switch (enumValue)
				{
					case ConstantOperandUnit.Meters: return "METERS";
					case ConstantOperandUnit.Miles: return "MILES";
					case ConstantOperandUnit.None: return "NONE";
					default: return null;
				}
			}
			public static ConstantOperandUnit Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "METERS": return ConstantOperandUnit.Meters;
					case "MILES": return ConstantOperandUnit.Miles;
					case "NONE": return ConstantOperandUnit.None;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConstantOperandUnit.", nameof(xmlValue));
				}
			}
		}
		public static class ContentLabelTypeExtensions
		{
			public static string ToXmlValue(this ContentLabelType enumValue)
			{
				switch (enumValue)
				{
					case ContentLabelType.Adultish: return "ADULTISH";
					case ContentLabelType.Afe: return "AFE";
					case ContentLabelType.BelowTheFold: return "BELOW_THE_FOLD";
					case ContentLabelType.Conflict: return "CONFLICT";
					case ContentLabelType.Dp: return "DP";
					case ContentLabelType.EmbeddedVideo: return "EMBEDDED_VIDEO";
					case ContentLabelType.Games: return "GAMES";
					case ContentLabelType.Juvenile: return "JUVENILE";
					case ContentLabelType.Profanity: return "PROFANITY";
					case ContentLabelType.UgcForums: return "UGC_FORUMS";
					case ContentLabelType.UgcImages: return "UGC_IMAGES";
					case ContentLabelType.UgcSocial: return "UGC_SOCIAL";
					case ContentLabelType.UgcVideos: return "UGC_VIDEOS";
					case ContentLabelType.Sirens: return "SIRENS";
					case ContentLabelType.Tragedy: return "TRAGEDY";
					case ContentLabelType.Video: return "VIDEO";
					case ContentLabelType.VideoRatingDvG: return "VIDEO_RATING_DV_G";
					case ContentLabelType.VideoRatingDvPg: return "VIDEO_RATING_DV_PG";
					case ContentLabelType.VideoRatingDvT: return "VIDEO_RATING_DV_T";
					case ContentLabelType.VideoRatingDvMa: return "VIDEO_RATING_DV_MA";
					case ContentLabelType.VideoNotYetRated: return "VIDEO_NOT_YET_RATED";
					case ContentLabelType.LiveStreamingVideo: return "LIVE_STREAMING_VIDEO";
					case ContentLabelType.AllowedGamblingContent: return "ALLOWED_GAMBLING_CONTENT";
					case ContentLabelType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ContentLabelType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADULTISH": return ContentLabelType.Adultish;
					case "AFE": return ContentLabelType.Afe;
					case "BELOW_THE_FOLD": return ContentLabelType.BelowTheFold;
					case "CONFLICT": return ContentLabelType.Conflict;
					case "DP": return ContentLabelType.Dp;
					case "EMBEDDED_VIDEO": return ContentLabelType.EmbeddedVideo;
					case "GAMES": return ContentLabelType.Games;
					case "JUVENILE": return ContentLabelType.Juvenile;
					case "PROFANITY": return ContentLabelType.Profanity;
					case "UGC_FORUMS": return ContentLabelType.UgcForums;
					case "UGC_IMAGES": return ContentLabelType.UgcImages;
					case "UGC_SOCIAL": return ContentLabelType.UgcSocial;
					case "UGC_VIDEOS": return ContentLabelType.UgcVideos;
					case "SIRENS": return ContentLabelType.Sirens;
					case "TRAGEDY": return ContentLabelType.Tragedy;
					case "VIDEO": return ContentLabelType.Video;
					case "VIDEO_RATING_DV_G": return ContentLabelType.VideoRatingDvG;
					case "VIDEO_RATING_DV_PG": return ContentLabelType.VideoRatingDvPg;
					case "VIDEO_RATING_DV_T": return ContentLabelType.VideoRatingDvT;
					case "VIDEO_RATING_DV_MA": return ContentLabelType.VideoRatingDvMa;
					case "VIDEO_NOT_YET_RATED": return ContentLabelType.VideoNotYetRated;
					case "LIVE_STREAMING_VIDEO": return ContentLabelType.LiveStreamingVideo;
					case "ALLOWED_GAMBLING_CONTENT": return ContentLabelType.AllowedGamblingContent;
					case "UNKNOWN": return ContentLabelType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ContentLabelType.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionDeduplicationModeExtensions
		{
			public static string ToXmlValue(this ConversionDeduplicationMode enumValue)
			{
				switch (enumValue)
				{
					case ConversionDeduplicationMode.OnePerClick: return "ONE_PER_CLICK";
					case ConversionDeduplicationMode.ManyPerClick: return "MANY_PER_CLICK";
					default: return null;
				}
			}
			public static ConversionDeduplicationMode Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ONE_PER_CLICK": return ConversionDeduplicationMode.OnePerClick;
					case "MANY_PER_CLICK": return ConversionDeduplicationMode.ManyPerClick;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionDeduplicationMode.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionOptimizerBiddingSchemeBidTypeExtensions
		{
			public static string ToXmlValue(this ConversionOptimizerBiddingSchemeBidType enumValue)
			{
				switch (enumValue)
				{
					case ConversionOptimizerBiddingSchemeBidType.TargetCpa: return "TARGET_CPA";
					default: return null;
				}
			}
			public static ConversionOptimizerBiddingSchemeBidType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "TARGET_CPA": return ConversionOptimizerBiddingSchemeBidType.TargetCpa;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionOptimizerBiddingSchemeBidType.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionOptimizerBiddingSchemePricingModeExtensions
		{
			public static string ToXmlValue(this ConversionOptimizerBiddingSchemePricingMode enumValue)
			{
				switch (enumValue)
				{
					case ConversionOptimizerBiddingSchemePricingMode.Clicks: return "CLICKS";
					case ConversionOptimizerBiddingSchemePricingMode.Conversions: return "CONVERSIONS";
					default: return null;
				}
			}
			public static ConversionOptimizerBiddingSchemePricingMode Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CLICKS": return ConversionOptimizerBiddingSchemePricingMode.Clicks;
					case "CONVERSIONS": return ConversionOptimizerBiddingSchemePricingMode.Conversions;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionOptimizerBiddingSchemePricingMode.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionOptimizerEligibilityRejectionReasonExtensions
		{
			public static string ToXmlValue(this ConversionOptimizerEligibilityRejectionReason enumValue)
			{
				switch (enumValue)
				{
					case ConversionOptimizerEligibilityRejectionReason.CampaignIsNotActive: return "CAMPAIGN_IS_NOT_ACTIVE";
					case ConversionOptimizerEligibilityRejectionReason.NotCpcCampaign: return "NOT_CPC_CAMPAIGN";
					case ConversionOptimizerEligibilityRejectionReason.ConversionTrackingNotEnabled: return "CONVERSION_TRACKING_NOT_ENABLED";
					case ConversionOptimizerEligibilityRejectionReason.NotEnoughConversions: return "NOT_ENOUGH_CONVERSIONS";
					case ConversionOptimizerEligibilityRejectionReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ConversionOptimizerEligibilityRejectionReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CAMPAIGN_IS_NOT_ACTIVE": return ConversionOptimizerEligibilityRejectionReason.CampaignIsNotActive;
					case "NOT_CPC_CAMPAIGN": return ConversionOptimizerEligibilityRejectionReason.NotCpcCampaign;
					case "CONVERSION_TRACKING_NOT_ENABLED": return ConversionOptimizerEligibilityRejectionReason.ConversionTrackingNotEnabled;
					case "NOT_ENOUGH_CONVERSIONS": return ConversionOptimizerEligibilityRejectionReason.NotEnoughConversions;
					case "UNKNOWN": return ConversionOptimizerEligibilityRejectionReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionOptimizerEligibilityRejectionReason.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionTrackerCategoryExtensions
		{
			public static string ToXmlValue(this ConversionTrackerCategory enumValue)
			{
				switch (enumValue)
				{
					case ConversionTrackerCategory.Default: return "DEFAULT";
					case ConversionTrackerCategory.PageView: return "PAGE_VIEW";
					case ConversionTrackerCategory.Purchase: return "PURCHASE";
					case ConversionTrackerCategory.Signup: return "SIGNUP";
					case ConversionTrackerCategory.Lead: return "LEAD";
					case ConversionTrackerCategory.Remarketing: return "REMARKETING";
					case ConversionTrackerCategory.Download: return "DOWNLOAD";
					default: return null;
				}
			}
			public static ConversionTrackerCategory Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DEFAULT": return ConversionTrackerCategory.Default;
					case "PAGE_VIEW": return ConversionTrackerCategory.PageView;
					case "PURCHASE": return ConversionTrackerCategory.Purchase;
					case "SIGNUP": return ConversionTrackerCategory.Signup;
					case "LEAD": return ConversionTrackerCategory.Lead;
					case "REMARKETING": return ConversionTrackerCategory.Remarketing;
					case "DOWNLOAD": return ConversionTrackerCategory.Download;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionTrackerCategory.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionTrackerStatusExtensions
		{
			public static string ToXmlValue(this ConversionTrackerStatus enumValue)
			{
				switch (enumValue)
				{
					case ConversionTrackerStatus.Enabled: return "ENABLED";
					case ConversionTrackerStatus.Disabled: return "DISABLED";
					case ConversionTrackerStatus.Hidden: return "HIDDEN";
					default: return null;
				}
			}
			public static ConversionTrackerStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return ConversionTrackerStatus.Enabled;
					case "DISABLED": return ConversionTrackerStatus.Disabled;
					case "HIDDEN": return ConversionTrackerStatus.Hidden;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionTrackerStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ConversionTrackingErrorReasonExtensions
		{
			public static string ToXmlValue(this ConversionTrackingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ConversionTrackingErrorReason.AlreadyCreatedCustomConversionType: return "ALREADY_CREATED_CUSTOM_CONVERSION_TYPE";
					case ConversionTrackingErrorReason.AnalyticsNotAllowed: return "ANALYTICS_NOT_ALLOWED";
					case ConversionTrackingErrorReason.CannotAddConversionTypeSubclass: return "CANNOT_ADD_CONVERSION_TYPE_SUBCLASS";
					case ConversionTrackingErrorReason.CannotChangeAppConversionType: return "CANNOT_CHANGE_APP_CONVERSION_TYPE";
					case ConversionTrackingErrorReason.CannotChangeAppPlatform: return "CANNOT_CHANGE_APP_PLATFORM";
					case ConversionTrackingErrorReason.CannnotChangeConversionSubclass: return "CANNNOT_CHANGE_CONVERSION_SUBCLASS";
					case ConversionTrackingErrorReason.CannotSetHiddenStatus: return "CANNOT_SET_HIDDEN_STATUS";
					case ConversionTrackingErrorReason.CategoryIsUneditable: return "CATEGORY_IS_UNEDITABLE";
					case ConversionTrackingErrorReason.AttributionModelIsUneditable: return "ATTRIBUTION_MODEL_IS_UNEDITABLE";
					case ConversionTrackingErrorReason.DataDrivenModelWasNeverGenerated: return "DATA_DRIVEN_MODEL_WAS_NEVER_GENERATED";
					case ConversionTrackingErrorReason.DataDrivenModelIsExpired: return "DATA_DRIVEN_MODEL_IS_EXPIRED";
					case ConversionTrackingErrorReason.DataDrivenModelIsStale: return "DATA_DRIVEN_MODEL_IS_STALE";
					case ConversionTrackingErrorReason.DataDrivenModelIsUnknown: return "DATA_DRIVEN_MODEL_IS_UNKNOWN";
					case ConversionTrackingErrorReason.ConversionTypeNotFound: return "CONVERSION_TYPE_NOT_FOUND";
					case ConversionTrackingErrorReason.CtcLookbackWindowIsUneditable: return "CTC_LOOKBACK_WINDOW_IS_UNEDITABLE";
					case ConversionTrackingErrorReason.DomainException: return "DOMAIN_EXCEPTION";
					case ConversionTrackingErrorReason.InconsistentCountingType: return "INCONSISTENT_COUNTING_TYPE";
					case ConversionTrackingErrorReason.DuplicateAppId: return "DUPLICATE_APP_ID";
					case ConversionTrackingErrorReason.DuplicateName: return "DUPLICATE_NAME";
					case ConversionTrackingErrorReason.EmailFailed: return "EMAIL_FAILED";
					case ConversionTrackingErrorReason.ExceededConversionTypeLimit: return "EXCEEDED_CONVERSION_TYPE_LIMIT";
					case ConversionTrackingErrorReason.IdIsNull: return "ID_IS_NULL";
					case ConversionTrackingErrorReason.InvalidAppId: return "INVALID_APP_ID";
					case ConversionTrackingErrorReason.CannotSetAppId: return "CANNOT_SET_APP_ID";
					case ConversionTrackingErrorReason.InvalidColor: return "INVALID_COLOR";
					case ConversionTrackingErrorReason.InvalidDateRange: return "INVALID_DATE_RANGE";
					case ConversionTrackingErrorReason.InvalidEmailAddress: return "INVALID_EMAIL_ADDRESS";
					case ConversionTrackingErrorReason.InvalidOriginalConversionTypeId: return "INVALID_ORIGINAL_CONVERSION_TYPE_ID";
					case ConversionTrackingErrorReason.MustSetAppPlatformAndAppConversionTypeTogether: return "MUST_SET_APP_PLATFORM_AND_APP_CONVERSION_TYPE_TOGETHER";
					case ConversionTrackingErrorReason.NameAlreadyExists: return "NAME_ALREADY_EXISTS";
					case ConversionTrackingErrorReason.NoRecipients: return "NO_RECIPIENTS";
					case ConversionTrackingErrorReason.NoSnippet: return "NO_SNIPPET";
					case ConversionTrackingErrorReason.TooManyWebpages: return "TOO_MANY_WEBPAGES";
					case ConversionTrackingErrorReason.UnknownSortingType: return "UNKNOWN_SORTING_TYPE";
					case ConversionTrackingErrorReason.UnsupportedAppConversionType: return "UNSUPPORTED_APP_CONVERSION_TYPE";
					default: return null;
				}
			}
			public static ConversionTrackingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ALREADY_CREATED_CUSTOM_CONVERSION_TYPE": return ConversionTrackingErrorReason.AlreadyCreatedCustomConversionType;
					case "ANALYTICS_NOT_ALLOWED": return ConversionTrackingErrorReason.AnalyticsNotAllowed;
					case "CANNOT_ADD_CONVERSION_TYPE_SUBCLASS": return ConversionTrackingErrorReason.CannotAddConversionTypeSubclass;
					case "CANNOT_CHANGE_APP_CONVERSION_TYPE": return ConversionTrackingErrorReason.CannotChangeAppConversionType;
					case "CANNOT_CHANGE_APP_PLATFORM": return ConversionTrackingErrorReason.CannotChangeAppPlatform;
					case "CANNNOT_CHANGE_CONVERSION_SUBCLASS": return ConversionTrackingErrorReason.CannnotChangeConversionSubclass;
					case "CANNOT_SET_HIDDEN_STATUS": return ConversionTrackingErrorReason.CannotSetHiddenStatus;
					case "CATEGORY_IS_UNEDITABLE": return ConversionTrackingErrorReason.CategoryIsUneditable;
					case "ATTRIBUTION_MODEL_IS_UNEDITABLE": return ConversionTrackingErrorReason.AttributionModelIsUneditable;
					case "DATA_DRIVEN_MODEL_WAS_NEVER_GENERATED": return ConversionTrackingErrorReason.DataDrivenModelWasNeverGenerated;
					case "DATA_DRIVEN_MODEL_IS_EXPIRED": return ConversionTrackingErrorReason.DataDrivenModelIsExpired;
					case "DATA_DRIVEN_MODEL_IS_STALE": return ConversionTrackingErrorReason.DataDrivenModelIsStale;
					case "DATA_DRIVEN_MODEL_IS_UNKNOWN": return ConversionTrackingErrorReason.DataDrivenModelIsUnknown;
					case "CONVERSION_TYPE_NOT_FOUND": return ConversionTrackingErrorReason.ConversionTypeNotFound;
					case "CTC_LOOKBACK_WINDOW_IS_UNEDITABLE": return ConversionTrackingErrorReason.CtcLookbackWindowIsUneditable;
					case "DOMAIN_EXCEPTION": return ConversionTrackingErrorReason.DomainException;
					case "INCONSISTENT_COUNTING_TYPE": return ConversionTrackingErrorReason.InconsistentCountingType;
					case "DUPLICATE_APP_ID": return ConversionTrackingErrorReason.DuplicateAppId;
					case "DUPLICATE_NAME": return ConversionTrackingErrorReason.DuplicateName;
					case "EMAIL_FAILED": return ConversionTrackingErrorReason.EmailFailed;
					case "EXCEEDED_CONVERSION_TYPE_LIMIT": return ConversionTrackingErrorReason.ExceededConversionTypeLimit;
					case "ID_IS_NULL": return ConversionTrackingErrorReason.IdIsNull;
					case "INVALID_APP_ID": return ConversionTrackingErrorReason.InvalidAppId;
					case "CANNOT_SET_APP_ID": return ConversionTrackingErrorReason.CannotSetAppId;
					case "INVALID_COLOR": return ConversionTrackingErrorReason.InvalidColor;
					case "INVALID_DATE_RANGE": return ConversionTrackingErrorReason.InvalidDateRange;
					case "INVALID_EMAIL_ADDRESS": return ConversionTrackingErrorReason.InvalidEmailAddress;
					case "INVALID_ORIGINAL_CONVERSION_TYPE_ID": return ConversionTrackingErrorReason.InvalidOriginalConversionTypeId;
					case "MUST_SET_APP_PLATFORM_AND_APP_CONVERSION_TYPE_TOGETHER": return ConversionTrackingErrorReason.MustSetAppPlatformAndAppConversionTypeTogether;
					case "NAME_ALREADY_EXISTS": return ConversionTrackingErrorReason.NameAlreadyExists;
					case "NO_RECIPIENTS": return ConversionTrackingErrorReason.NoRecipients;
					case "NO_SNIPPET": return ConversionTrackingErrorReason.NoSnippet;
					case "TOO_MANY_WEBPAGES": return ConversionTrackingErrorReason.TooManyWebpages;
					case "UNKNOWN_SORTING_TYPE": return ConversionTrackingErrorReason.UnknownSortingType;
					case "UNSUPPORTED_APP_CONVERSION_TYPE": return ConversionTrackingErrorReason.UnsupportedAppConversionType;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ConversionTrackingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CriterionErrorReasonExtensions
		{
			public static string ToXmlValue(this CriterionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CriterionErrorReason.ConcreteTypeRequired: return "CONCRETE_TYPE_REQUIRED";
					case CriterionErrorReason.InvalidExcludedCategory: return "INVALID_EXCLUDED_CATEGORY";
					case CriterionErrorReason.InvalidKeywordText: return "INVALID_KEYWORD_TEXT";
					case CriterionErrorReason.KeywordTextTooLong: return "KEYWORD_TEXT_TOO_LONG";
					case CriterionErrorReason.KeywordHasTooManyWords: return "KEYWORD_HAS_TOO_MANY_WORDS";
					case CriterionErrorReason.KeywordHasInvalidChars: return "KEYWORD_HAS_INVALID_CHARS";
					case CriterionErrorReason.InvalidPlacementUrl: return "INVALID_PLACEMENT_URL";
					case CriterionErrorReason.InvalidUserList: return "INVALID_USER_LIST";
					case CriterionErrorReason.InvalidUserInterest: return "INVALID_USER_INTEREST";
					case CriterionErrorReason.InvalidFormatForPlacementUrl: return "INVALID_FORMAT_FOR_PLACEMENT_URL";
					case CriterionErrorReason.PlacementUrlIsTooLong: return "PLACEMENT_URL_IS_TOO_LONG";
					case CriterionErrorReason.PlacementUrlHasIllegalChar: return "PLACEMENT_URL_HAS_ILLEGAL_CHAR";
					case CriterionErrorReason.PlacementUrlHasMultipleSitesInLine: return "PLACEMENT_URL_HAS_MULTIPLE_SITES_IN_LINE";
					case CriterionErrorReason.PlacementIsNotAvailableForTargetingOrExclusion: return "PLACEMENT_IS_NOT_AVAILABLE_FOR_TARGETING_OR_EXCLUSION";
					case CriterionErrorReason.InvalidVerticalPath: return "INVALID_VERTICAL_PATH";
					case CriterionErrorReason.YoutubeVerticalChannelDeprecated: return "YOUTUBE_VERTICAL_CHANNEL_DEPRECATED";
					case CriterionErrorReason.YoutubeDemographicChannelDeprecated: return "YOUTUBE_DEMOGRAPHIC_CHANNEL_DEPRECATED";
					case CriterionErrorReason.YoutubeUrlUnsupported: return "YOUTUBE_URL_UNSUPPORTED";
					case CriterionErrorReason.CannotExcludeCriteriaType: return "CANNOT_EXCLUDE_CRITERIA_TYPE";
					case CriterionErrorReason.CannotAddCriteriaType: return "CANNOT_ADD_CRITERIA_TYPE";
					case CriterionErrorReason.InvalidProductFilter: return "INVALID_PRODUCT_FILTER";
					case CriterionErrorReason.ProductFilterTooLong: return "PRODUCT_FILTER_TOO_LONG";
					case CriterionErrorReason.CannotExcludeSimilarUserList: return "CANNOT_EXCLUDE_SIMILAR_USER_LIST";
					case CriterionErrorReason.CannotAddDisplayOnlyListsToSearchOnlyCampaigns: return "CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_ONLY_CAMPAIGNS";
					case CriterionErrorReason.CannotAddDisplayOnlyListsToSearchCampaigns: return "CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_CAMPAIGNS";
					case CriterionErrorReason.CannotAddUserInterestsToSearchCampaigns: return "CANNOT_ADD_USER_INTERESTS_TO_SEARCH_CAMPAIGNS";
					case CriterionErrorReason.CannotSetBidsOnCriterionTypeInSearchCampaigns: return "CANNOT_SET_BIDS_ON_CRITERION_TYPE_IN_SEARCH_CAMPAIGNS";
					case CriterionErrorReason.CannotAddDestinationUrlToCriterionTypeInSearchCampaigns: return "CANNOT_ADD_DESTINATION_URL_TO_CRITERION_TYPE_IN_SEARCH_CAMPAIGNS";
					case CriterionErrorReason.InvalidIpAddress: return "INVALID_IP_ADDRESS";
					case CriterionErrorReason.InvalidIpFormat: return "INVALID_IP_FORMAT";
					case CriterionErrorReason.InvalidMobileApp: return "INVALID_MOBILE_APP";
					case CriterionErrorReason.InvalidMobileAppCategory: return "INVALID_MOBILE_APP_CATEGORY";
					case CriterionErrorReason.InvalidCriterionId: return "INVALID_CRITERION_ID";
					case CriterionErrorReason.CannotTargetCriterion: return "CANNOT_TARGET_CRITERION";
					case CriterionErrorReason.CannotTargetObsoleteCriterion: return "CANNOT_TARGET_OBSOLETE_CRITERION";
					case CriterionErrorReason.CriterionIdAndTypeMismatch: return "CRITERION_ID_AND_TYPE_MISMATCH";
					case CriterionErrorReason.InvalidProximityRadius: return "INVALID_PROXIMITY_RADIUS";
					case CriterionErrorReason.InvalidProximityRadiusUnits: return "INVALID_PROXIMITY_RADIUS_UNITS";
					case CriterionErrorReason.InvalidStreetaddressLength: return "INVALID_STREETADDRESS_LENGTH";
					case CriterionErrorReason.InvalidCitynameLength: return "INVALID_CITYNAME_LENGTH";
					case CriterionErrorReason.InvalidRegioncodeLength: return "INVALID_REGIONCODE_LENGTH";
					case CriterionErrorReason.InvalidRegionnameLength: return "INVALID_REGIONNAME_LENGTH";
					case CriterionErrorReason.InvalidPostalcodeLength: return "INVALID_POSTALCODE_LENGTH";
					case CriterionErrorReason.InvalidCountryCode: return "INVALID_COUNTRY_CODE";
					case CriterionErrorReason.InvalidLatitude: return "INVALID_LATITUDE";
					case CriterionErrorReason.InvalidLongitude: return "INVALID_LONGITUDE";
					case CriterionErrorReason.ProximityGeopointAndAddressBothCannotBeNull: return "PROXIMITY_GEOPOINT_AND_ADDRESS_BOTH_CANNOT_BE_NULL";
					case CriterionErrorReason.InvalidProximityAddress: return "INVALID_PROXIMITY_ADDRESS";
					case CriterionErrorReason.InvalidUserDomainName: return "INVALID_USER_DOMAIN_NAME";
					case CriterionErrorReason.CriterionParameterTooLong: return "CRITERION_PARAMETER_TOO_LONG";
					case CriterionErrorReason.AdScheduleTimeIntervalsOverlap: return "AD_SCHEDULE_TIME_INTERVALS_OVERLAP";
					case CriterionErrorReason.AdScheduleIntervalCannotSpanMultipleDays: return "AD_SCHEDULE_INTERVAL_CANNOT_SPAN_MULTIPLE_DAYS";
					case CriterionErrorReason.AdScheduleInvalidTimeInterval: return "AD_SCHEDULE_INVALID_TIME_INTERVAL";
					case CriterionErrorReason.AdScheduleExceededIntervalsPerDayLimit: return "AD_SCHEDULE_EXCEEDED_INTERVALS_PER_DAY_LIMIT";
					case CriterionErrorReason.AdScheduleCriterionIdMismatchingFields: return "AD_SCHEDULE_CRITERION_ID_MISMATCHING_FIELDS";
					case CriterionErrorReason.CannotBidModifyCriterionType: return "CANNOT_BID_MODIFY_CRITERION_TYPE";
					case CriterionErrorReason.CannotBidModifyCriterionCampaignOptedOut: return "CANNOT_BID_MODIFY_CRITERION_CAMPAIGN_OPTED_OUT";
					case CriterionErrorReason.CannotBidModifyNegativeCriterion: return "CANNOT_BID_MODIFY_NEGATIVE_CRITERION";
					case CriterionErrorReason.BidModifierAlreadyExists: return "BID_MODIFIER_ALREADY_EXISTS";
					case CriterionErrorReason.FeedIdNotAllowed: return "FEED_ID_NOT_ALLOWED";
					case CriterionErrorReason.AccountIneligibleForCriteriaType: return "ACCOUNT_INELIGIBLE_FOR_CRITERIA_TYPE";
					case CriterionErrorReason.CriteriaTypeInvalidForBiddingStrategy: return "CRITERIA_TYPE_INVALID_FOR_BIDDING_STRATEGY";
					case CriterionErrorReason.CannotExcludeCriterion: return "CANNOT_EXCLUDE_CRITERION";
					case CriterionErrorReason.CannotRemoveCriterion: return "CANNOT_REMOVE_CRITERION";
					case CriterionErrorReason.ProductScopeTooLong: return "PRODUCT_SCOPE_TOO_LONG";
					case CriterionErrorReason.ProductScopeTooManyDimensions: return "PRODUCT_SCOPE_TOO_MANY_DIMENSIONS";
					case CriterionErrorReason.ProductPartitionTooLong: return "PRODUCT_PARTITION_TOO_LONG";
					case CriterionErrorReason.ProductPartitionTooManyDimensions: return "PRODUCT_PARTITION_TOO_MANY_DIMENSIONS";
					case CriterionErrorReason.InvalidProductDimension: return "INVALID_PRODUCT_DIMENSION";
					case CriterionErrorReason.InvalidProductDimensionType: return "INVALID_PRODUCT_DIMENSION_TYPE";
					case CriterionErrorReason.InvalidProductBiddingCategory: return "INVALID_PRODUCT_BIDDING_CATEGORY";
					case CriterionErrorReason.MissingShoppingSetting: return "MISSING_SHOPPING_SETTING";
					case CriterionErrorReason.InvalidMatchingFunction: return "INVALID_MATCHING_FUNCTION";
					case CriterionErrorReason.LocationFilterNotAllowed: return "LOCATION_FILTER_NOT_ALLOWED";
					case CriterionErrorReason.LocationFilterInvalid: return "LOCATION_FILTER_INVALID";
					case CriterionErrorReason.CannotAttachCriteriaAtCampaignAndAdgroup: return "CANNOT_ATTACH_CRITERIA_AT_CAMPAIGN_AND_ADGROUP";
					case CriterionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CriterionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CONCRETE_TYPE_REQUIRED": return CriterionErrorReason.ConcreteTypeRequired;
					case "INVALID_EXCLUDED_CATEGORY": return CriterionErrorReason.InvalidExcludedCategory;
					case "INVALID_KEYWORD_TEXT": return CriterionErrorReason.InvalidKeywordText;
					case "KEYWORD_TEXT_TOO_LONG": return CriterionErrorReason.KeywordTextTooLong;
					case "KEYWORD_HAS_TOO_MANY_WORDS": return CriterionErrorReason.KeywordHasTooManyWords;
					case "KEYWORD_HAS_INVALID_CHARS": return CriterionErrorReason.KeywordHasInvalidChars;
					case "INVALID_PLACEMENT_URL": return CriterionErrorReason.InvalidPlacementUrl;
					case "INVALID_USER_LIST": return CriterionErrorReason.InvalidUserList;
					case "INVALID_USER_INTEREST": return CriterionErrorReason.InvalidUserInterest;
					case "INVALID_FORMAT_FOR_PLACEMENT_URL": return CriterionErrorReason.InvalidFormatForPlacementUrl;
					case "PLACEMENT_URL_IS_TOO_LONG": return CriterionErrorReason.PlacementUrlIsTooLong;
					case "PLACEMENT_URL_HAS_ILLEGAL_CHAR": return CriterionErrorReason.PlacementUrlHasIllegalChar;
					case "PLACEMENT_URL_HAS_MULTIPLE_SITES_IN_LINE": return CriterionErrorReason.PlacementUrlHasMultipleSitesInLine;
					case "PLACEMENT_IS_NOT_AVAILABLE_FOR_TARGETING_OR_EXCLUSION": return CriterionErrorReason.PlacementIsNotAvailableForTargetingOrExclusion;
					case "INVALID_VERTICAL_PATH": return CriterionErrorReason.InvalidVerticalPath;
					case "YOUTUBE_VERTICAL_CHANNEL_DEPRECATED": return CriterionErrorReason.YoutubeVerticalChannelDeprecated;
					case "YOUTUBE_DEMOGRAPHIC_CHANNEL_DEPRECATED": return CriterionErrorReason.YoutubeDemographicChannelDeprecated;
					case "YOUTUBE_URL_UNSUPPORTED": return CriterionErrorReason.YoutubeUrlUnsupported;
					case "CANNOT_EXCLUDE_CRITERIA_TYPE": return CriterionErrorReason.CannotExcludeCriteriaType;
					case "CANNOT_ADD_CRITERIA_TYPE": return CriterionErrorReason.CannotAddCriteriaType;
					case "INVALID_PRODUCT_FILTER": return CriterionErrorReason.InvalidProductFilter;
					case "PRODUCT_FILTER_TOO_LONG": return CriterionErrorReason.ProductFilterTooLong;
					case "CANNOT_EXCLUDE_SIMILAR_USER_LIST": return CriterionErrorReason.CannotExcludeSimilarUserList;
					case "CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_ONLY_CAMPAIGNS": return CriterionErrorReason.CannotAddDisplayOnlyListsToSearchOnlyCampaigns;
					case "CANNOT_ADD_DISPLAY_ONLY_LISTS_TO_SEARCH_CAMPAIGNS": return CriterionErrorReason.CannotAddDisplayOnlyListsToSearchCampaigns;
					case "CANNOT_ADD_USER_INTERESTS_TO_SEARCH_CAMPAIGNS": return CriterionErrorReason.CannotAddUserInterestsToSearchCampaigns;
					case "CANNOT_SET_BIDS_ON_CRITERION_TYPE_IN_SEARCH_CAMPAIGNS": return CriterionErrorReason.CannotSetBidsOnCriterionTypeInSearchCampaigns;
					case "CANNOT_ADD_DESTINATION_URL_TO_CRITERION_TYPE_IN_SEARCH_CAMPAIGNS": return CriterionErrorReason.CannotAddDestinationUrlToCriterionTypeInSearchCampaigns;
					case "INVALID_IP_ADDRESS": return CriterionErrorReason.InvalidIpAddress;
					case "INVALID_IP_FORMAT": return CriterionErrorReason.InvalidIpFormat;
					case "INVALID_MOBILE_APP": return CriterionErrorReason.InvalidMobileApp;
					case "INVALID_MOBILE_APP_CATEGORY": return CriterionErrorReason.InvalidMobileAppCategory;
					case "INVALID_CRITERION_ID": return CriterionErrorReason.InvalidCriterionId;
					case "CANNOT_TARGET_CRITERION": return CriterionErrorReason.CannotTargetCriterion;
					case "CANNOT_TARGET_OBSOLETE_CRITERION": return CriterionErrorReason.CannotTargetObsoleteCriterion;
					case "CRITERION_ID_AND_TYPE_MISMATCH": return CriterionErrorReason.CriterionIdAndTypeMismatch;
					case "INVALID_PROXIMITY_RADIUS": return CriterionErrorReason.InvalidProximityRadius;
					case "INVALID_PROXIMITY_RADIUS_UNITS": return CriterionErrorReason.InvalidProximityRadiusUnits;
					case "INVALID_STREETADDRESS_LENGTH": return CriterionErrorReason.InvalidStreetaddressLength;
					case "INVALID_CITYNAME_LENGTH": return CriterionErrorReason.InvalidCitynameLength;
					case "INVALID_REGIONCODE_LENGTH": return CriterionErrorReason.InvalidRegioncodeLength;
					case "INVALID_REGIONNAME_LENGTH": return CriterionErrorReason.InvalidRegionnameLength;
					case "INVALID_POSTALCODE_LENGTH": return CriterionErrorReason.InvalidPostalcodeLength;
					case "INVALID_COUNTRY_CODE": return CriterionErrorReason.InvalidCountryCode;
					case "INVALID_LATITUDE": return CriterionErrorReason.InvalidLatitude;
					case "INVALID_LONGITUDE": return CriterionErrorReason.InvalidLongitude;
					case "PROXIMITY_GEOPOINT_AND_ADDRESS_BOTH_CANNOT_BE_NULL": return CriterionErrorReason.ProximityGeopointAndAddressBothCannotBeNull;
					case "INVALID_PROXIMITY_ADDRESS": return CriterionErrorReason.InvalidProximityAddress;
					case "INVALID_USER_DOMAIN_NAME": return CriterionErrorReason.InvalidUserDomainName;
					case "CRITERION_PARAMETER_TOO_LONG": return CriterionErrorReason.CriterionParameterTooLong;
					case "AD_SCHEDULE_TIME_INTERVALS_OVERLAP": return CriterionErrorReason.AdScheduleTimeIntervalsOverlap;
					case "AD_SCHEDULE_INTERVAL_CANNOT_SPAN_MULTIPLE_DAYS": return CriterionErrorReason.AdScheduleIntervalCannotSpanMultipleDays;
					case "AD_SCHEDULE_INVALID_TIME_INTERVAL": return CriterionErrorReason.AdScheduleInvalidTimeInterval;
					case "AD_SCHEDULE_EXCEEDED_INTERVALS_PER_DAY_LIMIT": return CriterionErrorReason.AdScheduleExceededIntervalsPerDayLimit;
					case "AD_SCHEDULE_CRITERION_ID_MISMATCHING_FIELDS": return CriterionErrorReason.AdScheduleCriterionIdMismatchingFields;
					case "CANNOT_BID_MODIFY_CRITERION_TYPE": return CriterionErrorReason.CannotBidModifyCriterionType;
					case "CANNOT_BID_MODIFY_CRITERION_CAMPAIGN_OPTED_OUT": return CriterionErrorReason.CannotBidModifyCriterionCampaignOptedOut;
					case "CANNOT_BID_MODIFY_NEGATIVE_CRITERION": return CriterionErrorReason.CannotBidModifyNegativeCriterion;
					case "BID_MODIFIER_ALREADY_EXISTS": return CriterionErrorReason.BidModifierAlreadyExists;
					case "FEED_ID_NOT_ALLOWED": return CriterionErrorReason.FeedIdNotAllowed;
					case "ACCOUNT_INELIGIBLE_FOR_CRITERIA_TYPE": return CriterionErrorReason.AccountIneligibleForCriteriaType;
					case "CRITERIA_TYPE_INVALID_FOR_BIDDING_STRATEGY": return CriterionErrorReason.CriteriaTypeInvalidForBiddingStrategy;
					case "CANNOT_EXCLUDE_CRITERION": return CriterionErrorReason.CannotExcludeCriterion;
					case "CANNOT_REMOVE_CRITERION": return CriterionErrorReason.CannotRemoveCriterion;
					case "PRODUCT_SCOPE_TOO_LONG": return CriterionErrorReason.ProductScopeTooLong;
					case "PRODUCT_SCOPE_TOO_MANY_DIMENSIONS": return CriterionErrorReason.ProductScopeTooManyDimensions;
					case "PRODUCT_PARTITION_TOO_LONG": return CriterionErrorReason.ProductPartitionTooLong;
					case "PRODUCT_PARTITION_TOO_MANY_DIMENSIONS": return CriterionErrorReason.ProductPartitionTooManyDimensions;
					case "INVALID_PRODUCT_DIMENSION": return CriterionErrorReason.InvalidProductDimension;
					case "INVALID_PRODUCT_DIMENSION_TYPE": return CriterionErrorReason.InvalidProductDimensionType;
					case "INVALID_PRODUCT_BIDDING_CATEGORY": return CriterionErrorReason.InvalidProductBiddingCategory;
					case "MISSING_SHOPPING_SETTING": return CriterionErrorReason.MissingShoppingSetting;
					case "INVALID_MATCHING_FUNCTION": return CriterionErrorReason.InvalidMatchingFunction;
					case "LOCATION_FILTER_NOT_ALLOWED": return CriterionErrorReason.LocationFilterNotAllowed;
					case "LOCATION_FILTER_INVALID": return CriterionErrorReason.LocationFilterInvalid;
					case "CANNOT_ATTACH_CRITERIA_AT_CAMPAIGN_AND_ADGROUP": return CriterionErrorReason.CannotAttachCriteriaAtCampaignAndAdgroup;
					case "UNKNOWN": return CriterionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CriterionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CriterionTypeExtensions
		{
			public static string ToXmlValue(this CriterionType enumValue)
			{
				switch (enumValue)
				{
					case CriterionType.ContentLabel: return "CONTENT_LABEL";
					case CriterionType.Keyword: return "KEYWORD";
					case CriterionType.Placement: return "PLACEMENT";
					case CriterionType.Vertical: return "VERTICAL";
					case CriterionType.UserList: return "USER_LIST";
					case CriterionType.UserInterest: return "USER_INTEREST";
					case CriterionType.MobileApplication: return "MOBILE_APPLICATION";
					case CriterionType.MobileAppCategory: return "MOBILE_APP_CATEGORY";
					case CriterionType.ProductPartition: return "PRODUCT_PARTITION";
					case CriterionType.IpBlock: return "IP_BLOCK";
					case CriterionType.Webpage: return "WEBPAGE";
					case CriterionType.Language: return "LANGUAGE";
					case CriterionType.Location: return "LOCATION";
					case CriterionType.AgeRange: return "AGE_RANGE";
					case CriterionType.Carrier: return "CARRIER";
					case CriterionType.OperatingSystemVersion: return "OPERATING_SYSTEM_VERSION";
					case CriterionType.MobileDevice: return "MOBILE_DEVICE";
					case CriterionType.Gender: return "GENDER";
					case CriterionType.Parent: return "PARENT";
					case CriterionType.Proximity: return "PROXIMITY";
					case CriterionType.Platform: return "PLATFORM";
					case CriterionType.PreferredContent: return "PREFERRED_CONTENT";
					case CriterionType.AdSchedule: return "AD_SCHEDULE";
					case CriterionType.LocationGroups: return "LOCATION_GROUPS";
					case CriterionType.ProductScope: return "PRODUCT_SCOPE";
					case CriterionType.YoutubeVideo: return "YOUTUBE_VIDEO";
					case CriterionType.YoutubeChannel: return "YOUTUBE_CHANNEL";
					case CriterionType.AppPaymentModel: return "APP_PAYMENT_MODEL";
					case CriterionType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CriterionType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CONTENT_LABEL": return CriterionType.ContentLabel;
					case "KEYWORD": return CriterionType.Keyword;
					case "PLACEMENT": return CriterionType.Placement;
					case "VERTICAL": return CriterionType.Vertical;
					case "USER_LIST": return CriterionType.UserList;
					case "USER_INTEREST": return CriterionType.UserInterest;
					case "MOBILE_APPLICATION": return CriterionType.MobileApplication;
					case "MOBILE_APP_CATEGORY": return CriterionType.MobileAppCategory;
					case "PRODUCT_PARTITION": return CriterionType.ProductPartition;
					case "IP_BLOCK": return CriterionType.IpBlock;
					case "WEBPAGE": return CriterionType.Webpage;
					case "LANGUAGE": return CriterionType.Language;
					case "LOCATION": return CriterionType.Location;
					case "AGE_RANGE": return CriterionType.AgeRange;
					case "CARRIER": return CriterionType.Carrier;
					case "OPERATING_SYSTEM_VERSION": return CriterionType.OperatingSystemVersion;
					case "MOBILE_DEVICE": return CriterionType.MobileDevice;
					case "GENDER": return CriterionType.Gender;
					case "PARENT": return CriterionType.Parent;
					case "PROXIMITY": return CriterionType.Proximity;
					case "PLATFORM": return CriterionType.Platform;
					case "PREFERRED_CONTENT": return CriterionType.PreferredContent;
					case "AD_SCHEDULE": return CriterionType.AdSchedule;
					case "LOCATION_GROUPS": return CriterionType.LocationGroups;
					case "PRODUCT_SCOPE": return CriterionType.ProductScope;
					case "YOUTUBE_VIDEO": return CriterionType.YoutubeVideo;
					case "YOUTUBE_CHANNEL": return CriterionType.YoutubeChannel;
					case "APP_PAYMENT_MODEL": return CriterionType.AppPaymentModel;
					case "UNKNOWN": return CriterionType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CriterionType.", nameof(xmlValue));
				}
			}
		}
		public static class CriterionTypeGroupExtensions
		{
			public static string ToXmlValue(this CriterionTypeGroup enumValue)
			{
				switch (enumValue)
				{
					case CriterionTypeGroup.Keyword: return "KEYWORD";
					case CriterionTypeGroup.UserInterestAndList: return "USER_INTEREST_AND_LIST";
					case CriterionTypeGroup.Vertical: return "VERTICAL";
					case CriterionTypeGroup.Gender: return "GENDER";
					case CriterionTypeGroup.AgeRange: return "AGE_RANGE";
					case CriterionTypeGroup.Placement: return "PLACEMENT";
					case CriterionTypeGroup.Parent: return "PARENT";
					case CriterionTypeGroup.None: return "NONE";
					case CriterionTypeGroup.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CriterionTypeGroup Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "KEYWORD": return CriterionTypeGroup.Keyword;
					case "USER_INTEREST_AND_LIST": return CriterionTypeGroup.UserInterestAndList;
					case "VERTICAL": return CriterionTypeGroup.Vertical;
					case "GENDER": return CriterionTypeGroup.Gender;
					case "AGE_RANGE": return CriterionTypeGroup.AgeRange;
					case "PLACEMENT": return CriterionTypeGroup.Placement;
					case "PARENT": return CriterionTypeGroup.Parent;
					case "NONE": return CriterionTypeGroup.None;
					case "UNKNOWN": return CriterionTypeGroup.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CriterionTypeGroup.", nameof(xmlValue));
				}
			}
		}
		public static class CriterionUseExtensions
		{
			public static string ToXmlValue(this CriterionUse enumValue)
			{
				switch (enumValue)
				{
					case CriterionUse.Biddable: return "BIDDABLE";
					case CriterionUse.Negative: return "NEGATIVE";
					default: return null;
				}
			}
			public static CriterionUse Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BIDDABLE": return CriterionUse.Biddable;
					case "NEGATIVE": return CriterionUse.Negative;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CriterionUse.", nameof(xmlValue));
				}
			}
		}
		public static class CriterionUserListMembershipStatusExtensions
		{
			public static string ToXmlValue(this CriterionUserListMembershipStatus enumValue)
			{
				switch (enumValue)
				{
					case CriterionUserListMembershipStatus.Open: return "OPEN";
					case CriterionUserListMembershipStatus.Closed: return "CLOSED";
					default: return null;
				}
			}
			public static CriterionUserListMembershipStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OPEN": return CriterionUserListMembershipStatus.Open;
					case "CLOSED": return CriterionUserListMembershipStatus.Closed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CriterionUserListMembershipStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CurrencyCodeErrorReasonExtensions
		{
			public static string ToXmlValue(this CurrencyCodeErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CurrencyCodeErrorReason.UnsupportedCurrencyCode: return "UNSUPPORTED_CURRENCY_CODE";
					default: return null;
				}
			}
			public static CurrencyCodeErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNSUPPORTED_CURRENCY_CODE": return CurrencyCodeErrorReason.UnsupportedCurrencyCode;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CurrencyCodeErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CustomerErrorReasonExtensions
		{
			public static string ToXmlValue(this CustomerErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CustomerErrorReason.InvalidServiceLink: return "INVALID_SERVICE_LINK";
					case CustomerErrorReason.InvalidStatus: return "INVALID_STATUS";
					case CustomerErrorReason.Temporary: return "TEMPORARY";
					case CustomerErrorReason.AccountNotSetUp: return "ACCOUNT_NOT_SET_UP";
					default: return null;
				}
			}
			public static CustomerErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_SERVICE_LINK": return CustomerErrorReason.InvalidServiceLink;
					case "INVALID_STATUS": return CustomerErrorReason.InvalidStatus;
					case "TEMPORARY": return CustomerErrorReason.Temporary;
					case "ACCOUNT_NOT_SET_UP": return CustomerErrorReason.AccountNotSetUp;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CustomerErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CustomerFeedErrorReasonExtensions
		{
			public static string ToXmlValue(this CustomerFeedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CustomerFeedErrorReason.FeedAlreadyExistsForPlaceholderType: return "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case CustomerFeedErrorReason.InvalidId: return "INVALID_ID";
					case CustomerFeedErrorReason.CannotAddForDeletedFeed: return "CANNOT_ADD_FOR_DELETED_FEED";
					case CustomerFeedErrorReason.CannotAddAlreadyExistingCustomerFeed: return "CANNOT_ADD_ALREADY_EXISTING_CUSTOMER_FEED";
					case CustomerFeedErrorReason.CannotModifyRemovedCustomerFeed: return "CANNOT_MODIFY_REMOVED_CUSTOMER_FEED";
					case CustomerFeedErrorReason.InvalidPlaceholderTypes: return "INVALID_PLACEHOLDER_TYPES";
					case CustomerFeedErrorReason.MissingFeedmappingForPlaceholderType: return "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE";
					case CustomerFeedErrorReason.PlaceholderTypeNotAllowedOnCustomerFeed: return "PLACEHOLDER_TYPE_NOT_ALLOWED_ON_CUSTOMER_FEED";
					case CustomerFeedErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CustomerFeedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return CustomerFeedErrorReason.FeedAlreadyExistsForPlaceholderType;
					case "INVALID_ID": return CustomerFeedErrorReason.InvalidId;
					case "CANNOT_ADD_FOR_DELETED_FEED": return CustomerFeedErrorReason.CannotAddForDeletedFeed;
					case "CANNOT_ADD_ALREADY_EXISTING_CUSTOMER_FEED": return CustomerFeedErrorReason.CannotAddAlreadyExistingCustomerFeed;
					case "CANNOT_MODIFY_REMOVED_CUSTOMER_FEED": return CustomerFeedErrorReason.CannotModifyRemovedCustomerFeed;
					case "INVALID_PLACEHOLDER_TYPES": return CustomerFeedErrorReason.InvalidPlaceholderTypes;
					case "MISSING_FEEDMAPPING_FOR_PLACEHOLDER_TYPE": return CustomerFeedErrorReason.MissingFeedmappingForPlaceholderType;
					case "PLACEHOLDER_TYPE_NOT_ALLOWED_ON_CUSTOMER_FEED": return CustomerFeedErrorReason.PlaceholderTypeNotAllowedOnCustomerFeed;
					case "UNKNOWN": return CustomerFeedErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CustomerFeedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CustomerFeedStatusExtensions
		{
			public static string ToXmlValue(this CustomerFeedStatus enumValue)
			{
				switch (enumValue)
				{
					case CustomerFeedStatus.Enabled: return "ENABLED";
					case CustomerFeedStatus.Removed: return "REMOVED";
					case CustomerFeedStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CustomerFeedStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return CustomerFeedStatus.Enabled;
					case "REMOVED": return CustomerFeedStatus.Removed;
					case "UNKNOWN": return CustomerFeedStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CustomerFeedStatus.", nameof(xmlValue));
				}
			}
		}
		public static class CustomerOrderLineErrorReasonExtensions
		{
			public static string ToXmlValue(this CustomerOrderLineErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CustomerOrderLineErrorReason.InvalidOrderLineId: return "INVALID_ORDER_LINE_ID";
					case CustomerOrderLineErrorReason.EndDateBeforeStartDate: return "END_DATE_BEFORE_START_DATE";
					case CustomerOrderLineErrorReason.NegativeSpend: return "NEGATIVE_SPEND";
					case CustomerOrderLineErrorReason.CreateInPast: return "CREATE_IN_PAST";
					case CustomerOrderLineErrorReason.AlreadyStarted: return "ALREADY_STARTED";
					case CustomerOrderLineErrorReason.AlreadySpent: return "ALREADY_SPENT";
					case CustomerOrderLineErrorReason.FinishedInThePast: return "FINISHED_IN_THE_PAST";
					case CustomerOrderLineErrorReason.CancelActive: return "CANCEL_ACTIVE";
					case CustomerOrderLineErrorReason.OverlapDateRange: return "OVERLAP_DATE_RANGE";
					case CustomerOrderLineErrorReason.CosChange: return "COS_CHANGE";
					case CustomerOrderLineErrorReason.NonAdwords: return "NON_ADWORDS";
					case CustomerOrderLineErrorReason.StartDateAfterActual: return "START_DATE_AFTER_ACTUAL";
					case CustomerOrderLineErrorReason.EndDatePastMax: return "END_DATE_PAST_MAX";
					case CustomerOrderLineErrorReason.ParentIsSelf: return "PARENT_IS_SELF";
					case CustomerOrderLineErrorReason.CannotCancelNew: return "CANNOT_CANCEL_NEW";
					case CustomerOrderLineErrorReason.CannotCancelStarted: return "CANNOT_CANCEL_STARTED";
					case CustomerOrderLineErrorReason.CannotPromoteNonPendingOrderline: return "CANNOT_PROMOTE_NON_PENDING_ORDERLINE";
					case CustomerOrderLineErrorReason.UpdateOrderlineWillShiftCurrent: return "UPDATE_ORDERLINE_WILL_SHIFT_CURRENT";
					case CustomerOrderLineErrorReason.OrderlineBeingModifiedIsNotNormalOrPending: return "ORDERLINE_BEING_MODIFIED_IS_NOT_NORMAL_OR_PENDING";
					case CustomerOrderLineErrorReason.InvalidStatusChange: return "INVALID_STATUS_CHANGE";
					case CustomerOrderLineErrorReason.MoreThanOneOperationNotPermitted: return "MORE_THAN_ONE_OPERATION_NOT_PERMITTED";
					case CustomerOrderLineErrorReason.InvalidTimezoneInDateRanges: return "INVALID_TIMEZONE_IN_DATE_RANGES";
					case CustomerOrderLineErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static CustomerOrderLineErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_ORDER_LINE_ID": return CustomerOrderLineErrorReason.InvalidOrderLineId;
					case "END_DATE_BEFORE_START_DATE": return CustomerOrderLineErrorReason.EndDateBeforeStartDate;
					case "NEGATIVE_SPEND": return CustomerOrderLineErrorReason.NegativeSpend;
					case "CREATE_IN_PAST": return CustomerOrderLineErrorReason.CreateInPast;
					case "ALREADY_STARTED": return CustomerOrderLineErrorReason.AlreadyStarted;
					case "ALREADY_SPENT": return CustomerOrderLineErrorReason.AlreadySpent;
					case "FINISHED_IN_THE_PAST": return CustomerOrderLineErrorReason.FinishedInThePast;
					case "CANCEL_ACTIVE": return CustomerOrderLineErrorReason.CancelActive;
					case "OVERLAP_DATE_RANGE": return CustomerOrderLineErrorReason.OverlapDateRange;
					case "COS_CHANGE": return CustomerOrderLineErrorReason.CosChange;
					case "NON_ADWORDS": return CustomerOrderLineErrorReason.NonAdwords;
					case "START_DATE_AFTER_ACTUAL": return CustomerOrderLineErrorReason.StartDateAfterActual;
					case "END_DATE_PAST_MAX": return CustomerOrderLineErrorReason.EndDatePastMax;
					case "PARENT_IS_SELF": return CustomerOrderLineErrorReason.ParentIsSelf;
					case "CANNOT_CANCEL_NEW": return CustomerOrderLineErrorReason.CannotCancelNew;
					case "CANNOT_CANCEL_STARTED": return CustomerOrderLineErrorReason.CannotCancelStarted;
					case "CANNOT_PROMOTE_NON_PENDING_ORDERLINE": return CustomerOrderLineErrorReason.CannotPromoteNonPendingOrderline;
					case "UPDATE_ORDERLINE_WILL_SHIFT_CURRENT": return CustomerOrderLineErrorReason.UpdateOrderlineWillShiftCurrent;
					case "ORDERLINE_BEING_MODIFIED_IS_NOT_NORMAL_OR_PENDING": return CustomerOrderLineErrorReason.OrderlineBeingModifiedIsNotNormalOrPending;
					case "INVALID_STATUS_CHANGE": return CustomerOrderLineErrorReason.InvalidStatusChange;
					case "MORE_THAN_ONE_OPERATION_NOT_PERMITTED": return CustomerOrderLineErrorReason.MoreThanOneOperationNotPermitted;
					case "INVALID_TIMEZONE_IN_DATE_RANGES": return CustomerOrderLineErrorReason.InvalidTimezoneInDateRanges;
					case "UNKNOWN": return CustomerOrderLineErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CustomerOrderLineErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class CustomerSyncErrorReasonExtensions
		{
			public static string ToXmlValue(this CustomerSyncErrorReason enumValue)
			{
				switch (enumValue)
				{
					case CustomerSyncErrorReason.InvalidCampaignId: return "INVALID_CAMPAIGN_ID";
					case CustomerSyncErrorReason.InvalidFeedId: return "INVALID_FEED_ID";
					case CustomerSyncErrorReason.InvalidDateRange: return "INVALID_DATE_RANGE";
					case CustomerSyncErrorReason.TooManyChanges: return "TOO_MANY_CHANGES";
					default: return null;
				}
			}
			public static CustomerSyncErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_CAMPAIGN_ID": return CustomerSyncErrorReason.InvalidCampaignId;
					case "INVALID_FEED_ID": return CustomerSyncErrorReason.InvalidFeedId;
					case "INVALID_DATE_RANGE": return CustomerSyncErrorReason.InvalidDateRange;
					case "TOO_MANY_CHANGES": return CustomerSyncErrorReason.TooManyChanges;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type CustomerSyncErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DatabaseErrorReasonExtensions
		{
			public static string ToXmlValue(this DatabaseErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DatabaseErrorReason.ConcurrentModification: return "CONCURRENT_MODIFICATION";
					case DatabaseErrorReason.PermissionDenied: return "PERMISSION_DENIED";
					case DatabaseErrorReason.AccessProhibited: return "ACCESS_PROHIBITED";
					case DatabaseErrorReason.CampaignProductNotSupported: return "CAMPAIGN_PRODUCT_NOT_SUPPORTED";
					case DatabaseErrorReason.DuplicateKey: return "DUPLICATE_KEY";
					case DatabaseErrorReason.DatabaseError: return "DATABASE_ERROR";
					case DatabaseErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static DatabaseErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CONCURRENT_MODIFICATION": return DatabaseErrorReason.ConcurrentModification;
					case "PERMISSION_DENIED": return DatabaseErrorReason.PermissionDenied;
					case "ACCESS_PROHIBITED": return DatabaseErrorReason.AccessProhibited;
					case "CAMPAIGN_PRODUCT_NOT_SUPPORTED": return DatabaseErrorReason.CampaignProductNotSupported;
					case "DUPLICATE_KEY": return DatabaseErrorReason.DuplicateKey;
					case "DATABASE_ERROR": return DatabaseErrorReason.DatabaseError;
					case "UNKNOWN": return DatabaseErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DatabaseErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DataDrivenModelStatusExtensions
		{
			public static string ToXmlValue(this DataDrivenModelStatus enumValue)
			{
				switch (enumValue)
				{
					case DataDrivenModelStatus.Unknown: return "UNKNOWN";
					case DataDrivenModelStatus.Available: return "AVAILABLE";
					case DataDrivenModelStatus.Stale: return "STALE";
					case DataDrivenModelStatus.Expired: return "EXPIRED";
					case DataDrivenModelStatus.NeverGenerated: return "NEVER_GENERATED";
					default: return null;
				}
			}
			public static DataDrivenModelStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return DataDrivenModelStatus.Unknown;
					case "AVAILABLE": return DataDrivenModelStatus.Available;
					case "STALE": return DataDrivenModelStatus.Stale;
					case "EXPIRED": return DataDrivenModelStatus.Expired;
					case "NEVER_GENERATED": return DataDrivenModelStatus.NeverGenerated;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DataDrivenModelStatus.", nameof(xmlValue));
				}
			}
		}
		public static class DataErrorReasonExtensions
		{
			public static string ToXmlValue(this DataErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DataErrorReason.CannotCreateTableEntry: return "CANNOT_CREATE_TABLE_ENTRY";
					case DataErrorReason.NoTableEntryClassForViewType: return "NO_TABLE_ENTRY_CLASS_FOR_VIEW_TYPE";
					case DataErrorReason.TableServiceError: return "TABLE_SERVICE_ERROR";
					default: return null;
				}
			}
			public static DataErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_CREATE_TABLE_ENTRY": return DataErrorReason.CannotCreateTableEntry;
					case "NO_TABLE_ENTRY_CLASS_FOR_VIEW_TYPE": return DataErrorReason.NoTableEntryClassForViewType;
					case "TABLE_SERVICE_ERROR": return DataErrorReason.TableServiceError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DataErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DateErrorReasonExtensions
		{
			public static string ToXmlValue(this DateErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DateErrorReason.InvalidFieldValuesInDate: return "INVALID_FIELD_VALUES_IN_DATE";
					case DateErrorReason.InvalidFieldValuesInDateTime: return "INVALID_FIELD_VALUES_IN_DATE_TIME";
					case DateErrorReason.InvalidStringDate: return "INVALID_STRING_DATE";
					case DateErrorReason.InvalidStringDateRange: return "INVALID_STRING_DATE_RANGE";
					case DateErrorReason.InvalidStringDateTime: return "INVALID_STRING_DATE_TIME";
					case DateErrorReason.EarlierThanMinimumDate: return "EARLIER_THAN_MINIMUM_DATE";
					case DateErrorReason.LaterThanMaximumDate: return "LATER_THAN_MAXIMUM_DATE";
					case DateErrorReason.DateRangeMinimumDateLaterThanMaximumDate: return "DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE";
					case DateErrorReason.DateRangeMinimumAndMaximumDatesBothNull: return "DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL";
					default: return null;
				}
			}
			public static DateErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_FIELD_VALUES_IN_DATE": return DateErrorReason.InvalidFieldValuesInDate;
					case "INVALID_FIELD_VALUES_IN_DATE_TIME": return DateErrorReason.InvalidFieldValuesInDateTime;
					case "INVALID_STRING_DATE": return DateErrorReason.InvalidStringDate;
					case "INVALID_STRING_DATE_RANGE": return DateErrorReason.InvalidStringDateRange;
					case "INVALID_STRING_DATE_TIME": return DateErrorReason.InvalidStringDateTime;
					case "EARLIER_THAN_MINIMUM_DATE": return DateErrorReason.EarlierThanMinimumDate;
					case "LATER_THAN_MAXIMUM_DATE": return DateErrorReason.LaterThanMaximumDate;
					case "DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE": return DateErrorReason.DateRangeMinimumDateLaterThanMaximumDate;
					case "DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL": return DateErrorReason.DateRangeMinimumAndMaximumDatesBothNull;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DateErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DateRangeErrorReasonExtensions
		{
			public static string ToXmlValue(this DateRangeErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DateRangeErrorReason.DateRangeError: return "DATE_RANGE_ERROR";
					case DateRangeErrorReason.InvalidDate: return "INVALID_DATE";
					case DateRangeErrorReason.StartDateAfterEndDate: return "START_DATE_AFTER_END_DATE";
					case DateRangeErrorReason.CannotSetDateToPast: return "CANNOT_SET_DATE_TO_PAST";
					case DateRangeErrorReason.AfterMaximumAllowableDate: return "AFTER_MAXIMUM_ALLOWABLE_DATE";
					case DateRangeErrorReason.CannotModifyStartDateIfAlreadyStarted: return "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED";
					default: return null;
				}
			}
			public static DateRangeErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DATE_RANGE_ERROR": return DateRangeErrorReason.DateRangeError;
					case "INVALID_DATE": return DateRangeErrorReason.InvalidDate;
					case "START_DATE_AFTER_END_DATE": return DateRangeErrorReason.StartDateAfterEndDate;
					case "CANNOT_SET_DATE_TO_PAST": return DateRangeErrorReason.CannotSetDateToPast;
					case "AFTER_MAXIMUM_ALLOWABLE_DATE": return DateRangeErrorReason.AfterMaximumAllowableDate;
					case "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED": return DateRangeErrorReason.CannotModifyStartDateIfAlreadyStarted;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DateRangeErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DateRuleItemDateOperatorExtensions
		{
			public static string ToXmlValue(this DateRuleItemDateOperator enumValue)
			{
				switch (enumValue)
				{
					case DateRuleItemDateOperator.Unknown: return "UNKNOWN";
					case DateRuleItemDateOperator.Equals: return "EQUALS";
					case DateRuleItemDateOperator.NotEqual: return "NOT_EQUAL";
					case DateRuleItemDateOperator.Before: return "BEFORE";
					case DateRuleItemDateOperator.After: return "AFTER";
					default: return null;
				}
			}
			public static DateRuleItemDateOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return DateRuleItemDateOperator.Unknown;
					case "EQUALS": return DateRuleItemDateOperator.Equals;
					case "NOT_EQUAL": return DateRuleItemDateOperator.NotEqual;
					case "BEFORE": return DateRuleItemDateOperator.Before;
					case "AFTER": return DateRuleItemDateOperator.After;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DateRuleItemDateOperator.", nameof(xmlValue));
				}
			}
		}
		public static class DayOfWeekExtensions
		{
			public static string ToXmlValue(this DayOfWeek enumValue)
			{
				switch (enumValue)
				{
					case DayOfWeek.Monday: return "MONDAY";
					case DayOfWeek.Tuesday: return "TUESDAY";
					case DayOfWeek.Wednesday: return "WEDNESDAY";
					case DayOfWeek.Thursday: return "THURSDAY";
					case DayOfWeek.Friday: return "FRIDAY";
					case DayOfWeek.Saturday: return "SATURDAY";
					case DayOfWeek.Sunday: return "SUNDAY";
					default: return null;
				}
			}
			public static DayOfWeek Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "MONDAY": return DayOfWeek.Monday;
					case "TUESDAY": return DayOfWeek.Tuesday;
					case "WEDNESDAY": return DayOfWeek.Wednesday;
					case "THURSDAY": return DayOfWeek.Thursday;
					case "FRIDAY": return DayOfWeek.Friday;
					case "SATURDAY": return DayOfWeek.Saturday;
					case "SUNDAY": return DayOfWeek.Sunday;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DayOfWeek.", nameof(xmlValue));
				}
			}
		}
		public static class DeprecatedAdTypeExtensions
		{
			public static string ToXmlValue(this DeprecatedAdType enumValue)
			{
				switch (enumValue)
				{
					case DeprecatedAdType.Video: return "VIDEO";
					case DeprecatedAdType.ClickToCall: return "CLICK_TO_CALL";
					case DeprecatedAdType.InStreamVideo: return "IN_STREAM_VIDEO";
					case DeprecatedAdType.Froogle: return "FROOGLE";
					case DeprecatedAdType.TextLink: return "TEXT_LINK";
					case DeprecatedAdType.Gadget: return "GADGET";
					case DeprecatedAdType.Print: return "PRINT";
					case DeprecatedAdType.TextWide: return "TEXT_WIDE";
					case DeprecatedAdType.GadgetTemplate: return "GADGET_TEMPLATE";
					case DeprecatedAdType.TextWithVideo: return "TEXT_WITH_VIDEO";
					case DeprecatedAdType.Audio: return "AUDIO";
					case DeprecatedAdType.LocalBusinessAd: return "LOCAL_BUSINESS_AD";
					case DeprecatedAdType.AudioTemplate: return "AUDIO_TEMPLATE";
					case DeprecatedAdType.MobileAd: return "MOBILE_AD";
					case DeprecatedAdType.MobileImageAd: return "MOBILE_IMAGE_AD";
					case DeprecatedAdType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static DeprecatedAdType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "VIDEO": return DeprecatedAdType.Video;
					case "CLICK_TO_CALL": return DeprecatedAdType.ClickToCall;
					case "IN_STREAM_VIDEO": return DeprecatedAdType.InStreamVideo;
					case "FROOGLE": return DeprecatedAdType.Froogle;
					case "TEXT_LINK": return DeprecatedAdType.TextLink;
					case "GADGET": return DeprecatedAdType.Gadget;
					case "PRINT": return DeprecatedAdType.Print;
					case "TEXT_WIDE": return DeprecatedAdType.TextWide;
					case "GADGET_TEMPLATE": return DeprecatedAdType.GadgetTemplate;
					case "TEXT_WITH_VIDEO": return DeprecatedAdType.TextWithVideo;
					case "AUDIO": return DeprecatedAdType.Audio;
					case "LOCAL_BUSINESS_AD": return DeprecatedAdType.LocalBusinessAd;
					case "AUDIO_TEMPLATE": return DeprecatedAdType.AudioTemplate;
					case "MOBILE_AD": return DeprecatedAdType.MobileAd;
					case "MOBILE_IMAGE_AD": return DeprecatedAdType.MobileImageAd;
					case "UNKNOWN": return DeprecatedAdType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DeprecatedAdType.", nameof(xmlValue));
				}
			}
		}
		public static class DistinctErrorReasonExtensions
		{
			public static string ToXmlValue(this DistinctErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DistinctErrorReason.DuplicateElement: return "DUPLICATE_ELEMENT";
					case DistinctErrorReason.DuplicateType: return "DUPLICATE_TYPE";
					default: return null;
				}
			}
			public static DistinctErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_ELEMENT": return DistinctErrorReason.DuplicateElement;
					case "DUPLICATE_TYPE": return DistinctErrorReason.DuplicateType;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DistinctErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DownloadFormatExtensions
		{
			public static string ToXmlValue(this DownloadFormat enumValue)
			{
				switch (enumValue)
				{
					case DownloadFormat.Csvforexcel: return "CSVFOREXCEL";
					case DownloadFormat.Csv: return "CSV";
					case DownloadFormat.Tsv: return "TSV";
					case DownloadFormat.Xml: return "XML";
					case DownloadFormat.GzippedCsv: return "GZIPPED_CSV";
					case DownloadFormat.GzippedXml: return "GZIPPED_XML";
					default: return null;
				}
			}
			public static DownloadFormat Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CSVFOREXCEL": return DownloadFormat.Csvforexcel;
					case "CSV": return DownloadFormat.Csv;
					case "TSV": return DownloadFormat.Tsv;
					case "XML": return DownloadFormat.Xml;
					case "GZIPPED_CSV": return DownloadFormat.GzippedCsv;
					case "GZIPPED_XML": return DownloadFormat.GzippedXml;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DownloadFormat.", nameof(xmlValue));
				}
			}
		}
		public static class DraftErrorReasonExtensions
		{
			public static string ToXmlValue(this DraftErrorReason enumValue)
			{
				switch (enumValue)
				{
					case DraftErrorReason.CannotChangeArchivedDraft: return "CANNOT_CHANGE_ARCHIVED_DRAFT";
					case DraftErrorReason.CannotChangePromotedDraft: return "CANNOT_CHANGE_PROMOTED_DRAFT";
					case DraftErrorReason.CannotChangePromoteFailedDraft: return "CANNOT_CHANGE_PROMOTE_FAILED_DRAFT";
					case DraftErrorReason.CustomerCannotCreateDraft: return "CUSTOMER_CANNOT_CREATE_DRAFT";
					case DraftErrorReason.CampaignCannotCreateDraft: return "CAMPAIGN_CANNOT_CREATE_DRAFT";
					case DraftErrorReason.DuplicateDraftName: return "DUPLICATE_DRAFT_NAME";
					case DraftErrorReason.InvalidDraftChange: return "INVALID_DRAFT_CHANGE";
					case DraftErrorReason.InvalidStatusTransition: return "INVALID_STATUS_TRANSITION";
					case DraftErrorReason.MaxNumberOfDraftsPerCampaignReached: return "MAX_NUMBER_OF_DRAFTS_PER_CAMPAIGN_REACHED";
					case DraftErrorReason.DraftError: return "DRAFT_ERROR";
					default: return null;
				}
			}
			public static DraftErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_CHANGE_ARCHIVED_DRAFT": return DraftErrorReason.CannotChangeArchivedDraft;
					case "CANNOT_CHANGE_PROMOTED_DRAFT": return DraftErrorReason.CannotChangePromotedDraft;
					case "CANNOT_CHANGE_PROMOTE_FAILED_DRAFT": return DraftErrorReason.CannotChangePromoteFailedDraft;
					case "CUSTOMER_CANNOT_CREATE_DRAFT": return DraftErrorReason.CustomerCannotCreateDraft;
					case "CAMPAIGN_CANNOT_CREATE_DRAFT": return DraftErrorReason.CampaignCannotCreateDraft;
					case "DUPLICATE_DRAFT_NAME": return DraftErrorReason.DuplicateDraftName;
					case "INVALID_DRAFT_CHANGE": return DraftErrorReason.InvalidDraftChange;
					case "INVALID_STATUS_TRANSITION": return DraftErrorReason.InvalidStatusTransition;
					case "MAX_NUMBER_OF_DRAFTS_PER_CAMPAIGN_REACHED": return DraftErrorReason.MaxNumberOfDraftsPerCampaignReached;
					case "DRAFT_ERROR": return DraftErrorReason.DraftError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DraftErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class DraftStatusExtensions
		{
			public static string ToXmlValue(this DraftStatus enumValue)
			{
				switch (enumValue)
				{
					case DraftStatus.Unknown: return "UNKNOWN";
					case DraftStatus.Proposed: return "PROPOSED";
					case DraftStatus.Promoted: return "PROMOTED";
					case DraftStatus.Promoting: return "PROMOTING";
					case DraftStatus.Archived: return "ARCHIVED";
					case DraftStatus.PromoteFailed: return "PROMOTE_FAILED";
					default: return null;
				}
			}
			public static DraftStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return DraftStatus.Unknown;
					case "PROPOSED": return DraftStatus.Proposed;
					case "PROMOTED": return DraftStatus.Promoted;
					case "PROMOTING": return DraftStatus.Promoting;
					case "ARCHIVED": return DraftStatus.Archived;
					case "PROMOTE_FAILED": return DraftStatus.PromoteFailed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type DraftStatus.", nameof(xmlValue));
				}
			}
		}
		public static class EntityAccessDeniedReasonExtensions
		{
			public static string ToXmlValue(this EntityAccessDeniedReason enumValue)
			{
				switch (enumValue)
				{
					case EntityAccessDeniedReason.ReadAccessDenied: return "READ_ACCESS_DENIED";
					case EntityAccessDeniedReason.WriteAccessDenied: return "WRITE_ACCESS_DENIED";
					default: return null;
				}
			}
			public static EntityAccessDeniedReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "READ_ACCESS_DENIED": return EntityAccessDeniedReason.ReadAccessDenied;
					case "WRITE_ACCESS_DENIED": return EntityAccessDeniedReason.WriteAccessDenied;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type EntityAccessDeniedReason.", nameof(xmlValue));
				}
			}
		}
		public static class EntityCountLimitExceededReasonExtensions
		{
			public static string ToXmlValue(this EntityCountLimitExceededReason enumValue)
			{
				switch (enumValue)
				{
					case EntityCountLimitExceededReason.AccountLimit: return "ACCOUNT_LIMIT";
					case EntityCountLimitExceededReason.CampaignLimit: return "CAMPAIGN_LIMIT";
					case EntityCountLimitExceededReason.AdgroupLimit: return "ADGROUP_LIMIT";
					case EntityCountLimitExceededReason.AdGroupAdLimit: return "AD_GROUP_AD_LIMIT";
					case EntityCountLimitExceededReason.AdGroupCriterionLimit: return "AD_GROUP_CRITERION_LIMIT";
					case EntityCountLimitExceededReason.SharedSetLimit: return "SHARED_SET_LIMIT";
					case EntityCountLimitExceededReason.MatchingFunctionLimit: return "MATCHING_FUNCTION_LIMIT";
					case EntityCountLimitExceededReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static EntityCountLimitExceededReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACCOUNT_LIMIT": return EntityCountLimitExceededReason.AccountLimit;
					case "CAMPAIGN_LIMIT": return EntityCountLimitExceededReason.CampaignLimit;
					case "ADGROUP_LIMIT": return EntityCountLimitExceededReason.AdgroupLimit;
					case "AD_GROUP_AD_LIMIT": return EntityCountLimitExceededReason.AdGroupAdLimit;
					case "AD_GROUP_CRITERION_LIMIT": return EntityCountLimitExceededReason.AdGroupCriterionLimit;
					case "SHARED_SET_LIMIT": return EntityCountLimitExceededReason.SharedSetLimit;
					case "MATCHING_FUNCTION_LIMIT": return EntityCountLimitExceededReason.MatchingFunctionLimit;
					case "UNKNOWN": return EntityCountLimitExceededReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type EntityCountLimitExceededReason.", nameof(xmlValue));
				}
			}
		}
		public static class EntityNotFoundReasonExtensions
		{
			public static string ToXmlValue(this EntityNotFoundReason enumValue)
			{
				switch (enumValue)
				{
					case EntityNotFoundReason.InvalidId: return "INVALID_ID";
					default: return null;
				}
			}
			public static EntityNotFoundReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_ID": return EntityNotFoundReason.InvalidId;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type EntityNotFoundReason.", nameof(xmlValue));
				}
			}
		}
		public static class ExtensionSettingErrorReasonExtensions
		{
			public static string ToXmlValue(this ExtensionSettingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ExtensionSettingErrorReason.ExtensionsRequired: return "EXTENSIONS_REQUIRED";
					case ExtensionSettingErrorReason.FeedTypeExtensionTypeMismatch: return "FEED_TYPE_EXTENSION_TYPE_MISMATCH";
					case ExtensionSettingErrorReason.InvalidFeedType: return "INVALID_FEED_TYPE";
					case ExtensionSettingErrorReason.InvalidFeedTypeForCustomerExtensionSetting: return "INVALID_FEED_TYPE_FOR_CUSTOMER_EXTENSION_SETTING";
					case ExtensionSettingErrorReason.CannotChangeFeedItemOnAdd: return "CANNOT_CHANGE_FEED_ITEM_ON_ADD";
					case ExtensionSettingErrorReason.CannotHaveRestrictionOnEmptyGeoTargeting: return "CANNOT_HAVE_RESTRICTION_ON_EMPTY_GEO_TARGETING";
					case ExtensionSettingErrorReason.CannotUpdateNewlyAddedExtension: return "CANNOT_UPDATE_NEWLY_ADDED_EXTENSION";
					case ExtensionSettingErrorReason.NoExistingAdGroupExtensionSettingForType: return "NO_EXISTING_AD_GROUP_EXTENSION_SETTING_FOR_TYPE";
					case ExtensionSettingErrorReason.NoExistingCampaignExtensionSettingForType: return "NO_EXISTING_CAMPAIGN_EXTENSION_SETTING_FOR_TYPE";
					case ExtensionSettingErrorReason.NoExistingCustomerExtensionSettingForType: return "NO_EXISTING_CUSTOMER_EXTENSION_SETTING_FOR_TYPE";
					case ExtensionSettingErrorReason.AdGroupExtensionSettingAlreadyExists: return "AD_GROUP_EXTENSION_SETTING_ALREADY_EXISTS";
					case ExtensionSettingErrorReason.CampaignExtensionSettingAlreadyExists: return "CAMPAIGN_EXTENSION_SETTING_ALREADY_EXISTS";
					case ExtensionSettingErrorReason.CustomerExtensionSettingAlreadyExists: return "CUSTOMER_EXTENSION_SETTING_ALREADY_EXISTS";
					case ExtensionSettingErrorReason.AdGroupFeedAlreadyExistsForPlaceholderType: return "AD_GROUP_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case ExtensionSettingErrorReason.CampaignFeedAlreadyExistsForPlaceholderType: return "CAMPAIGN_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case ExtensionSettingErrorReason.CustomerFeedAlreadyExistsForPlaceholderType: return "CUSTOMER_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE";
					case ExtensionSettingErrorReason.ValueOutOfRange: return "VALUE_OUT_OF_RANGE";
					case ExtensionSettingErrorReason.CannotSetWithFinalUrls: return "CANNOT_SET_WITH_FINAL_URLS";
					case ExtensionSettingErrorReason.CannotSetWithoutFinalUrls: return "CANNOT_SET_WITHOUT_FINAL_URLS";
					case ExtensionSettingErrorReason.CannotSetBothDestinationUrlAndTrackingUrlTemplate: return "CANNOT_SET_BOTH_DESTINATION_URL_AND_TRACKING_URL_TEMPLATE";
					case ExtensionSettingErrorReason.InvalidPhoneNumber: return "INVALID_PHONE_NUMBER";
					case ExtensionSettingErrorReason.PhoneNumberNotSupportedForCountry: return "PHONE_NUMBER_NOT_SUPPORTED_FOR_COUNTRY";
					case ExtensionSettingErrorReason.CarrierSpecificShortNumberNotAllowed: return "CARRIER_SPECIFIC_SHORT_NUMBER_NOT_ALLOWED";
					case ExtensionSettingErrorReason.PremiumRateNumberNotAllowed: return "PREMIUM_RATE_NUMBER_NOT_ALLOWED";
					case ExtensionSettingErrorReason.DisallowedNumberType: return "DISALLOWED_NUMBER_TYPE";
					case ExtensionSettingErrorReason.InvalidDomesticPhoneNumberFormat: return "INVALID_DOMESTIC_PHONE_NUMBER_FORMAT";
					case ExtensionSettingErrorReason.VanityPhoneNumberNotAllowed: return "VANITY_PHONE_NUMBER_NOT_ALLOWED";
					case ExtensionSettingErrorReason.InvalidCountryCode: return "INVALID_COUNTRY_CODE";
					case ExtensionSettingErrorReason.InvalidCallConversionTypeId: return "INVALID_CALL_CONVERSION_TYPE_ID";
					case ExtensionSettingErrorReason.CustomerNotWhitelistedForCalltracking: return "CUSTOMER_NOT_WHITELISTED_FOR_CALLTRACKING";
					case ExtensionSettingErrorReason.CalltrackingNotSupportedForCountry: return "CALLTRACKING_NOT_SUPPORTED_FOR_COUNTRY";
					case ExtensionSettingErrorReason.InvalidAppId: return "INVALID_APP_ID";
					case ExtensionSettingErrorReason.QuotesInReviewExtensionSnippet: return "QUOTES_IN_REVIEW_EXTENSION_SNIPPET";
					case ExtensionSettingErrorReason.HyphensInReviewExtensionSnippet: return "HYPHENS_IN_REVIEW_EXTENSION_SNIPPET";
					case ExtensionSettingErrorReason.ReviewExtensionSourceIneligible: return "REVIEW_EXTENSION_SOURCE_INELIGIBLE";
					case ExtensionSettingErrorReason.SourceNameInReviewExtensionText: return "SOURCE_NAME_IN_REVIEW_EXTENSION_TEXT";
					case ExtensionSettingErrorReason.MissingField: return "MISSING_FIELD";
					case ExtensionSettingErrorReason.InconsistentCurrencyCodes: return "INCONSISTENT_CURRENCY_CODES";
					case ExtensionSettingErrorReason.PriceExtensionHasDuplicatedHeaders: return "PRICE_EXTENSION_HAS_DUPLICATED_HEADERS";
					case ExtensionSettingErrorReason.PriceItemHasDuplicatedHeaderAndDescription: return "PRICE_ITEM_HAS_DUPLICATED_HEADER_AND_DESCRIPTION";
					case ExtensionSettingErrorReason.PriceExtensionHasTooFewItems: return "PRICE_EXTENSION_HAS_TOO_FEW_ITEMS";
					case ExtensionSettingErrorReason.PriceExtensionHasTooManyItems: return "PRICE_EXTENSION_HAS_TOO_MANY_ITEMS";
					case ExtensionSettingErrorReason.UnsupportedValue: return "UNSUPPORTED_VALUE";
					case ExtensionSettingErrorReason.InvalidDevicePreference: return "INVALID_DEVICE_PREFERENCE";
					case ExtensionSettingErrorReason.InvalidScheduleEnd: return "INVALID_SCHEDULE_END";
					case ExtensionSettingErrorReason.DateTimeMustBeInAccountTimeZone: return "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE";
					case ExtensionSettingErrorReason.OverlappingSchedules: return "OVERLAPPING_SCHEDULES";
					case ExtensionSettingErrorReason.ScheduleEndNotAfterStart: return "SCHEDULE_END_NOT_AFTER_START";
					case ExtensionSettingErrorReason.TooManySchedulesPerDay: return "TOO_MANY_SCHEDULES_PER_DAY";
					case ExtensionSettingErrorReason.DuplicateExtensionFeedItemEdit: return "DUPLICATE_EXTENSION_FEED_ITEM_EDIT";
					case ExtensionSettingErrorReason.InvalidSnippetsHeader: return "INVALID_SNIPPETS_HEADER";
					case ExtensionSettingErrorReason.PhoneNumberNotSupportedWithCalltrackingForCountry: return "PHONE_NUMBER_NOT_SUPPORTED_WITH_CALLTRACKING_FOR_COUNTRY";
					case ExtensionSettingErrorReason.CampaignTargetingMismatch: return "CAMPAIGN_TARGETING_MISMATCH";
					case ExtensionSettingErrorReason.CannotOperateOnDeletedFeed: return "CANNOT_OPERATE_ON_DELETED_FEED";
					case ExtensionSettingErrorReason.ConcreteExtensionTypeRequired: return "CONCRETE_EXTENSION_TYPE_REQUIRED";
					case ExtensionSettingErrorReason.IncompatibleUnderlyingMatchingFunction: return "INCOMPATIBLE_UNDERLYING_MATCHING_FUNCTION";
					case ExtensionSettingErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ExtensionSettingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EXTENSIONS_REQUIRED": return ExtensionSettingErrorReason.ExtensionsRequired;
					case "FEED_TYPE_EXTENSION_TYPE_MISMATCH": return ExtensionSettingErrorReason.FeedTypeExtensionTypeMismatch;
					case "INVALID_FEED_TYPE": return ExtensionSettingErrorReason.InvalidFeedType;
					case "INVALID_FEED_TYPE_FOR_CUSTOMER_EXTENSION_SETTING": return ExtensionSettingErrorReason.InvalidFeedTypeForCustomerExtensionSetting;
					case "CANNOT_CHANGE_FEED_ITEM_ON_ADD": return ExtensionSettingErrorReason.CannotChangeFeedItemOnAdd;
					case "CANNOT_HAVE_RESTRICTION_ON_EMPTY_GEO_TARGETING": return ExtensionSettingErrorReason.CannotHaveRestrictionOnEmptyGeoTargeting;
					case "CANNOT_UPDATE_NEWLY_ADDED_EXTENSION": return ExtensionSettingErrorReason.CannotUpdateNewlyAddedExtension;
					case "NO_EXISTING_AD_GROUP_EXTENSION_SETTING_FOR_TYPE": return ExtensionSettingErrorReason.NoExistingAdGroupExtensionSettingForType;
					case "NO_EXISTING_CAMPAIGN_EXTENSION_SETTING_FOR_TYPE": return ExtensionSettingErrorReason.NoExistingCampaignExtensionSettingForType;
					case "NO_EXISTING_CUSTOMER_EXTENSION_SETTING_FOR_TYPE": return ExtensionSettingErrorReason.NoExistingCustomerExtensionSettingForType;
					case "AD_GROUP_EXTENSION_SETTING_ALREADY_EXISTS": return ExtensionSettingErrorReason.AdGroupExtensionSettingAlreadyExists;
					case "CAMPAIGN_EXTENSION_SETTING_ALREADY_EXISTS": return ExtensionSettingErrorReason.CampaignExtensionSettingAlreadyExists;
					case "CUSTOMER_EXTENSION_SETTING_ALREADY_EXISTS": return ExtensionSettingErrorReason.CustomerExtensionSettingAlreadyExists;
					case "AD_GROUP_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return ExtensionSettingErrorReason.AdGroupFeedAlreadyExistsForPlaceholderType;
					case "CAMPAIGN_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return ExtensionSettingErrorReason.CampaignFeedAlreadyExistsForPlaceholderType;
					case "CUSTOMER_FEED_ALREADY_EXISTS_FOR_PLACEHOLDER_TYPE": return ExtensionSettingErrorReason.CustomerFeedAlreadyExistsForPlaceholderType;
					case "VALUE_OUT_OF_RANGE": return ExtensionSettingErrorReason.ValueOutOfRange;
					case "CANNOT_SET_WITH_FINAL_URLS": return ExtensionSettingErrorReason.CannotSetWithFinalUrls;
					case "CANNOT_SET_WITHOUT_FINAL_URLS": return ExtensionSettingErrorReason.CannotSetWithoutFinalUrls;
					case "CANNOT_SET_BOTH_DESTINATION_URL_AND_TRACKING_URL_TEMPLATE": return ExtensionSettingErrorReason.CannotSetBothDestinationUrlAndTrackingUrlTemplate;
					case "INVALID_PHONE_NUMBER": return ExtensionSettingErrorReason.InvalidPhoneNumber;
					case "PHONE_NUMBER_NOT_SUPPORTED_FOR_COUNTRY": return ExtensionSettingErrorReason.PhoneNumberNotSupportedForCountry;
					case "CARRIER_SPECIFIC_SHORT_NUMBER_NOT_ALLOWED": return ExtensionSettingErrorReason.CarrierSpecificShortNumberNotAllowed;
					case "PREMIUM_RATE_NUMBER_NOT_ALLOWED": return ExtensionSettingErrorReason.PremiumRateNumberNotAllowed;
					case "DISALLOWED_NUMBER_TYPE": return ExtensionSettingErrorReason.DisallowedNumberType;
					case "INVALID_DOMESTIC_PHONE_NUMBER_FORMAT": return ExtensionSettingErrorReason.InvalidDomesticPhoneNumberFormat;
					case "VANITY_PHONE_NUMBER_NOT_ALLOWED": return ExtensionSettingErrorReason.VanityPhoneNumberNotAllowed;
					case "INVALID_COUNTRY_CODE": return ExtensionSettingErrorReason.InvalidCountryCode;
					case "INVALID_CALL_CONVERSION_TYPE_ID": return ExtensionSettingErrorReason.InvalidCallConversionTypeId;
					case "CUSTOMER_NOT_WHITELISTED_FOR_CALLTRACKING": return ExtensionSettingErrorReason.CustomerNotWhitelistedForCalltracking;
					case "CALLTRACKING_NOT_SUPPORTED_FOR_COUNTRY": return ExtensionSettingErrorReason.CalltrackingNotSupportedForCountry;
					case "INVALID_APP_ID": return ExtensionSettingErrorReason.InvalidAppId;
					case "QUOTES_IN_REVIEW_EXTENSION_SNIPPET": return ExtensionSettingErrorReason.QuotesInReviewExtensionSnippet;
					case "HYPHENS_IN_REVIEW_EXTENSION_SNIPPET": return ExtensionSettingErrorReason.HyphensInReviewExtensionSnippet;
					case "REVIEW_EXTENSION_SOURCE_INELIGIBLE": return ExtensionSettingErrorReason.ReviewExtensionSourceIneligible;
					case "SOURCE_NAME_IN_REVIEW_EXTENSION_TEXT": return ExtensionSettingErrorReason.SourceNameInReviewExtensionText;
					case "MISSING_FIELD": return ExtensionSettingErrorReason.MissingField;
					case "INCONSISTENT_CURRENCY_CODES": return ExtensionSettingErrorReason.InconsistentCurrencyCodes;
					case "PRICE_EXTENSION_HAS_DUPLICATED_HEADERS": return ExtensionSettingErrorReason.PriceExtensionHasDuplicatedHeaders;
					case "PRICE_ITEM_HAS_DUPLICATED_HEADER_AND_DESCRIPTION": return ExtensionSettingErrorReason.PriceItemHasDuplicatedHeaderAndDescription;
					case "PRICE_EXTENSION_HAS_TOO_FEW_ITEMS": return ExtensionSettingErrorReason.PriceExtensionHasTooFewItems;
					case "PRICE_EXTENSION_HAS_TOO_MANY_ITEMS": return ExtensionSettingErrorReason.PriceExtensionHasTooManyItems;
					case "UNSUPPORTED_VALUE": return ExtensionSettingErrorReason.UnsupportedValue;
					case "INVALID_DEVICE_PREFERENCE": return ExtensionSettingErrorReason.InvalidDevicePreference;
					case "INVALID_SCHEDULE_END": return ExtensionSettingErrorReason.InvalidScheduleEnd;
					case "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE": return ExtensionSettingErrorReason.DateTimeMustBeInAccountTimeZone;
					case "OVERLAPPING_SCHEDULES": return ExtensionSettingErrorReason.OverlappingSchedules;
					case "SCHEDULE_END_NOT_AFTER_START": return ExtensionSettingErrorReason.ScheduleEndNotAfterStart;
					case "TOO_MANY_SCHEDULES_PER_DAY": return ExtensionSettingErrorReason.TooManySchedulesPerDay;
					case "DUPLICATE_EXTENSION_FEED_ITEM_EDIT": return ExtensionSettingErrorReason.DuplicateExtensionFeedItemEdit;
					case "INVALID_SNIPPETS_HEADER": return ExtensionSettingErrorReason.InvalidSnippetsHeader;
					case "PHONE_NUMBER_NOT_SUPPORTED_WITH_CALLTRACKING_FOR_COUNTRY": return ExtensionSettingErrorReason.PhoneNumberNotSupportedWithCalltrackingForCountry;
					case "CAMPAIGN_TARGETING_MISMATCH": return ExtensionSettingErrorReason.CampaignTargetingMismatch;
					case "CANNOT_OPERATE_ON_DELETED_FEED": return ExtensionSettingErrorReason.CannotOperateOnDeletedFeed;
					case "CONCRETE_EXTENSION_TYPE_REQUIRED": return ExtensionSettingErrorReason.ConcreteExtensionTypeRequired;
					case "INCOMPATIBLE_UNDERLYING_MATCHING_FUNCTION": return ExtensionSettingErrorReason.IncompatibleUnderlyingMatchingFunction;
					case "UNKNOWN": return ExtensionSettingErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ExtensionSettingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ExtensionSettingPlatformExtensions
		{
			public static string ToXmlValue(this ExtensionSettingPlatform enumValue)
			{
				switch (enumValue)
				{
					case ExtensionSettingPlatform.Desktop: return "DESKTOP";
					case ExtensionSettingPlatform.Mobile: return "MOBILE";
					case ExtensionSettingPlatform.None: return "NONE";
					default: return null;
				}
			}
			public static ExtensionSettingPlatform Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DESKTOP": return ExtensionSettingPlatform.Desktop;
					case "MOBILE": return ExtensionSettingPlatform.Mobile;
					case "NONE": return ExtensionSettingPlatform.None;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ExtensionSettingPlatform.", nameof(xmlValue));
				}
			}
		}
		public static class FeedAttributeReferenceErrorReasonExtensions
		{
			public static string ToXmlValue(this FeedAttributeReferenceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FeedAttributeReferenceErrorReason.CannotReferenceDeletedFeed: return "CANNOT_REFERENCE_DELETED_FEED";
					case FeedAttributeReferenceErrorReason.InvalidFeedName: return "INVALID_FEED_NAME";
					case FeedAttributeReferenceErrorReason.InvalidFeedAttributeName: return "INVALID_FEED_ATTRIBUTE_NAME";
					default: return null;
				}
			}
			public static FeedAttributeReferenceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_REFERENCE_DELETED_FEED": return FeedAttributeReferenceErrorReason.CannotReferenceDeletedFeed;
					case "INVALID_FEED_NAME": return FeedAttributeReferenceErrorReason.InvalidFeedName;
					case "INVALID_FEED_ATTRIBUTE_NAME": return FeedAttributeReferenceErrorReason.InvalidFeedAttributeName;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedAttributeReferenceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FeedAttributeTypeExtensions
		{
			public static string ToXmlValue(this FeedAttributeType enumValue)
			{
				switch (enumValue)
				{
					case FeedAttributeType.Int64: return "INT64";
					case FeedAttributeType.Float: return "FLOAT";
					case FeedAttributeType.String: return "STRING";
					case FeedAttributeType.Boolean: return "BOOLEAN";
					case FeedAttributeType.Url: return "URL";
					case FeedAttributeType.DateTime: return "DATE_TIME";
					case FeedAttributeType.Int64List: return "INT64_LIST";
					case FeedAttributeType.FloatList: return "FLOAT_LIST";
					case FeedAttributeType.StringList: return "STRING_LIST";
					case FeedAttributeType.BooleanList: return "BOOLEAN_LIST";
					case FeedAttributeType.UrlList: return "URL_LIST";
					case FeedAttributeType.DateTimeList: return "DATE_TIME_LIST";
					case FeedAttributeType.Price: return "PRICE";
					case FeedAttributeType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedAttributeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INT64": return FeedAttributeType.Int64;
					case "FLOAT": return FeedAttributeType.Float;
					case "STRING": return FeedAttributeType.String;
					case "BOOLEAN": return FeedAttributeType.Boolean;
					case "URL": return FeedAttributeType.Url;
					case "DATE_TIME": return FeedAttributeType.DateTime;
					case "INT64_LIST": return FeedAttributeType.Int64List;
					case "FLOAT_LIST": return FeedAttributeType.FloatList;
					case "STRING_LIST": return FeedAttributeType.StringList;
					case "BOOLEAN_LIST": return FeedAttributeType.BooleanList;
					case "URL_LIST": return FeedAttributeType.UrlList;
					case "DATE_TIME_LIST": return FeedAttributeType.DateTimeList;
					case "PRICE": return FeedAttributeType.Price;
					case "UNKNOWN": return FeedAttributeType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedAttributeType.", nameof(xmlValue));
				}
			}
		}
		public static class FeedErrorReasonExtensions
		{
			public static string ToXmlValue(this FeedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FeedErrorReason.AttributeNamesNotUnique: return "ATTRIBUTE_NAMES_NOT_UNIQUE";
					case FeedErrorReason.AttributesDoNotMatchExistingAttributes: return "ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES";
					case FeedErrorReason.CannotChangeOrigin: return "CANNOT_CHANGE_ORIGIN";
					case FeedErrorReason.CannotSpecifyUserOriginForSystemFeed: return "CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED";
					case FeedErrorReason.CannotSpecifyAdwordsOriginForNonSystemFeed: return "CANNOT_SPECIFY_ADWORDS_ORIGIN_FOR_NON_SYSTEM_FEED";
					case FeedErrorReason.CannotSpecifyFeedAttributesForSystemFeed: return "CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED";
					case FeedErrorReason.CannotUpdateFeedAttributesWithOriginAdwords: return "CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_ADWORDS";
					case FeedErrorReason.FeedRemoved: return "FEED_REMOVED";
					case FeedErrorReason.InvalidOriginValue: return "INVALID_ORIGIN_VALUE";
					case FeedErrorReason.FeedOriginIsNotUser: return "FEED_ORIGIN_IS_NOT_USER";
					case FeedErrorReason.DuplicateFeedName: return "DUPLICATE_FEED_NAME";
					case FeedErrorReason.InvalidFeedName: return "INVALID_FEED_NAME";
					case FeedErrorReason.MissingOauthInfo: return "MISSING_OAUTH_INFO";
					case FeedErrorReason.NewAttributeCannotBePartOfUniqueKey: return "NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY";
					case FeedErrorReason.TooManyFeedAttributesForFeed: return "TOO_MANY_FEED_ATTRIBUTES_FOR_FEED";
					case FeedErrorReason.InvalidBusinessAccount: return "INVALID_BUSINESS_ACCOUNT";
					case FeedErrorReason.BusinessAccountCannotAccessLocationAccount: return "BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT";
					case FeedErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ATTRIBUTE_NAMES_NOT_UNIQUE": return FeedErrorReason.AttributeNamesNotUnique;
					case "ATTRIBUTES_DO_NOT_MATCH_EXISTING_ATTRIBUTES": return FeedErrorReason.AttributesDoNotMatchExistingAttributes;
					case "CANNOT_CHANGE_ORIGIN": return FeedErrorReason.CannotChangeOrigin;
					case "CANNOT_SPECIFY_USER_ORIGIN_FOR_SYSTEM_FEED": return FeedErrorReason.CannotSpecifyUserOriginForSystemFeed;
					case "CANNOT_SPECIFY_ADWORDS_ORIGIN_FOR_NON_SYSTEM_FEED": return FeedErrorReason.CannotSpecifyAdwordsOriginForNonSystemFeed;
					case "CANNOT_SPECIFY_FEED_ATTRIBUTES_FOR_SYSTEM_FEED": return FeedErrorReason.CannotSpecifyFeedAttributesForSystemFeed;
					case "CANNOT_UPDATE_FEED_ATTRIBUTES_WITH_ORIGIN_ADWORDS": return FeedErrorReason.CannotUpdateFeedAttributesWithOriginAdwords;
					case "FEED_REMOVED": return FeedErrorReason.FeedRemoved;
					case "INVALID_ORIGIN_VALUE": return FeedErrorReason.InvalidOriginValue;
					case "FEED_ORIGIN_IS_NOT_USER": return FeedErrorReason.FeedOriginIsNotUser;
					case "DUPLICATE_FEED_NAME": return FeedErrorReason.DuplicateFeedName;
					case "INVALID_FEED_NAME": return FeedErrorReason.InvalidFeedName;
					case "MISSING_OAUTH_INFO": return FeedErrorReason.MissingOauthInfo;
					case "NEW_ATTRIBUTE_CANNOT_BE_PART_OF_UNIQUE_KEY": return FeedErrorReason.NewAttributeCannotBePartOfUniqueKey;
					case "TOO_MANY_FEED_ATTRIBUTES_FOR_FEED": return FeedErrorReason.TooManyFeedAttributesForFeed;
					case "INVALID_BUSINESS_ACCOUNT": return FeedErrorReason.InvalidBusinessAccount;
					case "BUSINESS_ACCOUNT_CANNOT_ACCESS_LOCATION_ACCOUNT": return FeedErrorReason.BusinessAccountCannotAccessLocationAccount;
					case "UNKNOWN": return FeedErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemApprovalStatusExtensions
		{
			public static string ToXmlValue(this FeedItemApprovalStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedItemApprovalStatus.Unchecked: return "UNCHECKED";
					case FeedItemApprovalStatus.Approved: return "APPROVED";
					case FeedItemApprovalStatus.Disapproved: return "DISAPPROVED";
					default: return null;
				}
			}
			public static FeedItemApprovalStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNCHECKED": return FeedItemApprovalStatus.Unchecked;
					case "APPROVED": return FeedItemApprovalStatus.Approved;
					case "DISAPPROVED": return FeedItemApprovalStatus.Disapproved;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemApprovalStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemErrorReasonExtensions
		{
			public static string ToXmlValue(this FeedItemErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FeedItemErrorReason.CampaignTargetingMismatch: return "CAMPAIGN_TARGETING_MISMATCH";
					case FeedItemErrorReason.CannotConvertAttributeValueFromString: return "CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING";
					case FeedItemErrorReason.CannotHaveRestrictionOnEmptyGeoTargeting: return "CANNOT_HAVE_RESTRICTION_ON_EMPTY_GEO_TARGETING";
					case FeedItemErrorReason.CannotOperateOnRemovedFeedItem: return "CANNOT_OPERATE_ON_REMOVED_FEED_ITEM";
					case FeedItemErrorReason.DateTimeMustBeInAccountTimeZone: return "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE";
					case FeedItemErrorReason.KeyAttributesNotFound: return "KEY_ATTRIBUTES_NOT_FOUND";
					case FeedItemErrorReason.InvalidDevicePreference: return "INVALID_DEVICE_PREFERENCE";
					case FeedItemErrorReason.InvalidScheduleEnd: return "INVALID_SCHEDULE_END";
					case FeedItemErrorReason.InvalidUrl: return "INVALID_URL";
					case FeedItemErrorReason.MissingKeyAttributes: return "MISSING_KEY_ATTRIBUTES";
					case FeedItemErrorReason.KeyAttributesNotUnique: return "KEY_ATTRIBUTES_NOT_UNIQUE";
					case FeedItemErrorReason.CannotModifyKeyAttributeValue: return "CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE";
					case FeedItemErrorReason.OverlappingSchedules: return "OVERLAPPING_SCHEDULES";
					case FeedItemErrorReason.ScheduleEndNotAfterStart: return "SCHEDULE_END_NOT_AFTER_START";
					case FeedItemErrorReason.TooManySchedulesPerDay: return "TOO_MANY_SCHEDULES_PER_DAY";
					case FeedItemErrorReason.SizeTooLargeForMultiValueAttribute: return "SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE";
					case FeedItemErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedItemErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CAMPAIGN_TARGETING_MISMATCH": return FeedItemErrorReason.CampaignTargetingMismatch;
					case "CANNOT_CONVERT_ATTRIBUTE_VALUE_FROM_STRING": return FeedItemErrorReason.CannotConvertAttributeValueFromString;
					case "CANNOT_HAVE_RESTRICTION_ON_EMPTY_GEO_TARGETING": return FeedItemErrorReason.CannotHaveRestrictionOnEmptyGeoTargeting;
					case "CANNOT_OPERATE_ON_REMOVED_FEED_ITEM": return FeedItemErrorReason.CannotOperateOnRemovedFeedItem;
					case "DATE_TIME_MUST_BE_IN_ACCOUNT_TIME_ZONE": return FeedItemErrorReason.DateTimeMustBeInAccountTimeZone;
					case "KEY_ATTRIBUTES_NOT_FOUND": return FeedItemErrorReason.KeyAttributesNotFound;
					case "INVALID_DEVICE_PREFERENCE": return FeedItemErrorReason.InvalidDevicePreference;
					case "INVALID_SCHEDULE_END": return FeedItemErrorReason.InvalidScheduleEnd;
					case "INVALID_URL": return FeedItemErrorReason.InvalidUrl;
					case "MISSING_KEY_ATTRIBUTES": return FeedItemErrorReason.MissingKeyAttributes;
					case "KEY_ATTRIBUTES_NOT_UNIQUE": return FeedItemErrorReason.KeyAttributesNotUnique;
					case "CANNOT_MODIFY_KEY_ATTRIBUTE_VALUE": return FeedItemErrorReason.CannotModifyKeyAttributeValue;
					case "OVERLAPPING_SCHEDULES": return FeedItemErrorReason.OverlappingSchedules;
					case "SCHEDULE_END_NOT_AFTER_START": return FeedItemErrorReason.ScheduleEndNotAfterStart;
					case "TOO_MANY_SCHEDULES_PER_DAY": return FeedItemErrorReason.TooManySchedulesPerDay;
					case "SIZE_TOO_LARGE_FOR_MULTI_VALUE_ATTRIBUTE": return FeedItemErrorReason.SizeTooLargeForMultiValueAttribute;
					case "UNKNOWN": return FeedItemErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemQualityApprovalStatusExtensions
		{
			public static string ToXmlValue(this FeedItemQualityApprovalStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedItemQualityApprovalStatus.Unknown: return "UNKNOWN";
					case FeedItemQualityApprovalStatus.Approved: return "APPROVED";
					case FeedItemQualityApprovalStatus.Disapproved: return "DISAPPROVED";
					default: return null;
				}
			}
			public static FeedItemQualityApprovalStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return FeedItemQualityApprovalStatus.Unknown;
					case "APPROVED": return FeedItemQualityApprovalStatus.Approved;
					case "DISAPPROVED": return FeedItemQualityApprovalStatus.Disapproved;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemQualityApprovalStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemQualityDisapprovalReasonsExtensions
		{
			public static string ToXmlValue(this FeedItemQualityDisapprovalReasons enumValue)
			{
				switch (enumValue)
				{
					case FeedItemQualityDisapprovalReasons.Unknown: return "UNKNOWN";
					case FeedItemQualityDisapprovalReasons.TableRepetitiveHeaders: return "TABLE_REPETITIVE_HEADERS";
					case FeedItemQualityDisapprovalReasons.TableRepetitiveDescription: return "TABLE_REPETITIVE_DESCRIPTION";
					case FeedItemQualityDisapprovalReasons.TableInconsistentRows: return "TABLE_INCONSISTENT_ROWS";
					case FeedItemQualityDisapprovalReasons.DescriptionHasPriceQualifiers: return "DESCRIPTION_HAS_PRICE_QUALIFIERS";
					case FeedItemQualityDisapprovalReasons.UnsupportedLanguage: return "UNSUPPORTED_LANGUAGE";
					case FeedItemQualityDisapprovalReasons.TableRowHeaderTableTypeMismatch: return "TABLE_ROW_HEADER_TABLE_TYPE_MISMATCH";
					case FeedItemQualityDisapprovalReasons.TableRowHeaderHasPromotionalText: return "TABLE_ROW_HEADER_HAS_PROMOTIONAL_TEXT";
					case FeedItemQualityDisapprovalReasons.TableRowDescriptionNotRelevant: return "TABLE_ROW_DESCRIPTION_NOT_RELEVANT";
					case FeedItemQualityDisapprovalReasons.TableRowDescriptionHasPromotionalText: return "TABLE_ROW_DESCRIPTION_HAS_PROMOTIONAL_TEXT";
					case FeedItemQualityDisapprovalReasons.TableRowHeaderDescriptionRepetitive: return "TABLE_ROW_HEADER_DESCRIPTION_REPETITIVE";
					case FeedItemQualityDisapprovalReasons.TableRowUnrateable: return "TABLE_ROW_UNRATEABLE";
					case FeedItemQualityDisapprovalReasons.TableRowPriceInvalid: return "TABLE_ROW_PRICE_INVALID";
					case FeedItemQualityDisapprovalReasons.TableRowUrlInvalid: return "TABLE_ROW_URL_INVALID";
					case FeedItemQualityDisapprovalReasons.HeaderOrDescriptionHasPrice: return "HEADER_OR_DESCRIPTION_HAS_PRICE";
					case FeedItemQualityDisapprovalReasons.StructuredSnippetsHeaderPolicyViolated: return "STRUCTURED_SNIPPETS_HEADER_POLICY_VIOLATED";
					case FeedItemQualityDisapprovalReasons.StructuredSnippetsRepeatedValues: return "STRUCTURED_SNIPPETS_REPEATED_VALUES";
					case FeedItemQualityDisapprovalReasons.StructuredSnippetsEditorialGuidelines: return "STRUCTURED_SNIPPETS_EDITORIAL_GUIDELINES";
					case FeedItemQualityDisapprovalReasons.StructuredSnippetsHasPromotionalText: return "STRUCTURED_SNIPPETS_HAS_PROMOTIONAL_TEXT";
					default: return null;
				}
			}
			public static FeedItemQualityDisapprovalReasons Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return FeedItemQualityDisapprovalReasons.Unknown;
					case "TABLE_REPETITIVE_HEADERS": return FeedItemQualityDisapprovalReasons.TableRepetitiveHeaders;
					case "TABLE_REPETITIVE_DESCRIPTION": return FeedItemQualityDisapprovalReasons.TableRepetitiveDescription;
					case "TABLE_INCONSISTENT_ROWS": return FeedItemQualityDisapprovalReasons.TableInconsistentRows;
					case "DESCRIPTION_HAS_PRICE_QUALIFIERS": return FeedItemQualityDisapprovalReasons.DescriptionHasPriceQualifiers;
					case "UNSUPPORTED_LANGUAGE": return FeedItemQualityDisapprovalReasons.UnsupportedLanguage;
					case "TABLE_ROW_HEADER_TABLE_TYPE_MISMATCH": return FeedItemQualityDisapprovalReasons.TableRowHeaderTableTypeMismatch;
					case "TABLE_ROW_HEADER_HAS_PROMOTIONAL_TEXT": return FeedItemQualityDisapprovalReasons.TableRowHeaderHasPromotionalText;
					case "TABLE_ROW_DESCRIPTION_NOT_RELEVANT": return FeedItemQualityDisapprovalReasons.TableRowDescriptionNotRelevant;
					case "TABLE_ROW_DESCRIPTION_HAS_PROMOTIONAL_TEXT": return FeedItemQualityDisapprovalReasons.TableRowDescriptionHasPromotionalText;
					case "TABLE_ROW_HEADER_DESCRIPTION_REPETITIVE": return FeedItemQualityDisapprovalReasons.TableRowHeaderDescriptionRepetitive;
					case "TABLE_ROW_UNRATEABLE": return FeedItemQualityDisapprovalReasons.TableRowUnrateable;
					case "TABLE_ROW_PRICE_INVALID": return FeedItemQualityDisapprovalReasons.TableRowPriceInvalid;
					case "TABLE_ROW_URL_INVALID": return FeedItemQualityDisapprovalReasons.TableRowUrlInvalid;
					case "HEADER_OR_DESCRIPTION_HAS_PRICE": return FeedItemQualityDisapprovalReasons.HeaderOrDescriptionHasPrice;
					case "STRUCTURED_SNIPPETS_HEADER_POLICY_VIOLATED": return FeedItemQualityDisapprovalReasons.StructuredSnippetsHeaderPolicyViolated;
					case "STRUCTURED_SNIPPETS_REPEATED_VALUES": return FeedItemQualityDisapprovalReasons.StructuredSnippetsRepeatedValues;
					case "STRUCTURED_SNIPPETS_EDITORIAL_GUIDELINES": return FeedItemQualityDisapprovalReasons.StructuredSnippetsEditorialGuidelines;
					case "STRUCTURED_SNIPPETS_HAS_PROMOTIONAL_TEXT": return FeedItemQualityDisapprovalReasons.StructuredSnippetsHasPromotionalText;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemQualityDisapprovalReasons.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemStatusExtensions
		{
			public static string ToXmlValue(this FeedItemStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedItemStatus.Enabled: return "ENABLED";
					case FeedItemStatus.Removed: return "REMOVED";
					case FeedItemStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedItemStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return FeedItemStatus.Enabled;
					case "REMOVED": return FeedItemStatus.Removed;
					case "UNKNOWN": return FeedItemStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedItemValidationStatusExtensions
		{
			public static string ToXmlValue(this FeedItemValidationStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedItemValidationStatus.Unchecked: return "UNCHECKED";
					case FeedItemValidationStatus.Error: return "ERROR";
					case FeedItemValidationStatus.Valid: return "VALID";
					default: return null;
				}
			}
			public static FeedItemValidationStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNCHECKED": return FeedItemValidationStatus.Unchecked;
					case "ERROR": return FeedItemValidationStatus.Error;
					case "VALID": return FeedItemValidationStatus.Valid;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedItemValidationStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedMappingErrorReasonExtensions
		{
			public static string ToXmlValue(this FeedMappingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FeedMappingErrorReason.InvalidPlaceholderField: return "INVALID_PLACEHOLDER_FIELD";
					case FeedMappingErrorReason.InvalidCriterionField: return "INVALID_CRITERION_FIELD";
					case FeedMappingErrorReason.InvalidPlaceholderType: return "INVALID_PLACEHOLDER_TYPE";
					case FeedMappingErrorReason.InvalidCriterionType: return "INVALID_CRITERION_TYPE";
					case FeedMappingErrorReason.CannotSetPlaceholderTypeAndCriterionType: return "CANNOT_SET_PLACEHOLDER_TYPE_AND_CRITERION_TYPE";
					case FeedMappingErrorReason.NoAttributeFieldMappings: return "NO_ATTRIBUTE_FIELD_MAPPINGS";
					case FeedMappingErrorReason.FeedAttributeTypeMismatch: return "FEED_ATTRIBUTE_TYPE_MISMATCH";
					case FeedMappingErrorReason.CannotOperateOnMappingsForSystemGeneratedFeed: return "CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED";
					case FeedMappingErrorReason.MultipleMappingsForPlaceholderType: return "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE";
					case FeedMappingErrorReason.MultipleMappingsForCriterionType: return "MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE";
					case FeedMappingErrorReason.MultipleMappingsForPlaceholderField: return "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD";
					case FeedMappingErrorReason.MultipleMappingsForCriterionField: return "MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD";
					case FeedMappingErrorReason.UnexpectedAttributeFieldMappings: return "UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS";
					case FeedMappingErrorReason.LocationPlaceholderOnlyForPlacesFeeds: return "LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS";
					case FeedMappingErrorReason.CannotModifyMappingsForTypedFeed: return "CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED";
					case FeedMappingErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedMappingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_PLACEHOLDER_FIELD": return FeedMappingErrorReason.InvalidPlaceholderField;
					case "INVALID_CRITERION_FIELD": return FeedMappingErrorReason.InvalidCriterionField;
					case "INVALID_PLACEHOLDER_TYPE": return FeedMappingErrorReason.InvalidPlaceholderType;
					case "INVALID_CRITERION_TYPE": return FeedMappingErrorReason.InvalidCriterionType;
					case "CANNOT_SET_PLACEHOLDER_TYPE_AND_CRITERION_TYPE": return FeedMappingErrorReason.CannotSetPlaceholderTypeAndCriterionType;
					case "NO_ATTRIBUTE_FIELD_MAPPINGS": return FeedMappingErrorReason.NoAttributeFieldMappings;
					case "FEED_ATTRIBUTE_TYPE_MISMATCH": return FeedMappingErrorReason.FeedAttributeTypeMismatch;
					case "CANNOT_OPERATE_ON_MAPPINGS_FOR_SYSTEM_GENERATED_FEED": return FeedMappingErrorReason.CannotOperateOnMappingsForSystemGeneratedFeed;
					case "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_TYPE": return FeedMappingErrorReason.MultipleMappingsForPlaceholderType;
					case "MULTIPLE_MAPPINGS_FOR_CRITERION_TYPE": return FeedMappingErrorReason.MultipleMappingsForCriterionType;
					case "MULTIPLE_MAPPINGS_FOR_PLACEHOLDER_FIELD": return FeedMappingErrorReason.MultipleMappingsForPlaceholderField;
					case "MULTIPLE_MAPPINGS_FOR_CRITERION_FIELD": return FeedMappingErrorReason.MultipleMappingsForCriterionField;
					case "UNEXPECTED_ATTRIBUTE_FIELD_MAPPINGS": return FeedMappingErrorReason.UnexpectedAttributeFieldMappings;
					case "LOCATION_PLACEHOLDER_ONLY_FOR_PLACES_FEEDS": return FeedMappingErrorReason.LocationPlaceholderOnlyForPlacesFeeds;
					case "CANNOT_MODIFY_MAPPINGS_FOR_TYPED_FEED": return FeedMappingErrorReason.CannotModifyMappingsForTypedFeed;
					case "UNKNOWN": return FeedMappingErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedMappingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FeedMappingStatusExtensions
		{
			public static string ToXmlValue(this FeedMappingStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedMappingStatus.Enabled: return "ENABLED";
					case FeedMappingStatus.Removed: return "REMOVED";
					case FeedMappingStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedMappingStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return FeedMappingStatus.Enabled;
					case "REMOVED": return FeedMappingStatus.Removed;
					case "UNKNOWN": return FeedMappingStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedMappingStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedOriginExtensions
		{
			public static string ToXmlValue(this FeedOrigin enumValue)
			{
				switch (enumValue)
				{
					case FeedOrigin.User: return "USER";
					case FeedOrigin.Adwords: return "ADWORDS";
					case FeedOrigin.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedOrigin Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "USER": return FeedOrigin.User;
					case "ADWORDS": return FeedOrigin.Adwords;
					case "UNKNOWN": return FeedOrigin.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedOrigin.", nameof(xmlValue));
				}
			}
		}
		public static class FeedStatusExtensions
		{
			public static string ToXmlValue(this FeedStatus enumValue)
			{
				switch (enumValue)
				{
					case FeedStatus.Enabled: return "ENABLED";
					case FeedStatus.Removed: return "REMOVED";
					case FeedStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FeedStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return FeedStatus.Enabled;
					case "REMOVED": return FeedStatus.Removed;
					case "UNKNOWN": return FeedStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedStatus.", nameof(xmlValue));
				}
			}
		}
		public static class FeedTypeExtensions
		{
			public static string ToXmlValue(this FeedType enumValue)
			{
				switch (enumValue)
				{
					case FeedType.None: return "NONE";
					case FeedType.Sitelink: return "SITELINK";
					case FeedType.Call: return "CALL";
					case FeedType.App: return "APP";
					case FeedType.Review: return "REVIEW";
					case FeedType.AdCustomizer: return "AD_CUSTOMIZER";
					case FeedType.Callout: return "CALLOUT";
					case FeedType.StructuredSnippet: return "STRUCTURED_SNIPPET";
					case FeedType.Price: return "PRICE";
					default: return null;
				}
			}
			public static FeedType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NONE": return FeedType.None;
					case "SITELINK": return FeedType.Sitelink;
					case "CALL": return FeedType.Call;
					case "APP": return FeedType.App;
					case "REVIEW": return FeedType.Review;
					case "AD_CUSTOMIZER": return FeedType.AdCustomizer;
					case "CALLOUT": return FeedType.Callout;
					case "STRUCTURED_SNIPPET": return FeedType.StructuredSnippet;
					case "PRICE": return FeedType.Price;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FeedType.", nameof(xmlValue));
				}
			}
		}
		public static class ForwardCompatibilityErrorReasonExtensions
		{
			public static string ToXmlValue(this ForwardCompatibilityErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ForwardCompatibilityErrorReason.InvalidForwardCompatibilityMapValue: return "INVALID_FORWARD_COMPATIBILITY_MAP_VALUE";
					case ForwardCompatibilityErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ForwardCompatibilityErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_FORWARD_COMPATIBILITY_MAP_VALUE": return ForwardCompatibilityErrorReason.InvalidForwardCompatibilityMapValue;
					case "UNKNOWN": return ForwardCompatibilityErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ForwardCompatibilityErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FunctionErrorReasonExtensions
		{
			public static string ToXmlValue(this FunctionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FunctionErrorReason.InvalidFunctionFormat: return "INVALID_FUNCTION_FORMAT";
					case FunctionErrorReason.DataTypeMismatch: return "DATA_TYPE_MISMATCH";
					case FunctionErrorReason.InvalidConjunctionOperands: return "INVALID_CONJUNCTION_OPERANDS";
					case FunctionErrorReason.InvalidNumberOfOperands: return "INVALID_NUMBER_OF_OPERANDS";
					case FunctionErrorReason.InvalidOperandType: return "INVALID_OPERAND_TYPE";
					case FunctionErrorReason.InvalidOperator: return "INVALID_OPERATOR";
					case FunctionErrorReason.InvalidRequestContextType: return "INVALID_REQUEST_CONTEXT_TYPE";
					case FunctionErrorReason.InvalidFunctionForCallPlaceholder: return "INVALID_FUNCTION_FOR_CALL_PLACEHOLDER";
					case FunctionErrorReason.InvalidFunctionForPlaceholder: return "INVALID_FUNCTION_FOR_PLACEHOLDER";
					case FunctionErrorReason.InvalidOperand: return "INVALID_OPERAND";
					case FunctionErrorReason.MissingConstantOperandValue: return "MISSING_CONSTANT_OPERAND_VALUE";
					case FunctionErrorReason.InvalidConstantOperandValue: return "INVALID_CONSTANT_OPERAND_VALUE";
					case FunctionErrorReason.InvalidNesting: return "INVALID_NESTING";
					case FunctionErrorReason.MultipleFeedIdsNotSupported: return "MULTIPLE_FEED_IDS_NOT_SUPPORTED";
					case FunctionErrorReason.InvalidFunctionForFeedWithFixedSchema: return "INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA";
					case FunctionErrorReason.InvalidAttributeName: return "INVALID_ATTRIBUTE_NAME";
					case FunctionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FunctionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_FUNCTION_FORMAT": return FunctionErrorReason.InvalidFunctionFormat;
					case "DATA_TYPE_MISMATCH": return FunctionErrorReason.DataTypeMismatch;
					case "INVALID_CONJUNCTION_OPERANDS": return FunctionErrorReason.InvalidConjunctionOperands;
					case "INVALID_NUMBER_OF_OPERANDS": return FunctionErrorReason.InvalidNumberOfOperands;
					case "INVALID_OPERAND_TYPE": return FunctionErrorReason.InvalidOperandType;
					case "INVALID_OPERATOR": return FunctionErrorReason.InvalidOperator;
					case "INVALID_REQUEST_CONTEXT_TYPE": return FunctionErrorReason.InvalidRequestContextType;
					case "INVALID_FUNCTION_FOR_CALL_PLACEHOLDER": return FunctionErrorReason.InvalidFunctionForCallPlaceholder;
					case "INVALID_FUNCTION_FOR_PLACEHOLDER": return FunctionErrorReason.InvalidFunctionForPlaceholder;
					case "INVALID_OPERAND": return FunctionErrorReason.InvalidOperand;
					case "MISSING_CONSTANT_OPERAND_VALUE": return FunctionErrorReason.MissingConstantOperandValue;
					case "INVALID_CONSTANT_OPERAND_VALUE": return FunctionErrorReason.InvalidConstantOperandValue;
					case "INVALID_NESTING": return FunctionErrorReason.InvalidNesting;
					case "MULTIPLE_FEED_IDS_NOT_SUPPORTED": return FunctionErrorReason.MultipleFeedIdsNotSupported;
					case "INVALID_FUNCTION_FOR_FEED_WITH_FIXED_SCHEMA": return FunctionErrorReason.InvalidFunctionForFeedWithFixedSchema;
					case "INVALID_ATTRIBUTE_NAME": return FunctionErrorReason.InvalidAttributeName;
					case "UNKNOWN": return FunctionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FunctionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class FunctionOperatorExtensions
		{
			public static string ToXmlValue(this FunctionOperator enumValue)
			{
				switch (enumValue)
				{
					case FunctionOperator.In: return "IN";
					case FunctionOperator.Identity: return "IDENTITY";
					case FunctionOperator.Equals: return "EQUALS";
					case FunctionOperator.And: return "AND";
					case FunctionOperator.ContainsAny: return "CONTAINS_ANY";
					case FunctionOperator.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FunctionOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "IN": return FunctionOperator.In;
					case "IDENTITY": return FunctionOperator.Identity;
					case "EQUALS": return FunctionOperator.Equals;
					case "AND": return FunctionOperator.And;
					case "CONTAINS_ANY": return FunctionOperator.ContainsAny;
					case "UNKNOWN": return FunctionOperator.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FunctionOperator.", nameof(xmlValue));
				}
			}
		}
		public static class FunctionParsingErrorReasonExtensions
		{
			public static string ToXmlValue(this FunctionParsingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case FunctionParsingErrorReason.NoMoreInput: return "NO_MORE_INPUT";
					case FunctionParsingErrorReason.ExpectedCharacter: return "EXPECTED_CHARACTER";
					case FunctionParsingErrorReason.UnexpectedSeparator: return "UNEXPECTED_SEPARATOR";
					case FunctionParsingErrorReason.UnmatchedLeftBracket: return "UNMATCHED_LEFT_BRACKET";
					case FunctionParsingErrorReason.UnmatchedRightBracket: return "UNMATCHED_RIGHT_BRACKET";
					case FunctionParsingErrorReason.TooManyNestedFunctions: return "TOO_MANY_NESTED_FUNCTIONS";
					case FunctionParsingErrorReason.MissingRightHandOperand: return "MISSING_RIGHT_HAND_OPERAND";
					case FunctionParsingErrorReason.InvalidOperatorName: return "INVALID_OPERATOR_NAME";
					case FunctionParsingErrorReason.FeedAttributeOperandArgumentNotInteger: return "FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER";
					case FunctionParsingErrorReason.NoOperands: return "NO_OPERANDS";
					case FunctionParsingErrorReason.TooManyOperands: return "TOO_MANY_OPERANDS";
					case FunctionParsingErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static FunctionParsingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NO_MORE_INPUT": return FunctionParsingErrorReason.NoMoreInput;
					case "EXPECTED_CHARACTER": return FunctionParsingErrorReason.ExpectedCharacter;
					case "UNEXPECTED_SEPARATOR": return FunctionParsingErrorReason.UnexpectedSeparator;
					case "UNMATCHED_LEFT_BRACKET": return FunctionParsingErrorReason.UnmatchedLeftBracket;
					case "UNMATCHED_RIGHT_BRACKET": return FunctionParsingErrorReason.UnmatchedRightBracket;
					case "TOO_MANY_NESTED_FUNCTIONS": return FunctionParsingErrorReason.TooManyNestedFunctions;
					case "MISSING_RIGHT_HAND_OPERAND": return FunctionParsingErrorReason.MissingRightHandOperand;
					case "INVALID_OPERATOR_NAME": return FunctionParsingErrorReason.InvalidOperatorName;
					case "FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER": return FunctionParsingErrorReason.FeedAttributeOperandArgumentNotInteger;
					case "NO_OPERANDS": return FunctionParsingErrorReason.NoOperands;
					case "TOO_MANY_OPERANDS": return FunctionParsingErrorReason.TooManyOperands;
					case "UNKNOWN": return FunctionParsingErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type FunctionParsingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class GenderGenderTypeExtensions
		{
			public static string ToXmlValue(this GenderGenderType enumValue)
			{
				switch (enumValue)
				{
					case GenderGenderType.GenderMale: return "GENDER_MALE";
					case GenderGenderType.GenderFemale: return "GENDER_FEMALE";
					case GenderGenderType.GenderUndetermined: return "GENDER_UNDETERMINED";
					default: return null;
				}
			}
			public static GenderGenderType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "GENDER_MALE": return GenderGenderType.GenderMale;
					case "GENDER_FEMALE": return GenderGenderType.GenderFemale;
					case "GENDER_UNDETERMINED": return GenderGenderType.GenderUndetermined;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type GenderGenderType.", nameof(xmlValue));
				}
			}
		}
		public static class GeoRestrictionExtensions
		{
			public static string ToXmlValue(this GeoRestriction enumValue)
			{
				switch (enumValue)
				{
					case GeoRestriction.Unknown: return "UNKNOWN";
					case GeoRestriction.LocationOfPresence: return "LOCATION_OF_PRESENCE";
					default: return null;
				}
			}
			public static GeoRestriction Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return GeoRestriction.Unknown;
					case "LOCATION_OF_PRESENCE": return GeoRestriction.LocationOfPresence;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type GeoRestriction.", nameof(xmlValue));
				}
			}
		}
		public static class GeoTargetTypeSettingNegativeGeoTargetTypeExtensions
		{
			public static string ToXmlValue(this GeoTargetTypeSettingNegativeGeoTargetType enumValue)
			{
				switch (enumValue)
				{
					case GeoTargetTypeSettingNegativeGeoTargetType.DontCare: return "DONT_CARE";
					case GeoTargetTypeSettingNegativeGeoTargetType.LocationOfPresence: return "LOCATION_OF_PRESENCE";
					default: return null;
				}
			}
			public static GeoTargetTypeSettingNegativeGeoTargetType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DONT_CARE": return GeoTargetTypeSettingNegativeGeoTargetType.DontCare;
					case "LOCATION_OF_PRESENCE": return GeoTargetTypeSettingNegativeGeoTargetType.LocationOfPresence;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type GeoTargetTypeSettingNegativeGeoTargetType.", nameof(xmlValue));
				}
			}
		}
		public static class GeoTargetTypeSettingPositiveGeoTargetTypeExtensions
		{
			public static string ToXmlValue(this GeoTargetTypeSettingPositiveGeoTargetType enumValue)
			{
				switch (enumValue)
				{
					case GeoTargetTypeSettingPositiveGeoTargetType.DontCare: return "DONT_CARE";
					case GeoTargetTypeSettingPositiveGeoTargetType.AreaOfInterest: return "AREA_OF_INTEREST";
					case GeoTargetTypeSettingPositiveGeoTargetType.LocationOfPresence: return "LOCATION_OF_PRESENCE";
					default: return null;
				}
			}
			public static GeoTargetTypeSettingPositiveGeoTargetType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DONT_CARE": return GeoTargetTypeSettingPositiveGeoTargetType.DontCare;
					case "AREA_OF_INTEREST": return GeoTargetTypeSettingPositiveGeoTargetType.AreaOfInterest;
					case "LOCATION_OF_PRESENCE": return GeoTargetTypeSettingPositiveGeoTargetType.LocationOfPresence;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type GeoTargetTypeSettingPositiveGeoTargetType.", nameof(xmlValue));
				}
			}
		}
		public static class IdeaTypeExtensions
		{
			public static string ToXmlValue(this IdeaType enumValue)
			{
				switch (enumValue)
				{
					case IdeaType.Keyword: return "KEYWORD";
					default: return null;
				}
			}
			public static IdeaType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "KEYWORD": return IdeaType.Keyword;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type IdeaType.", nameof(xmlValue));
				}
			}
		}
		public static class IdErrorReasonExtensions
		{
			public static string ToXmlValue(this IdErrorReason enumValue)
			{
				switch (enumValue)
				{
					case IdErrorReason.NotFound: return "NOT_FOUND";
					default: return null;
				}
			}
			public static IdErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NOT_FOUND": return IdErrorReason.NotFound;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type IdErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ImageErrorReasonExtensions
		{
			public static string ToXmlValue(this ImageErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ImageErrorReason.InvalidImage: return "INVALID_IMAGE";
					case ImageErrorReason.StorageError: return "STORAGE_ERROR";
					case ImageErrorReason.BadRequest: return "BAD_REQUEST";
					case ImageErrorReason.UnexpectedSize: return "UNEXPECTED_SIZE";
					case ImageErrorReason.AnimatedNotAllowed: return "ANIMATED_NOT_ALLOWED";
					case ImageErrorReason.AnimationTooLong: return "ANIMATION_TOO_LONG";
					case ImageErrorReason.ServerError: return "SERVER_ERROR";
					case ImageErrorReason.CmykJpegNotAllowed: return "CMYK_JPEG_NOT_ALLOWED";
					case ImageErrorReason.FlashNotAllowed: return "FLASH_NOT_ALLOWED";
					case ImageErrorReason.FlashWithoutClicktag: return "FLASH_WITHOUT_CLICKTAG";
					case ImageErrorReason.FlashErrorAfterFixingClickTag: return "FLASH_ERROR_AFTER_FIXING_CLICK_TAG";
					case ImageErrorReason.AnimatedVisualEffect: return "ANIMATED_VISUAL_EFFECT";
					case ImageErrorReason.FlashError: return "FLASH_ERROR";
					case ImageErrorReason.LayoutProblem: return "LAYOUT_PROBLEM";
					case ImageErrorReason.ProblemReadingImageFile: return "PROBLEM_READING_IMAGE_FILE";
					case ImageErrorReason.ErrorStoringImage: return "ERROR_STORING_IMAGE";
					case ImageErrorReason.AspectRatioNotAllowed: return "ASPECT_RATIO_NOT_ALLOWED";
					case ImageErrorReason.FlashHasNetworkObjects: return "FLASH_HAS_NETWORK_OBJECTS";
					case ImageErrorReason.FlashHasNetworkMethods: return "FLASH_HAS_NETWORK_METHODS";
					case ImageErrorReason.FlashHasUrl: return "FLASH_HAS_URL";
					case ImageErrorReason.FlashHasMouseTracking: return "FLASH_HAS_MOUSE_TRACKING";
					case ImageErrorReason.FlashHasRandomNum: return "FLASH_HAS_RANDOM_NUM";
					case ImageErrorReason.FlashSelfTargets: return "FLASH_SELF_TARGETS";
					case ImageErrorReason.FlashBadGeturlTarget: return "FLASH_BAD_GETURL_TARGET";
					case ImageErrorReason.FlashVersionNotSupported: return "FLASH_VERSION_NOT_SUPPORTED";
					case ImageErrorReason.FlashWithoutHardCodedClickUrl: return "FLASH_WITHOUT_HARD_CODED_CLICK_URL";
					case ImageErrorReason.InvalidFlashFile: return "INVALID_FLASH_FILE";
					case ImageErrorReason.FailedToFixClickTagInFlash: return "FAILED_TO_FIX_CLICK_TAG_IN_FLASH";
					case ImageErrorReason.FlashAccessesNetworkResources: return "FLASH_ACCESSES_NETWORK_RESOURCES";
					case ImageErrorReason.FlashExternalJsCall: return "FLASH_EXTERNAL_JS_CALL";
					case ImageErrorReason.FlashExternalFsCall: return "FLASH_EXTERNAL_FS_CALL";
					case ImageErrorReason.FileTooLarge: return "FILE_TOO_LARGE";
					case ImageErrorReason.ImageDataTooLarge: return "IMAGE_DATA_TOO_LARGE";
					case ImageErrorReason.ImageProcessingError: return "IMAGE_PROCESSING_ERROR";
					case ImageErrorReason.ImageTooSmall: return "IMAGE_TOO_SMALL";
					case ImageErrorReason.InvalidInput: return "INVALID_INPUT";
					case ImageErrorReason.ProblemReadingFile: return "PROBLEM_READING_FILE";
					default: return null;
				}
			}
			public static ImageErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_IMAGE": return ImageErrorReason.InvalidImage;
					case "STORAGE_ERROR": return ImageErrorReason.StorageError;
					case "BAD_REQUEST": return ImageErrorReason.BadRequest;
					case "UNEXPECTED_SIZE": return ImageErrorReason.UnexpectedSize;
					case "ANIMATED_NOT_ALLOWED": return ImageErrorReason.AnimatedNotAllowed;
					case "ANIMATION_TOO_LONG": return ImageErrorReason.AnimationTooLong;
					case "SERVER_ERROR": return ImageErrorReason.ServerError;
					case "CMYK_JPEG_NOT_ALLOWED": return ImageErrorReason.CmykJpegNotAllowed;
					case "FLASH_NOT_ALLOWED": return ImageErrorReason.FlashNotAllowed;
					case "FLASH_WITHOUT_CLICKTAG": return ImageErrorReason.FlashWithoutClicktag;
					case "FLASH_ERROR_AFTER_FIXING_CLICK_TAG": return ImageErrorReason.FlashErrorAfterFixingClickTag;
					case "ANIMATED_VISUAL_EFFECT": return ImageErrorReason.AnimatedVisualEffect;
					case "FLASH_ERROR": return ImageErrorReason.FlashError;
					case "LAYOUT_PROBLEM": return ImageErrorReason.LayoutProblem;
					case "PROBLEM_READING_IMAGE_FILE": return ImageErrorReason.ProblemReadingImageFile;
					case "ERROR_STORING_IMAGE": return ImageErrorReason.ErrorStoringImage;
					case "ASPECT_RATIO_NOT_ALLOWED": return ImageErrorReason.AspectRatioNotAllowed;
					case "FLASH_HAS_NETWORK_OBJECTS": return ImageErrorReason.FlashHasNetworkObjects;
					case "FLASH_HAS_NETWORK_METHODS": return ImageErrorReason.FlashHasNetworkMethods;
					case "FLASH_HAS_URL": return ImageErrorReason.FlashHasUrl;
					case "FLASH_HAS_MOUSE_TRACKING": return ImageErrorReason.FlashHasMouseTracking;
					case "FLASH_HAS_RANDOM_NUM": return ImageErrorReason.FlashHasRandomNum;
					case "FLASH_SELF_TARGETS": return ImageErrorReason.FlashSelfTargets;
					case "FLASH_BAD_GETURL_TARGET": return ImageErrorReason.FlashBadGeturlTarget;
					case "FLASH_VERSION_NOT_SUPPORTED": return ImageErrorReason.FlashVersionNotSupported;
					case "FLASH_WITHOUT_HARD_CODED_CLICK_URL": return ImageErrorReason.FlashWithoutHardCodedClickUrl;
					case "INVALID_FLASH_FILE": return ImageErrorReason.InvalidFlashFile;
					case "FAILED_TO_FIX_CLICK_TAG_IN_FLASH": return ImageErrorReason.FailedToFixClickTagInFlash;
					case "FLASH_ACCESSES_NETWORK_RESOURCES": return ImageErrorReason.FlashAccessesNetworkResources;
					case "FLASH_EXTERNAL_JS_CALL": return ImageErrorReason.FlashExternalJsCall;
					case "FLASH_EXTERNAL_FS_CALL": return ImageErrorReason.FlashExternalFsCall;
					case "FILE_TOO_LARGE": return ImageErrorReason.FileTooLarge;
					case "IMAGE_DATA_TOO_LARGE": return ImageErrorReason.ImageDataTooLarge;
					case "IMAGE_PROCESSING_ERROR": return ImageErrorReason.ImageProcessingError;
					case "IMAGE_TOO_SMALL": return ImageErrorReason.ImageTooSmall;
					case "INVALID_INPUT": return ImageErrorReason.InvalidInput;
					case "PROBLEM_READING_FILE": return ImageErrorReason.ProblemReadingFile;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ImageErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class IncomeTierExtensions
		{
			public static string ToXmlValue(this IncomeTier enumValue)
			{
				switch (enumValue)
				{
					case IncomeTier.Unknown: return "UNKNOWN";
					case IncomeTier.Tier1: return "TIER_1";
					case IncomeTier.Tier2: return "TIER_2";
					case IncomeTier.Tier3: return "TIER_3";
					case IncomeTier.Tier4: return "TIER_4";
					case IncomeTier.Tier5: return "TIER_5";
					case IncomeTier.Tier6To10: return "TIER_6_TO_10";
					default: return null;
				}
			}
			public static IncomeTier Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return IncomeTier.Unknown;
					case "TIER_1": return IncomeTier.Tier1;
					case "TIER_2": return IncomeTier.Tier2;
					case "TIER_3": return IncomeTier.Tier3;
					case "TIER_4": return IncomeTier.Tier4;
					case "TIER_5": return IncomeTier.Tier5;
					case "TIER_6_TO_10": return IncomeTier.Tier6To10;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type IncomeTier.", nameof(xmlValue));
				}
			}
		}
		public static class InternalApiErrorReasonExtensions
		{
			public static string ToXmlValue(this InternalApiErrorReason enumValue)
			{
				switch (enumValue)
				{
					case InternalApiErrorReason.UnexpectedInternalApiError: return "UNEXPECTED_INTERNAL_API_ERROR";
					case InternalApiErrorReason.TransientError: return "TRANSIENT_ERROR";
					case InternalApiErrorReason.Unknown: return "UNKNOWN";
					case InternalApiErrorReason.Downtime: return "DOWNTIME";
					default: return null;
				}
			}
			public static InternalApiErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNEXPECTED_INTERNAL_API_ERROR": return InternalApiErrorReason.UnexpectedInternalApiError;
					case "TRANSIENT_ERROR": return InternalApiErrorReason.TransientError;
					case "UNKNOWN": return InternalApiErrorReason.Unknown;
					case "DOWNTIME": return InternalApiErrorReason.Downtime;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type InternalApiErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class KeywordMatchTypeExtensions
		{
			public static string ToXmlValue(this KeywordMatchType enumValue)
			{
				switch (enumValue)
				{
					case KeywordMatchType.Exact: return "EXACT";
					case KeywordMatchType.Phrase: return "PHRASE";
					case KeywordMatchType.Broad: return "BROAD";
					default: return null;
				}
			}
			public static KeywordMatchType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EXACT": return KeywordMatchType.Exact;
					case "PHRASE": return KeywordMatchType.Phrase;
					case "BROAD": return KeywordMatchType.Broad;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type KeywordMatchType.", nameof(xmlValue));
				}
			}
		}
		public static class LabelErrorReasonExtensions
		{
			public static string ToXmlValue(this LabelErrorReason enumValue)
			{
				switch (enumValue)
				{
					case LabelErrorReason.DuplicateName: return "DUPLICATE_NAME";
					case LabelErrorReason.InvalidLabelName: return "INVALID_LABEL_NAME";
					case LabelErrorReason.InvalidLabelType: return "INVALID_LABEL_TYPE";
					case LabelErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static LabelErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_NAME": return LabelErrorReason.DuplicateName;
					case "INVALID_LABEL_NAME": return LabelErrorReason.InvalidLabelName;
					case "INVALID_LABEL_TYPE": return LabelErrorReason.InvalidLabelType;
					case "UNKNOWN": return LabelErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LabelErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class LabelServiceErrorReasonExtensions
		{
			public static string ToXmlValue(this LabelServiceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case LabelServiceErrorReason.EmptyLabelName: return "EMPTY_LABEL_NAME";
					case LabelServiceErrorReason.LabelNameTooLong: return "LABEL_NAME_TOO_LONG";
					case LabelServiceErrorReason.DuplicateLabelName: return "DUPLICATE_LABEL_NAME";
					case LabelServiceErrorReason.ReservedLabelName: return "RESERVED_LABEL_NAME";
					case LabelServiceErrorReason.CannotBeDeleted: return "CANNOT_BE_DELETED";
					case LabelServiceErrorReason.TooManyLabels: return "TOO_MANY_LABELS";
					case LabelServiceErrorReason.InvalidLabelId: return "INVALID_LABEL_ID";
					case LabelServiceErrorReason.CustomerCannotCreateLabels: return "CUSTOMER_CANNOT_CREATE_LABELS";
					case LabelServiceErrorReason.ServerClientVersionMismatch: return "SERVER_CLIENT_VERSION_MISMATCH";
					default: return null;
				}
			}
			public static LabelServiceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EMPTY_LABEL_NAME": return LabelServiceErrorReason.EmptyLabelName;
					case "LABEL_NAME_TOO_LONG": return LabelServiceErrorReason.LabelNameTooLong;
					case "DUPLICATE_LABEL_NAME": return LabelServiceErrorReason.DuplicateLabelName;
					case "RESERVED_LABEL_NAME": return LabelServiceErrorReason.ReservedLabelName;
					case "CANNOT_BE_DELETED": return LabelServiceErrorReason.CannotBeDeleted;
					case "TOO_MANY_LABELS": return LabelServiceErrorReason.TooManyLabels;
					case "INVALID_LABEL_ID": return LabelServiceErrorReason.InvalidLabelId;
					case "CUSTOMER_CANNOT_CREATE_LABELS": return LabelServiceErrorReason.CustomerCannotCreateLabels;
					case "SERVER_CLIENT_VERSION_MISMATCH": return LabelServiceErrorReason.ServerClientVersionMismatch;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LabelServiceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class LabelStatusExtensions
		{
			public static string ToXmlValue(this LabelStatus enumValue)
			{
				switch (enumValue)
				{
					case LabelStatus.Enabled: return "ENABLED";
					case LabelStatus.Removed: return "REMOVED";
					case LabelStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static LabelStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return LabelStatus.Enabled;
					case "REMOVED": return LabelStatus.Removed;
					case "UNKNOWN": return LabelStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LabelStatus.", nameof(xmlValue));
				}
			}
		}
		public static class LevelExtensions
		{
			public static string ToXmlValue(this Level enumValue)
			{
				switch (enumValue)
				{
					case Level.Creative: return "CREATIVE";
					case Level.Adgroup: return "ADGROUP";
					case Level.Campaign: return "CAMPAIGN";
					case Level.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static Level Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CREATIVE": return Level.Creative;
					case "ADGROUP": return Level.Adgroup;
					case "CAMPAIGN": return Level.Campaign;
					case "UNKNOWN": return Level.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type Level.", nameof(xmlValue));
				}
			}
		}
		public static class LinkStatusExtensions
		{
			public static string ToXmlValue(this LinkStatus enumValue)
			{
				switch (enumValue)
				{
					case LinkStatus.Active: return "ACTIVE";
					case LinkStatus.Inactive: return "INACTIVE";
					case LinkStatus.Pending: return "PENDING";
					case LinkStatus.Refused: return "REFUSED";
					case LinkStatus.Cancelled: return "CANCELLED";
					case LinkStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static LinkStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTIVE": return LinkStatus.Active;
					case "INACTIVE": return LinkStatus.Inactive;
					case "PENDING": return LinkStatus.Pending;
					case "REFUSED": return LinkStatus.Refused;
					case "CANCELLED": return LinkStatus.Cancelled;
					case "UNKNOWN": return LinkStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LinkStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ListErrorReasonExtensions
		{
			public static string ToXmlValue(this ListErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ListErrorReason.ClearUnsupported: return "CLEAR_UNSUPPORTED";
					case ListErrorReason.InvalidOperator: return "INVALID_OPERATOR";
					case ListErrorReason.InvalidElement: return "INVALID_ELEMENT";
					case ListErrorReason.ListLengthMismatch: return "LIST_LENGTH_MISMATCH";
					case ListErrorReason.DuplicateElement: return "DUPLICATE_ELEMENT";
					case ListErrorReason.MutateUnsupported: return "MUTATE_UNSUPPORTED";
					case ListErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ListErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CLEAR_UNSUPPORTED": return ListErrorReason.ClearUnsupported;
					case "INVALID_OPERATOR": return ListErrorReason.InvalidOperator;
					case "INVALID_ELEMENT": return ListErrorReason.InvalidElement;
					case "LIST_LENGTH_MISMATCH": return ListErrorReason.ListLengthMismatch;
					case "DUPLICATE_ELEMENT": return ListErrorReason.DuplicateElement;
					case "MUTATE_UNSUPPORTED": return ListErrorReason.MutateUnsupported;
					case "UNKNOWN": return ListErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ListErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ListOperationsListOperatorExtensions
		{
			public static string ToXmlValue(this ListOperationsListOperator enumValue)
			{
				switch (enumValue)
				{
					case ListOperationsListOperator.Put: return "PUT";
					case ListOperationsListOperator.Remove: return "REMOVE";
					case ListOperationsListOperator.Update: return "UPDATE";
					case ListOperationsListOperator.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ListOperationsListOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "PUT": return ListOperationsListOperator.Put;
					case "REMOVE": return ListOperationsListOperator.Remove;
					case "UPDATE": return ListOperationsListOperator.Update;
					case "UNKNOWN": return ListOperationsListOperator.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ListOperationsListOperator.", nameof(xmlValue));
				}
			}
		}
		public static class LocationCriterionServiceErrorReasonExtensions
		{
			public static string ToXmlValue(this LocationCriterionServiceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case LocationCriterionServiceErrorReason.RequiredLocationCriterionPredicateMissing: return "REQUIRED_LOCATION_CRITERION_PREDICATE_MISSING";
					case LocationCriterionServiceErrorReason.TooManyLocationCriterionPredicatesSpecified: return "TOO_MANY_LOCATION_CRITERION_PREDICATES_SPECIFIED";
					case LocationCriterionServiceErrorReason.InvalidCountryCode: return "INVALID_COUNTRY_CODE";
					case LocationCriterionServiceErrorReason.LocationCriterionServiceError: return "LOCATION_CRITERION_SERVICE_ERROR";
					default: return null;
				}
			}
			public static LocationCriterionServiceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "REQUIRED_LOCATION_CRITERION_PREDICATE_MISSING": return LocationCriterionServiceErrorReason.RequiredLocationCriterionPredicateMissing;
					case "TOO_MANY_LOCATION_CRITERION_PREDICATES_SPECIFIED": return LocationCriterionServiceErrorReason.TooManyLocationCriterionPredicatesSpecified;
					case "INVALID_COUNTRY_CODE": return LocationCriterionServiceErrorReason.InvalidCountryCode;
					case "LOCATION_CRITERION_SERVICE_ERROR": return LocationCriterionServiceErrorReason.LocationCriterionServiceError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LocationCriterionServiceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class LocationTargetingStatusExtensions
		{
			public static string ToXmlValue(this LocationTargetingStatus enumValue)
			{
				switch (enumValue)
				{
					case LocationTargetingStatus.Active: return "ACTIVE";
					case LocationTargetingStatus.Obsolete: return "OBSOLETE";
					case LocationTargetingStatus.PhasingOut: return "PHASING_OUT";
					default: return null;
				}
			}
			public static LocationTargetingStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTIVE": return LocationTargetingStatus.Active;
					case "OBSOLETE": return LocationTargetingStatus.Obsolete;
					case "PHASING_OUT": return LocationTargetingStatus.PhasingOut;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type LocationTargetingStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ManagedCustomerServiceErrorReasonExtensions
		{
			public static string ToXmlValue(this ManagedCustomerServiceErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ManagedCustomerServiceErrorReason.Unknown: return "UNKNOWN";
					case ManagedCustomerServiceErrorReason.NotAuthorized: return "NOT_AUTHORIZED";
					case ManagedCustomerServiceErrorReason.InvalidSelector: return "INVALID_SELECTOR";
					case ManagedCustomerServiceErrorReason.InvalidTimezone: return "INVALID_TIMEZONE";
					case ManagedCustomerServiceErrorReason.InvalidCurrency: return "INVALID_CURRENCY";
					case ManagedCustomerServiceErrorReason.InvalidDescriptiveName: return "INVALID_DESCRIPTIVE_NAME";
					case ManagedCustomerServiceErrorReason.AddCustomerFailure: return "ADD_CUSTOMER_FAILURE";
					case ManagedCustomerServiceErrorReason.SaveCustomersFailure: return "SAVE_CUSTOMERS_FAILURE";
					case ManagedCustomerServiceErrorReason.AlreadyManagedByThisManager: return "ALREADY_MANAGED_BY_THIS_MANAGER";
					case ManagedCustomerServiceErrorReason.AlreadyInvitedByThisManager: return "ALREADY_INVITED_BY_THIS_MANAGER";
					case ManagedCustomerServiceErrorReason.AlreadyManagedInHierarchy: return "ALREADY_MANAGED_IN_HIERARCHY";
					case ManagedCustomerServiceErrorReason.AlreadyManagedForUiAccess: return "ALREADY_MANAGED_FOR_UI_ACCESS";
					case ManagedCustomerServiceErrorReason.MaxLinkDepthExceeded: return "MAX_LINK_DEPTH_EXCEEDED";
					case ManagedCustomerServiceErrorReason.NoPendingInvitation: return "NO_PENDING_INVITATION";
					case ManagedCustomerServiceErrorReason.TooManyAccounts: return "TOO_MANY_ACCOUNTS";
					case ManagedCustomerServiceErrorReason.TooManyAccountsAtManager: return "TOO_MANY_ACCOUNTS_AT_MANAGER";
					case ManagedCustomerServiceErrorReason.TooManyUiApiManagers: return "TOO_MANY_UI_API_MANAGERS";
					case ManagedCustomerServiceErrorReason.TestAccountLinkError: return "TEST_ACCOUNT_LINK_ERROR";
					case ManagedCustomerServiceErrorReason.InvalidLabelId: return "INVALID_LABEL_ID";
					case ManagedCustomerServiceErrorReason.CannotApplyInactiveLabel: return "CANNOT_APPLY_INACTIVE_LABEL";
					case ManagedCustomerServiceErrorReason.AppliedLabelToTooManyAccounts: return "APPLIED_LABEL_TO_TOO_MANY_ACCOUNTS";
					default: return null;
				}
			}
			public static ManagedCustomerServiceErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ManagedCustomerServiceErrorReason.Unknown;
					case "NOT_AUTHORIZED": return ManagedCustomerServiceErrorReason.NotAuthorized;
					case "INVALID_SELECTOR": return ManagedCustomerServiceErrorReason.InvalidSelector;
					case "INVALID_TIMEZONE": return ManagedCustomerServiceErrorReason.InvalidTimezone;
					case "INVALID_CURRENCY": return ManagedCustomerServiceErrorReason.InvalidCurrency;
					case "INVALID_DESCRIPTIVE_NAME": return ManagedCustomerServiceErrorReason.InvalidDescriptiveName;
					case "ADD_CUSTOMER_FAILURE": return ManagedCustomerServiceErrorReason.AddCustomerFailure;
					case "SAVE_CUSTOMERS_FAILURE": return ManagedCustomerServiceErrorReason.SaveCustomersFailure;
					case "ALREADY_MANAGED_BY_THIS_MANAGER": return ManagedCustomerServiceErrorReason.AlreadyManagedByThisManager;
					case "ALREADY_INVITED_BY_THIS_MANAGER": return ManagedCustomerServiceErrorReason.AlreadyInvitedByThisManager;
					case "ALREADY_MANAGED_IN_HIERARCHY": return ManagedCustomerServiceErrorReason.AlreadyManagedInHierarchy;
					case "ALREADY_MANAGED_FOR_UI_ACCESS": return ManagedCustomerServiceErrorReason.AlreadyManagedForUiAccess;
					case "MAX_LINK_DEPTH_EXCEEDED": return ManagedCustomerServiceErrorReason.MaxLinkDepthExceeded;
					case "NO_PENDING_INVITATION": return ManagedCustomerServiceErrorReason.NoPendingInvitation;
					case "TOO_MANY_ACCOUNTS": return ManagedCustomerServiceErrorReason.TooManyAccounts;
					case "TOO_MANY_ACCOUNTS_AT_MANAGER": return ManagedCustomerServiceErrorReason.TooManyAccountsAtManager;
					case "TOO_MANY_UI_API_MANAGERS": return ManagedCustomerServiceErrorReason.TooManyUiApiManagers;
					case "TEST_ACCOUNT_LINK_ERROR": return ManagedCustomerServiceErrorReason.TestAccountLinkError;
					case "INVALID_LABEL_ID": return ManagedCustomerServiceErrorReason.InvalidLabelId;
					case "CANNOT_APPLY_INACTIVE_LABEL": return ManagedCustomerServiceErrorReason.CannotApplyInactiveLabel;
					case "APPLIED_LABEL_TO_TOO_MANY_ACCOUNTS": return ManagedCustomerServiceErrorReason.AppliedLabelToTooManyAccounts;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ManagedCustomerServiceErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class MediaBundleErrorReasonExtensions
		{
			public static string ToXmlValue(this MediaBundleErrorReason enumValue)
			{
				switch (enumValue)
				{
					case MediaBundleErrorReason.EntryPointCannotBeSetUsingMediaService: return "ENTRY_POINT_CANNOT_BE_SET_USING_MEDIA_SERVICE";
					case MediaBundleErrorReason.BadRequest: return "BAD_REQUEST";
					case MediaBundleErrorReason.DoubleclickBundleNotAllowed: return "DOUBLECLICK_BUNDLE_NOT_ALLOWED";
					case MediaBundleErrorReason.ExternalUrlNotAllowed: return "EXTERNAL_URL_NOT_ALLOWED";
					case MediaBundleErrorReason.FileTooLarge: return "FILE_TOO_LARGE";
					case MediaBundleErrorReason.GoogleWebDesignerZipFileNotPublished: return "GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED";
					case MediaBundleErrorReason.InvalidInput: return "INVALID_INPUT";
					case MediaBundleErrorReason.InvalidMediaBundle: return "INVALID_MEDIA_BUNDLE";
					case MediaBundleErrorReason.InvalidMediaBundleEntry: return "INVALID_MEDIA_BUNDLE_ENTRY";
					case MediaBundleErrorReason.InvalidMimeType: return "INVALID_MIME_TYPE";
					case MediaBundleErrorReason.InvalidPath: return "INVALID_PATH";
					case MediaBundleErrorReason.InvalidUrlReference: return "INVALID_URL_REFERENCE";
					case MediaBundleErrorReason.MediaDataTooLarge: return "MEDIA_DATA_TOO_LARGE";
					case MediaBundleErrorReason.MissingPrimaryMediaBundleEntry: return "MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY";
					case MediaBundleErrorReason.ServerError: return "SERVER_ERROR";
					case MediaBundleErrorReason.StorageError: return "STORAGE_ERROR";
					case MediaBundleErrorReason.SwiffyBundleNotAllowed: return "SWIFFY_BUNDLE_NOT_ALLOWED";
					case MediaBundleErrorReason.TooManyFiles: return "TOO_MANY_FILES";
					case MediaBundleErrorReason.UnexpectedSize: return "UNEXPECTED_SIZE";
					case MediaBundleErrorReason.UnsupportedGoogleWebDesignerEnvironment: return "UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT";
					case MediaBundleErrorReason.UnsupportedHtml5Feature: return "UNSUPPORTED_HTML5_FEATURE";
					case MediaBundleErrorReason.UrlInMediaBundleNotSslCompliant: return "URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT";
					default: return null;
				}
			}
			public static MediaBundleErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENTRY_POINT_CANNOT_BE_SET_USING_MEDIA_SERVICE": return MediaBundleErrorReason.EntryPointCannotBeSetUsingMediaService;
					case "BAD_REQUEST": return MediaBundleErrorReason.BadRequest;
					case "DOUBLECLICK_BUNDLE_NOT_ALLOWED": return MediaBundleErrorReason.DoubleclickBundleNotAllowed;
					case "EXTERNAL_URL_NOT_ALLOWED": return MediaBundleErrorReason.ExternalUrlNotAllowed;
					case "FILE_TOO_LARGE": return MediaBundleErrorReason.FileTooLarge;
					case "GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED": return MediaBundleErrorReason.GoogleWebDesignerZipFileNotPublished;
					case "INVALID_INPUT": return MediaBundleErrorReason.InvalidInput;
					case "INVALID_MEDIA_BUNDLE": return MediaBundleErrorReason.InvalidMediaBundle;
					case "INVALID_MEDIA_BUNDLE_ENTRY": return MediaBundleErrorReason.InvalidMediaBundleEntry;
					case "INVALID_MIME_TYPE": return MediaBundleErrorReason.InvalidMimeType;
					case "INVALID_PATH": return MediaBundleErrorReason.InvalidPath;
					case "INVALID_URL_REFERENCE": return MediaBundleErrorReason.InvalidUrlReference;
					case "MEDIA_DATA_TOO_LARGE": return MediaBundleErrorReason.MediaDataTooLarge;
					case "MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY": return MediaBundleErrorReason.MissingPrimaryMediaBundleEntry;
					case "SERVER_ERROR": return MediaBundleErrorReason.ServerError;
					case "STORAGE_ERROR": return MediaBundleErrorReason.StorageError;
					case "SWIFFY_BUNDLE_NOT_ALLOWED": return MediaBundleErrorReason.SwiffyBundleNotAllowed;
					case "TOO_MANY_FILES": return MediaBundleErrorReason.TooManyFiles;
					case "UNEXPECTED_SIZE": return MediaBundleErrorReason.UnexpectedSize;
					case "UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT": return MediaBundleErrorReason.UnsupportedGoogleWebDesignerEnvironment;
					case "UNSUPPORTED_HTML5_FEATURE": return MediaBundleErrorReason.UnsupportedHtml5Feature;
					case "URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT": return MediaBundleErrorReason.UrlInMediaBundleNotSslCompliant;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MediaBundleErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class MediaErrorReasonExtensions
		{
			public static string ToXmlValue(this MediaErrorReason enumValue)
			{
				switch (enumValue)
				{
					case MediaErrorReason.CannotAddStandardIcon: return "CANNOT_ADD_STANDARD_ICON";
					case MediaErrorReason.CannotSelectStandardIconWithOtherTypes: return "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES";
					case MediaErrorReason.CannotSpecifyMediaIdAndData: return "CANNOT_SPECIFY_MEDIA_ID_AND_DATA";
					case MediaErrorReason.DuplicateMedia: return "DUPLICATE_MEDIA";
					case MediaErrorReason.EmptyField: return "EMPTY_FIELD";
					case MediaErrorReason.EntityReferencedInMultipleOps: return "ENTITY_REFERENCED_IN_MULTIPLE_OPS";
					case MediaErrorReason.FieldNotSupportedForMediaSubType: return "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE";
					case MediaErrorReason.InvalidMediaId: return "INVALID_MEDIA_ID";
					case MediaErrorReason.InvalidMediaSubType: return "INVALID_MEDIA_SUB_TYPE";
					case MediaErrorReason.InvalidMediaType: return "INVALID_MEDIA_TYPE";
					case MediaErrorReason.InvalidMimeType: return "INVALID_MIME_TYPE";
					case MediaErrorReason.InvalidReferenceId: return "INVALID_REFERENCE_ID";
					case MediaErrorReason.InvalidYouTubeId: return "INVALID_YOU_TUBE_ID";
					case MediaErrorReason.MediaFailedTranscoding: return "MEDIA_FAILED_TRANSCODING";
					case MediaErrorReason.MediaNotTranscoded: return "MEDIA_NOT_TRANSCODED";
					case MediaErrorReason.MediaTypeDoesNotMatchObjectType: return "MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE";
					case MediaErrorReason.NoFieldsSpecified: return "NO_FIELDS_SPECIFIED";
					case MediaErrorReason.NullReferenceIdAndMediaId: return "NULL_REFERENCE_ID_AND_MEDIA_ID";
					case MediaErrorReason.TooLong: return "TOO_LONG";
					case MediaErrorReason.UnsupportedOperation: return "UNSUPPORTED_OPERATION";
					case MediaErrorReason.UnsupportedType: return "UNSUPPORTED_TYPE";
					case MediaErrorReason.YouTubeServiceUnavailable: return "YOU_TUBE_SERVICE_UNAVAILABLE";
					case MediaErrorReason.YouTubeVideoHasNonPositiveDuration: return "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION";
					case MediaErrorReason.YouTubeVideoNotFound: return "YOU_TUBE_VIDEO_NOT_FOUND";
					default: return null;
				}
			}
			public static MediaErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_ADD_STANDARD_ICON": return MediaErrorReason.CannotAddStandardIcon;
					case "CANNOT_SELECT_STANDARD_ICON_WITH_OTHER_TYPES": return MediaErrorReason.CannotSelectStandardIconWithOtherTypes;
					case "CANNOT_SPECIFY_MEDIA_ID_AND_DATA": return MediaErrorReason.CannotSpecifyMediaIdAndData;
					case "DUPLICATE_MEDIA": return MediaErrorReason.DuplicateMedia;
					case "EMPTY_FIELD": return MediaErrorReason.EmptyField;
					case "ENTITY_REFERENCED_IN_MULTIPLE_OPS": return MediaErrorReason.EntityReferencedInMultipleOps;
					case "FIELD_NOT_SUPPORTED_FOR_MEDIA_SUB_TYPE": return MediaErrorReason.FieldNotSupportedForMediaSubType;
					case "INVALID_MEDIA_ID": return MediaErrorReason.InvalidMediaId;
					case "INVALID_MEDIA_SUB_TYPE": return MediaErrorReason.InvalidMediaSubType;
					case "INVALID_MEDIA_TYPE": return MediaErrorReason.InvalidMediaType;
					case "INVALID_MIME_TYPE": return MediaErrorReason.InvalidMimeType;
					case "INVALID_REFERENCE_ID": return MediaErrorReason.InvalidReferenceId;
					case "INVALID_YOU_TUBE_ID": return MediaErrorReason.InvalidYouTubeId;
					case "MEDIA_FAILED_TRANSCODING": return MediaErrorReason.MediaFailedTranscoding;
					case "MEDIA_NOT_TRANSCODED": return MediaErrorReason.MediaNotTranscoded;
					case "MEDIA_TYPE_DOES_NOT_MATCH_OBJECT_TYPE": return MediaErrorReason.MediaTypeDoesNotMatchObjectType;
					case "NO_FIELDS_SPECIFIED": return MediaErrorReason.NoFieldsSpecified;
					case "NULL_REFERENCE_ID_AND_MEDIA_ID": return MediaErrorReason.NullReferenceIdAndMediaId;
					case "TOO_LONG": return MediaErrorReason.TooLong;
					case "UNSUPPORTED_OPERATION": return MediaErrorReason.UnsupportedOperation;
					case "UNSUPPORTED_TYPE": return MediaErrorReason.UnsupportedType;
					case "YOU_TUBE_SERVICE_UNAVAILABLE": return MediaErrorReason.YouTubeServiceUnavailable;
					case "YOU_TUBE_VIDEO_HAS_NON_POSITIVE_DURATION": return MediaErrorReason.YouTubeVideoHasNonPositiveDuration;
					case "YOU_TUBE_VIDEO_NOT_FOUND": return MediaErrorReason.YouTubeVideoNotFound;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MediaErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class MediaMediaTypeExtensions
		{
			public static string ToXmlValue(this MediaMediaType enumValue)
			{
				switch (enumValue)
				{
					case MediaMediaType.Audio: return "AUDIO";
					case MediaMediaType.DynamicImage: return "DYNAMIC_IMAGE";
					case MediaMediaType.Icon: return "ICON";
					case MediaMediaType.Image: return "IMAGE";
					case MediaMediaType.StandardIcon: return "STANDARD_ICON";
					case MediaMediaType.Video: return "VIDEO";
					case MediaMediaType.MediaBundle: return "MEDIA_BUNDLE";
					default: return null;
				}
			}
			public static MediaMediaType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AUDIO": return MediaMediaType.Audio;
					case "DYNAMIC_IMAGE": return MediaMediaType.DynamicImage;
					case "ICON": return MediaMediaType.Icon;
					case "IMAGE": return MediaMediaType.Image;
					case "STANDARD_ICON": return MediaMediaType.StandardIcon;
					case "VIDEO": return MediaMediaType.Video;
					case "MEDIA_BUNDLE": return MediaMediaType.MediaBundle;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MediaMediaType.", nameof(xmlValue));
				}
			}
		}
		public static class MediaMimeTypeExtensions
		{
			public static string ToXmlValue(this MediaMimeType enumValue)
			{
				switch (enumValue)
				{
					case MediaMimeType.ImageJpeg: return "IMAGE_JPEG";
					case MediaMimeType.ImageGif: return "IMAGE_GIF";
					case MediaMimeType.ImagePng: return "IMAGE_PNG";
					case MediaMimeType.Flash: return "FLASH";
					case MediaMimeType.TextHtml: return "TEXT_HTML";
					case MediaMimeType.Pdf: return "PDF";
					case MediaMimeType.Msword: return "MSWORD";
					case MediaMimeType.Msexcel: return "MSEXCEL";
					case MediaMimeType.Rtf: return "RTF";
					case MediaMimeType.AudioWav: return "AUDIO_WAV";
					case MediaMimeType.AudioMp3: return "AUDIO_MP3";
					case MediaMimeType.Html5AdZip: return "HTML5_AD_ZIP";
					default: return null;
				}
			}
			public static MediaMimeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "IMAGE_JPEG": return MediaMimeType.ImageJpeg;
					case "IMAGE_GIF": return MediaMimeType.ImageGif;
					case "IMAGE_PNG": return MediaMimeType.ImagePng;
					case "FLASH": return MediaMimeType.Flash;
					case "TEXT_HTML": return MediaMimeType.TextHtml;
					case "PDF": return MediaMimeType.Pdf;
					case "MSWORD": return MediaMimeType.Msword;
					case "MSEXCEL": return MediaMimeType.Msexcel;
					case "RTF": return MediaMimeType.Rtf;
					case "AUDIO_WAV": return MediaMimeType.AudioWav;
					case "AUDIO_MP3": return MediaMimeType.AudioMp3;
					case "HTML5_AD_ZIP": return MediaMimeType.Html5AdZip;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MediaMimeType.", nameof(xmlValue));
				}
			}
		}
		public static class MediaSizeExtensions
		{
			public static string ToXmlValue(this MediaSize enumValue)
			{
				switch (enumValue)
				{
					case MediaSize.Full: return "FULL";
					case MediaSize.Shrunken: return "SHRUNKEN";
					case MediaSize.Preview: return "PREVIEW";
					case MediaSize.VideoThumbnail: return "VIDEO_THUMBNAIL";
					default: return null;
				}
			}
			public static MediaSize Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FULL": return MediaSize.Full;
					case "SHRUNKEN": return MediaSize.Shrunken;
					case "PREVIEW": return MediaSize.Preview;
					case "VIDEO_THUMBNAIL": return MediaSize.VideoThumbnail;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MediaSize.", nameof(xmlValue));
				}
			}
		}
		public static class MinuteOfHourExtensions
		{
			public static string ToXmlValue(this MinuteOfHour enumValue)
			{
				switch (enumValue)
				{
					case MinuteOfHour.Zero: return "ZERO";
					case MinuteOfHour.Fifteen: return "FIFTEEN";
					case MinuteOfHour.Thirty: return "THIRTY";
					case MinuteOfHour.FortyFive: return "FORTY_FIVE";
					default: return null;
				}
			}
			public static MinuteOfHour Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ZERO": return MinuteOfHour.Zero;
					case "FIFTEEN": return MinuteOfHour.Fifteen;
					case "THIRTY": return MinuteOfHour.Thirty;
					case "FORTY_FIVE": return MinuteOfHour.FortyFive;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MinuteOfHour.", nameof(xmlValue));
				}
			}
		}
		public static class MobileDeviceDeviceTypeExtensions
		{
			public static string ToXmlValue(this MobileDeviceDeviceType enumValue)
			{
				switch (enumValue)
				{
					case MobileDeviceDeviceType.DeviceTypeMobile: return "DEVICE_TYPE_MOBILE";
					case MobileDeviceDeviceType.DeviceTypeTablet: return "DEVICE_TYPE_TABLET";
					default: return null;
				}
			}
			public static MobileDeviceDeviceType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DEVICE_TYPE_MOBILE": return MobileDeviceDeviceType.DeviceTypeMobile;
					case "DEVICE_TYPE_TABLET": return MobileDeviceDeviceType.DeviceTypeTablet;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MobileDeviceDeviceType.", nameof(xmlValue));
				}
			}
		}
		public static class MultiplierErrorReasonExtensions
		{
			public static string ToXmlValue(this MultiplierErrorReason enumValue)
			{
				switch (enumValue)
				{
					case MultiplierErrorReason.MultiplierTooHigh: return "MULTIPLIER_TOO_HIGH";
					case MultiplierErrorReason.MultiplierTooLow: return "MULTIPLIER_TOO_LOW";
					case MultiplierErrorReason.TooManyFractionalDigits: return "TOO_MANY_FRACTIONAL_DIGITS";
					case MultiplierErrorReason.MultiplierNotAllowedForBiddingStrategy: return "MULTIPLIER_NOT_ALLOWED_FOR_BIDDING_STRATEGY";
					case MultiplierErrorReason.MultiplierNotAllowedWhenBaseBidIsMissing: return "MULTIPLIER_NOT_ALLOWED_WHEN_BASE_BID_IS_MISSING";
					case MultiplierErrorReason.NoMultiplierSpecified: return "NO_MULTIPLIER_SPECIFIED";
					case MultiplierErrorReason.MultiplierCausesBidToExceedDailyBudget: return "MULTIPLIER_CAUSES_BID_TO_EXCEED_DAILY_BUDGET";
					case MultiplierErrorReason.MultiplierCausesBidToExceedMonthlyBudget: return "MULTIPLIER_CAUSES_BID_TO_EXCEED_MONTHLY_BUDGET";
					case MultiplierErrorReason.MultiplierCausesBidToExceedCustomBudget: return "MULTIPLIER_CAUSES_BID_TO_EXCEED_CUSTOM_BUDGET";
					case MultiplierErrorReason.MultiplierCausesBidToExceedMaxAllowedBid: return "MULTIPLIER_CAUSES_BID_TO_EXCEED_MAX_ALLOWED_BID";
					case MultiplierErrorReason.BidLessThanMinAllowedBidWithMultiplier: return "BID_LESS_THAN_MIN_ALLOWED_BID_WITH_MULTIPLIER";
					case MultiplierErrorReason.MultiplierAndBiddingStrategyTypeMismatch: return "MULTIPLIER_AND_BIDDING_STRATEGY_TYPE_MISMATCH";
					case MultiplierErrorReason.MultiplierError: return "MULTIPLIER_ERROR";
					default: return null;
				}
			}
			public static MultiplierErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "MULTIPLIER_TOO_HIGH": return MultiplierErrorReason.MultiplierTooHigh;
					case "MULTIPLIER_TOO_LOW": return MultiplierErrorReason.MultiplierTooLow;
					case "TOO_MANY_FRACTIONAL_DIGITS": return MultiplierErrorReason.TooManyFractionalDigits;
					case "MULTIPLIER_NOT_ALLOWED_FOR_BIDDING_STRATEGY": return MultiplierErrorReason.MultiplierNotAllowedForBiddingStrategy;
					case "MULTIPLIER_NOT_ALLOWED_WHEN_BASE_BID_IS_MISSING": return MultiplierErrorReason.MultiplierNotAllowedWhenBaseBidIsMissing;
					case "NO_MULTIPLIER_SPECIFIED": return MultiplierErrorReason.NoMultiplierSpecified;
					case "MULTIPLIER_CAUSES_BID_TO_EXCEED_DAILY_BUDGET": return MultiplierErrorReason.MultiplierCausesBidToExceedDailyBudget;
					case "MULTIPLIER_CAUSES_BID_TO_EXCEED_MONTHLY_BUDGET": return MultiplierErrorReason.MultiplierCausesBidToExceedMonthlyBudget;
					case "MULTIPLIER_CAUSES_BID_TO_EXCEED_CUSTOM_BUDGET": return MultiplierErrorReason.MultiplierCausesBidToExceedCustomBudget;
					case "MULTIPLIER_CAUSES_BID_TO_EXCEED_MAX_ALLOWED_BID": return MultiplierErrorReason.MultiplierCausesBidToExceedMaxAllowedBid;
					case "BID_LESS_THAN_MIN_ALLOWED_BID_WITH_MULTIPLIER": return MultiplierErrorReason.BidLessThanMinAllowedBidWithMultiplier;
					case "MULTIPLIER_AND_BIDDING_STRATEGY_TYPE_MISMATCH": return MultiplierErrorReason.MultiplierAndBiddingStrategyTypeMismatch;
					case "MULTIPLIER_ERROR": return MultiplierErrorReason.MultiplierError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MultiplierErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class MutateMembersErrorReasonExtensions
		{
			public static string ToXmlValue(this MutateMembersErrorReason enumValue)
			{
				switch (enumValue)
				{
					case MutateMembersErrorReason.Unknown: return "UNKNOWN";
					case MutateMembersErrorReason.UnsupportedMethod: return "UNSUPPORTED_METHOD";
					case MutateMembersErrorReason.InvalidUserListId: return "INVALID_USER_LIST_ID";
					case MutateMembersErrorReason.InvalidUserListType: return "INVALID_USER_LIST_TYPE";
					case MutateMembersErrorReason.InvalidDataType: return "INVALID_DATA_TYPE";
					case MutateMembersErrorReason.InvalidSha256Format: return "INVALID_SHA256_FORMAT";
					case MutateMembersErrorReason.OperatorConflictForSameUserListId: return "OPERATOR_CONFLICT_FOR_SAME_USER_LIST_ID";
					case MutateMembersErrorReason.InvalidRemoveallOperation: return "INVALID_REMOVEALL_OPERATION";
					case MutateMembersErrorReason.InvalidOperationOrder: return "INVALID_OPERATION_ORDER";
					default: return null;
				}
			}
			public static MutateMembersErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return MutateMembersErrorReason.Unknown;
					case "UNSUPPORTED_METHOD": return MutateMembersErrorReason.UnsupportedMethod;
					case "INVALID_USER_LIST_ID": return MutateMembersErrorReason.InvalidUserListId;
					case "INVALID_USER_LIST_TYPE": return MutateMembersErrorReason.InvalidUserListType;
					case "INVALID_DATA_TYPE": return MutateMembersErrorReason.InvalidDataType;
					case "INVALID_SHA256_FORMAT": return MutateMembersErrorReason.InvalidSha256Format;
					case "OPERATOR_CONFLICT_FOR_SAME_USER_LIST_ID": return MutateMembersErrorReason.OperatorConflictForSameUserListId;
					case "INVALID_REMOVEALL_OPERATION": return MutateMembersErrorReason.InvalidRemoveallOperation;
					case "INVALID_OPERATION_ORDER": return MutateMembersErrorReason.InvalidOperationOrder;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MutateMembersErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class MutateMembersOperandDataTypeExtensions
		{
			public static string ToXmlValue(this MutateMembersOperandDataType enumValue)
			{
				switch (enumValue)
				{
					case MutateMembersOperandDataType.EmailSha256: return "EMAIL_SHA256";
					default: return null;
				}
			}
			public static MutateMembersOperandDataType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EMAIL_SHA256": return MutateMembersOperandDataType.EmailSha256;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type MutateMembersOperandDataType.", nameof(xmlValue));
				}
			}
		}
		public static class NewEntityCreationErrorReasonExtensions
		{
			public static string ToXmlValue(this NewEntityCreationErrorReason enumValue)
			{
				switch (enumValue)
				{
					case NewEntityCreationErrorReason.CannotSetIdForAdd: return "CANNOT_SET_ID_FOR_ADD";
					case NewEntityCreationErrorReason.DuplicateTempIds: return "DUPLICATE_TEMP_IDS";
					case NewEntityCreationErrorReason.TempIdEntityHadErrors: return "TEMP_ID_ENTITY_HAD_ERRORS";
					default: return null;
				}
			}
			public static NewEntityCreationErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CANNOT_SET_ID_FOR_ADD": return NewEntityCreationErrorReason.CannotSetIdForAdd;
					case "DUPLICATE_TEMP_IDS": return NewEntityCreationErrorReason.DuplicateTempIds;
					case "TEMP_ID_ENTITY_HAD_ERRORS": return NewEntityCreationErrorReason.TempIdEntityHadErrors;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type NewEntityCreationErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class NotEmptyErrorReasonExtensions
		{
			public static string ToXmlValue(this NotEmptyErrorReason enumValue)
			{
				switch (enumValue)
				{
					case NotEmptyErrorReason.EmptyList: return "EMPTY_LIST";
					default: return null;
				}
			}
			public static NotEmptyErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EMPTY_LIST": return NotEmptyErrorReason.EmptyList;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type NotEmptyErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class NotWhitelistedErrorReasonExtensions
		{
			public static string ToXmlValue(this NotWhitelistedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case NotWhitelistedErrorReason.CustomerNotWhitelistedForApi: return "CUSTOMER_NOT_WHITELISTED_FOR_API";
					default: return null;
				}
			}
			public static NotWhitelistedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CUSTOMER_NOT_WHITELISTED_FOR_API": return NotWhitelistedErrorReason.CustomerNotWhitelistedForApi;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type NotWhitelistedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class NullErrorReasonExtensions
		{
			public static string ToXmlValue(this NullErrorReason enumValue)
			{
				switch (enumValue)
				{
					case NullErrorReason.NullContent: return "NULL_CONTENT";
					default: return null;
				}
			}
			public static NullErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NULL_CONTENT": return NullErrorReason.NullContent;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type NullErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class NumberRuleItemNumberOperatorExtensions
		{
			public static string ToXmlValue(this NumberRuleItemNumberOperator enumValue)
			{
				switch (enumValue)
				{
					case NumberRuleItemNumberOperator.Unknown: return "UNKNOWN";
					case NumberRuleItemNumberOperator.GreaterThan: return "GREATER_THAN";
					case NumberRuleItemNumberOperator.GreaterThanOrEqual: return "GREATER_THAN_OR_EQUAL";
					case NumberRuleItemNumberOperator.Equals: return "EQUALS";
					case NumberRuleItemNumberOperator.NotEqual: return "NOT_EQUAL";
					case NumberRuleItemNumberOperator.LessThan: return "LESS_THAN";
					case NumberRuleItemNumberOperator.LessThanOrEqual: return "LESS_THAN_OR_EQUAL";
					default: return null;
				}
			}
			public static NumberRuleItemNumberOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return NumberRuleItemNumberOperator.Unknown;
					case "GREATER_THAN": return NumberRuleItemNumberOperator.GreaterThan;
					case "GREATER_THAN_OR_EQUAL": return NumberRuleItemNumberOperator.GreaterThanOrEqual;
					case "EQUALS": return NumberRuleItemNumberOperator.Equals;
					case "NOT_EQUAL": return NumberRuleItemNumberOperator.NotEqual;
					case "LESS_THAN": return NumberRuleItemNumberOperator.LessThan;
					case "LESS_THAN_OR_EQUAL": return NumberRuleItemNumberOperator.LessThanOrEqual;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type NumberRuleItemNumberOperator.", nameof(xmlValue));
				}
			}
		}
		public static class OfflineCallConversionErrorReasonExtensions
		{
			public static string ToXmlValue(this OfflineCallConversionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case OfflineCallConversionErrorReason.ConversionPrecedesCall: return "CONVERSION_PRECEDES_CALL";
					case OfflineCallConversionErrorReason.FutureCallStartTime: return "FUTURE_CALL_START_TIME";
					case OfflineCallConversionErrorReason.FutureConversionTime: return "FUTURE_CONVERSION_TIME";
					case OfflineCallConversionErrorReason.ExpiredCall: return "EXPIRED_CALL";
					case OfflineCallConversionErrorReason.TooRecentCall: return "TOO_RECENT_CALL";
					case OfflineCallConversionErrorReason.UnparseableCallersPhoneNumber: return "UNPARSEABLE_CALLERS_PHONE_NUMBER";
					case OfflineCallConversionErrorReason.InvalidCall: return "INVALID_CALL";
					case OfflineCallConversionErrorReason.UnauthorizedUser: return "UNAUTHORIZED_USER";
					case OfflineCallConversionErrorReason.InvalidConversionType: return "INVALID_CONVERSION_TYPE";
					case OfflineCallConversionErrorReason.TooRecentConversionType: return "TOO_RECENT_CONVERSION_TYPE";
					case OfflineCallConversionErrorReason.ConversionTrackingNotEnabledAtCallTime: return "CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME";
					case OfflineCallConversionErrorReason.DesktopCallNotSupported: return "DESKTOP_CALL_NOT_SUPPORTED";
					case OfflineCallConversionErrorReason.InternalError: return "INTERNAL_ERROR";
					case OfflineCallConversionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static OfflineCallConversionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CONVERSION_PRECEDES_CALL": return OfflineCallConversionErrorReason.ConversionPrecedesCall;
					case "FUTURE_CALL_START_TIME": return OfflineCallConversionErrorReason.FutureCallStartTime;
					case "FUTURE_CONVERSION_TIME": return OfflineCallConversionErrorReason.FutureConversionTime;
					case "EXPIRED_CALL": return OfflineCallConversionErrorReason.ExpiredCall;
					case "TOO_RECENT_CALL": return OfflineCallConversionErrorReason.TooRecentCall;
					case "UNPARSEABLE_CALLERS_PHONE_NUMBER": return OfflineCallConversionErrorReason.UnparseableCallersPhoneNumber;
					case "INVALID_CALL": return OfflineCallConversionErrorReason.InvalidCall;
					case "UNAUTHORIZED_USER": return OfflineCallConversionErrorReason.UnauthorizedUser;
					case "INVALID_CONVERSION_TYPE": return OfflineCallConversionErrorReason.InvalidConversionType;
					case "TOO_RECENT_CONVERSION_TYPE": return OfflineCallConversionErrorReason.TooRecentConversionType;
					case "CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME": return OfflineCallConversionErrorReason.ConversionTrackingNotEnabledAtCallTime;
					case "DESKTOP_CALL_NOT_SUPPORTED": return OfflineCallConversionErrorReason.DesktopCallNotSupported;
					case "INTERNAL_ERROR": return OfflineCallConversionErrorReason.InternalError;
					case "UNKNOWN": return OfflineCallConversionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type OfflineCallConversionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class OfflineConversionErrorReasonExtensions
		{
			public static string ToXmlValue(this OfflineConversionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case OfflineConversionErrorReason.UnparseableGclid: return "UNPARSEABLE_GCLID";
					case OfflineConversionErrorReason.ConversionPrecedesClick: return "CONVERSION_PRECEDES_CLICK";
					case OfflineConversionErrorReason.FutureConversionTime: return "FUTURE_CONVERSION_TIME";
					case OfflineConversionErrorReason.ExpiredClick: return "EXPIRED_CLICK";
					case OfflineConversionErrorReason.TooRecentClick: return "TOO_RECENT_CLICK";
					case OfflineConversionErrorReason.InvalidClick: return "INVALID_CLICK";
					case OfflineConversionErrorReason.UnauthorizedUser: return "UNAUTHORIZED_USER";
					case OfflineConversionErrorReason.InvalidConversionType: return "INVALID_CONVERSION_TYPE";
					case OfflineConversionErrorReason.TooRecentConversionType: return "TOO_RECENT_CONVERSION_TYPE";
					case OfflineConversionErrorReason.ClickMissingConversionLabel: return "CLICK_MISSING_CONVERSION_LABEL";
					case OfflineConversionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static OfflineConversionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNPARSEABLE_GCLID": return OfflineConversionErrorReason.UnparseableGclid;
					case "CONVERSION_PRECEDES_CLICK": return OfflineConversionErrorReason.ConversionPrecedesClick;
					case "FUTURE_CONVERSION_TIME": return OfflineConversionErrorReason.FutureConversionTime;
					case "EXPIRED_CLICK": return OfflineConversionErrorReason.ExpiredClick;
					case "TOO_RECENT_CLICK": return OfflineConversionErrorReason.TooRecentClick;
					case "INVALID_CLICK": return OfflineConversionErrorReason.InvalidClick;
					case "UNAUTHORIZED_USER": return OfflineConversionErrorReason.UnauthorizedUser;
					case "INVALID_CONVERSION_TYPE": return OfflineConversionErrorReason.InvalidConversionType;
					case "TOO_RECENT_CONVERSION_TYPE": return OfflineConversionErrorReason.TooRecentConversionType;
					case "CLICK_MISSING_CONVERSION_LABEL": return OfflineConversionErrorReason.ClickMissingConversionLabel;
					case "UNKNOWN": return OfflineConversionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type OfflineConversionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class OperatingSystemVersionOperatorTypeExtensions
		{
			public static string ToXmlValue(this OperatingSystemVersionOperatorType enumValue)
			{
				switch (enumValue)
				{
					case OperatingSystemVersionOperatorType.GreaterThanEqualTo: return "GREATER_THAN_EQUAL_TO";
					case OperatingSystemVersionOperatorType.EqualTo: return "EQUAL_TO";
					case OperatingSystemVersionOperatorType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static OperatingSystemVersionOperatorType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "GREATER_THAN_EQUAL_TO": return OperatingSystemVersionOperatorType.GreaterThanEqualTo;
					case "EQUAL_TO": return OperatingSystemVersionOperatorType.EqualTo;
					case "UNKNOWN": return OperatingSystemVersionOperatorType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type OperatingSystemVersionOperatorType.", nameof(xmlValue));
				}
			}
		}
		public static class OperationAccessDeniedReasonExtensions
		{
			public static string ToXmlValue(this OperationAccessDeniedReason enumValue)
			{
				switch (enumValue)
				{
					case OperationAccessDeniedReason.ActionNotPermitted: return "ACTION_NOT_PERMITTED";
					case OperationAccessDeniedReason.AddOperationNotPermitted: return "ADD_OPERATION_NOT_PERMITTED";
					case OperationAccessDeniedReason.RemoveOperationNotPermitted: return "REMOVE_OPERATION_NOT_PERMITTED";
					case OperationAccessDeniedReason.SetOperationNotPermitted: return "SET_OPERATION_NOT_PERMITTED";
					case OperationAccessDeniedReason.MutateActionNotPermittedForClient: return "MUTATE_ACTION_NOT_PERMITTED_FOR_CLIENT";
					case OperationAccessDeniedReason.OperationNotPermittedForCampaignType: return "OPERATION_NOT_PERMITTED_FOR_CAMPAIGN_TYPE";
					case OperationAccessDeniedReason.AddAsRemovedNotPermitted: return "ADD_AS_REMOVED_NOT_PERMITTED";
					case OperationAccessDeniedReason.OperationNotPermittedForRemovedEntity: return "OPERATION_NOT_PERMITTED_FOR_REMOVED_ENTITY";
					case OperationAccessDeniedReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static OperationAccessDeniedReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTION_NOT_PERMITTED": return OperationAccessDeniedReason.ActionNotPermitted;
					case "ADD_OPERATION_NOT_PERMITTED": return OperationAccessDeniedReason.AddOperationNotPermitted;
					case "REMOVE_OPERATION_NOT_PERMITTED": return OperationAccessDeniedReason.RemoveOperationNotPermitted;
					case "SET_OPERATION_NOT_PERMITTED": return OperationAccessDeniedReason.SetOperationNotPermitted;
					case "MUTATE_ACTION_NOT_PERMITTED_FOR_CLIENT": return OperationAccessDeniedReason.MutateActionNotPermittedForClient;
					case "OPERATION_NOT_PERMITTED_FOR_CAMPAIGN_TYPE": return OperationAccessDeniedReason.OperationNotPermittedForCampaignType;
					case "ADD_AS_REMOVED_NOT_PERMITTED": return OperationAccessDeniedReason.AddAsRemovedNotPermitted;
					case "OPERATION_NOT_PERMITTED_FOR_REMOVED_ENTITY": return OperationAccessDeniedReason.OperationNotPermittedForRemovedEntity;
					case "UNKNOWN": return OperationAccessDeniedReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type OperationAccessDeniedReason.", nameof(xmlValue));
				}
			}
		}
		public static class OperatorExtensions
		{
			public static string ToXmlValue(this Operator enumValue)
			{
				switch (enumValue)
				{
					case Operator.Add: return "ADD";
					case Operator.Remove: return "REMOVE";
					case Operator.Set: return "SET";
					default: return null;
				}
			}
			public static Operator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADD": return Operator.Add;
					case "REMOVE": return Operator.Remove;
					case "SET": return Operator.Set;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type Operator.", nameof(xmlValue));
				}
			}
		}
		public static class OperatorErrorReasonExtensions
		{
			public static string ToXmlValue(this OperatorErrorReason enumValue)
			{
				switch (enumValue)
				{
					case OperatorErrorReason.OperatorNotSupported: return "OPERATOR_NOT_SUPPORTED";
					default: return null;
				}
			}
			public static OperatorErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OPERATOR_NOT_SUPPORTED": return OperatorErrorReason.OperatorNotSupported;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type OperatorErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class PageOnePromotedBiddingSchemeStrategyGoalExtensions
		{
			public static string ToXmlValue(this PageOnePromotedBiddingSchemeStrategyGoal enumValue)
			{
				switch (enumValue)
				{
					case PageOnePromotedBiddingSchemeStrategyGoal.PageOne: return "PAGE_ONE";
					case PageOnePromotedBiddingSchemeStrategyGoal.PageOnePromoted: return "PAGE_ONE_PROMOTED";
					default: return null;
				}
			}
			public static PageOnePromotedBiddingSchemeStrategyGoal Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "PAGE_ONE": return PageOnePromotedBiddingSchemeStrategyGoal.PageOne;
					case "PAGE_ONE_PROMOTED": return PageOnePromotedBiddingSchemeStrategyGoal.PageOnePromoted;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PageOnePromotedBiddingSchemeStrategyGoal.", nameof(xmlValue));
				}
			}
		}
		public static class PagingErrorReasonExtensions
		{
			public static string ToXmlValue(this PagingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case PagingErrorReason.StartIndexCannotBeNegative: return "START_INDEX_CANNOT_BE_NEGATIVE";
					case PagingErrorReason.NumberOfResultsCannotBeNegative: return "NUMBER_OF_RESULTS_CANNOT_BE_NEGATIVE";
					case PagingErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static PagingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "START_INDEX_CANNOT_BE_NEGATIVE": return PagingErrorReason.StartIndexCannotBeNegative;
					case "NUMBER_OF_RESULTS_CANNOT_BE_NEGATIVE": return PagingErrorReason.NumberOfResultsCannotBeNegative;
					case "UNKNOWN": return PagingErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PagingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ParentParentTypeExtensions
		{
			public static string ToXmlValue(this ParentParentType enumValue)
			{
				switch (enumValue)
				{
					case ParentParentType.ParentParent: return "PARENT_PARENT";
					case ParentParentType.ParentNotAParent: return "PARENT_NOT_A_PARENT";
					case ParentParentType.ParentUndetermined: return "PARENT_UNDETERMINED";
					case ParentParentType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ParentParentType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "PARENT_PARENT": return ParentParentType.ParentParent;
					case "PARENT_NOT_A_PARENT": return ParentParentType.ParentNotAParent;
					case "PARENT_UNDETERMINED": return ParentParentType.ParentUndetermined;
					case "UNKNOWN": return ParentParentType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ParentParentType.", nameof(xmlValue));
				}
			}
		}
		public static class PlacesOfInterestOperandCategoryExtensions
		{
			public static string ToXmlValue(this PlacesOfInterestOperandCategory enumValue)
			{
				switch (enumValue)
				{
					case PlacesOfInterestOperandCategory.Airport: return "AIRPORT";
					case PlacesOfInterestOperandCategory.Downtown: return "DOWNTOWN";
					case PlacesOfInterestOperandCategory.University: return "UNIVERSITY";
					case PlacesOfInterestOperandCategory.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static PlacesOfInterestOperandCategory Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "AIRPORT": return PlacesOfInterestOperandCategory.Airport;
					case "DOWNTOWN": return PlacesOfInterestOperandCategory.Downtown;
					case "UNIVERSITY": return PlacesOfInterestOperandCategory.University;
					case "UNKNOWN": return PlacesOfInterestOperandCategory.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PlacesOfInterestOperandCategory.", nameof(xmlValue));
				}
			}
		}
		public static class PolicyTopicEntryTypeExtensions
		{
			public static string ToXmlValue(this PolicyTopicEntryType enumValue)
			{
				switch (enumValue)
				{
					case PolicyTopicEntryType.Unknown: return "UNKNOWN";
					case PolicyTopicEntryType.Prohibited: return "PROHIBITED";
					case PolicyTopicEntryType.Limited: return "LIMITED";
					default: return null;
				}
			}
			public static PolicyTopicEntryType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return PolicyTopicEntryType.Unknown;
					case "PROHIBITED": return PolicyTopicEntryType.Prohibited;
					case "LIMITED": return PolicyTopicEntryType.Limited;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PolicyTopicEntryType.", nameof(xmlValue));
				}
			}
		}
		public static class PolicyTopicEvidenceTypeExtensions
		{
			public static string ToXmlValue(this PolicyTopicEvidenceType enumValue)
			{
				switch (enumValue)
				{
					case PolicyTopicEvidenceType.Unknown: return "UNKNOWN";
					case PolicyTopicEvidenceType.AdText: return "AD_TEXT";
					case PolicyTopicEvidenceType.HttpCode: return "HTTP_CODE";
					default: return null;
				}
			}
			public static PolicyTopicEvidenceType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return PolicyTopicEvidenceType.Unknown;
					case "AD_TEXT": return PolicyTopicEvidenceType.AdText;
					case "HTTP_CODE": return PolicyTopicEvidenceType.HttpCode;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PolicyTopicEvidenceType.", nameof(xmlValue));
				}
			}
		}
		public static class PredicateOperatorExtensions
		{
			public static string ToXmlValue(this PredicateOperator enumValue)
			{
				switch (enumValue)
				{
					case PredicateOperator.Equals: return "EQUALS";
					case PredicateOperator.NotEquals: return "NOT_EQUALS";
					case PredicateOperator.In: return "IN";
					case PredicateOperator.NotIn: return "NOT_IN";
					case PredicateOperator.GreaterThan: return "GREATER_THAN";
					case PredicateOperator.GreaterThanEquals: return "GREATER_THAN_EQUALS";
					case PredicateOperator.LessThan: return "LESS_THAN";
					case PredicateOperator.LessThanEquals: return "LESS_THAN_EQUALS";
					case PredicateOperator.StartsWith: return "STARTS_WITH";
					case PredicateOperator.StartsWithIgnoreCase: return "STARTS_WITH_IGNORE_CASE";
					case PredicateOperator.Contains: return "CONTAINS";
					case PredicateOperator.ContainsIgnoreCase: return "CONTAINS_IGNORE_CASE";
					case PredicateOperator.DoesNotContain: return "DOES_NOT_CONTAIN";
					case PredicateOperator.DoesNotContainIgnoreCase: return "DOES_NOT_CONTAIN_IGNORE_CASE";
					case PredicateOperator.ContainsAny: return "CONTAINS_ANY";
					case PredicateOperator.ContainsAll: return "CONTAINS_ALL";
					case PredicateOperator.ContainsNone: return "CONTAINS_NONE";
					case PredicateOperator.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static PredicateOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EQUALS": return PredicateOperator.Equals;
					case "NOT_EQUALS": return PredicateOperator.NotEquals;
					case "IN": return PredicateOperator.In;
					case "NOT_IN": return PredicateOperator.NotIn;
					case "GREATER_THAN": return PredicateOperator.GreaterThan;
					case "GREATER_THAN_EQUALS": return PredicateOperator.GreaterThanEquals;
					case "LESS_THAN": return PredicateOperator.LessThan;
					case "LESS_THAN_EQUALS": return PredicateOperator.LessThanEquals;
					case "STARTS_WITH": return PredicateOperator.StartsWith;
					case "STARTS_WITH_IGNORE_CASE": return PredicateOperator.StartsWithIgnoreCase;
					case "CONTAINS": return PredicateOperator.Contains;
					case "CONTAINS_IGNORE_CASE": return PredicateOperator.ContainsIgnoreCase;
					case "DOES_NOT_CONTAIN": return PredicateOperator.DoesNotContain;
					case "DOES_NOT_CONTAIN_IGNORE_CASE": return PredicateOperator.DoesNotContainIgnoreCase;
					case "CONTAINS_ANY": return PredicateOperator.ContainsAny;
					case "CONTAINS_ALL": return PredicateOperator.ContainsAll;
					case "CONTAINS_NONE": return PredicateOperator.ContainsNone;
					case "UNKNOWN": return PredicateOperator.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PredicateOperator.", nameof(xmlValue));
				}
			}
		}
		public static class PriceExtensionPriceQualifierExtensions
		{
			public static string ToXmlValue(this PriceExtensionPriceQualifier enumValue)
			{
				switch (enumValue)
				{
					case PriceExtensionPriceQualifier.Unknown: return "UNKNOWN";
					case PriceExtensionPriceQualifier.From: return "FROM";
					case PriceExtensionPriceQualifier.UpTo: return "UP_TO";
					case PriceExtensionPriceQualifier.None: return "NONE";
					default: return null;
				}
			}
			public static PriceExtensionPriceQualifier Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return PriceExtensionPriceQualifier.Unknown;
					case "FROM": return PriceExtensionPriceQualifier.From;
					case "UP_TO": return PriceExtensionPriceQualifier.UpTo;
					case "NONE": return PriceExtensionPriceQualifier.None;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PriceExtensionPriceQualifier.", nameof(xmlValue));
				}
			}
		}
		public static class PriceExtensionPriceUnitExtensions
		{
			public static string ToXmlValue(this PriceExtensionPriceUnit enumValue)
			{
				switch (enumValue)
				{
					case PriceExtensionPriceUnit.Unknown: return "UNKNOWN";
					case PriceExtensionPriceUnit.PerHour: return "PER_HOUR";
					case PriceExtensionPriceUnit.PerDay: return "PER_DAY";
					case PriceExtensionPriceUnit.PerWeek: return "PER_WEEK";
					case PriceExtensionPriceUnit.PerMonth: return "PER_MONTH";
					case PriceExtensionPriceUnit.PerYear: return "PER_YEAR";
					case PriceExtensionPriceUnit.None: return "NONE";
					default: return null;
				}
			}
			public static PriceExtensionPriceUnit Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return PriceExtensionPriceUnit.Unknown;
					case "PER_HOUR": return PriceExtensionPriceUnit.PerHour;
					case "PER_DAY": return PriceExtensionPriceUnit.PerDay;
					case "PER_WEEK": return PriceExtensionPriceUnit.PerWeek;
					case "PER_MONTH": return PriceExtensionPriceUnit.PerMonth;
					case "PER_YEAR": return PriceExtensionPriceUnit.PerYear;
					case "NONE": return PriceExtensionPriceUnit.None;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PriceExtensionPriceUnit.", nameof(xmlValue));
				}
			}
		}
		public static class PriceExtensionTypeExtensions
		{
			public static string ToXmlValue(this PriceExtensionType enumValue)
			{
				switch (enumValue)
				{
					case PriceExtensionType.Unknown: return "UNKNOWN";
					case PriceExtensionType.Brands: return "BRANDS";
					case PriceExtensionType.Events: return "EVENTS";
					case PriceExtensionType.Locations: return "LOCATIONS";
					case PriceExtensionType.Neighborhoods: return "NEIGHBORHOODS";
					case PriceExtensionType.ProductCategories: return "PRODUCT_CATEGORIES";
					case PriceExtensionType.ProductTiers: return "PRODUCT_TIERS";
					case PriceExtensionType.Services: return "SERVICES";
					case PriceExtensionType.ServiceCategories: return "SERVICE_CATEGORIES";
					case PriceExtensionType.ServiceTiers: return "SERVICE_TIERS";
					default: return null;
				}
			}
			public static PriceExtensionType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return PriceExtensionType.Unknown;
					case "BRANDS": return PriceExtensionType.Brands;
					case "EVENTS": return PriceExtensionType.Events;
					case "LOCATIONS": return PriceExtensionType.Locations;
					case "NEIGHBORHOODS": return PriceExtensionType.Neighborhoods;
					case "PRODUCT_CATEGORIES": return PriceExtensionType.ProductCategories;
					case "PRODUCT_TIERS": return PriceExtensionType.ProductTiers;
					case "SERVICES": return PriceExtensionType.Services;
					case "SERVICE_CATEGORIES": return PriceExtensionType.ServiceCategories;
					case "SERVICE_TIERS": return PriceExtensionType.ServiceTiers;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type PriceExtensionType.", nameof(xmlValue));
				}
			}
		}
		public static class ProductCanonicalConditionConditionExtensions
		{
			public static string ToXmlValue(this ProductCanonicalConditionCondition enumValue)
			{
				switch (enumValue)
				{
					case ProductCanonicalConditionCondition.New: return "NEW";
					case ProductCanonicalConditionCondition.Used: return "USED";
					case ProductCanonicalConditionCondition.Refurbished: return "REFURBISHED";
					case ProductCanonicalConditionCondition.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ProductCanonicalConditionCondition Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NEW": return ProductCanonicalConditionCondition.New;
					case "USED": return ProductCanonicalConditionCondition.Used;
					case "REFURBISHED": return ProductCanonicalConditionCondition.Refurbished;
					case "UNKNOWN": return ProductCanonicalConditionCondition.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ProductCanonicalConditionCondition.", nameof(xmlValue));
				}
			}
		}
		public static class ProductDimensionTypeExtensions
		{
			public static string ToXmlValue(this ProductDimensionType enumValue)
			{
				switch (enumValue)
				{
					case ProductDimensionType.Unknown: return "UNKNOWN";
					case ProductDimensionType.BiddingCategoryL1: return "BIDDING_CATEGORY_L1";
					case ProductDimensionType.BiddingCategoryL2: return "BIDDING_CATEGORY_L2";
					case ProductDimensionType.BiddingCategoryL3: return "BIDDING_CATEGORY_L3";
					case ProductDimensionType.BiddingCategoryL4: return "BIDDING_CATEGORY_L4";
					case ProductDimensionType.BiddingCategoryL5: return "BIDDING_CATEGORY_L5";
					case ProductDimensionType.Brand: return "BRAND";
					case ProductDimensionType.CanonicalCondition: return "CANONICAL_CONDITION";
					case ProductDimensionType.CustomAttribute0: return "CUSTOM_ATTRIBUTE_0";
					case ProductDimensionType.CustomAttribute1: return "CUSTOM_ATTRIBUTE_1";
					case ProductDimensionType.CustomAttribute2: return "CUSTOM_ATTRIBUTE_2";
					case ProductDimensionType.CustomAttribute3: return "CUSTOM_ATTRIBUTE_3";
					case ProductDimensionType.CustomAttribute4: return "CUSTOM_ATTRIBUTE_4";
					case ProductDimensionType.OfferId: return "OFFER_ID";
					case ProductDimensionType.ProductTypeL1: return "PRODUCT_TYPE_L1";
					case ProductDimensionType.ProductTypeL2: return "PRODUCT_TYPE_L2";
					case ProductDimensionType.ProductTypeL3: return "PRODUCT_TYPE_L3";
					case ProductDimensionType.ProductTypeL4: return "PRODUCT_TYPE_L4";
					case ProductDimensionType.ProductTypeL5: return "PRODUCT_TYPE_L5";
					case ProductDimensionType.Channel: return "CHANNEL";
					case ProductDimensionType.ChannelExclusivity: return "CHANNEL_EXCLUSIVITY";
					default: return null;
				}
			}
			public static ProductDimensionType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ProductDimensionType.Unknown;
					case "BIDDING_CATEGORY_L1": return ProductDimensionType.BiddingCategoryL1;
					case "BIDDING_CATEGORY_L2": return ProductDimensionType.BiddingCategoryL2;
					case "BIDDING_CATEGORY_L3": return ProductDimensionType.BiddingCategoryL3;
					case "BIDDING_CATEGORY_L4": return ProductDimensionType.BiddingCategoryL4;
					case "BIDDING_CATEGORY_L5": return ProductDimensionType.BiddingCategoryL5;
					case "BRAND": return ProductDimensionType.Brand;
					case "CANONICAL_CONDITION": return ProductDimensionType.CanonicalCondition;
					case "CUSTOM_ATTRIBUTE_0": return ProductDimensionType.CustomAttribute0;
					case "CUSTOM_ATTRIBUTE_1": return ProductDimensionType.CustomAttribute1;
					case "CUSTOM_ATTRIBUTE_2": return ProductDimensionType.CustomAttribute2;
					case "CUSTOM_ATTRIBUTE_3": return ProductDimensionType.CustomAttribute3;
					case "CUSTOM_ATTRIBUTE_4": return ProductDimensionType.CustomAttribute4;
					case "OFFER_ID": return ProductDimensionType.OfferId;
					case "PRODUCT_TYPE_L1": return ProductDimensionType.ProductTypeL1;
					case "PRODUCT_TYPE_L2": return ProductDimensionType.ProductTypeL2;
					case "PRODUCT_TYPE_L3": return ProductDimensionType.ProductTypeL3;
					case "PRODUCT_TYPE_L4": return ProductDimensionType.ProductTypeL4;
					case "PRODUCT_TYPE_L5": return ProductDimensionType.ProductTypeL5;
					case "CHANNEL": return ProductDimensionType.Channel;
					case "CHANNEL_EXCLUSIVITY": return ProductDimensionType.ChannelExclusivity;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ProductDimensionType.", nameof(xmlValue));
				}
			}
		}
		public static class ProductPartitionTypeExtensions
		{
			public static string ToXmlValue(this ProductPartitionType enumValue)
			{
				switch (enumValue)
				{
					case ProductPartitionType.Unknown: return "UNKNOWN";
					case ProductPartitionType.Subdivision: return "SUBDIVISION";
					case ProductPartitionType.Unit: return "UNIT";
					default: return null;
				}
			}
			public static ProductPartitionType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ProductPartitionType.Unknown;
					case "SUBDIVISION": return ProductPartitionType.Subdivision;
					case "UNIT": return ProductPartitionType.Unit;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ProductPartitionType.", nameof(xmlValue));
				}
			}
		}
		public static class ProximityDistanceUnitsExtensions
		{
			public static string ToXmlValue(this ProximityDistanceUnits enumValue)
			{
				switch (enumValue)
				{
					case ProximityDistanceUnits.Kilometers: return "KILOMETERS";
					case ProximityDistanceUnits.Miles: return "MILES";
					default: return null;
				}
			}
			public static ProximityDistanceUnits Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "KILOMETERS": return ProximityDistanceUnits.Kilometers;
					case "MILES": return ProximityDistanceUnits.Miles;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ProximityDistanceUnits.", nameof(xmlValue));
				}
			}
		}
		public static class QueryErrorReasonExtensions
		{
			public static string ToXmlValue(this QueryErrorReason enumValue)
			{
				switch (enumValue)
				{
					case QueryErrorReason.ParsingFailed: return "PARSING_FAILED";
					case QueryErrorReason.MissingQuery: return "MISSING_QUERY";
					case QueryErrorReason.MissingSelectClause: return "MISSING_SELECT_CLAUSE";
					case QueryErrorReason.MissingFromClause: return "MISSING_FROM_CLAUSE";
					case QueryErrorReason.InvalidSelectClause: return "INVALID_SELECT_CLAUSE";
					case QueryErrorReason.InvalidFromClause: return "INVALID_FROM_CLAUSE";
					case QueryErrorReason.InvalidWhereClause: return "INVALID_WHERE_CLAUSE";
					case QueryErrorReason.InvalidOrderByClause: return "INVALID_ORDER_BY_CLAUSE";
					case QueryErrorReason.InvalidLimitClause: return "INVALID_LIMIT_CLAUSE";
					case QueryErrorReason.InvalidStartIndexInLimitClause: return "INVALID_START_INDEX_IN_LIMIT_CLAUSE";
					case QueryErrorReason.InvalidPageSizeInLimitClause: return "INVALID_PAGE_SIZE_IN_LIMIT_CLAUSE";
					case QueryErrorReason.InvalidDuringClause: return "INVALID_DURING_CLAUSE";
					case QueryErrorReason.InvalidMinDateInDuringClause: return "INVALID_MIN_DATE_IN_DURING_CLAUSE";
					case QueryErrorReason.InvalidMaxDateInDuringClause: return "INVALID_MAX_DATE_IN_DURING_CLAUSE";
					case QueryErrorReason.MaxLessThanMinInDuringClause: return "MAX_LESS_THAN_MIN_IN_DURING_CLAUSE";
					case QueryErrorReason.ValidationFailed: return "VALIDATION_FAILED";
					default: return null;
				}
			}
			public static QueryErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "PARSING_FAILED": return QueryErrorReason.ParsingFailed;
					case "MISSING_QUERY": return QueryErrorReason.MissingQuery;
					case "MISSING_SELECT_CLAUSE": return QueryErrorReason.MissingSelectClause;
					case "MISSING_FROM_CLAUSE": return QueryErrorReason.MissingFromClause;
					case "INVALID_SELECT_CLAUSE": return QueryErrorReason.InvalidSelectClause;
					case "INVALID_FROM_CLAUSE": return QueryErrorReason.InvalidFromClause;
					case "INVALID_WHERE_CLAUSE": return QueryErrorReason.InvalidWhereClause;
					case "INVALID_ORDER_BY_CLAUSE": return QueryErrorReason.InvalidOrderByClause;
					case "INVALID_LIMIT_CLAUSE": return QueryErrorReason.InvalidLimitClause;
					case "INVALID_START_INDEX_IN_LIMIT_CLAUSE": return QueryErrorReason.InvalidStartIndexInLimitClause;
					case "INVALID_PAGE_SIZE_IN_LIMIT_CLAUSE": return QueryErrorReason.InvalidPageSizeInLimitClause;
					case "INVALID_DURING_CLAUSE": return QueryErrorReason.InvalidDuringClause;
					case "INVALID_MIN_DATE_IN_DURING_CLAUSE": return QueryErrorReason.InvalidMinDateInDuringClause;
					case "INVALID_MAX_DATE_IN_DURING_CLAUSE": return QueryErrorReason.InvalidMaxDateInDuringClause;
					case "MAX_LESS_THAN_MIN_IN_DURING_CLAUSE": return QueryErrorReason.MaxLessThanMinInDuringClause;
					case "VALIDATION_FAILED": return QueryErrorReason.ValidationFailed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type QueryErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class QuotaCheckErrorReasonExtensions
		{
			public static string ToXmlValue(this QuotaCheckErrorReason enumValue)
			{
				switch (enumValue)
				{
					case QuotaCheckErrorReason.InvalidTokenHeader: return "INVALID_TOKEN_HEADER";
					case QuotaCheckErrorReason.AccountDelinquent: return "ACCOUNT_DELINQUENT";
					case QuotaCheckErrorReason.AccountInaccessible: return "ACCOUNT_INACCESSIBLE";
					case QuotaCheckErrorReason.AccountInactive: return "ACCOUNT_INACTIVE";
					case QuotaCheckErrorReason.IncompleteSignup: return "INCOMPLETE_SIGNUP";
					case QuotaCheckErrorReason.DeveloperTokenNotApproved: return "DEVELOPER_TOKEN_NOT_APPROVED";
					case QuotaCheckErrorReason.TermsAndConditionsNotSigned: return "TERMS_AND_CONDITIONS_NOT_SIGNED";
					case QuotaCheckErrorReason.MonthlyBudgetReached: return "MONTHLY_BUDGET_REACHED";
					case QuotaCheckErrorReason.QuotaExceeded: return "QUOTA_EXCEEDED";
					default: return null;
				}
			}
			public static QuotaCheckErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_TOKEN_HEADER": return QuotaCheckErrorReason.InvalidTokenHeader;
					case "ACCOUNT_DELINQUENT": return QuotaCheckErrorReason.AccountDelinquent;
					case "ACCOUNT_INACCESSIBLE": return QuotaCheckErrorReason.AccountInaccessible;
					case "ACCOUNT_INACTIVE": return QuotaCheckErrorReason.AccountInactive;
					case "INCOMPLETE_SIGNUP": return QuotaCheckErrorReason.IncompleteSignup;
					case "DEVELOPER_TOKEN_NOT_APPROVED": return QuotaCheckErrorReason.DeveloperTokenNotApproved;
					case "TERMS_AND_CONDITIONS_NOT_SIGNED": return QuotaCheckErrorReason.TermsAndConditionsNotSigned;
					case "MONTHLY_BUDGET_REACHED": return QuotaCheckErrorReason.MonthlyBudgetReached;
					case "QUOTA_EXCEEDED": return QuotaCheckErrorReason.QuotaExceeded;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type QuotaCheckErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RangeErrorReasonExtensions
		{
			public static string ToXmlValue(this RangeErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RangeErrorReason.TooLow: return "TOO_LOW";
					case RangeErrorReason.TooHigh: return "TOO_HIGH";
					default: return null;
				}
			}
			public static RangeErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "TOO_LOW": return RangeErrorReason.TooLow;
					case "TOO_HIGH": return RangeErrorReason.TooHigh;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RangeErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RateExceededErrorReasonExtensions
		{
			public static string ToXmlValue(this RateExceededErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RateExceededErrorReason.RateExceeded: return "RATE_EXCEEDED";
					default: return null;
				}
			}
			public static RateExceededErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "RATE_EXCEEDED": return RateExceededErrorReason.RateExceeded;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RateExceededErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ReadOnlyErrorReasonExtensions
		{
			public static string ToXmlValue(this ReadOnlyErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ReadOnlyErrorReason.ReadOnly: return "READ_ONLY";
					default: return null;
				}
			}
			public static ReadOnlyErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "READ_ONLY": return ReadOnlyErrorReason.ReadOnly;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ReadOnlyErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RegionCodeErrorReasonExtensions
		{
			public static string ToXmlValue(this RegionCodeErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RegionCodeErrorReason.InvalidRegionCode: return "INVALID_REGION_CODE";
					default: return null;
				}
			}
			public static RegionCodeErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_REGION_CODE": return RegionCodeErrorReason.InvalidRegionCode;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RegionCodeErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RejectedErrorReasonExtensions
		{
			public static string ToXmlValue(this RejectedErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RejectedErrorReason.UnknownValue: return "UNKNOWN_VALUE";
					default: return null;
				}
			}
			public static RejectedErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN_VALUE": return RejectedErrorReason.UnknownValue;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RejectedErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ReportDefinitionDateRangeTypeExtensions
		{
			public static string ToXmlValue(this ReportDefinitionDateRangeType enumValue)
			{
				switch (enumValue)
				{
					case ReportDefinitionDateRangeType.Today: return "TODAY";
					case ReportDefinitionDateRangeType.Yesterday: return "YESTERDAY";
					case ReportDefinitionDateRangeType.Last7Days: return "LAST_7_DAYS";
					case ReportDefinitionDateRangeType.LastWeek: return "LAST_WEEK";
					case ReportDefinitionDateRangeType.LastBusinessWeek: return "LAST_BUSINESS_WEEK";
					case ReportDefinitionDateRangeType.ThisMonth: return "THIS_MONTH";
					case ReportDefinitionDateRangeType.LastMonth: return "LAST_MONTH";
					case ReportDefinitionDateRangeType.AllTime: return "ALL_TIME";
					case ReportDefinitionDateRangeType.CustomDate: return "CUSTOM_DATE";
					case ReportDefinitionDateRangeType.Last14Days: return "LAST_14_DAYS";
					case ReportDefinitionDateRangeType.Last30Days: return "LAST_30_DAYS";
					case ReportDefinitionDateRangeType.ThisWeekSunToday: return "THIS_WEEK_SUN_TODAY";
					case ReportDefinitionDateRangeType.ThisWeekMonToday: return "THIS_WEEK_MON_TODAY";
					case ReportDefinitionDateRangeType.LastWeekSunSat: return "LAST_WEEK_SUN_SAT";
					default: return null;
				}
			}
			public static ReportDefinitionDateRangeType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "TODAY": return ReportDefinitionDateRangeType.Today;
					case "YESTERDAY": return ReportDefinitionDateRangeType.Yesterday;
					case "LAST_7_DAYS": return ReportDefinitionDateRangeType.Last7Days;
					case "LAST_WEEK": return ReportDefinitionDateRangeType.LastWeek;
					case "LAST_BUSINESS_WEEK": return ReportDefinitionDateRangeType.LastBusinessWeek;
					case "THIS_MONTH": return ReportDefinitionDateRangeType.ThisMonth;
					case "LAST_MONTH": return ReportDefinitionDateRangeType.LastMonth;
					case "ALL_TIME": return ReportDefinitionDateRangeType.AllTime;
					case "CUSTOM_DATE": return ReportDefinitionDateRangeType.CustomDate;
					case "LAST_14_DAYS": return ReportDefinitionDateRangeType.Last14Days;
					case "LAST_30_DAYS": return ReportDefinitionDateRangeType.Last30Days;
					case "THIS_WEEK_SUN_TODAY": return ReportDefinitionDateRangeType.ThisWeekSunToday;
					case "THIS_WEEK_MON_TODAY": return ReportDefinitionDateRangeType.ThisWeekMonToday;
					case "LAST_WEEK_SUN_SAT": return ReportDefinitionDateRangeType.LastWeekSunSat;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ReportDefinitionDateRangeType.", nameof(xmlValue));
				}
			}
		}
		public static class ReportDefinitionErrorReasonExtensions
		{
			public static string ToXmlValue(this ReportDefinitionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case ReportDefinitionErrorReason.InvalidDateRangeForReport: return "INVALID_DATE_RANGE_FOR_REPORT";
					case ReportDefinitionErrorReason.InvalidFieldNameForReport: return "INVALID_FIELD_NAME_FOR_REPORT";
					case ReportDefinitionErrorReason.UnableToFindMappingForThisReport: return "UNABLE_TO_FIND_MAPPING_FOR_THIS_REPORT";
					case ReportDefinitionErrorReason.InvalidColumnNameForReport: return "INVALID_COLUMN_NAME_FOR_REPORT";
					case ReportDefinitionErrorReason.InvalidReportDefinitionId: return "INVALID_REPORT_DEFINITION_ID";
					case ReportDefinitionErrorReason.ReportSelectorCannotBeNull: return "REPORT_SELECTOR_CANNOT_BE_NULL";
					case ReportDefinitionErrorReason.NoEnumsForThisColumnName: return "NO_ENUMS_FOR_THIS_COLUMN_NAME";
					case ReportDefinitionErrorReason.InvalidView: return "INVALID_VIEW";
					case ReportDefinitionErrorReason.SortingNotSupported: return "SORTING_NOT_SUPPORTED";
					case ReportDefinitionErrorReason.PagingNotSupported: return "PAGING_NOT_SUPPORTED";
					case ReportDefinitionErrorReason.CustomerServingTypeReportMismatch: return "CUSTOMER_SERVING_TYPE_REPORT_MISMATCH";
					case ReportDefinitionErrorReason.ClientSelectorNoCustomerIdentifier: return "CLIENT_SELECTOR_NO_CUSTOMER_IDENTIFIER";
					case ReportDefinitionErrorReason.ClientSelectorInvalidCustomerId: return "CLIENT_SELECTOR_INVALID_CUSTOMER_ID";
					case ReportDefinitionErrorReason.ReportDefinitionError: return "REPORT_DEFINITION_ERROR";
					default: return null;
				}
			}
			public static ReportDefinitionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_DATE_RANGE_FOR_REPORT": return ReportDefinitionErrorReason.InvalidDateRangeForReport;
					case "INVALID_FIELD_NAME_FOR_REPORT": return ReportDefinitionErrorReason.InvalidFieldNameForReport;
					case "UNABLE_TO_FIND_MAPPING_FOR_THIS_REPORT": return ReportDefinitionErrorReason.UnableToFindMappingForThisReport;
					case "INVALID_COLUMN_NAME_FOR_REPORT": return ReportDefinitionErrorReason.InvalidColumnNameForReport;
					case "INVALID_REPORT_DEFINITION_ID": return ReportDefinitionErrorReason.InvalidReportDefinitionId;
					case "REPORT_SELECTOR_CANNOT_BE_NULL": return ReportDefinitionErrorReason.ReportSelectorCannotBeNull;
					case "NO_ENUMS_FOR_THIS_COLUMN_NAME": return ReportDefinitionErrorReason.NoEnumsForThisColumnName;
					case "INVALID_VIEW": return ReportDefinitionErrorReason.InvalidView;
					case "SORTING_NOT_SUPPORTED": return ReportDefinitionErrorReason.SortingNotSupported;
					case "PAGING_NOT_SUPPORTED": return ReportDefinitionErrorReason.PagingNotSupported;
					case "CUSTOMER_SERVING_TYPE_REPORT_MISMATCH": return ReportDefinitionErrorReason.CustomerServingTypeReportMismatch;
					case "CLIENT_SELECTOR_NO_CUSTOMER_IDENTIFIER": return ReportDefinitionErrorReason.ClientSelectorNoCustomerIdentifier;
					case "CLIENT_SELECTOR_INVALID_CUSTOMER_ID": return ReportDefinitionErrorReason.ClientSelectorInvalidCustomerId;
					case "REPORT_DEFINITION_ERROR": return ReportDefinitionErrorReason.ReportDefinitionError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ReportDefinitionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ReportDefinitionReportTypeExtensions
		{
			public static string ToXmlValue(this ReportDefinitionReportType enumValue)
			{
				switch (enumValue)
				{
					case ReportDefinitionReportType.KeywordsPerformanceReport: return "KEYWORDS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.AdPerformanceReport: return "AD_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.UrlPerformanceReport: return "URL_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.AdgroupPerformanceReport: return "ADGROUP_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.CampaignPerformanceReport: return "CAMPAIGN_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.AccountPerformanceReport: return "ACCOUNT_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.GeoPerformanceReport: return "GEO_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.SearchQueryPerformanceReport: return "SEARCH_QUERY_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.AutomaticPlacementsPerformanceReport: return "AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.CampaignNegativeKeywordsPerformanceReport: return "CAMPAIGN_NEGATIVE_KEYWORDS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.CampaignNegativePlacementsPerformanceReport: return "CAMPAIGN_NEGATIVE_PLACEMENTS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.DestinationUrlReport: return "DESTINATION_URL_REPORT";
					case ReportDefinitionReportType.SharedSetReport: return "SHARED_SET_REPORT";
					case ReportDefinitionReportType.CampaignSharedSetReport: return "CAMPAIGN_SHARED_SET_REPORT";
					case ReportDefinitionReportType.SharedSetCriteriaReport: return "SHARED_SET_CRITERIA_REPORT";
					case ReportDefinitionReportType.CreativeConversionReport: return "CREATIVE_CONVERSION_REPORT";
					case ReportDefinitionReportType.CallMetricsCallDetailsReport: return "CALL_METRICS_CALL_DETAILS_REPORT";
					case ReportDefinitionReportType.KeywordlessQueryReport: return "KEYWORDLESS_QUERY_REPORT";
					case ReportDefinitionReportType.KeywordlessCategoryReport: return "KEYWORDLESS_CATEGORY_REPORT";
					case ReportDefinitionReportType.CriteriaPerformanceReport: return "CRITERIA_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.ClickPerformanceReport: return "CLICK_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.BudgetPerformanceReport: return "BUDGET_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.BidGoalPerformanceReport: return "BID_GOAL_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.DisplayKeywordPerformanceReport: return "DISPLAY_KEYWORD_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.PlaceholderFeedItemReport: return "PLACEHOLDER_FEED_ITEM_REPORT";
					case ReportDefinitionReportType.PlacementPerformanceReport: return "PLACEMENT_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.CampaignNegativeLocationsReport: return "CAMPAIGN_NEGATIVE_LOCATIONS_REPORT";
					case ReportDefinitionReportType.GenderPerformanceReport: return "GENDER_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.AgeRangePerformanceReport: return "AGE_RANGE_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.CampaignLocationTargetReport: return "CAMPAIGN_LOCATION_TARGET_REPORT";
					case ReportDefinitionReportType.CampaignAdScheduleTargetReport: return "CAMPAIGN_AD_SCHEDULE_TARGET_REPORT";
					case ReportDefinitionReportType.PaidOrganicQueryReport: return "PAID_ORGANIC_QUERY_REPORT";
					case ReportDefinitionReportType.AudiencePerformanceReport: return "AUDIENCE_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.DisplayTopicsPerformanceReport: return "DISPLAY_TOPICS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.UserAdDistanceReport: return "USER_AD_DISTANCE_REPORT";
					case ReportDefinitionReportType.ShoppingPerformanceReport: return "SHOPPING_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.ProductPartitionReport: return "PRODUCT_PARTITION_REPORT";
					case ReportDefinitionReportType.ParentalStatusPerformanceReport: return "PARENTAL_STATUS_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.PlaceholderReport: return "PLACEHOLDER_REPORT";
					case ReportDefinitionReportType.AdCustomizersFeedItemReport: return "AD_CUSTOMIZERS_FEED_ITEM_REPORT";
					case ReportDefinitionReportType.LabelReport: return "LABEL_REPORT";
					case ReportDefinitionReportType.FinalUrlReport: return "FINAL_URL_REPORT";
					case ReportDefinitionReportType.VideoPerformanceReport: return "VIDEO_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.TopContentPerformanceReport: return "TOP_CONTENT_PERFORMANCE_REPORT";
					case ReportDefinitionReportType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ReportDefinitionReportType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "KEYWORDS_PERFORMANCE_REPORT": return ReportDefinitionReportType.KeywordsPerformanceReport;
					case "AD_PERFORMANCE_REPORT": return ReportDefinitionReportType.AdPerformanceReport;
					case "URL_PERFORMANCE_REPORT": return ReportDefinitionReportType.UrlPerformanceReport;
					case "ADGROUP_PERFORMANCE_REPORT": return ReportDefinitionReportType.AdgroupPerformanceReport;
					case "CAMPAIGN_PERFORMANCE_REPORT": return ReportDefinitionReportType.CampaignPerformanceReport;
					case "ACCOUNT_PERFORMANCE_REPORT": return ReportDefinitionReportType.AccountPerformanceReport;
					case "GEO_PERFORMANCE_REPORT": return ReportDefinitionReportType.GeoPerformanceReport;
					case "SEARCH_QUERY_PERFORMANCE_REPORT": return ReportDefinitionReportType.SearchQueryPerformanceReport;
					case "AUTOMATIC_PLACEMENTS_PERFORMANCE_REPORT": return ReportDefinitionReportType.AutomaticPlacementsPerformanceReport;
					case "CAMPAIGN_NEGATIVE_KEYWORDS_PERFORMANCE_REPORT": return ReportDefinitionReportType.CampaignNegativeKeywordsPerformanceReport;
					case "CAMPAIGN_NEGATIVE_PLACEMENTS_PERFORMANCE_REPORT": return ReportDefinitionReportType.CampaignNegativePlacementsPerformanceReport;
					case "DESTINATION_URL_REPORT": return ReportDefinitionReportType.DestinationUrlReport;
					case "SHARED_SET_REPORT": return ReportDefinitionReportType.SharedSetReport;
					case "CAMPAIGN_SHARED_SET_REPORT": return ReportDefinitionReportType.CampaignSharedSetReport;
					case "SHARED_SET_CRITERIA_REPORT": return ReportDefinitionReportType.SharedSetCriteriaReport;
					case "CREATIVE_CONVERSION_REPORT": return ReportDefinitionReportType.CreativeConversionReport;
					case "CALL_METRICS_CALL_DETAILS_REPORT": return ReportDefinitionReportType.CallMetricsCallDetailsReport;
					case "KEYWORDLESS_QUERY_REPORT": return ReportDefinitionReportType.KeywordlessQueryReport;
					case "KEYWORDLESS_CATEGORY_REPORT": return ReportDefinitionReportType.KeywordlessCategoryReport;
					case "CRITERIA_PERFORMANCE_REPORT": return ReportDefinitionReportType.CriteriaPerformanceReport;
					case "CLICK_PERFORMANCE_REPORT": return ReportDefinitionReportType.ClickPerformanceReport;
					case "BUDGET_PERFORMANCE_REPORT": return ReportDefinitionReportType.BudgetPerformanceReport;
					case "BID_GOAL_PERFORMANCE_REPORT": return ReportDefinitionReportType.BidGoalPerformanceReport;
					case "DISPLAY_KEYWORD_PERFORMANCE_REPORT": return ReportDefinitionReportType.DisplayKeywordPerformanceReport;
					case "PLACEHOLDER_FEED_ITEM_REPORT": return ReportDefinitionReportType.PlaceholderFeedItemReport;
					case "PLACEMENT_PERFORMANCE_REPORT": return ReportDefinitionReportType.PlacementPerformanceReport;
					case "CAMPAIGN_NEGATIVE_LOCATIONS_REPORT": return ReportDefinitionReportType.CampaignNegativeLocationsReport;
					case "GENDER_PERFORMANCE_REPORT": return ReportDefinitionReportType.GenderPerformanceReport;
					case "AGE_RANGE_PERFORMANCE_REPORT": return ReportDefinitionReportType.AgeRangePerformanceReport;
					case "CAMPAIGN_LOCATION_TARGET_REPORT": return ReportDefinitionReportType.CampaignLocationTargetReport;
					case "CAMPAIGN_AD_SCHEDULE_TARGET_REPORT": return ReportDefinitionReportType.CampaignAdScheduleTargetReport;
					case "PAID_ORGANIC_QUERY_REPORT": return ReportDefinitionReportType.PaidOrganicQueryReport;
					case "AUDIENCE_PERFORMANCE_REPORT": return ReportDefinitionReportType.AudiencePerformanceReport;
					case "DISPLAY_TOPICS_PERFORMANCE_REPORT": return ReportDefinitionReportType.DisplayTopicsPerformanceReport;
					case "USER_AD_DISTANCE_REPORT": return ReportDefinitionReportType.UserAdDistanceReport;
					case "SHOPPING_PERFORMANCE_REPORT": return ReportDefinitionReportType.ShoppingPerformanceReport;
					case "PRODUCT_PARTITION_REPORT": return ReportDefinitionReportType.ProductPartitionReport;
					case "PARENTAL_STATUS_PERFORMANCE_REPORT": return ReportDefinitionReportType.ParentalStatusPerformanceReport;
					case "PLACEHOLDER_REPORT": return ReportDefinitionReportType.PlaceholderReport;
					case "AD_CUSTOMIZERS_FEED_ITEM_REPORT": return ReportDefinitionReportType.AdCustomizersFeedItemReport;
					case "LABEL_REPORT": return ReportDefinitionReportType.LabelReport;
					case "FINAL_URL_REPORT": return ReportDefinitionReportType.FinalUrlReport;
					case "VIDEO_PERFORMANCE_REPORT": return ReportDefinitionReportType.VideoPerformanceReport;
					case "TOP_CONTENT_PERFORMANCE_REPORT": return ReportDefinitionReportType.TopContentPerformanceReport;
					case "UNKNOWN": return ReportDefinitionReportType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ReportDefinitionReportType.", nameof(xmlValue));
				}
			}
		}
		public static class RequestContextOperandContextTypeExtensions
		{
			public static string ToXmlValue(this RequestContextOperandContextType enumValue)
			{
				switch (enumValue)
				{
					case RequestContextOperandContextType.FeedItemId: return "FEED_ITEM_ID";
					case RequestContextOperandContextType.DevicePlatform: return "DEVICE_PLATFORM";
					case RequestContextOperandContextType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static RequestContextOperandContextType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "FEED_ITEM_ID": return RequestContextOperandContextType.FeedItemId;
					case "DEVICE_PLATFORM": return RequestContextOperandContextType.DevicePlatform;
					case "UNKNOWN": return RequestContextOperandContextType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RequestContextOperandContextType.", nameof(xmlValue));
				}
			}
		}
		public static class RequestErrorReasonExtensions
		{
			public static string ToXmlValue(this RequestErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RequestErrorReason.Unknown: return "UNKNOWN";
					case RequestErrorReason.InvalidInput: return "INVALID_INPUT";
					case RequestErrorReason.UnsupportedVersion: return "UNSUPPORTED_VERSION";
					default: return null;
				}
			}
			public static RequestErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return RequestErrorReason.Unknown;
					case "INVALID_INPUT": return RequestErrorReason.InvalidInput;
					case "UNSUPPORTED_VERSION": return RequestErrorReason.UnsupportedVersion;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RequestErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RequestTypeExtensions
		{
			public static string ToXmlValue(this RequestType enumValue)
			{
				switch (enumValue)
				{
					case RequestType.Ideas: return "IDEAS";
					case RequestType.Stats: return "STATS";
					default: return null;
				}
			}
			public static RequestType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "IDEAS": return RequestType.Ideas;
					case "STATS": return RequestType.Stats;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RequestType.", nameof(xmlValue));
				}
			}
		}
		public static class RequiredErrorReasonExtensions
		{
			public static string ToXmlValue(this RequiredErrorReason enumValue)
			{
				switch (enumValue)
				{
					case RequiredErrorReason.Required: return "REQUIRED";
					default: return null;
				}
			}
			public static RequiredErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "REQUIRED": return RequiredErrorReason.Required;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RequiredErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class RichMediaAdAdAttributeExtensions
		{
			public static string ToXmlValue(this RichMediaAdAdAttribute enumValue)
			{
				switch (enumValue)
				{
					case RichMediaAdAdAttribute.Unknown: return "UNKNOWN";
					case RichMediaAdAdAttribute.RollOverToExpand: return "ROLL_OVER_TO_EXPAND";
					case RichMediaAdAdAttribute.Ssl: return "SSL";
					default: return null;
				}
			}
			public static RichMediaAdAdAttribute Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return RichMediaAdAdAttribute.Unknown;
					case "ROLL_OVER_TO_EXPAND": return RichMediaAdAdAttribute.RollOverToExpand;
					case "SSL": return RichMediaAdAdAttribute.Ssl;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RichMediaAdAdAttribute.", nameof(xmlValue));
				}
			}
		}
		public static class RichMediaAdRichMediaAdTypeExtensions
		{
			public static string ToXmlValue(this RichMediaAdRichMediaAdType enumValue)
			{
				switch (enumValue)
				{
					case RichMediaAdRichMediaAdType.Standard: return "STANDARD";
					case RichMediaAdRichMediaAdType.InStreamVideo: return "IN_STREAM_VIDEO";
					default: return null;
				}
			}
			public static RichMediaAdRichMediaAdType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "STANDARD": return RichMediaAdRichMediaAdType.Standard;
					case "IN_STREAM_VIDEO": return RichMediaAdRichMediaAdType.InStreamVideo;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type RichMediaAdRichMediaAdType.", nameof(xmlValue));
				}
			}
		}
		public static class SelectorErrorReasonExtensions
		{
			public static string ToXmlValue(this SelectorErrorReason enumValue)
			{
				switch (enumValue)
				{
					case SelectorErrorReason.InvalidFieldName: return "INVALID_FIELD_NAME";
					case SelectorErrorReason.MissingFields: return "MISSING_FIELDS";
					case SelectorErrorReason.MissingPredicates: return "MISSING_PREDICATES";
					case SelectorErrorReason.OperatorDoesNotSupportMultipleValues: return "OPERATOR_DOES_NOT_SUPPORT_MULTIPLE_VALUES";
					case SelectorErrorReason.InvalidPredicateEnumValue: return "INVALID_PREDICATE_ENUM_VALUE";
					case SelectorErrorReason.MissingPredicateOperator: return "MISSING_PREDICATE_OPERATOR";
					case SelectorErrorReason.MissingPredicateValues: return "MISSING_PREDICATE_VALUES";
					case SelectorErrorReason.InvalidPredicateFieldName: return "INVALID_PREDICATE_FIELD_NAME";
					case SelectorErrorReason.InvalidPredicateOperator: return "INVALID_PREDICATE_OPERATOR";
					case SelectorErrorReason.InvalidFieldSelection: return "INVALID_FIELD_SELECTION";
					case SelectorErrorReason.InvalidPredicateValue: return "INVALID_PREDICATE_VALUE";
					case SelectorErrorReason.InvalidSortFieldName: return "INVALID_SORT_FIELD_NAME";
					case SelectorErrorReason.SelectorError: return "SELECTOR_ERROR";
					case SelectorErrorReason.FilterByDateRangeNotSupported: return "FILTER_BY_DATE_RANGE_NOT_SUPPORTED";
					case SelectorErrorReason.StartIndexIsTooHigh: return "START_INDEX_IS_TOO_HIGH";
					case SelectorErrorReason.TooManyPredicateValues: return "TOO_MANY_PREDICATE_VALUES";
					case SelectorErrorReason.UnknownError: return "UNKNOWN_ERROR";
					default: return null;
				}
			}
			public static SelectorErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_FIELD_NAME": return SelectorErrorReason.InvalidFieldName;
					case "MISSING_FIELDS": return SelectorErrorReason.MissingFields;
					case "MISSING_PREDICATES": return SelectorErrorReason.MissingPredicates;
					case "OPERATOR_DOES_NOT_SUPPORT_MULTIPLE_VALUES": return SelectorErrorReason.OperatorDoesNotSupportMultipleValues;
					case "INVALID_PREDICATE_ENUM_VALUE": return SelectorErrorReason.InvalidPredicateEnumValue;
					case "MISSING_PREDICATE_OPERATOR": return SelectorErrorReason.MissingPredicateOperator;
					case "MISSING_PREDICATE_VALUES": return SelectorErrorReason.MissingPredicateValues;
					case "INVALID_PREDICATE_FIELD_NAME": return SelectorErrorReason.InvalidPredicateFieldName;
					case "INVALID_PREDICATE_OPERATOR": return SelectorErrorReason.InvalidPredicateOperator;
					case "INVALID_FIELD_SELECTION": return SelectorErrorReason.InvalidFieldSelection;
					case "INVALID_PREDICATE_VALUE": return SelectorErrorReason.InvalidPredicateValue;
					case "INVALID_SORT_FIELD_NAME": return SelectorErrorReason.InvalidSortFieldName;
					case "SELECTOR_ERROR": return SelectorErrorReason.SelectorError;
					case "FILTER_BY_DATE_RANGE_NOT_SUPPORTED": return SelectorErrorReason.FilterByDateRangeNotSupported;
					case "START_INDEX_IS_TOO_HIGH": return SelectorErrorReason.StartIndexIsTooHigh;
					case "TOO_MANY_PREDICATE_VALUES": return SelectorErrorReason.TooManyPredicateValues;
					case "UNKNOWN_ERROR": return SelectorErrorReason.UnknownError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SelectorErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class ServiceLinkLinkStatusExtensions
		{
			public static string ToXmlValue(this ServiceLinkLinkStatus enumValue)
			{
				switch (enumValue)
				{
					case ServiceLinkLinkStatus.Active: return "ACTIVE";
					case ServiceLinkLinkStatus.Pending: return "PENDING";
					case ServiceLinkLinkStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ServiceLinkLinkStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ACTIVE": return ServiceLinkLinkStatus.Active;
					case "PENDING": return ServiceLinkLinkStatus.Pending;
					case "UNKNOWN": return ServiceLinkLinkStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ServiceLinkLinkStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ServiceTypeExtensions
		{
			public static string ToXmlValue(this ServiceType enumValue)
			{
				switch (enumValue)
				{
					case ServiceType.MerchantCenter: return "MERCHANT_CENTER";
					case ServiceType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static ServiceType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "MERCHANT_CENTER": return ServiceType.MerchantCenter;
					case "UNKNOWN": return ServiceType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ServiceType.", nameof(xmlValue));
				}
			}
		}
		public static class ServingStatusExtensions
		{
			public static string ToXmlValue(this ServingStatus enumValue)
			{
				switch (enumValue)
				{
					case ServingStatus.Serving: return "SERVING";
					case ServingStatus.None: return "NONE";
					case ServingStatus.Ended: return "ENDED";
					case ServingStatus.Pending: return "PENDING";
					case ServingStatus.Suspended: return "SUSPENDED";
					default: return null;
				}
			}
			public static ServingStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "SERVING": return ServingStatus.Serving;
					case "NONE": return ServingStatus.None;
					case "ENDED": return ServingStatus.Ended;
					case "PENDING": return ServingStatus.Pending;
					case "SUSPENDED": return ServingStatus.Suspended;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ServingStatus.", nameof(xmlValue));
				}
			}
		}
		public static class SettingErrorReasonExtensions
		{
			public static string ToXmlValue(this SettingErrorReason enumValue)
			{
				switch (enumValue)
				{
					case SettingErrorReason.DuplicateSettingType: return "DUPLICATE_SETTING_TYPE";
					case SettingErrorReason.SettingTypeIsNotAvailable: return "SETTING_TYPE_IS_NOT_AVAILABLE";
					case SettingErrorReason.SettingTypeIsNotCompatibleWithCampaign: return "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN";
					case SettingErrorReason.TargetingSettingContainsInvalidCriterionTypeGroup: return "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP";
					case SettingErrorReason.DynamicSearchAdsSettingContainsInvalidDomainName: return "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME";
					case SettingErrorReason.DynamicSearchAdsSettingContainsInvalidLanguageCode: return "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE";
					case SettingErrorReason.TargetAllIsNotAllowedForPlacementInSearchCampaign: return "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN";
					case SettingErrorReason.UniversalAppCampaignSettingDuplicateDescription: return "UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION";
					case SettingErrorReason.UniversalAppCampaignSettingDescriptionLineWidthTooLong: return "UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG";
					case SettingErrorReason.UniversalAppCampaignSettingAppIdCannotBeModified: return "UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED";
					case SettingErrorReason.TooManyYoutubeMediaIdsInUniversalAppCampaign: return "TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN";
					case SettingErrorReason.TooManyImageMediaIdsInUniversalAppCampaign: return "TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN";
					case SettingErrorReason.MediaIncompatibleForUniversalAppCampaign: return "MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN";
					case SettingErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SettingErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_SETTING_TYPE": return SettingErrorReason.DuplicateSettingType;
					case "SETTING_TYPE_IS_NOT_AVAILABLE": return SettingErrorReason.SettingTypeIsNotAvailable;
					case "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN": return SettingErrorReason.SettingTypeIsNotCompatibleWithCampaign;
					case "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP": return SettingErrorReason.TargetingSettingContainsInvalidCriterionTypeGroup;
					case "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME": return SettingErrorReason.DynamicSearchAdsSettingContainsInvalidDomainName;
					case "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE": return SettingErrorReason.DynamicSearchAdsSettingContainsInvalidLanguageCode;
					case "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN": return SettingErrorReason.TargetAllIsNotAllowedForPlacementInSearchCampaign;
					case "UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION": return SettingErrorReason.UniversalAppCampaignSettingDuplicateDescription;
					case "UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG": return SettingErrorReason.UniversalAppCampaignSettingDescriptionLineWidthTooLong;
					case "UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED": return SettingErrorReason.UniversalAppCampaignSettingAppIdCannotBeModified;
					case "TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN": return SettingErrorReason.TooManyYoutubeMediaIdsInUniversalAppCampaign;
					case "TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN": return SettingErrorReason.TooManyImageMediaIdsInUniversalAppCampaign;
					case "MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN": return SettingErrorReason.MediaIncompatibleForUniversalAppCampaign;
					case "UNKNOWN": return SettingErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SettingErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class SharedBiddingStrategyBiddingStrategyStatusExtensions
		{
			public static string ToXmlValue(this SharedBiddingStrategyBiddingStrategyStatus enumValue)
			{
				switch (enumValue)
				{
					case SharedBiddingStrategyBiddingStrategyStatus.Enabled: return "ENABLED";
					case SharedBiddingStrategyBiddingStrategyStatus.Removed: return "REMOVED";
					case SharedBiddingStrategyBiddingStrategyStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SharedBiddingStrategyBiddingStrategyStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return SharedBiddingStrategyBiddingStrategyStatus.Enabled;
					case "REMOVED": return SharedBiddingStrategyBiddingStrategyStatus.Removed;
					case "UNKNOWN": return SharedBiddingStrategyBiddingStrategyStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SharedBiddingStrategyBiddingStrategyStatus.", nameof(xmlValue));
				}
			}
		}
		public static class SharedCriterionErrorReasonExtensions
		{
			public static string ToXmlValue(this SharedCriterionErrorReason enumValue)
			{
				switch (enumValue)
				{
					case SharedCriterionErrorReason.ExceedsCriteriaLimit: return "EXCEEDS_CRITERIA_LIMIT";
					case SharedCriterionErrorReason.IncorrectCriterionType: return "INCORRECT_CRITERION_TYPE";
					case SharedCriterionErrorReason.CannotTargetAndExclude: return "CANNOT_TARGET_AND_EXCLUDE";
					case SharedCriterionErrorReason.NegativeCriterionRequired: return "NEGATIVE_CRITERION_REQUIRED";
					case SharedCriterionErrorReason.ConcreteTypeRequired: return "CONCRETE_TYPE_REQUIRED";
					case SharedCriterionErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SharedCriterionErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EXCEEDS_CRITERIA_LIMIT": return SharedCriterionErrorReason.ExceedsCriteriaLimit;
					case "INCORRECT_CRITERION_TYPE": return SharedCriterionErrorReason.IncorrectCriterionType;
					case "CANNOT_TARGET_AND_EXCLUDE": return SharedCriterionErrorReason.CannotTargetAndExclude;
					case "NEGATIVE_CRITERION_REQUIRED": return SharedCriterionErrorReason.NegativeCriterionRequired;
					case "CONCRETE_TYPE_REQUIRED": return SharedCriterionErrorReason.ConcreteTypeRequired;
					case "UNKNOWN": return SharedCriterionErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SharedCriterionErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class SharedSetErrorReasonExtensions
		{
			public static string ToXmlValue(this SharedSetErrorReason enumValue)
			{
				switch (enumValue)
				{
					case SharedSetErrorReason.CustomerCannotCreateSharedSetOfThisType: return "CUSTOMER_CANNOT_CREATE_SHARED_SET_OF_THIS_TYPE";
					case SharedSetErrorReason.DuplicateName: return "DUPLICATE_NAME";
					case SharedSetErrorReason.SharedSetRemoved: return "SHARED_SET_REMOVED";
					case SharedSetErrorReason.SharedSetInUse: return "SHARED_SET_IN_USE";
					case SharedSetErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SharedSetErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "CUSTOMER_CANNOT_CREATE_SHARED_SET_OF_THIS_TYPE": return SharedSetErrorReason.CustomerCannotCreateSharedSetOfThisType;
					case "DUPLICATE_NAME": return SharedSetErrorReason.DuplicateName;
					case "SHARED_SET_REMOVED": return SharedSetErrorReason.SharedSetRemoved;
					case "SHARED_SET_IN_USE": return SharedSetErrorReason.SharedSetInUse;
					case "UNKNOWN": return SharedSetErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SharedSetErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class SharedSetStatusExtensions
		{
			public static string ToXmlValue(this SharedSetStatus enumValue)
			{
				switch (enumValue)
				{
					case SharedSetStatus.Enabled: return "ENABLED";
					case SharedSetStatus.Removed: return "REMOVED";
					case SharedSetStatus.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SharedSetStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return SharedSetStatus.Enabled;
					case "REMOVED": return SharedSetStatus.Removed;
					case "UNKNOWN": return SharedSetStatus.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SharedSetStatus.", nameof(xmlValue));
				}
			}
		}
		public static class SharedSetTypeExtensions
		{
			public static string ToXmlValue(this SharedSetType enumValue)
			{
				switch (enumValue)
				{
					case SharedSetType.NegativeKeywords: return "NEGATIVE_KEYWORDS";
					case SharedSetType.NegativePlacements: return "NEGATIVE_PLACEMENTS";
					case SharedSetType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SharedSetType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NEGATIVE_KEYWORDS": return SharedSetType.NegativeKeywords;
					case "NEGATIVE_PLACEMENTS": return SharedSetType.NegativePlacements;
					case "UNKNOWN": return SharedSetType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SharedSetType.", nameof(xmlValue));
				}
			}
		}
		public static class ShoppingBiddingDimensionStatusExtensions
		{
			public static string ToXmlValue(this ShoppingBiddingDimensionStatus enumValue)
			{
				switch (enumValue)
				{
					case ShoppingBiddingDimensionStatus.Unknown: return "UNKNOWN";
					case ShoppingBiddingDimensionStatus.Active: return "ACTIVE";
					case ShoppingBiddingDimensionStatus.Obsolete: return "OBSOLETE";
					default: return null;
				}
			}
			public static ShoppingBiddingDimensionStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ShoppingBiddingDimensionStatus.Unknown;
					case "ACTIVE": return ShoppingBiddingDimensionStatus.Active;
					case "OBSOLETE": return ShoppingBiddingDimensionStatus.Obsolete;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ShoppingBiddingDimensionStatus.", nameof(xmlValue));
				}
			}
		}
		public static class ShoppingProductChannelExtensions
		{
			public static string ToXmlValue(this ShoppingProductChannel enumValue)
			{
				switch (enumValue)
				{
					case ShoppingProductChannel.Unknown: return "UNKNOWN";
					case ShoppingProductChannel.Online: return "ONLINE";
					case ShoppingProductChannel.Local: return "LOCAL";
					default: return null;
				}
			}
			public static ShoppingProductChannel Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ShoppingProductChannel.Unknown;
					case "ONLINE": return ShoppingProductChannel.Online;
					case "LOCAL": return ShoppingProductChannel.Local;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ShoppingProductChannel.", nameof(xmlValue));
				}
			}
		}
		public static class ShoppingProductChannelExclusivityExtensions
		{
			public static string ToXmlValue(this ShoppingProductChannelExclusivity enumValue)
			{
				switch (enumValue)
				{
					case ShoppingProductChannelExclusivity.Unknown: return "UNKNOWN";
					case ShoppingProductChannelExclusivity.SingleChannel: return "SINGLE_CHANNEL";
					case ShoppingProductChannelExclusivity.MultiChannel: return "MULTI_CHANNEL";
					default: return null;
				}
			}
			public static ShoppingProductChannelExclusivity Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ShoppingProductChannelExclusivity.Unknown;
					case "SINGLE_CHANNEL": return ShoppingProductChannelExclusivity.SingleChannel;
					case "MULTI_CHANNEL": return ShoppingProductChannelExclusivity.MultiChannel;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ShoppingProductChannelExclusivity.", nameof(xmlValue));
				}
			}
		}
		public static class SizeLimitErrorReasonExtensions
		{
			public static string ToXmlValue(this SizeLimitErrorReason enumValue)
			{
				switch (enumValue)
				{
					case SizeLimitErrorReason.RequestSizeLimitExceeded: return "REQUEST_SIZE_LIMIT_EXCEEDED";
					case SizeLimitErrorReason.ResponseSizeLimitExceeded: return "RESPONSE_SIZE_LIMIT_EXCEEDED";
					case SizeLimitErrorReason.InternalStorageError: return "INTERNAL_STORAGE_ERROR";
					case SizeLimitErrorReason.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static SizeLimitErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "REQUEST_SIZE_LIMIT_EXCEEDED": return SizeLimitErrorReason.RequestSizeLimitExceeded;
					case "RESPONSE_SIZE_LIMIT_EXCEEDED": return SizeLimitErrorReason.ResponseSizeLimitExceeded;
					case "INTERNAL_STORAGE_ERROR": return SizeLimitErrorReason.InternalStorageError;
					case "UNKNOWN": return SizeLimitErrorReason.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SizeLimitErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class SizeRangeExtensions
		{
			public static string ToXmlValue(this SizeRange enumValue)
			{
				switch (enumValue)
				{
					case SizeRange.LessThanFiveHundred: return "LESS_THAN_FIVE_HUNDRED";
					case SizeRange.LessThanOneThousand: return "LESS_THAN_ONE_THOUSAND";
					case SizeRange.OneThousandToTenThousand: return "ONE_THOUSAND_TO_TEN_THOUSAND";
					case SizeRange.TenThousandToFiftyThousand: return "TEN_THOUSAND_TO_FIFTY_THOUSAND";
					case SizeRange.FiftyThousandToOneHundredThousand: return "FIFTY_THOUSAND_TO_ONE_HUNDRED_THOUSAND";
					case SizeRange.OneHundredThousandToThreeHundredThousand: return "ONE_HUNDRED_THOUSAND_TO_THREE_HUNDRED_THOUSAND";
					case SizeRange.ThreeHundredThousandToFiveHundredThousand: return "THREE_HUNDRED_THOUSAND_TO_FIVE_HUNDRED_THOUSAND";
					case SizeRange.FiveHundredThousandToOneMillion: return "FIVE_HUNDRED_THOUSAND_TO_ONE_MILLION";
					case SizeRange.OneMillionToTwoMillion: return "ONE_MILLION_TO_TWO_MILLION";
					case SizeRange.TwoMillionToThreeMillion: return "TWO_MILLION_TO_THREE_MILLION";
					case SizeRange.ThreeMillionToFiveMillion: return "THREE_MILLION_TO_FIVE_MILLION";
					case SizeRange.FiveMillionToTenMillion: return "FIVE_MILLION_TO_TEN_MILLION";
					case SizeRange.TenMillionToTwentyMillion: return "TEN_MILLION_TO_TWENTY_MILLION";
					case SizeRange.TwentyMillionToThirtyMillion: return "TWENTY_MILLION_TO_THIRTY_MILLION";
					case SizeRange.ThirtyMillionToFiftyMillion: return "THIRTY_MILLION_TO_FIFTY_MILLION";
					case SizeRange.OverFiftyMillion: return "OVER_FIFTY_MILLION";
					default: return null;
				}
			}
			public static SizeRange Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "LESS_THAN_FIVE_HUNDRED": return SizeRange.LessThanFiveHundred;
					case "LESS_THAN_ONE_THOUSAND": return SizeRange.LessThanOneThousand;
					case "ONE_THOUSAND_TO_TEN_THOUSAND": return SizeRange.OneThousandToTenThousand;
					case "TEN_THOUSAND_TO_FIFTY_THOUSAND": return SizeRange.TenThousandToFiftyThousand;
					case "FIFTY_THOUSAND_TO_ONE_HUNDRED_THOUSAND": return SizeRange.FiftyThousandToOneHundredThousand;
					case "ONE_HUNDRED_THOUSAND_TO_THREE_HUNDRED_THOUSAND": return SizeRange.OneHundredThousandToThreeHundredThousand;
					case "THREE_HUNDRED_THOUSAND_TO_FIVE_HUNDRED_THOUSAND": return SizeRange.ThreeHundredThousandToFiveHundredThousand;
					case "FIVE_HUNDRED_THOUSAND_TO_ONE_MILLION": return SizeRange.FiveHundredThousandToOneMillion;
					case "ONE_MILLION_TO_TWO_MILLION": return SizeRange.OneMillionToTwoMillion;
					case "TWO_MILLION_TO_THREE_MILLION": return SizeRange.TwoMillionToThreeMillion;
					case "THREE_MILLION_TO_FIVE_MILLION": return SizeRange.ThreeMillionToFiveMillion;
					case "FIVE_MILLION_TO_TEN_MILLION": return SizeRange.FiveMillionToTenMillion;
					case "TEN_MILLION_TO_TWENTY_MILLION": return SizeRange.TenMillionToTwentyMillion;
					case "TWENTY_MILLION_TO_THIRTY_MILLION": return SizeRange.TwentyMillionToThirtyMillion;
					case "THIRTY_MILLION_TO_FIFTY_MILLION": return SizeRange.ThirtyMillionToFiftyMillion;
					case "OVER_FIFTY_MILLION": return SizeRange.OverFiftyMillion;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SizeRange.", nameof(xmlValue));
				}
			}
		}
		public static class SortOrderExtensions
		{
			public static string ToXmlValue(this SortOrder enumValue)
			{
				switch (enumValue)
				{
					case SortOrder.Ascending: return "ASCENDING";
					case SortOrder.Descending: return "DESCENDING";
					default: return null;
				}
			}
			public static SortOrder Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ASCENDING": return SortOrder.Ascending;
					case "DESCENDING": return SortOrder.Descending;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SortOrder.", nameof(xmlValue));
				}
			}
		}
		public static class StatsQueryErrorReasonExtensions
		{
			public static string ToXmlValue(this StatsQueryErrorReason enumValue)
			{
				switch (enumValue)
				{
					case StatsQueryErrorReason.DateNotInValidRange: return "DATE_NOT_IN_VALID_RANGE";
					default: return null;
				}
			}
			public static StatsQueryErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DATE_NOT_IN_VALID_RANGE": return StatsQueryErrorReason.DateNotInValidRange;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type StatsQueryErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class StringFormatErrorReasonExtensions
		{
			public static string ToXmlValue(this StringFormatErrorReason enumValue)
			{
				switch (enumValue)
				{
					case StringFormatErrorReason.Unknown: return "UNKNOWN";
					case StringFormatErrorReason.IllegalChars: return "ILLEGAL_CHARS";
					case StringFormatErrorReason.InvalidFormat: return "INVALID_FORMAT";
					default: return null;
				}
			}
			public static StringFormatErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return StringFormatErrorReason.Unknown;
					case "ILLEGAL_CHARS": return StringFormatErrorReason.IllegalChars;
					case "INVALID_FORMAT": return StringFormatErrorReason.InvalidFormat;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type StringFormatErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class StringLengthErrorReasonExtensions
		{
			public static string ToXmlValue(this StringLengthErrorReason enumValue)
			{
				switch (enumValue)
				{
					case StringLengthErrorReason.TooShort: return "TOO_SHORT";
					case StringLengthErrorReason.TooLong: return "TOO_LONG";
					default: return null;
				}
			}
			public static StringLengthErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "TOO_SHORT": return StringLengthErrorReason.TooShort;
					case "TOO_LONG": return StringLengthErrorReason.TooLong;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type StringLengthErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class StringRuleItemStringOperatorExtensions
		{
			public static string ToXmlValue(this StringRuleItemStringOperator enumValue)
			{
				switch (enumValue)
				{
					case StringRuleItemStringOperator.Unknown: return "UNKNOWN";
					case StringRuleItemStringOperator.Contains: return "CONTAINS";
					case StringRuleItemStringOperator.Equals: return "EQUALS";
					case StringRuleItemStringOperator.StartsWith: return "STARTS_WITH";
					case StringRuleItemStringOperator.EndsWith: return "ENDS_WITH";
					case StringRuleItemStringOperator.NotEqual: return "NOT_EQUAL";
					case StringRuleItemStringOperator.NotContain: return "NOT_CONTAIN";
					case StringRuleItemStringOperator.NotStartWith: return "NOT_START_WITH";
					case StringRuleItemStringOperator.NotEndWith: return "NOT_END_WITH";
					default: return null;
				}
			}
			public static StringRuleItemStringOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return StringRuleItemStringOperator.Unknown;
					case "CONTAINS": return StringRuleItemStringOperator.Contains;
					case "EQUALS": return StringRuleItemStringOperator.Equals;
					case "STARTS_WITH": return StringRuleItemStringOperator.StartsWith;
					case "ENDS_WITH": return StringRuleItemStringOperator.EndsWith;
					case "NOT_EQUAL": return StringRuleItemStringOperator.NotEqual;
					case "NOT_CONTAIN": return StringRuleItemStringOperator.NotContain;
					case "NOT_START_WITH": return StringRuleItemStringOperator.NotStartWith;
					case "NOT_END_WITH": return StringRuleItemStringOperator.NotEndWith;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type StringRuleItemStringOperator.", nameof(xmlValue));
				}
			}
		}
		public static class SystemServingStatusExtensions
		{
			public static string ToXmlValue(this SystemServingStatus enumValue)
			{
				switch (enumValue)
				{
					case SystemServingStatus.Eligible: return "ELIGIBLE";
					case SystemServingStatus.RarelyServed: return "RARELY_SERVED";
					default: return null;
				}
			}
			public static SystemServingStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ELIGIBLE": return SystemServingStatus.Eligible;
					case "RARELY_SERVED": return SystemServingStatus.RarelyServed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type SystemServingStatus.", nameof(xmlValue));
				}
			}
		}
		public static class TargetingIdeaErrorReasonExtensions
		{
			public static string ToXmlValue(this TargetingIdeaErrorReason enumValue)
			{
				switch (enumValue)
				{
					case TargetingIdeaErrorReason.DuplicateSearchFilterTypesPresent: return "DUPLICATE_SEARCH_FILTER_TYPES_PRESENT";
					case TargetingIdeaErrorReason.InsufficientSearchParameters: return "INSUFFICIENT_SEARCH_PARAMETERS";
					case TargetingIdeaErrorReason.InvalidAttributeType: return "INVALID_ATTRIBUTE_TYPE";
					case TargetingIdeaErrorReason.InvalidSearchParameters: return "INVALID_SEARCH_PARAMETERS";
					case TargetingIdeaErrorReason.InvalidDomainSuffix: return "INVALID_DOMAIN_SUFFIX";
					case TargetingIdeaErrorReason.MutuallyExclusiveSearchParametersInQuery: return "MUTUALLY_EXCLUSIVE_SEARCH_PARAMETERS_IN_QUERY";
					case TargetingIdeaErrorReason.ServiceUnavailable: return "SERVICE_UNAVAILABLE";
					case TargetingIdeaErrorReason.InvalidUrlInSearchParameter: return "INVALID_URL_IN_SEARCH_PARAMETER";
					case TargetingIdeaErrorReason.TooManyResultsRequested: return "TOO_MANY_RESULTS_REQUESTED";
					case TargetingIdeaErrorReason.NoPagingInSelector: return "NO_PAGING_IN_SELECTOR";
					case TargetingIdeaErrorReason.InvalidIncludedExcludedKeywords: return "INVALID_INCLUDED_EXCLUDED_KEYWORDS";
					default: return null;
				}
			}
			public static TargetingIdeaErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "DUPLICATE_SEARCH_FILTER_TYPES_PRESENT": return TargetingIdeaErrorReason.DuplicateSearchFilterTypesPresent;
					case "INSUFFICIENT_SEARCH_PARAMETERS": return TargetingIdeaErrorReason.InsufficientSearchParameters;
					case "INVALID_ATTRIBUTE_TYPE": return TargetingIdeaErrorReason.InvalidAttributeType;
					case "INVALID_SEARCH_PARAMETERS": return TargetingIdeaErrorReason.InvalidSearchParameters;
					case "INVALID_DOMAIN_SUFFIX": return TargetingIdeaErrorReason.InvalidDomainSuffix;
					case "MUTUALLY_EXCLUSIVE_SEARCH_PARAMETERS_IN_QUERY": return TargetingIdeaErrorReason.MutuallyExclusiveSearchParametersInQuery;
					case "SERVICE_UNAVAILABLE": return TargetingIdeaErrorReason.ServiceUnavailable;
					case "INVALID_URL_IN_SEARCH_PARAMETER": return TargetingIdeaErrorReason.InvalidUrlInSearchParameter;
					case "TOO_MANY_RESULTS_REQUESTED": return TargetingIdeaErrorReason.TooManyResultsRequested;
					case "NO_PAGING_IN_SELECTOR": return TargetingIdeaErrorReason.NoPagingInSelector;
					case "INVALID_INCLUDED_EXCLUDED_KEYWORDS": return TargetingIdeaErrorReason.InvalidIncludedExcludedKeywords;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TargetingIdeaErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class TemplateElementFieldTypeExtensions
		{
			public static string ToXmlValue(this TemplateElementFieldType enumValue)
			{
				switch (enumValue)
				{
					case TemplateElementFieldType.Address: return "ADDRESS";
					case TemplateElementFieldType.Audio: return "AUDIO";
					case TemplateElementFieldType.Enum: return "ENUM";
					case TemplateElementFieldType.Image: return "IMAGE";
					case TemplateElementFieldType.BackgroundImage: return "BACKGROUND_IMAGE";
					case TemplateElementFieldType.Number: return "NUMBER";
					case TemplateElementFieldType.Text: return "TEXT";
					case TemplateElementFieldType.Url: return "URL";
					case TemplateElementFieldType.Video: return "VIDEO";
					case TemplateElementFieldType.VisibleUrl: return "VISIBLE_URL";
					case TemplateElementFieldType.MediaBundle: return "MEDIA_BUNDLE";
					case TemplateElementFieldType.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static TemplateElementFieldType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADDRESS": return TemplateElementFieldType.Address;
					case "AUDIO": return TemplateElementFieldType.Audio;
					case "ENUM": return TemplateElementFieldType.Enum;
					case "IMAGE": return TemplateElementFieldType.Image;
					case "BACKGROUND_IMAGE": return TemplateElementFieldType.BackgroundImage;
					case "NUMBER": return TemplateElementFieldType.Number;
					case "TEXT": return TemplateElementFieldType.Text;
					case "URL": return TemplateElementFieldType.Url;
					case "VIDEO": return TemplateElementFieldType.Video;
					case "VISIBLE_URL": return TemplateElementFieldType.VisibleUrl;
					case "MEDIA_BUNDLE": return TemplateElementFieldType.MediaBundle;
					case "UNKNOWN": return TemplateElementFieldType.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TemplateElementFieldType.", nameof(xmlValue));
				}
			}
		}
		public static class ThirdPartyRedirectAdExpandingDirectionExtensions
		{
			public static string ToXmlValue(this ThirdPartyRedirectAdExpandingDirection enumValue)
			{
				switch (enumValue)
				{
					case ThirdPartyRedirectAdExpandingDirection.Unknown: return "UNKNOWN";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingUp: return "EXPANDING_UP";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingDown: return "EXPANDING_DOWN";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingLeft: return "EXPANDING_LEFT";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingRight: return "EXPANDING_RIGHT";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingUpleft: return "EXPANDING_UPLEFT";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingUpright: return "EXPANDING_UPRIGHT";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingDownleft: return "EXPANDING_DOWNLEFT";
					case ThirdPartyRedirectAdExpandingDirection.ExpandingDownright: return "EXPANDING_DOWNRIGHT";
					default: return null;
				}
			}
			public static ThirdPartyRedirectAdExpandingDirection Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return ThirdPartyRedirectAdExpandingDirection.Unknown;
					case "EXPANDING_UP": return ThirdPartyRedirectAdExpandingDirection.ExpandingUp;
					case "EXPANDING_DOWN": return ThirdPartyRedirectAdExpandingDirection.ExpandingDown;
					case "EXPANDING_LEFT": return ThirdPartyRedirectAdExpandingDirection.ExpandingLeft;
					case "EXPANDING_RIGHT": return ThirdPartyRedirectAdExpandingDirection.ExpandingRight;
					case "EXPANDING_UPLEFT": return ThirdPartyRedirectAdExpandingDirection.ExpandingUpleft;
					case "EXPANDING_UPRIGHT": return ThirdPartyRedirectAdExpandingDirection.ExpandingUpright;
					case "EXPANDING_DOWNLEFT": return ThirdPartyRedirectAdExpandingDirection.ExpandingDownleft;
					case "EXPANDING_DOWNRIGHT": return ThirdPartyRedirectAdExpandingDirection.ExpandingDownright;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type ThirdPartyRedirectAdExpandingDirection.", nameof(xmlValue));
				}
			}
		}
		public static class TimeUnitExtensions
		{
			public static string ToXmlValue(this TimeUnit enumValue)
			{
				switch (enumValue)
				{
					case TimeUnit.Minute: return "MINUTE";
					case TimeUnit.Hour: return "HOUR";
					case TimeUnit.Day: return "DAY";
					case TimeUnit.Week: return "WEEK";
					case TimeUnit.Month: return "MONTH";
					case TimeUnit.Lifetime: return "LIFETIME";
					default: return null;
				}
			}
			public static TimeUnit Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "MINUTE": return TimeUnit.Minute;
					case "HOUR": return TimeUnit.Hour;
					case "DAY": return TimeUnit.Day;
					case "WEEK": return TimeUnit.Week;
					case "MONTH": return TimeUnit.Month;
					case "LIFETIME": return TimeUnit.Lifetime;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TimeUnit.", nameof(xmlValue));
				}
			}
		}
		public static class TrafficEstimatorErrorReasonExtensions
		{
			public static string ToXmlValue(this TrafficEstimatorErrorReason enumValue)
			{
				switch (enumValue)
				{
					case TrafficEstimatorErrorReason.NoCampaignForAdGroupEstimateRequest: return "NO_CAMPAIGN_FOR_AD_GROUP_ESTIMATE_REQUEST";
					case TrafficEstimatorErrorReason.NoAdGroupForKeywordEstimateRequest: return "NO_AD_GROUP_FOR_KEYWORD_ESTIMATE_REQUEST";
					case TrafficEstimatorErrorReason.NoMaxCpcForKeywordEstimateRequest: return "NO_MAX_CPC_FOR_KEYWORD_ESTIMATE_REQUEST";
					case TrafficEstimatorErrorReason.TooManyKeywordEstimateRequests: return "TOO_MANY_KEYWORD_ESTIMATE_REQUESTS";
					case TrafficEstimatorErrorReason.TooManyCampaignEstimateRequests: return "TOO_MANY_CAMPAIGN_ESTIMATE_REQUESTS";
					case TrafficEstimatorErrorReason.TooManyAdgroupEstimateRequests: return "TOO_MANY_ADGROUP_ESTIMATE_REQUESTS";
					case TrafficEstimatorErrorReason.TooManyTargets: return "TOO_MANY_TARGETS";
					case TrafficEstimatorErrorReason.KeywordTooLong: return "KEYWORD_TOO_LONG";
					case TrafficEstimatorErrorReason.KeywordContainsBroadMatchModifiers: return "KEYWORD_CONTAINS_BROAD_MATCH_MODIFIERS";
					case TrafficEstimatorErrorReason.InvalidInput: return "INVALID_INPUT";
					case TrafficEstimatorErrorReason.ServiceUnavailable: return "SERVICE_UNAVAILABLE";
					default: return null;
				}
			}
			public static TrafficEstimatorErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "NO_CAMPAIGN_FOR_AD_GROUP_ESTIMATE_REQUEST": return TrafficEstimatorErrorReason.NoCampaignForAdGroupEstimateRequest;
					case "NO_AD_GROUP_FOR_KEYWORD_ESTIMATE_REQUEST": return TrafficEstimatorErrorReason.NoAdGroupForKeywordEstimateRequest;
					case "NO_MAX_CPC_FOR_KEYWORD_ESTIMATE_REQUEST": return TrafficEstimatorErrorReason.NoMaxCpcForKeywordEstimateRequest;
					case "TOO_MANY_KEYWORD_ESTIMATE_REQUESTS": return TrafficEstimatorErrorReason.TooManyKeywordEstimateRequests;
					case "TOO_MANY_CAMPAIGN_ESTIMATE_REQUESTS": return TrafficEstimatorErrorReason.TooManyCampaignEstimateRequests;
					case "TOO_MANY_ADGROUP_ESTIMATE_REQUESTS": return TrafficEstimatorErrorReason.TooManyAdgroupEstimateRequests;
					case "TOO_MANY_TARGETS": return TrafficEstimatorErrorReason.TooManyTargets;
					case "KEYWORD_TOO_LONG": return TrafficEstimatorErrorReason.KeywordTooLong;
					case "KEYWORD_CONTAINS_BROAD_MATCH_MODIFIERS": return TrafficEstimatorErrorReason.KeywordContainsBroadMatchModifiers;
					case "INVALID_INPUT": return TrafficEstimatorErrorReason.InvalidInput;
					case "SERVICE_UNAVAILABLE": return TrafficEstimatorErrorReason.ServiceUnavailable;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TrafficEstimatorErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class TrialErrorReasonExtensions
		{
			public static string ToXmlValue(this TrialErrorReason enumValue)
			{
				switch (enumValue)
				{
					case TrialErrorReason.Unknown: return "UNKNOWN";
					case TrialErrorReason.InvalidStatusTransition: return "INVALID_STATUS_TRANSITION";
					case TrialErrorReason.CannotUseTrialWithSharedBudget: return "CANNOT_USE_TRIAL_WITH_SHARED_BUDGET";
					case TrialErrorReason.CannotCreateTrialWhenCampaignHasActiveExperiments: return "CANNOT_CREATE_TRIAL_WHEN_CAMPAIGN_HAS_ACTIVE_EXPERIMENTS";
					case TrialErrorReason.CannotCreateTrialForDeletedBaseCampaign: return "CANNOT_CREATE_TRIAL_FOR_DELETED_BASE_CAMPAIGN";
					case TrialErrorReason.CannotCreateTrialForNonProposedDraft: return "CANNOT_CREATE_TRIAL_FOR_NON_PROPOSED_DRAFT";
					case TrialErrorReason.CustomerCannotCreateTrial: return "CUSTOMER_CANNOT_CREATE_TRIAL";
					case TrialErrorReason.CampaignCannotCreateTrial: return "CAMPAIGN_CANNOT_CREATE_TRIAL";
					case TrialErrorReason.NameAlreadyInUse: return "NAME_ALREADY_IN_USE";
					case TrialErrorReason.TrialDurationsMustNotOverlap: return "TRIAL_DURATIONS_MUST_NOT_OVERLAP";
					case TrialErrorReason.TrialDurationMustBeWithinCampaignDuration: return "TRIAL_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION";
					default: return null;
				}
			}
			public static TrialErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return TrialErrorReason.Unknown;
					case "INVALID_STATUS_TRANSITION": return TrialErrorReason.InvalidStatusTransition;
					case "CANNOT_USE_TRIAL_WITH_SHARED_BUDGET": return TrialErrorReason.CannotUseTrialWithSharedBudget;
					case "CANNOT_CREATE_TRIAL_WHEN_CAMPAIGN_HAS_ACTIVE_EXPERIMENTS": return TrialErrorReason.CannotCreateTrialWhenCampaignHasActiveExperiments;
					case "CANNOT_CREATE_TRIAL_FOR_DELETED_BASE_CAMPAIGN": return TrialErrorReason.CannotCreateTrialForDeletedBaseCampaign;
					case "CANNOT_CREATE_TRIAL_FOR_NON_PROPOSED_DRAFT": return TrialErrorReason.CannotCreateTrialForNonProposedDraft;
					case "CUSTOMER_CANNOT_CREATE_TRIAL": return TrialErrorReason.CustomerCannotCreateTrial;
					case "CAMPAIGN_CANNOT_CREATE_TRIAL": return TrialErrorReason.CampaignCannotCreateTrial;
					case "NAME_ALREADY_IN_USE": return TrialErrorReason.NameAlreadyInUse;
					case "TRIAL_DURATIONS_MUST_NOT_OVERLAP": return TrialErrorReason.TrialDurationsMustNotOverlap;
					case "TRIAL_DURATION_MUST_BE_WITHIN_CAMPAIGN_DURATION": return TrialErrorReason.TrialDurationMustBeWithinCampaignDuration;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TrialErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class TrialStatusExtensions
		{
			public static string ToXmlValue(this TrialStatus enumValue)
			{
				switch (enumValue)
				{
					case TrialStatus.Unknown: return "UNKNOWN";
					case TrialStatus.Creating: return "CREATING";
					case TrialStatus.Active: return "ACTIVE";
					case TrialStatus.Promoting: return "PROMOTING";
					case TrialStatus.Promoted: return "PROMOTED";
					case TrialStatus.Archived: return "ARCHIVED";
					case TrialStatus.CreationFailed: return "CREATION_FAILED";
					case TrialStatus.PromoteFailed: return "PROMOTE_FAILED";
					case TrialStatus.Graduated: return "GRADUATED";
					case TrialStatus.Halted: return "HALTED";
					default: return null;
				}
			}
			public static TrialStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return TrialStatus.Unknown;
					case "CREATING": return TrialStatus.Creating;
					case "ACTIVE": return TrialStatus.Active;
					case "PROMOTING": return TrialStatus.Promoting;
					case "PROMOTED": return TrialStatus.Promoted;
					case "ARCHIVED": return TrialStatus.Archived;
					case "CREATION_FAILED": return TrialStatus.CreationFailed;
					case "PROMOTE_FAILED": return TrialStatus.PromoteFailed;
					case "GRADUATED": return TrialStatus.Graduated;
					case "HALTED": return TrialStatus.Halted;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type TrialStatus.", nameof(xmlValue));
				}
			}
		}
		public static class UniversalAppBiddingStrategyGoalTypeExtensions
		{
			public static string ToXmlValue(this UniversalAppBiddingStrategyGoalType enumValue)
			{
				switch (enumValue)
				{
					case UniversalAppBiddingStrategyGoalType.Unknown: return "UNKNOWN";
					case UniversalAppBiddingStrategyGoalType.OptimizeForInstallConversionVolume: return "OPTIMIZE_FOR_INSTALL_CONVERSION_VOLUME";
					case UniversalAppBiddingStrategyGoalType.OptimizeForInAppConversionVolume: return "OPTIMIZE_FOR_IN_APP_CONVERSION_VOLUME";
					case UniversalAppBiddingStrategyGoalType.OptimizeForTotalConversionValue: return "OPTIMIZE_FOR_TOTAL_CONVERSION_VALUE";
					default: return null;
				}
			}
			public static UniversalAppBiddingStrategyGoalType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return UniversalAppBiddingStrategyGoalType.Unknown;
					case "OPTIMIZE_FOR_INSTALL_CONVERSION_VOLUME": return UniversalAppBiddingStrategyGoalType.OptimizeForInstallConversionVolume;
					case "OPTIMIZE_FOR_IN_APP_CONVERSION_VOLUME": return UniversalAppBiddingStrategyGoalType.OptimizeForInAppConversionVolume;
					case "OPTIMIZE_FOR_TOTAL_CONVERSION_VALUE": return UniversalAppBiddingStrategyGoalType.OptimizeForTotalConversionValue;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UniversalAppBiddingStrategyGoalType.", nameof(xmlValue));
				}
			}
		}
		public static class UniversalAppCampaignAssetExtensions
		{
			public static string ToXmlValue(this UniversalAppCampaignAsset enumValue)
			{
				switch (enumValue)
				{
					case UniversalAppCampaignAsset.Unknown: return "UNKNOWN";
					case UniversalAppCampaignAsset.Combination: return "COMBINATION";
					case UniversalAppCampaignAsset.AppDestination: return "APP_DESTINATION";
					case UniversalAppCampaignAsset.AppAssets: return "APP_ASSETS";
					case UniversalAppCampaignAsset.Description1: return "DESCRIPTION_1";
					case UniversalAppCampaignAsset.Description2: return "DESCRIPTION_2";
					case UniversalAppCampaignAsset.Description3: return "DESCRIPTION_3";
					case UniversalAppCampaignAsset.Description4: return "DESCRIPTION_4";
					case UniversalAppCampaignAsset.Video: return "VIDEO";
					case UniversalAppCampaignAsset.Image: return "IMAGE";
					default: return null;
				}
			}
			public static UniversalAppCampaignAsset Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return UniversalAppCampaignAsset.Unknown;
					case "COMBINATION": return UniversalAppCampaignAsset.Combination;
					case "APP_DESTINATION": return UniversalAppCampaignAsset.AppDestination;
					case "APP_ASSETS": return UniversalAppCampaignAsset.AppAssets;
					case "DESCRIPTION_1": return UniversalAppCampaignAsset.Description1;
					case "DESCRIPTION_2": return UniversalAppCampaignAsset.Description2;
					case "DESCRIPTION_3": return UniversalAppCampaignAsset.Description3;
					case "DESCRIPTION_4": return UniversalAppCampaignAsset.Description4;
					case "VIDEO": return UniversalAppCampaignAsset.Video;
					case "IMAGE": return UniversalAppCampaignAsset.Image;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UniversalAppCampaignAsset.", nameof(xmlValue));
				}
			}
		}
		public static class UrlErrorReasonExtensions
		{
			public static string ToXmlValue(this UrlErrorReason enumValue)
			{
				switch (enumValue)
				{
					case UrlErrorReason.InvalidTrackingUrlTemplate: return "INVALID_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.InvalidTagInTrackingUrlTemplate: return "INVALID_TAG_IN_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.MissingTrackingUrlTemplateTag: return "MISSING_TRACKING_URL_TEMPLATE_TAG";
					case UrlErrorReason.MissingProtocolInTrackingUrlTemplate: return "MISSING_PROTOCOL_IN_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.InvalidProtocolInTrackingUrlTemplate: return "INVALID_PROTOCOL_IN_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.MalformedTrackingUrlTemplate: return "MALFORMED_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.MissingHostInTrackingUrlTemplate: return "MISSING_HOST_IN_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.InvalidTldInTrackingUrlTemplate: return "INVALID_TLD_IN_TRACKING_URL_TEMPLATE";
					case UrlErrorReason.RedundantNestedTrackingUrlTemplateTag: return "REDUNDANT_NESTED_TRACKING_URL_TEMPLATE_TAG";
					case UrlErrorReason.InvalidFinalUrl: return "INVALID_FINAL_URL";
					case UrlErrorReason.InvalidTagInFinalUrl: return "INVALID_TAG_IN_FINAL_URL";
					case UrlErrorReason.RedundantNestedFinalUrlTag: return "REDUNDANT_NESTED_FINAL_URL_TAG";
					case UrlErrorReason.MissingProtocolInFinalUrl: return "MISSING_PROTOCOL_IN_FINAL_URL";
					case UrlErrorReason.InvalidProtocolInFinalUrl: return "INVALID_PROTOCOL_IN_FINAL_URL";
					case UrlErrorReason.MalformedFinalUrl: return "MALFORMED_FINAL_URL";
					case UrlErrorReason.MissingHostInFinalUrl: return "MISSING_HOST_IN_FINAL_URL";
					case UrlErrorReason.InvalidTldInFinalUrl: return "INVALID_TLD_IN_FINAL_URL";
					case UrlErrorReason.InvalidFinalMobileUrl: return "INVALID_FINAL_MOBILE_URL";
					case UrlErrorReason.InvalidTagInFinalMobileUrl: return "INVALID_TAG_IN_FINAL_MOBILE_URL";
					case UrlErrorReason.RedundantNestedFinalMobileUrlTag: return "REDUNDANT_NESTED_FINAL_MOBILE_URL_TAG";
					case UrlErrorReason.MissingProtocolInFinalMobileUrl: return "MISSING_PROTOCOL_IN_FINAL_MOBILE_URL";
					case UrlErrorReason.InvalidProtocolInFinalMobileUrl: return "INVALID_PROTOCOL_IN_FINAL_MOBILE_URL";
					case UrlErrorReason.MalformedFinalMobileUrl: return "MALFORMED_FINAL_MOBILE_URL";
					case UrlErrorReason.MissingHostInFinalMobileUrl: return "MISSING_HOST_IN_FINAL_MOBILE_URL";
					case UrlErrorReason.InvalidTldInFinalMobileUrl: return "INVALID_TLD_IN_FINAL_MOBILE_URL";
					case UrlErrorReason.InvalidFinalAppUrl: return "INVALID_FINAL_APP_URL";
					case UrlErrorReason.InvalidTagInFinalAppUrl: return "INVALID_TAG_IN_FINAL_APP_URL";
					case UrlErrorReason.RedundantNestedFinalAppUrlTag: return "REDUNDANT_NESTED_FINAL_APP_URL_TAG";
					case UrlErrorReason.MultipleAppUrlsForOstype: return "MULTIPLE_APP_URLS_FOR_OSTYPE";
					case UrlErrorReason.InvalidOstype: return "INVALID_OSTYPE";
					case UrlErrorReason.InvalidProtocolForAppUrl: return "INVALID_PROTOCOL_FOR_APP_URL";
					case UrlErrorReason.InvalidPackageIdForAppUrl: return "INVALID_PACKAGE_ID_FOR_APP_URL";
					case UrlErrorReason.UrlCustomParametersCountExceedsLimit: return "URL_CUSTOM_PARAMETERS_COUNT_EXCEEDS_LIMIT";
					case UrlErrorReason.UrlCustomParameterRemovalWithNonNullValue: return "URL_CUSTOM_PARAMETER_REMOVAL_WITH_NON_NULL_VALUE";
					case UrlErrorReason.CannotRemoveUrlCustomParameterInAddOperation: return "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_IN_ADD_OPERATION";
					case UrlErrorReason.CannotRemoveUrlCustomParameterDuringFullReplacement: return "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_DURING_FULL_REPLACEMENT";
					case UrlErrorReason.NullCustomParameterValueDuringAddOrFullReplacement: return "NULL_CUSTOM_PARAMETER_VALUE_DURING_ADD_OR_FULL_REPLACEMENT";
					case UrlErrorReason.InvalidCharactersInUrlCustomParameterKey: return "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_KEY";
					case UrlErrorReason.InvalidCharactersInUrlCustomParameterValue: return "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_VALUE";
					case UrlErrorReason.InvalidTagInUrlCustomParameterValue: return "INVALID_TAG_IN_URL_CUSTOM_PARAMETER_VALUE";
					case UrlErrorReason.RedundantNestedUrlCustomParameterTag: return "REDUNDANT_NESTED_URL_CUSTOM_PARAMETER_TAG";
					case UrlErrorReason.MissingProtocol: return "MISSING_PROTOCOL";
					case UrlErrorReason.InvalidUrl: return "INVALID_URL";
					case UrlErrorReason.DestinationUrlDeprecated: return "DESTINATION_URL_DEPRECATED";
					case UrlErrorReason.InvalidTagInUrl: return "INVALID_TAG_IN_URL";
					case UrlErrorReason.MissingUrlTag: return "MISSING_URL_TAG";
					case UrlErrorReason.UrlError: return "URL_ERROR";
					default: return null;
				}
			}
			public static UrlErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_TRACKING_URL_TEMPLATE": return UrlErrorReason.InvalidTrackingUrlTemplate;
					case "INVALID_TAG_IN_TRACKING_URL_TEMPLATE": return UrlErrorReason.InvalidTagInTrackingUrlTemplate;
					case "MISSING_TRACKING_URL_TEMPLATE_TAG": return UrlErrorReason.MissingTrackingUrlTemplateTag;
					case "MISSING_PROTOCOL_IN_TRACKING_URL_TEMPLATE": return UrlErrorReason.MissingProtocolInTrackingUrlTemplate;
					case "INVALID_PROTOCOL_IN_TRACKING_URL_TEMPLATE": return UrlErrorReason.InvalidProtocolInTrackingUrlTemplate;
					case "MALFORMED_TRACKING_URL_TEMPLATE": return UrlErrorReason.MalformedTrackingUrlTemplate;
					case "MISSING_HOST_IN_TRACKING_URL_TEMPLATE": return UrlErrorReason.MissingHostInTrackingUrlTemplate;
					case "INVALID_TLD_IN_TRACKING_URL_TEMPLATE": return UrlErrorReason.InvalidTldInTrackingUrlTemplate;
					case "REDUNDANT_NESTED_TRACKING_URL_TEMPLATE_TAG": return UrlErrorReason.RedundantNestedTrackingUrlTemplateTag;
					case "INVALID_FINAL_URL": return UrlErrorReason.InvalidFinalUrl;
					case "INVALID_TAG_IN_FINAL_URL": return UrlErrorReason.InvalidTagInFinalUrl;
					case "REDUNDANT_NESTED_FINAL_URL_TAG": return UrlErrorReason.RedundantNestedFinalUrlTag;
					case "MISSING_PROTOCOL_IN_FINAL_URL": return UrlErrorReason.MissingProtocolInFinalUrl;
					case "INVALID_PROTOCOL_IN_FINAL_URL": return UrlErrorReason.InvalidProtocolInFinalUrl;
					case "MALFORMED_FINAL_URL": return UrlErrorReason.MalformedFinalUrl;
					case "MISSING_HOST_IN_FINAL_URL": return UrlErrorReason.MissingHostInFinalUrl;
					case "INVALID_TLD_IN_FINAL_URL": return UrlErrorReason.InvalidTldInFinalUrl;
					case "INVALID_FINAL_MOBILE_URL": return UrlErrorReason.InvalidFinalMobileUrl;
					case "INVALID_TAG_IN_FINAL_MOBILE_URL": return UrlErrorReason.InvalidTagInFinalMobileUrl;
					case "REDUNDANT_NESTED_FINAL_MOBILE_URL_TAG": return UrlErrorReason.RedundantNestedFinalMobileUrlTag;
					case "MISSING_PROTOCOL_IN_FINAL_MOBILE_URL": return UrlErrorReason.MissingProtocolInFinalMobileUrl;
					case "INVALID_PROTOCOL_IN_FINAL_MOBILE_URL": return UrlErrorReason.InvalidProtocolInFinalMobileUrl;
					case "MALFORMED_FINAL_MOBILE_URL": return UrlErrorReason.MalformedFinalMobileUrl;
					case "MISSING_HOST_IN_FINAL_MOBILE_URL": return UrlErrorReason.MissingHostInFinalMobileUrl;
					case "INVALID_TLD_IN_FINAL_MOBILE_URL": return UrlErrorReason.InvalidTldInFinalMobileUrl;
					case "INVALID_FINAL_APP_URL": return UrlErrorReason.InvalidFinalAppUrl;
					case "INVALID_TAG_IN_FINAL_APP_URL": return UrlErrorReason.InvalidTagInFinalAppUrl;
					case "REDUNDANT_NESTED_FINAL_APP_URL_TAG": return UrlErrorReason.RedundantNestedFinalAppUrlTag;
					case "MULTIPLE_APP_URLS_FOR_OSTYPE": return UrlErrorReason.MultipleAppUrlsForOstype;
					case "INVALID_OSTYPE": return UrlErrorReason.InvalidOstype;
					case "INVALID_PROTOCOL_FOR_APP_URL": return UrlErrorReason.InvalidProtocolForAppUrl;
					case "INVALID_PACKAGE_ID_FOR_APP_URL": return UrlErrorReason.InvalidPackageIdForAppUrl;
					case "URL_CUSTOM_PARAMETERS_COUNT_EXCEEDS_LIMIT": return UrlErrorReason.UrlCustomParametersCountExceedsLimit;
					case "URL_CUSTOM_PARAMETER_REMOVAL_WITH_NON_NULL_VALUE": return UrlErrorReason.UrlCustomParameterRemovalWithNonNullValue;
					case "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_IN_ADD_OPERATION": return UrlErrorReason.CannotRemoveUrlCustomParameterInAddOperation;
					case "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_DURING_FULL_REPLACEMENT": return UrlErrorReason.CannotRemoveUrlCustomParameterDuringFullReplacement;
					case "NULL_CUSTOM_PARAMETER_VALUE_DURING_ADD_OR_FULL_REPLACEMENT": return UrlErrorReason.NullCustomParameterValueDuringAddOrFullReplacement;
					case "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_KEY": return UrlErrorReason.InvalidCharactersInUrlCustomParameterKey;
					case "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_VALUE": return UrlErrorReason.InvalidCharactersInUrlCustomParameterValue;
					case "INVALID_TAG_IN_URL_CUSTOM_PARAMETER_VALUE": return UrlErrorReason.InvalidTagInUrlCustomParameterValue;
					case "REDUNDANT_NESTED_URL_CUSTOM_PARAMETER_TAG": return UrlErrorReason.RedundantNestedUrlCustomParameterTag;
					case "MISSING_PROTOCOL": return UrlErrorReason.MissingProtocol;
					case "INVALID_URL": return UrlErrorReason.InvalidUrl;
					case "DESTINATION_URL_DEPRECATED": return UrlErrorReason.DestinationUrlDeprecated;
					case "INVALID_TAG_IN_URL": return UrlErrorReason.InvalidTagInUrl;
					case "MISSING_URL_TAG": return UrlErrorReason.MissingUrlTag;
					case "URL_ERROR": return UrlErrorReason.UrlError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UrlErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class UserListConversionTypeCategoryExtensions
		{
			public static string ToXmlValue(this UserListConversionTypeCategory enumValue)
			{
				switch (enumValue)
				{
					case UserListConversionTypeCategory.BoomerangEvent: return "BOOMERANG_EVENT";
					case UserListConversionTypeCategory.Other: return "OTHER";
					default: return null;
				}
			}
			public static UserListConversionTypeCategory Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "BOOMERANG_EVENT": return UserListConversionTypeCategory.BoomerangEvent;
					case "OTHER": return UserListConversionTypeCategory.Other;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserListConversionTypeCategory.", nameof(xmlValue));
				}
			}
		}
		public static class UserListErrorReasonExtensions
		{
			public static string ToXmlValue(this UserListErrorReason enumValue)
			{
				switch (enumValue)
				{
					case UserListErrorReason.ExternalRemarketingUserListMutateNotSupported: return "EXTERNAL_REMARKETING_USER_LIST_MUTATE_NOT_SUPPORTED";
					case UserListErrorReason.ConcreteTypeRequired: return "CONCRETE_TYPE_REQUIRED";
					case UserListErrorReason.ConversionTypeIdRequired: return "CONVERSION_TYPE_ID_REQUIRED";
					case UserListErrorReason.DuplicateConversionTypes: return "DUPLICATE_CONVERSION_TYPES";
					case UserListErrorReason.InvalidConversionType: return "INVALID_CONVERSION_TYPE";
					case UserListErrorReason.InvalidDescription: return "INVALID_DESCRIPTION";
					case UserListErrorReason.InvalidName: return "INVALID_NAME";
					case UserListErrorReason.InvalidType: return "INVALID_TYPE";
					case UserListErrorReason.InvalidUserListLogicalRuleOperand: return "INVALID_USER_LIST_LOGICAL_RULE_OPERAND";
					case UserListErrorReason.NameAlreadyUsed: return "NAME_ALREADY_USED";
					case UserListErrorReason.NewConversionTypeNameRequired: return "NEW_CONVERSION_TYPE_NAME_REQUIRED";
					case UserListErrorReason.OwnershipRequiredForSet: return "OWNERSHIP_REQUIRED_FOR_SET";
					case UserListErrorReason.RemoveNotSupported: return "REMOVE_NOT_SUPPORTED";
					case UserListErrorReason.UserListMutateNotSupported: return "USER_LIST_MUTATE_NOT_SUPPORTED";
					case UserListErrorReason.InvalidRule: return "INVALID_RULE";
					case UserListErrorReason.InvalidDateRange: return "INVALID_DATE_RANGE";
					case UserListErrorReason.CanNotMutateSensitiveUserlist: return "CAN_NOT_MUTATE_SENSITIVE_USERLIST";
					case UserListErrorReason.MaxNumRulebasedUserlists: return "MAX_NUM_RULEBASED_USERLISTS";
					case UserListErrorReason.CannotModifyBillableRecordCount: return "CANNOT_MODIFY_BILLABLE_RECORD_COUNT";
					case UserListErrorReason.UserListServiceError: return "USER_LIST_SERVICE_ERROR";
					default: return null;
				}
			}
			public static UserListErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "EXTERNAL_REMARKETING_USER_LIST_MUTATE_NOT_SUPPORTED": return UserListErrorReason.ExternalRemarketingUserListMutateNotSupported;
					case "CONCRETE_TYPE_REQUIRED": return UserListErrorReason.ConcreteTypeRequired;
					case "CONVERSION_TYPE_ID_REQUIRED": return UserListErrorReason.ConversionTypeIdRequired;
					case "DUPLICATE_CONVERSION_TYPES": return UserListErrorReason.DuplicateConversionTypes;
					case "INVALID_CONVERSION_TYPE": return UserListErrorReason.InvalidConversionType;
					case "INVALID_DESCRIPTION": return UserListErrorReason.InvalidDescription;
					case "INVALID_NAME": return UserListErrorReason.InvalidName;
					case "INVALID_TYPE": return UserListErrorReason.InvalidType;
					case "INVALID_USER_LIST_LOGICAL_RULE_OPERAND": return UserListErrorReason.InvalidUserListLogicalRuleOperand;
					case "NAME_ALREADY_USED": return UserListErrorReason.NameAlreadyUsed;
					case "NEW_CONVERSION_TYPE_NAME_REQUIRED": return UserListErrorReason.NewConversionTypeNameRequired;
					case "OWNERSHIP_REQUIRED_FOR_SET": return UserListErrorReason.OwnershipRequiredForSet;
					case "REMOVE_NOT_SUPPORTED": return UserListErrorReason.RemoveNotSupported;
					case "USER_LIST_MUTATE_NOT_SUPPORTED": return UserListErrorReason.UserListMutateNotSupported;
					case "INVALID_RULE": return UserListErrorReason.InvalidRule;
					case "INVALID_DATE_RANGE": return UserListErrorReason.InvalidDateRange;
					case "CAN_NOT_MUTATE_SENSITIVE_USERLIST": return UserListErrorReason.CanNotMutateSensitiveUserlist;
					case "MAX_NUM_RULEBASED_USERLISTS": return UserListErrorReason.MaxNumRulebasedUserlists;
					case "CANNOT_MODIFY_BILLABLE_RECORD_COUNT": return UserListErrorReason.CannotModifyBillableRecordCount;
					case "USER_LIST_SERVICE_ERROR": return UserListErrorReason.UserListServiceError;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserListErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class UserListLogicalRuleOperatorExtensions
		{
			public static string ToXmlValue(this UserListLogicalRuleOperator enumValue)
			{
				switch (enumValue)
				{
					case UserListLogicalRuleOperator.All: return "ALL";
					case UserListLogicalRuleOperator.Any: return "ANY";
					case UserListLogicalRuleOperator.None: return "NONE";
					case UserListLogicalRuleOperator.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static UserListLogicalRuleOperator Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ALL": return UserListLogicalRuleOperator.All;
					case "ANY": return UserListLogicalRuleOperator.Any;
					case "NONE": return UserListLogicalRuleOperator.None;
					case "UNKNOWN": return UserListLogicalRuleOperator.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserListLogicalRuleOperator.", nameof(xmlValue));
				}
			}
		}
		public static class UserListMembershipStatusExtensions
		{
			public static string ToXmlValue(this UserListMembershipStatus enumValue)
			{
				switch (enumValue)
				{
					case UserListMembershipStatus.Open: return "OPEN";
					case UserListMembershipStatus.Closed: return "CLOSED";
					default: return null;
				}
			}
			public static UserListMembershipStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "OPEN": return UserListMembershipStatus.Open;
					case "CLOSED": return UserListMembershipStatus.Closed;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserListMembershipStatus.", nameof(xmlValue));
				}
			}
		}
		public static class UserListTypeExtensions
		{
			public static string ToXmlValue(this UserListType enumValue)
			{
				switch (enumValue)
				{
					case UserListType.Unknown: return "UNKNOWN";
					case UserListType.Remarketing: return "REMARKETING";
					case UserListType.Logical: return "LOGICAL";
					case UserListType.ExternalRemarketing: return "EXTERNAL_REMARKETING";
					case UserListType.RuleBased: return "RULE_BASED";
					case UserListType.Similar: return "SIMILAR";
					case UserListType.CrmBased: return "CRM_BASED";
					default: return null;
				}
			}
			public static UserListType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return UserListType.Unknown;
					case "REMARKETING": return UserListType.Remarketing;
					case "LOGICAL": return UserListType.Logical;
					case "EXTERNAL_REMARKETING": return UserListType.ExternalRemarketing;
					case "RULE_BASED": return UserListType.RuleBased;
					case "SIMILAR": return UserListType.Similar;
					case "CRM_BASED": return UserListType.CrmBased;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserListType.", nameof(xmlValue));
				}
			}
		}
		public static class UserStatusExtensions
		{
			public static string ToXmlValue(this UserStatus enumValue)
			{
				switch (enumValue)
				{
					case UserStatus.Enabled: return "ENABLED";
					case UserStatus.Removed: return "REMOVED";
					case UserStatus.Paused: return "PAUSED";
					default: return null;
				}
			}
			public static UserStatus Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ENABLED": return UserStatus.Enabled;
					case "REMOVED": return UserStatus.Removed;
					case "PAUSED": return UserStatus.Paused;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type UserStatus.", nameof(xmlValue));
				}
			}
		}
		public static class VanityPharmaDisplayUrlModeExtensions
		{
			public static string ToXmlValue(this VanityPharmaDisplayUrlMode enumValue)
			{
				switch (enumValue)
				{
					case VanityPharmaDisplayUrlMode.Unknown: return "UNKNOWN";
					case VanityPharmaDisplayUrlMode.ManufacturerWebsiteUrl: return "MANUFACTURER_WEBSITE_URL";
					case VanityPharmaDisplayUrlMode.WebsiteDescription: return "WEBSITE_DESCRIPTION";
					default: return null;
				}
			}
			public static VanityPharmaDisplayUrlMode Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return VanityPharmaDisplayUrlMode.Unknown;
					case "MANUFACTURER_WEBSITE_URL": return VanityPharmaDisplayUrlMode.ManufacturerWebsiteUrl;
					case "WEBSITE_DESCRIPTION": return VanityPharmaDisplayUrlMode.WebsiteDescription;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type VanityPharmaDisplayUrlMode.", nameof(xmlValue));
				}
			}
		}
		public static class VanityPharmaTextExtensions
		{
			public static string ToXmlValue(this VanityPharmaText enumValue)
			{
				switch (enumValue)
				{
					case VanityPharmaText.Unknown: return "UNKNOWN";
					case VanityPharmaText.PrescriptionTreatmentWebsiteEn: return "PRESCRIPTION_TREATMENT_WEBSITE_EN";
					case VanityPharmaText.PrescriptionTreatmentWebsiteEs: return "PRESCRIPTION_TREATMENT_WEBSITE_ES";
					case VanityPharmaText.PrescriptionDeviceWebsiteEn: return "PRESCRIPTION_DEVICE_WEBSITE_EN";
					case VanityPharmaText.PrescriptionDeviceWebsiteEs: return "PRESCRIPTION_DEVICE_WEBSITE_ES";
					case VanityPharmaText.MedicalDeviceWebsiteEn: return "MEDICAL_DEVICE_WEBSITE_EN";
					case VanityPharmaText.MedicalDeviceWebsiteEs: return "MEDICAL_DEVICE_WEBSITE_ES";
					case VanityPharmaText.PreventativeTreatmentWebsiteEn: return "PREVENTATIVE_TREATMENT_WEBSITE_EN";
					case VanityPharmaText.PreventativeTreatmentWebsiteEs: return "PREVENTATIVE_TREATMENT_WEBSITE_ES";
					case VanityPharmaText.PrescriptionContraceptionWebsiteEn: return "PRESCRIPTION_CONTRACEPTION_WEBSITE_EN";
					case VanityPharmaText.PrescriptionContraceptionWebsiteEs: return "PRESCRIPTION_CONTRACEPTION_WEBSITE_ES";
					case VanityPharmaText.PrescriptionVaccineWebsiteEn: return "PRESCRIPTION_VACCINE_WEBSITE_EN";
					case VanityPharmaText.PrescriptionVaccineWebsiteEs: return "PRESCRIPTION_VACCINE_WEBSITE_ES";
					default: return null;
				}
			}
			public static VanityPharmaText Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "UNKNOWN": return VanityPharmaText.Unknown;
					case "PRESCRIPTION_TREATMENT_WEBSITE_EN": return VanityPharmaText.PrescriptionTreatmentWebsiteEn;
					case "PRESCRIPTION_TREATMENT_WEBSITE_ES": return VanityPharmaText.PrescriptionTreatmentWebsiteEs;
					case "PRESCRIPTION_DEVICE_WEBSITE_EN": return VanityPharmaText.PrescriptionDeviceWebsiteEn;
					case "PRESCRIPTION_DEVICE_WEBSITE_ES": return VanityPharmaText.PrescriptionDeviceWebsiteEs;
					case "MEDICAL_DEVICE_WEBSITE_EN": return VanityPharmaText.MedicalDeviceWebsiteEn;
					case "MEDICAL_DEVICE_WEBSITE_ES": return VanityPharmaText.MedicalDeviceWebsiteEs;
					case "PREVENTATIVE_TREATMENT_WEBSITE_EN": return VanityPharmaText.PreventativeTreatmentWebsiteEn;
					case "PREVENTATIVE_TREATMENT_WEBSITE_ES": return VanityPharmaText.PreventativeTreatmentWebsiteEs;
					case "PRESCRIPTION_CONTRACEPTION_WEBSITE_EN": return VanityPharmaText.PrescriptionContraceptionWebsiteEn;
					case "PRESCRIPTION_CONTRACEPTION_WEBSITE_ES": return VanityPharmaText.PrescriptionContraceptionWebsiteEs;
					case "PRESCRIPTION_VACCINE_WEBSITE_EN": return VanityPharmaText.PrescriptionVaccineWebsiteEn;
					case "PRESCRIPTION_VACCINE_WEBSITE_ES": return VanityPharmaText.PrescriptionVaccineWebsiteEs;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type VanityPharmaText.", nameof(xmlValue));
				}
			}
		}
		public static class VideoErrorReasonExtensions
		{
			public static string ToXmlValue(this VideoErrorReason enumValue)
			{
				switch (enumValue)
				{
					case VideoErrorReason.InvalidVideo: return "INVALID_VIDEO";
					case VideoErrorReason.StorageError: return "STORAGE_ERROR";
					case VideoErrorReason.BadRequest: return "BAD_REQUEST";
					case VideoErrorReason.ErrorGeneratingStreamingUrl: return "ERROR_GENERATING_STREAMING_URL";
					case VideoErrorReason.UnexpectedSize: return "UNEXPECTED_SIZE";
					case VideoErrorReason.ServerError: return "SERVER_ERROR";
					case VideoErrorReason.FileTooLarge: return "FILE_TOO_LARGE";
					case VideoErrorReason.VideoProcessingError: return "VIDEO_PROCESSING_ERROR";
					case VideoErrorReason.InvalidInput: return "INVALID_INPUT";
					case VideoErrorReason.ProblemReadingFile: return "PROBLEM_READING_FILE";
					case VideoErrorReason.InvalidIsci: return "INVALID_ISCI";
					case VideoErrorReason.InvalidAdId: return "INVALID_AD_ID";
					default: return null;
				}
			}
			public static VideoErrorReason Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "INVALID_VIDEO": return VideoErrorReason.InvalidVideo;
					case "STORAGE_ERROR": return VideoErrorReason.StorageError;
					case "BAD_REQUEST": return VideoErrorReason.BadRequest;
					case "ERROR_GENERATING_STREAMING_URL": return VideoErrorReason.ErrorGeneratingStreamingUrl;
					case "UNEXPECTED_SIZE": return VideoErrorReason.UnexpectedSize;
					case "SERVER_ERROR": return VideoErrorReason.ServerError;
					case "FILE_TOO_LARGE": return VideoErrorReason.FileTooLarge;
					case "VIDEO_PROCESSING_ERROR": return VideoErrorReason.VideoProcessingError;
					case "INVALID_INPUT": return VideoErrorReason.InvalidInput;
					case "PROBLEM_READING_FILE": return VideoErrorReason.ProblemReadingFile;
					case "INVALID_ISCI": return VideoErrorReason.InvalidIsci;
					case "INVALID_AD_ID": return VideoErrorReason.InvalidAdId;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type VideoErrorReason.", nameof(xmlValue));
				}
			}
		}
		public static class VideoTypeExtensions
		{
			public static string ToXmlValue(this VideoType enumValue)
			{
				switch (enumValue)
				{
					case VideoType.Adobe: return "ADOBE";
					case VideoType.Realplayer: return "REALPLAYER";
					case VideoType.Quicktime: return "QUICKTIME";
					case VideoType.Windowsmedia: return "WINDOWSMEDIA";
					default: return null;
				}
			}
			public static VideoType Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "ADOBE": return VideoType.Adobe;
					case "REALPLAYER": return VideoType.Realplayer;
					case "QUICKTIME": return VideoType.Quicktime;
					case "WINDOWSMEDIA": return VideoType.Windowsmedia;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type VideoType.", nameof(xmlValue));
				}
			}
		}
		public static class WebpageConditionOperandExtensions
		{
			public static string ToXmlValue(this WebpageConditionOperand enumValue)
			{
				switch (enumValue)
				{
					case WebpageConditionOperand.Url: return "URL";
					case WebpageConditionOperand.Category: return "CATEGORY";
					case WebpageConditionOperand.PageTitle: return "PAGE_TITLE";
					case WebpageConditionOperand.PageContent: return "PAGE_CONTENT";
					case WebpageConditionOperand.Unknown: return "UNKNOWN";
					default: return null;
				}
			}
			public static WebpageConditionOperand Parse(string xmlValue)
			{
				switch (xmlValue)
				{
					case "URL": return WebpageConditionOperand.Url;
					case "CATEGORY": return WebpageConditionOperand.Category;
					case "PAGE_TITLE": return WebpageConditionOperand.PageTitle;
					case "PAGE_CONTENT": return WebpageConditionOperand.PageContent;
					case "UNKNOWN": return WebpageConditionOperand.Unknown;
					default: throw new ArgumentException($"Unknown value \"{xmlValue}\" for type WebpageConditionOperand.", nameof(xmlValue));
				}
			}
		}
	}
}
